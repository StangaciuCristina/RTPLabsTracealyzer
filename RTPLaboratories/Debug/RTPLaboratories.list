
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b740  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800b8d0  0800b8d0  0001b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb54  0800bb54  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb54  0800bb54  0001bb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb5c  0800bb5c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb5c  0800bb5c  0001bb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb60  0800bb60  0001bb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800bb64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00007c34  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007c98  20007c98  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   000294d7  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000070cf  00000000  00000000  000495ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002300  00000000  00000000  00050680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ac0  00000000  00000000  00052980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ea16  00000000  00000000  00054440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003b074  00000000  00000000  00082e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed0dc  00000000  00000000  000bdeca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009278  00000000  00000000  001aafa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001b4220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8b8 	.word	0x0800b8b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	0800b8b8 	.word	0x0800b8b8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vSenderTask>:
/* Declare a variable of type QueueHandle_t.  This is used to store the queue
that is accessed by all three tasks. */
QueueHandle_t xQueue;

static void vSenderTask( void *pvParameters )
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

    /* Two instances are created of this task so the value that is sent to the
	queue is passed in via the task parameter rather than be hard coded.  This way
	each instance can use a different value.  Cast the parameter to the required
	type. */
	lValueToSend = ( uint16_t * )pvParameters;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
	const TickType_t xTicksToWait = pdMS_TO_TICKS( 100UL );
 80004d8:	2364      	movs	r3, #100	; 0x64
 80004da:	60bb      	str	r3, [r7, #8]

		The third parameter is the Block time – the time the task should be kept
		in the Blocked state to wait for space to become available on the queue
		should the queue already be full.  In this case we don’t specify a block
		time because there should always be space in the queue. */
		xQueueSendToBack( xQueue, lValueToSend, 0 );
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <vSenderTask+0x28>)
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	2300      	movs	r3, #0
 80004e2:	2200      	movs	r2, #0
 80004e4:	68f9      	ldr	r1, [r7, #12]
 80004e6:	f008 fb57 	bl	8008b98 <xQueueGenericSend>
		vTaskDelay(xTicksToWait);
 80004ea:	68b8      	ldr	r0, [r7, #8]
 80004ec:	f009 fb04 	bl	8009af8 <vTaskDelay>
		xQueueSendToBack( xQueue, lValueToSend, 0 );
 80004f0:	e7f4      	b.n	80004dc <vSenderTask+0x10>
 80004f2:	bf00      	nop
 80004f4:	20000080 	.word	0x20000080

080004f8 <vReceiverTask>:
	}
}
/*-----------------------------------------------------------*/

static void vReceiverTask( void *pvParameters )
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	/* Declare the variable that will hold the values received from the queue. */
	uint16_t lReceivedValue;
	const TickType_t xTicksToWait = pdMS_TO_TICKS( 500UL );
 8000500:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000504:	617b      	str	r3, [r7, #20]
		has the required size to hold the received data.

		the last parameter is the block time – the maximum amount of time that the
		task should remain in the Blocked state to wait for data to be available should
		the queue already be empty. */
		xStatus = xQueueReceive( xQueue, &lReceivedValue, xTicksToWait );
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <vReceiverTask+0x34>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f107 010e 	add.w	r1, r7, #14
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	4618      	mov	r0, r3
 8000512:	f008 fe07 	bl	8009124 <xQueueReceive>
 8000516:	6138      	str	r0, [r7, #16]

		if( xStatus == pdPASS )
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d1f3      	bne.n	8000506 <vReceiverTask+0xe>
		{
			/* Data was successfully received from the queue. */
			HAL_GPIO_TogglePin(GPIOD, lReceivedValue);
 800051e:	89fb      	ldrh	r3, [r7, #14]
 8000520:	4619      	mov	r1, r3
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <vReceiverTask+0x38>)
 8000524:	f004 f867 	bl	80045f6 <HAL_GPIO_TogglePin>
		xStatus = xQueueReceive( xQueue, &lReceivedValue, xTicksToWait );
 8000528:	e7ed      	b.n	8000506 <vReceiverTask+0xe>
 800052a:	bf00      	nop
 800052c:	20000080 	.word	0x20000080
 8000530:	40020c00 	.word	0x40020c00

08000534 <application10>:

uint16_t led1=GREEN_LED;
uint16_t led2=BLUE_LED;

void application10(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af02      	add	r7, sp, #8

	/* The queue is created to hold a maximum of 5 short values. */
	    xQueue = xQueueCreate( 5, sizeof( int16_t ) );
 800053a:	2200      	movs	r2, #0
 800053c:	2102      	movs	r1, #2
 800053e:	2005      	movs	r0, #5
 8000540:	f008 fa76 	bl	8008a30 <xQueueGenericCreate>
 8000544:	4603      	mov	r3, r0
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <application10+0x68>)
 8000548:	6013      	str	r3, [r2, #0]

		if( xQueue != NULL )
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <application10+0x68>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d020      	beq.n	8000594 <application10+0x60>
			/* Create two instances of the task that will write to the queue.  The
			parameter is used to pass the value that the task should write to the queue,
			so one task will continuously write 100 to the queue while the other task
			will continuously write 200 to the queue.  Both tasks are created at
			priority 1. */
			xTaskCreate( vSenderTask, "Sender1", 1000, ( void * ) &led1, 1, NULL );
 8000552:	2300      	movs	r3, #0
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <application10+0x6c>)
 800055c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000560:	4910      	ldr	r1, [pc, #64]	; (80005a4 <application10+0x70>)
 8000562:	4811      	ldr	r0, [pc, #68]	; (80005a8 <application10+0x74>)
 8000564:	f009 f95d 	bl	8009822 <xTaskCreate>
			xTaskCreate( vSenderTask, "Sender2", 1000, ( void * ) &led2, 1, NULL );
 8000568:	2300      	movs	r3, #0
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2301      	movs	r3, #1
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <application10+0x78>)
 8000572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000576:	490e      	ldr	r1, [pc, #56]	; (80005b0 <application10+0x7c>)
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <application10+0x74>)
 800057a:	f009 f952 	bl	8009822 <xTaskCreate>

			/* Create the task that will read from the queue.  The task is created with
			priority 2, so above the priority of the sender tasks. */
			xTaskCreate( vReceiverTask, "Receiver", 1000, NULL, 2, NULL );
 800057e:	2300      	movs	r3, #0
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2302      	movs	r3, #2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058c:	4909      	ldr	r1, [pc, #36]	; (80005b4 <application10+0x80>)
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <application10+0x84>)
 8000590:	f009 f947 	bl	8009822 <xTaskCreate>
		}


}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000080 	.word	0x20000080
 80005a0:	20000000 	.word	0x20000000
 80005a4:	0800b8d0 	.word	0x0800b8d0
 80005a8:	080004cd 	.word	0x080004cd
 80005ac:	20000002 	.word	0x20000002
 80005b0:	0800b8d8 	.word	0x0800b8d8
 80005b4:	0800b8e0 	.word	0x0800b8e0
 80005b8:	080004f9 	.word	0x080004f9

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f003 fd40 	bl	8004044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f812 	bl	80005ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  vTraceEnable(TRC_START);
 80005c8:	2001      	movs	r0, #1
 80005ca:	f003 f903 	bl	80037d4 <xTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f92f 	bl	8000830 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005d2:	f000 f875 	bl	80006c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005d6:	f000 f8a1 	bl	800071c <MX_I2S3_Init>
  MX_SPI1_Init();
 80005da:	f000 f8cf 	bl	800077c <MX_SPI1_Init>
  MX_TIM11_Init();
 80005de:	f000 f903 	bl	80007e8 <MX_TIM11_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application10();
 80005e2:	f7ff ffa7 	bl	8000534 <application10>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80005e6:	f009 fabf 	bl	8009b68 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x2e>

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f00b f87e 	bl	800b6fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f006 fb4a 	bl	8006d0c <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067e:	f000 f9ef 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f006 fdab 	bl	80071fc <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ac:	f000 f9d8 	bl	8000a60 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C1_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_I2C1_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C1_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_I2C1_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_I2C1_Init+0x50>)
 80006de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_I2C1_Init+0x50>)
 80006fe:	f005 fd21 	bl	8006144 <HAL_I2C_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000708:	f000 f9aa 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000084 	.word	0x20000084
 8000714:	40005400 	.word	0x40005400
 8000718:	000186a0 	.word	0x000186a0

0800071c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_I2S3_Init+0x54>)
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <MX_I2S3_Init+0x58>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2S3_Init+0x54>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_I2S3_Init+0x54>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_I2S3_Init+0x54>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_I2S3_Init+0x54>)
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_I2S3_Init+0x54>)
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <MX_I2S3_Init+0x5c>)
 8000746:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_I2S3_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_I2S3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_I2S3_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_I2S3_Init+0x54>)
 800075c:	f005 fe36 	bl	80063cc <HAL_I2S_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000766:	f000 f97b 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000d8 	.word	0x200000d8
 8000774:	40003c00 	.word	0x40003c00
 8000778:	00017700 	.word	0x00017700

0800077c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_SPI1_Init+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800078c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007c8:	220a      	movs	r2, #10
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007ce:	f007 f8a9 	bl	8007924 <HAL_SPI_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d8:	f000 f942 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000120 	.word	0x20000120
 80007e4:	40013000 	.word	0x40013000

080007e8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_TIM11_Init+0x40>)
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <MX_TIM11_Init+0x44>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_TIM11_Init+0x40>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_TIM11_Init+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_TIM11_Init+0x40>)
 8000800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000804:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_TIM11_Init+0x40>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_TIM11_Init+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_TIM11_Init+0x40>)
 8000814:	f007 f90f 	bl	8007a36 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800081e:	f000 f91f 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000178 	.word	0x20000178
 800082c:	40014800 	.word	0x40014800

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b76      	ldr	r3, [pc, #472]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a75      	ldr	r2, [pc, #468]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b6f      	ldr	r3, [pc, #444]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a6e      	ldr	r2, [pc, #440]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b6c      	ldr	r3, [pc, #432]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b68      	ldr	r3, [pc, #416]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a67      	ldr	r2, [pc, #412]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b65      	ldr	r3, [pc, #404]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b61      	ldr	r3, [pc, #388]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a60      	ldr	r2, [pc, #384]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b5e      	ldr	r3, [pc, #376]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b5a      	ldr	r3, [pc, #360]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a59      	ldr	r2, [pc, #356]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b57      	ldr	r3, [pc, #348]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b53      	ldr	r3, [pc, #332]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a52      	ldr	r2, [pc, #328]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	484d      	ldr	r0, [pc, #308]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 80008f4:	f003 fe66 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	484b      	ldr	r0, [pc, #300]	; (8000a2c <MX_GPIO_Init+0x1fc>)
 80008fe:	f003 fe61 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000902:	2200      	movs	r2, #0
 8000904:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000908:	4849      	ldr	r0, [pc, #292]	; (8000a30 <MX_GPIO_Init+0x200>)
 800090a:	f003 fe5b 	bl	80045c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090e:	2308      	movs	r3, #8
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4840      	ldr	r0, [pc, #256]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 8000926:	f003 fcb1 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	483a      	ldr	r0, [pc, #232]	; (8000a2c <MX_GPIO_Init+0x1fc>)
 8000942:	f003 fca3 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000946:	2308      	movs	r3, #8
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4832      	ldr	r0, [pc, #200]	; (8000a2c <MX_GPIO_Init+0x1fc>)
 8000962:	f003 fc93 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	482e      	ldr	r0, [pc, #184]	; (8000a34 <MX_GPIO_Init+0x204>)
 800097c:	f003 fc86 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000980:	2304      	movs	r3, #4
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4829      	ldr	r0, [pc, #164]	; (8000a38 <MX_GPIO_Init+0x208>)
 8000994:	f003 fc7a 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009aa:	2305      	movs	r3, #5
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4820      	ldr	r0, [pc, #128]	; (8000a38 <MX_GPIO_Init+0x208>)
 80009b6:	f003 fc69 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ba:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4817      	ldr	r0, [pc, #92]	; (8000a30 <MX_GPIO_Init+0x200>)
 80009d4:	f003 fc5a 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d8:	2320      	movs	r3, #32
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_GPIO_Init+0x200>)
 80009ec:	f003 fc4e 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 8000a06:	f003 fc41 	bl	800428c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f003 fc12 	bl	8004238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a14:	2006      	movs	r0, #6
 8000a16:	f003 fc2b 	bl	8004270 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f003 fb1b 	bl	8004088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010000 	.word	0x40010000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_MspInit+0x54>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210f      	movs	r1, #15
 8000aae:	f06f 0001 	mvn.w	r0, #1
 8000ab2:	f003 fbc1 	bl	8004238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_I2C_MspInit+0x84>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d12c      	bne.n	8000b40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b08:	2312      	movs	r3, #18
 8000b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b14:	2304      	movs	r3, #4
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <HAL_I2C_MspInit+0x8c>)
 8000b20:	f003 fbb4 	bl	800428c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_I2C_MspInit+0x88>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020400 	.word	0x40020400

08000b54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <HAL_I2S_MspInit+0xf0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d15a      	bne.n	8000c3a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b84:	2301      	movs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b88:	23c0      	movs	r3, #192	; 0xc0
 8000b8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4618      	mov	r0, r3
 8000b96:	f006 fd83 	bl	80076a0 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ba0:	f7ff ff5e 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_I2S_MspInit+0xf4>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c08:	2306      	movs	r3, #6
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	480e      	ldr	r0, [pc, #56]	; (8000c4c <HAL_I2S_MspInit+0xf8>)
 8000c14:	f003 fb3a 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c18:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <HAL_I2S_MspInit+0xfc>)
 8000c36:	f003 fb29 	bl	800428c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3738      	adds	r7, #56	; 0x38
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40003c00 	.word	0x40003c00
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020800 	.word	0x40020800

08000c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_SPI_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12b      	bne.n	8000cce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cae:	23e0      	movs	r3, #224	; 0xe0
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_SPI_MspInit+0x8c>)
 8000cca:	f003 fadf 	bl	800428c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40013000 	.word	0x40013000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40014800 	.word	0x40014800
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6453      	str	r3, [r2, #68]	; 0x44
 8000d48:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <HAL_InitTick+0xd4>)
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d54:	f107 020c 	add.w	r2, r7, #12
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f006 fc6c 	bl	800763c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d64:	f006 fc56 	bl	8007614 <HAL_RCC_GetPCLK2Freq>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d70:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <HAL_InitTick+0xd8>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	0c9b      	lsrs	r3, r3, #18
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <HAL_InitTick+0xe0>)
 8000d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_InitTick+0xdc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000da2:	4818      	ldr	r0, [pc, #96]	; (8000e04 <HAL_InitTick+0xdc>)
 8000da4:	f006 fe47 	bl	8007a36 <HAL_TIM_Base_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d11b      	bne.n	8000dee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000db6:	4813      	ldr	r0, [pc, #76]	; (8000e04 <HAL_InitTick+0xdc>)
 8000db8:	f006 fe8c 	bl	8007ad4 <HAL_TIM_Base_Start_IT>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d111      	bne.n	8000dee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dca:	2019      	movs	r0, #25
 8000dcc:	f003 fa50 	bl	8004270 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	d808      	bhi.n	8000de8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	2019      	movs	r0, #25
 8000ddc:	f003 fa2c 	bl	8004238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_InitTick+0xe4>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e002      	b.n	8000dee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3730      	adds	r7, #48	; 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	431bde83 	.word	0x431bde83
 8000e04:	200001c0 	.word	0x200001c0
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	20000008 	.word	0x20000008

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e42:	f006 feb7 	bl	8007bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200001c0 	.word	0x200001c0

08000e50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <OTG_FS_IRQHandler+0x10>)
 8000e56:	f003 fbe8 	bl	800462a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20007778 	.word	0x20007778

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e8c:	f7ff ffea 	bl	8000e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	; (8000ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f00a fc7f 	bl	800b7b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fb7f 	bl	80005bc <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ecc:	0800bb64 	.word	0x0800bb64
  ldr r2, =_sbss
 8000ed0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ed4:	20007c98 	.word	0x20007c98

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <_DoInit+0x8c>)
 8000ee4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2203      	movs	r2, #3
 8000ef0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <_DoInit+0x90>)
 8000ef6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <_DoInit+0x94>)
 8000efc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2240      	movs	r2, #64	; 0x40
 8000f02:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_DoInit+0x90>)
 8000f1a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a15      	ldr	r2, [pc, #84]	; (8000f74 <_DoInit+0x98>)
 8000f20:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2210      	movs	r2, #16
 8000f26:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3307      	adds	r3, #7
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <_DoInit+0x9c>)
 8000f40:	6810      	ldr	r0, [r2, #0]
 8000f42:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <_DoInit+0xa0>)
 8000f48:	6810      	ldr	r0, [r2, #0]
 8000f4a:	6018      	str	r0, [r3, #0]
 8000f4c:	8891      	ldrh	r1, [r2, #4]
 8000f4e:	7992      	ldrb	r2, [r2, #6]
 8000f50:	8099      	strh	r1, [r3, #4]
 8000f52:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2220      	movs	r2, #32
 8000f58:	719a      	strb	r2, [r3, #6]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000208 	.word	0x20000208
 8000f6c:	0800b8ec 	.word	0x0800b8ec
 8000f70:	200002b0 	.word	0x200002b0
 8000f74:	200002f0 	.word	0x200002f0
 8000f78:	0800b8f8 	.word	0x0800b8f8
 8000f7c:	0800b8fc 	.word	0x0800b8fc

08000f80 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  unsigned RdOff;
  unsigned WrOff;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d905      	bls.n	8000fb0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	3b01      	subs	r3, #1
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	e007      	b.n	8000fc0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	6939      	ldr	r1, [r7, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	1acb      	subs	r3, r1, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	bf28      	it	cs
 8000fce:	4613      	movcs	r3, r2
 8000fd0:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	bf28      	it	cs
 8000fda:	4613      	movcs	r3, r2
 8000fdc:	61fb      	str	r3, [r7, #28]
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00a fc0a 	bl	800b804 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	4413      	add	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
    if (WrOff == pRing->SizeOfBuffer) {
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	429a      	cmp	r2, r3
 8001018:	d101      	bne.n	800101e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1b5      	bne.n	8000f96 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800102a:	69bb      	ldr	r3, [r7, #24]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;

  WrOff = pRing->WrOff;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d90e      	bls.n	8001076 <_WriteNoCheck+0x42>
    //
    // All data fits before wrap around
    //
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	4413      	add	r3, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	4618      	mov	r0, r3
 8001066:	f00a fbcd 	bl	800b804 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	441a      	add	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	60da      	str	r2, [r3, #12]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    NumBytesAtOnce = NumBytes - Rem;
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
  }
}
 8001074:	e01a      	b.n	80010ac <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	617b      	str	r3, [r7, #20]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	4413      	add	r3, r2
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	4618      	mov	r0, r3
 8001088:	f00a fbbc 	bl	800b804 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6858      	ldr	r0, [r3, #4]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4413      	add	r3, r2
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f00a fbaf 	bl	800b804 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	60da      	str	r2, [r3, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d808      	bhi.n	80010e2 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1ad2      	subs	r2, r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4413      	add	r3, r2
 80010dc:	3b01      	subs	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	e004      	b.n	80010ec <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	3b01      	subs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  }
  return r;
 80010ec:	697b      	ldr	r3, [r7, #20]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <SEGGER_RTT_ReadNoLock+0x100>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <SEGGER_RTT_ReadNoLock+0x18>
 8001110:	f7ff fee4 	bl	8000edc <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	3360      	adds	r3, #96	; 0x60
 8001120:	4a36      	ldr	r2, [pc, #216]	; (80011fc <SEGGER_RTT_ReadNoLock+0x100>)
 8001122:	4413      	add	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800113a:	6a3a      	ldr	r2, [r7, #32]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	429a      	cmp	r2, r3
 8001140:	d92a      	bls.n	8001198 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4293      	cmp	r3, r2
 8001152:	bf28      	it	cs
 8001154:	4613      	movcs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	4413      	add	r3, r2
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4619      	mov	r1, r3
 8001164:	69f8      	ldr	r0, [r7, #28]
 8001166:	f00a fb4d 	bl	800b804 <memcpy>
    NumBytesRead += NumBytesRem;
 800116a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4413      	add	r3, r2
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4413      	add	r3, r2
 8001178:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001182:	6a3a      	ldr	r2, [r7, #32]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4413      	add	r3, r2
 8001188:	623b      	str	r3, [r7, #32]
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	429a      	cmp	r2, r3
 8001192:	d101      	bne.n	8001198 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	bf28      	it	cs
 80011a8:	4613      	movcs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d018      	beq.n	80011e4 <SEGGER_RTT_ReadNoLock+0xe8>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4619      	mov	r1, r3
 80011be:	69f8      	ldr	r0, [r7, #28]
 80011c0:	f00a fb20 	bl	800b804 <memcpy>
    NumBytesRead += NumBytesRem;
 80011c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4413      	add	r3, r2
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4413      	add	r3, r2
 80011d2:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80011dc:	6a3a      	ldr	r2, [r7, #32]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4413      	add	r3, r2
 80011e2:	623b      	str	r3, [r7, #32]
  }
  if (NumBytesRead) {
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	6a3a      	ldr	r2, [r7, #32]
 80011ee:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000208 	.word	0x20000208

08001200 <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;
  //
  SEGGER_RTT_LOCK();
 800120c:	f3ef 8311 	mrs	r3, BASEPRI
 8001210:	f04f 0120 	mov.w	r1, #32
 8001214:	f381 8811 	msr	BASEPRI, r1
 8001218:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff ff6c 	bl	80010fc <SEGGER_RTT_ReadNoLock>
 8001224:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f383 8811 	msr	BASEPRI, r3
  //
  return NumBytesRead;
 800122c:	693b      	ldr	r3, [r7, #16]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8001256:	4413      	add	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d029      	beq.n	80012b6 <SEGGER_RTT_WriteNoLock+0x7e>
 8001262:	2b02      	cmp	r3, #2
 8001264:	d82e      	bhi.n	80012c4 <SEGGER_RTT_WriteNoLock+0x8c>
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <SEGGER_RTT_WriteNoLock+0x38>
 800126a:	2b01      	cmp	r3, #1
 800126c:	d013      	beq.n	8001296 <SEGGER_RTT_WriteNoLock+0x5e>
 800126e:	e029      	b.n	80012c4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001270:	6978      	ldr	r0, [r7, #20]
 8001272:	f7ff ff1f 	bl	80010b4 <_GetAvailWriteSpace>
 8001276:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d202      	bcs.n	8001286 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8001284:	e021      	b.n	80012ca <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	69b9      	ldr	r1, [r7, #24]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff fed0 	bl	8001034 <_WriteNoCheck>
    break;
 8001294:	e019      	b.n	80012ca <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff0c 	bl	80010b4 <_GetAvailWriteSpace>
 800129c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4293      	cmp	r3, r2
 80012a4:	bf28      	it	cs
 80012a6:	4613      	movcs	r3, r2
 80012a8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	69b9      	ldr	r1, [r7, #24]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff fec0 	bl	8001034 <_WriteNoCheck>
    break;
 80012b4:	e009      	b.n	80012ca <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	69b9      	ldr	r1, [r7, #24]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff fe60 	bl	8000f80 <_WriteBlocking>
 80012c0:	61f8      	str	r0, [r7, #28]
    break;
 80012c2:	e002      	b.n	80012ca <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
    break;
 80012c8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80012ca:	69fb      	ldr	r3, [r7, #28]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000208 	.word	0x20000208

080012d8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <SEGGER_RTT_Write+0x44>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <SEGGER_RTT_Write+0x18>
 80012ec:	f7ff fdf6 	bl	8000edc <_DoInit>
  SEGGER_RTT_LOCK();
 80012f0:	f3ef 8311 	mrs	r3, BASEPRI
 80012f4:	f04f 0120 	mov.w	r1, #32
 80012f8:	f381 8811 	msr	BASEPRI, r1
 80012fc:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff98 	bl	8001238 <SEGGER_RTT_WriteNoLock>
 8001308:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8001310:	693b      	ldr	r3, [r7, #16]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000208 	.word	0x20000208

08001320 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8001336:	f7ff fdd1 	bl	8000edc <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4293      	cmp	r3, r2
 8001344:	d24c      	bcs.n	80013e0 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8001346:	f3ef 8311 	mrs	r3, BASEPRI
 800134a:	f04f 0120 	mov.w	r1, #32
 800134e:	f381 8811 	msr	BASEPRI, r1
 8001352:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d032      	beq.n	80013c0 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800135a:	4925      	ldr	r1, [pc, #148]	; (80013f0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	440b      	add	r3, r1
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800136e:	4920      	ldr	r1, [pc, #128]	; (80013f0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	3304      	adds	r3, #4
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8001384:	491a      	ldr	r1, [pc, #104]	; (80013f0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	3320      	adds	r3, #32
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8001398:	4915      	ldr	r1, [pc, #84]	; (80013f0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	3328      	adds	r3, #40	; 0x28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80013ac:	4910      	ldr	r1, [pc, #64]	; (80013f0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	440b      	add	r3, r1
 80013ba:	3324      	adds	r3, #36	; 0x24
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80013c0:	490b      	ldr	r1, [pc, #44]	; (80013f0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	332c      	adds	r3, #44	; 0x2c
 80013d0:	6a3a      	ldr	r2, [r7, #32]
 80013d2:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e002      	b.n	80013e6 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80013e6:	697b      	ldr	r3, [r7, #20]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000208 	.word	0x20000208

080013f4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800140a:	f7ff fd67 	bl	8000edc <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4293      	cmp	r3, r2
 8001418:	d24b      	bcs.n	80014b2 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800141a:	f3ef 8311 	mrs	r3, BASEPRI
 800141e:	f04f 0120 	mov.w	r1, #32
 8001422:	f381 8811 	msr	BASEPRI, r1
 8001426:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d031      	beq.n	8001492 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800142e:	4925      	ldr	r1, [pc, #148]	; (80014c4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	3360      	adds	r3, #96	; 0x60
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8001442:	4920      	ldr	r1, [pc, #128]	; (80014c4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3364      	adds	r3, #100	; 0x64
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8001456:	491b      	ldr	r1, [pc, #108]	; (80014c4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	3368      	adds	r3, #104	; 0x68
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800146a:	4916      	ldr	r1, [pc, #88]	; (80014c4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	3370      	adds	r3, #112	; 0x70
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800147e:	4911      	ldr	r1, [pc, #68]	; (80014c4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	336c      	adds	r3, #108	; 0x6c
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8001492:	490c      	ldr	r1, [pc, #48]	; (80014c4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	3374      	adds	r3, #116	; 0x74
 80014a2:	6a3a      	ldr	r2, [r7, #32]
 80014a4:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e002      	b.n	80014b8 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	617b      	str	r3, [r7, #20]
  }
  return r;
 80014b8:	697b      	ldr	r3, [r7, #20]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000208 	.word	0x20000208

080014c8 <xTraceCounterInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceCounterData_t *pxCounterData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceCounterInitialize(TraceCounterData_t *pxBuffer)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	pxCounterData = pxBuffer;
 80014d0:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <xTraceCounterInitialize+0x30>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
	
	pxCounterData->xCallbackFunction = 0;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <xTraceCounterInitialize+0x30>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <xTraceCounterInitialize+0x34>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <xTraceCounterInitialize+0x34>)
 80014e8:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	20000300 	.word	0x20000300
 80014fc:	20003998 	.word	0x20003998

08001500 <xTraceDiagnosticsInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceDiagnosticsData_t *pxDiagnostics TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceDiagnosticsInitialize(TraceDiagnosticsData_t *pxBuffer)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxDiagnostics = pxBuffer;
 8001508:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <xTraceDiagnosticsInitialize+0x48>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]

	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e008      	b.n	8001526 <xTraceDiagnosticsInitialize+0x26>
	{
		pxDiagnostics->metrics[i] = 0;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <xTraceDiagnosticsInitialize+0x48>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	2100      	movs	r1, #0
 800151c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3301      	adds	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d9f3      	bls.n	8001514 <xTraceDiagnosticsInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <xTraceDiagnosticsInitialize+0x4c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <xTraceDiagnosticsInitialize+0x4c>)
 8001536:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000304 	.word	0x20000304
 800154c:	20003998 	.word	0x20003998

08001550 <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <xTraceDiagnosticsAdd+0x34>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	79fa      	ldrb	r2, [r7, #7]
 8001562:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <xTraceDiagnosticsAdd+0x34>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	6839      	ldr	r1, [r7, #0]
 800156e:	4401      	add	r1, r0
 8001570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return TRC_SUCCESS;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000304 	.word	0x20000304

08001588 <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
	return xTraceDiagnosticsAdd(xType, 1);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2101      	movs	r1, #1
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ffda 	bl	8001550 <xTraceDiagnosticsAdd>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <xTraceDiagnosticsSetIfHigher+0x38>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dd05      	ble.n	80015d0 <xTraceDiagnosticsSetIfHigher+0x28>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <xTraceDiagnosticsSetIfHigher+0x38>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	79fa      	ldrb	r2, [r7, #7]
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	return TRC_SUCCESS;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000304 	.word	0x20000304

080015e4 <xTraceDiagnosticsCheckStatus>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsCheckStatus(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	/* It is probably good if we always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS) == 0U)
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <xTraceDiagnosticsCheckStatus+0x7c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <xTraceDiagnosticsCheckStatus+0x14>
	{
		return TRC_FAIL;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e030      	b.n	800165a <xTraceDiagnosticsCheckStatus+0x76>
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] > 0)
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <xTraceDiagnosticsCheckStatus+0x80>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	dd06      	ble.n	8001610 <xTraceDiagnosticsCheckStatus+0x2c>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
 8001602:	2008      	movs	r0, #8
 8001604:	f000 f9f4 	bl	80019f0 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <xTraceDiagnosticsCheckStatus+0x80>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <xTraceDiagnosticsCheckStatus+0x80>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b1c      	cmp	r3, #28
 8001618:	dd06      	ble.n	8001628 <xTraceDiagnosticsCheckStatus+0x44>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
 800161a:	2009      	movs	r0, #9
 800161c:	f000 f9e8 	bl	80019f0 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <xTraceDiagnosticsCheckStatus+0x80>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <xTraceDiagnosticsCheckStatus+0x80>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	dd06      	ble.n	8001640 <xTraceDiagnosticsCheckStatus+0x5c>
	{
		(void)xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
 8001632:	200a      	movs	r0, #10
 8001634:	f000 f9dc 	bl	80019f0 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <xTraceDiagnosticsCheckStatus+0x80>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <xTraceDiagnosticsCheckStatus+0x80>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	dd06      	ble.n	8001658 <xTraceDiagnosticsCheckStatus+0x74>
	{
		(void)xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
 800164a:	200e      	movs	r0, #14
 800164c:	f000 f9d0 	bl	80019f0 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <xTraceDiagnosticsCheckStatus+0x80>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
	}

	return TRC_SUCCESS;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20003998 	.word	0x20003998
 8001664:	20000304 	.word	0x20000304

08001668 <xTraceEntryIndexTableInitialize>:
/* Variables */
static TraceEntryTable_t *pxEntryTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;
static TraceEntryIndexTable_t *pxIndexTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEntryIndexTableInitialize(TraceEntryIndexTable_t* const pxBuffer)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxIndexTable = pxBuffer;
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <xTraceEntryIndexTableInitialize+0x1c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
	
	return prvEntryIndexInitialize();
 8001676:	f000 f945 	bl	8001904 <prvEntryIndexInitialize>
 800167a:	4603      	mov	r3, r0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000030c 	.word	0x2000030c

08001688 <xTraceEntryTableInitialize>:

traceResult xTraceEntryTableInitialize(TraceEntryTable_t* const pxBuffer)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT((TRC_ENTRY_TABLE_SLOTS) != 0);

	pxEntryTable = pxBuffer;
 8001690:	4a28      	ldr	r2, [pc, #160]	; (8001734 <xTraceEntryTableInitialize+0xac>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]

	pxEntryTable->uxSlots = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOTS);
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <xTraceEntryTableInitialize+0xac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2238      	movs	r2, #56	; 0x38
 800169c:	601a      	str	r2, [r3, #0]
	pxEntryTable->uxEntrySymbolLength = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE);
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <xTraceEntryTableInitialize+0xac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	221c      	movs	r2, #28
 80016a4:	605a      	str	r2, [r3, #4]
	pxEntryTable->uxEntryStateCount = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_STATE_COUNT);
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <xTraceEntryTableInitialize+0xac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2203      	movs	r2, #3
 80016ac:	609a      	str	r2, [r3, #8]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e02f      	b.n	8001714 <xTraceEntryTableInitialize+0x8c>
	{
		pxEntryTable->axEntries[i].pvAddress = 0;
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <xTraceEntryTableInitialize+0xac>)
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	440b      	add	r3, r1
 80016c4:	330c      	adds	r3, #12
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	e010      	b.n	80016f2 <xTraceEntryTableInitialize+0x6a>
		{
			pxEntryTable->axEntries[i].xStates[j] = (TraceUnsignedBaseType_t)0;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <xTraceEntryTableInitialize+0xac>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4413      	add	r3, r2
 80016e2:	3302      	adds	r3, #2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d9eb      	bls.n	80016d0 <xTraceEntryTableInitialize+0x48>
		}
		pxEntryTable->axEntries[i].szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <xTraceEntryTableInitialize+0xac>)
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	440b      	add	r3, r1
 8001708:	3320      	adds	r3, #32
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3301      	adds	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b37      	cmp	r3, #55	; 0x37
 8001718:	d9cc      	bls.n	80016b4 <xTraceEntryTableInitialize+0x2c>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <xTraceEntryTableInitialize+0xb0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <xTraceEntryTableInitialize+0xb0>)
 8001724:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	20000308 	.word	0x20000308
 8001738:	20003998 	.word	0x20003998

0800173c <xTraceEntryCreate>:

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 8001744:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <xTraceEntryCreate+0xb8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <xTraceEntryCreate+0x18>
	{
		return TRC_FAIL;
 8001750:	2301      	movs	r3, #1
 8001752:	e04b      	b.n	80017ec <xTraceEntryCreate+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001754:	f3ef 8310 	mrs	r3, PRIMASK
 8001758:	617b      	str	r3, [r7, #20]
  return(result);
 800175a:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 800175c:	623b      	str	r3, [r7, #32]
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f383 8810 	msr	PRIMASK, r3
}
 8001768:	bf00      	nop

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 800176a:	f107 030b 	add.w	r3, r7, #11
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f8ea 	bl	8001948 <prvEntryIndexTake>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00a      	beq.n	8001790 <xTraceEntryCreate+0x54>
	{
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 800177a:	2001      	movs	r0, #1
 800177c:	f7ff ff04 	bl	8001588 <xTraceDiagnosticsIncrease>
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f383 8810 	msr	PRIMASK, r3
}
 800178a:	bf00      	nop

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 800178c:	2301      	movs	r3, #1
 800178e:	e02d      	b.n	80017ec <xTraceEntryCreate+0xb0>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <xTraceEntryCreate+0xbc>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	4619      	mov	r1, r3
 8001798:	460b      	mov	r3, r1
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	440b      	add	r3, r1
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	3308      	adds	r3, #8
 80017a2:	4413      	add	r3, r2
 80017a4:	3304      	adds	r3, #4
 80017a6:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
 80017b2:	e008      	b.n	80017c6 <xTraceEntryCreate+0x8a>
	{
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3301      	adds	r3, #1
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d9f3      	bls.n	80017b4 <xTraceEntryCreate+0x78>
	}

	pxEntry->uiOptions = 0u;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	2200      	movs	r2, #0
 80017d6:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f383 8810 	msr	PRIMASK, r3
}
 80017e8:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20003998 	.word	0x20003998
 80017f8:	20000308 	.word	0x20000308

080017fc <xTraceEntryFind>:

	return TRC_SUCCESS;
}

traceResult xTraceEntryFind(const void* const pvAddress, TraceEntryHandle_t* pxEntryHandle)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(pxEntryHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(pvAddress != (void*)0);

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e017      	b.n	800183c <xTraceEntryFind+0x40>
	{
		pxEntry = &pxEntryTable->axEntries[i];
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <xTraceEntryFind+0x54>)
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	3308      	adds	r3, #8
 800181c:	440b      	add	r3, r1
 800181e:	3304      	adds	r3, #4
 8001820:	60bb      	str	r3, [r7, #8]
		if (pxEntry->pvAddress == pvAddress)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d104      	bne.n	8001836 <xTraceEntryFind+0x3a>
		{
			*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	601a      	str	r2, [r3, #0]

			return TRC_SUCCESS;
 8001832:	2300      	movs	r3, #0
 8001834:	e006      	b.n	8001844 <xTraceEntryFind+0x48>
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3301      	adds	r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b37      	cmp	r3, #55	; 0x37
 8001840:	d9e4      	bls.n	800180c <xTraceEntryFind+0x10>
		}
	}

	return TRC_FAIL;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000308 	.word	0x20000308

08001854 <xTraceEntrySetSymbol>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceEntrySetSymbol(const TraceEntryHandle_t xEntryHandle, const char* szSymbol, uint32_t uiLength)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == (void*)0)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d103      	bne.n	800186e <xTraceEntrySetSymbol+0x1a>
	{
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <xTraceEntrySetSymbol+0x50>)
 8001868:	60bb      	str	r3, [r7, #8]
		uiLength = 0u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
	}

	/* Remember the longest symbol name */
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4619      	mov	r1, r3
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fe98 	bl	80015a8 <xTraceDiagnosticsSetIfHigher>

	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b1b      	cmp	r3, #27
 800187c:	d902      	bls.n	8001884 <xTraceEntrySetSymbol+0x30>
	{
		/* No room for null termination. Set to max. */
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800187e:	231c      	movs	r3, #28
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	e002      	b.n	800188a <xTraceEntrySetSymbol+0x36>
	}
	else
	{
		/* Include null termination by increasing the size by 1 */
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3301      	adds	r3, #1
 8001888:	607b      	str	r3, [r7, #4]
	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* This will also copy the null termination, if possible */
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3314      	adds	r3, #20
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	4618      	mov	r0, r3
 8001894:	f009 ffb6 	bl	800b804 <memcpy>

	return TRC_SUCCESS;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	0800b904 	.word	0x0800b904

080018a8 <xTraceEntryGetCount>:

traceResult xTraceEntryGetCount(uint32_t* puiCount)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	/* This should never fail */
	TRC_ASSERT(puiCount != (void*)0);

	*puiCount = (uint32_t)(TRC_ENTRY_TABLE_SLOTS) - GET_FREE_INDEX_COUNT();
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <xTraceEntryGetCount+0x24>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	2000030c 	.word	0x2000030c

080018d0 <xTraceEntryGetAtIndex>:

traceResult xTraceEntryGetAtIndex(uint32_t index, TraceEntryHandle_t* pxEntryHandle)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(index < (uint32_t)(TRC_ENTRY_TABLE_SLOTS));

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	*pxEntryHandle = (TraceEntryHandle_t)&pxEntryTable->axEntries[index];
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <xTraceEntryGetAtIndex+0x30>)
 80018dc:	6819      	ldr	r1, [r3, #0]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	3308      	adds	r3, #8
 80018ea:	440b      	add	r3, r1
 80018ec:	1d1a      	adds	r2, r3, #4
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	20000308 	.word	0x20000308

08001904 <prvEntryIndexInitialize>:
#endif /* ((TRC_CFG_USE_TRACE_ASSERT) == 1) */

/* PRIVATE FUNCTIONS */

static traceResult prvEntryIndexInitialize(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
	uint32_t i;

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	e00a      	b.n	8001926 <prvEntryIndexInitialize+0x22>
	{
		pxIndexTable->axFreeIndexes[i] = (TraceEntryIndex_t)i;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <prvEntryIndexInitialize+0x40>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	b2d9      	uxtb	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	460a      	mov	r2, r1
 800191e:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3301      	adds	r3, #1
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b37      	cmp	r3, #55	; 0x37
 800192a:	d9f1      	bls.n	8001910 <prvEntryIndexInitialize+0xc>
	}

	pxIndexTable->uiFreeIndexCount = TRC_ENTRY_TABLE_SLOTS;
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <prvEntryIndexInitialize+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2238      	movs	r2, #56	; 0x38
 8001932:	639a      	str	r2, [r3, #56]	; 0x38

	return TRC_SUCCESS;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2000030c 	.word	0x2000030c

08001948 <prvEntryIndexTake>:

static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <prvEntryIndexTake+0x5c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <prvEntryIndexTake+0x16>
	{
		return TRC_FAIL;
 800195a:	2301      	movs	r3, #1
 800195c:	e01c      	b.n	8001998 <prvEntryIndexTake+0x50>
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <prvEntryIndexTake+0x5c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	73fb      	strb	r3, [r7, #15]
	pxIndexTable->uiFreeIndexCount--;
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <prvEntryIndexTake+0x5c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800196c:	3a01      	subs	r2, #1
 800196e:	639a      	str	r2, [r3, #56]	; 0x38

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <prvEntryIndexTake+0x5c>)
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <prvEntryIndexTake+0x5c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <prvEntryIndexTake+0x5c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	5c8a      	ldrb	r2, [r1, r2]
 8001980:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <prvEntryIndexTake+0x5c>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <prvEntryIndexTake+0x5c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198c:	21ff      	movs	r1, #255	; 0xff
 800198e:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	2000030c 	.word	0x2000030c

080019a8 <xTraceErrorInitialize>:
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc);

static TraceErrorData_t* pxErrorInfo TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceErrorInitialize(TraceErrorData_t* pxBuffer)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxErrorInfo = pxBuffer;
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <xTraceErrorInitialize+0x40>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]

	pxErrorInfo->uiErrorAndWarningFlags = 0u;
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <xTraceErrorInitialize+0x40>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
	pxErrorInfo->uiErrorCode = 0u;
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <xTraceErrorInitialize+0x40>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
	pxErrorInfo->xWarningChannel = 0;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <xTraceErrorInitialize+0x40>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <xTraceErrorInitialize+0x44>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f043 0320 	orr.w	r3, r3, #32
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <xTraceErrorInitialize+0x44>)
 80019d8:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000310 	.word	0x20000310
 80019ec:	20003998 	.word	0x20003998

080019f0 <xTraceWarning>:

traceResult xTraceWarning(uint32_t uiErrorCode)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <xTraceWarning+0x54>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <xTraceWarning+0x18>
	{
		/* If not initialized */
		return TRC_FAIL;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e019      	b.n	8001a3c <xTraceWarning+0x4c>
	}
	
	if (GET_ERROR_WARNING_FLAG(uiErrorCode) == 0u)
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <xTraceWarning+0x58>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10d      	bne.n	8001a3a <xTraceWarning+0x4a>
	{
		/* Will never reach this point more than once per warning type, since we verify if uiErrorAndWarningFlags[uiErrorCode] has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <xTraceWarning+0x58>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	2201      	movs	r2, #1
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <xTraceWarning+0x58>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

		(void)prvTraceErrorPrint(uiErrorCode);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f847 	bl	8001ac8 <prvTraceErrorPrint>
	}

	return TRC_SUCCESS;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20003998 	.word	0x20003998
 8001a48:	20000310 	.word	0x20000310

08001a4c <xTraceError>:

traceResult xTraceError(uint32_t uiErrorCode)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <xTraceError+0x70>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <xTraceError+0x18>
	{
		return TRC_FAIL;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e027      	b.n	8001ab4 <xTraceError+0x68>
	}

	if (pxErrorInfo->uiErrorCode == TRC_ERROR_NONE)
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <xTraceError+0x74>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d121      	bne.n	8001ab2 <xTraceError+0x66>
	{
		/* Will never reach this point more than once, since we verify if uiErrorCode has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <xTraceError+0x74>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6819      	ldr	r1, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	2201      	movs	r2, #1
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <xTraceError+0x74>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
		pxErrorInfo->uiErrorCode = uiErrorCode;
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <xTraceError+0x74>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	605a      	str	r2, [r3, #4]

		if (prvTraceErrorPrint(uiErrorCode) == TRC_FAIL)
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f81b 	bl	8001ac8 <prvTraceErrorPrint>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d103      	bne.n	8001aa0 <xTraceError+0x54>
		{
			(void)xTraceDisable();
 8001a98:	f001 ff0a 	bl	80038b0 <xTraceDisable>
			
			return TRC_FAIL;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e009      	b.n	8001ab4 <xTraceError+0x68>
		}
		
		(void)xTracePrint(pxErrorInfo->xWarningChannel, "Recorder stopped in xTraceError(...)!");
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <xTraceError+0x74>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <xTraceError+0x78>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 faf9 	bl	80030a0 <xTracePrint>
		(void)xTraceDisable();
 8001aae:	f001 feff 	bl	80038b0 <xTraceDisable>
	}

	return TRC_SUCCESS;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20003998 	.word	0x20003998
 8001ac0:	20000310 	.word	0x20000310
 8001ac4:	0800b908 	.word	0x0800b908

08001ac8 <prvTraceErrorPrint>:

	return TRC_SUCCESS;
}

static traceResult prvTraceErrorPrint(uint32_t uiErrorCode)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t xFileName;
	
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	if (pxErrorInfo->xWarningChannel == 0)
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <prvTraceErrorPrint+0x80>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10b      	bne.n	8001af2 <prvTraceErrorPrint+0x2a>
		* The abbreviation #WFR is used instead of the longer full name,
		* to avoid truncation by small slots in the symbol table.
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		 */
		if (xTraceStringRegister("#WFR", &pxErrorInfo->xWarningChannel) == TRC_FAIL)
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <prvTraceErrorPrint+0x80>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3308      	adds	r3, #8
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481a      	ldr	r0, [pc, #104]	; (8001b4c <prvTraceErrorPrint+0x84>)
 8001ae4:	f002 f93a 	bl	8003d5c <xTraceStringRegister>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <prvTraceErrorPrint+0x2a>
		{
			return TRC_FAIL;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e025      	b.n	8001b3e <prvTraceErrorPrint+0x76>
		}
	}

	(void)prvTraceErrorGetDescription(uiErrorCode, &szDesc);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f82b 	bl	8001b54 <prvTraceErrorGetDescription>

	switch (uiErrorCode)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d011      	beq.n	8001b28 <prvTraceErrorPrint+0x60>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d010      	beq.n	8001b2c <prvTraceErrorPrint+0x64>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3b02      	subs	r3, #2
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d80c      	bhi.n	8001b2c <prvTraceErrorPrint+0x64>
	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
	case TRC_ERROR_DWT_NOT_SUPPORTED:
	case TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		(void)xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <prvTraceErrorPrint+0x80>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fabf 	bl	80030a0 <xTracePrint>
		break;
 8001b22:	bf00      	nop
		
		return TRC_FAIL;
		break;
	}

	return TRC_SUCCESS;
 8001b24:	2300      	movs	r3, #0
 8001b26:	e00a      	b.n	8001b3e <prvTraceErrorPrint+0x76>
			return TRC_FAIL;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e008      	b.n	8001b3e <prvTraceErrorPrint+0x76>
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <prvTraceErrorPrint+0x80>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4906      	ldr	r1, [pc, #24]	; (8001b50 <prvTraceErrorPrint+0x88>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 fae8 	bl	800310c <xTracePrintF>
		return TRC_FAIL;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000310 	.word	0x20000310
 8001b4c:	0800b930 	.word	0x0800b930
 8001b50:	0800b938 	.word	0x0800b938

08001b54 <prvTraceErrorGetDescription>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (uiErrorCode)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0e      	cmp	r3, #14
 8001b62:	d85b      	bhi.n	8001c1c <prvTraceErrorGetDescription+0xc8>
 8001b64:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <prvTraceErrorGetDescription+0x18>)
 8001b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6a:	bf00      	nop
 8001b6c:	08001ba9 	.word	0x08001ba9
 8001b70:	08001c15 	.word	0x08001c15
 8001b74:	08001bed 	.word	0x08001bed
 8001b78:	08001bf5 	.word	0x08001bf5
 8001b7c:	08001bfd 	.word	0x08001bfd
 8001b80:	08001c05 	.word	0x08001c05
 8001b84:	08001c0d 	.word	0x08001c0d
 8001b88:	08001be5 	.word	0x08001be5
 8001b8c:	08001bad 	.word	0x08001bad
 8001b90:	08001bb5 	.word	0x08001bb5
 8001b94:	08001bbd 	.word	0x08001bbd
 8001b98:	08001bc5 	.word	0x08001bc5
 8001b9c:	08001bcd 	.word	0x08001bcd
 8001ba0:	08001bd5 	.word	0x08001bd5
 8001ba4:	08001bdd 	.word	0x08001bdd
	{
	case TRC_ERROR_NONE:
		return TRC_FAIL;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e03c      	b.n	8001c26 <prvTraceErrorGetDescription+0xd2>
	case TRC_WARNING_ENTRY_TABLE_SLOTS:
		/* There was not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by NoRoomForSymbol. Inspect this
		variable and increase TRC_CFG_ENTRY_TABLE_SLOTS by at least that value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_TABLE_SLOTS";
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <prvTraceErrorGetDescription+0xe0>)
 8001bb0:	601a      	str	r2, [r3, #0]
		break;
 8001bb2:	e037      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>
		/* A symbol name exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect uiLongestSymbolName in trcEntryTable and increase
		TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH to at least this value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH";
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <prvTraceErrorGetDescription+0xe4>)
 8001bb8:	601a      	str	r2, [r3, #0]
		break;
 8001bba:	e033      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>
		- xTraceStringRegister

		A trace event may store a maximum of 56 bytes payload, including
		data arguments and string characters. */

		*pszDesc = "Event size exceeded";
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <prvTraceErrorGetDescription+0xe8>)
 8001bc0:	601a      	str	r2, [r3, #0]
		break;
 8001bc2:	e02f      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_READ_DATA returned error";
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <prvTraceErrorGetDescription+0xec>)
 8001bc8:	601a      	str	r2, [r3, #0]
		break;
 8001bca:	e02b      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <prvTraceErrorGetDescription+0xf0>)
 8001bd0:	601a      	str	r2, [r3, #0]
		break;
 8001bd2:	e027      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during xTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		*pszDesc = "Blocking in xTraceEnable";
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <prvTraceErrorGetDescription+0xf4>)
 8001bd8:	601a      	str	r2, [r3, #0]
		break;
 8001bda:	e023      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STACKMON_NO_SLOTS:
		/* Some tasks did not fit in the stack monitor. Increase the slot count. */

		*pszDesc = "No slots left in Stack Monitor";
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4a1b      	ldr	r2, [pc, #108]	; (8001c4c <prvTraceErrorGetDescription+0xf8>)
 8001be0:	601a      	str	r2, [r3, #0]
		break;
 8001be2:	e01f      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <prvTraceErrorGetDescription+0xf0>)
 8001be8:	601a      	str	r2, [r3, #0]
		break;
 8001bea:	e01b      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		*pszDesc = "Invalid event code";
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <prvTraceErrorGetDescription+0xfc>)
 8001bf0:	601a      	str	r2, [r3, #0]
		break;
 8001bf2:	e017      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		*pszDesc = "Exceeded ISR nesting";
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <prvTraceErrorGetDescription+0x100>)
 8001bf8:	601a      	str	r2, [r3, #0]
		break;
 8001bfa:	e013      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT not supported";
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <prvTraceErrorGetDescription+0x104>)
 8001c00:	601a      	str	r2, [r3, #0]
		break;
 8001c02:	e00f      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT_CYCCNT not supported";
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <prvTraceErrorGetDescription+0x108>)
 8001c08:	601a      	str	r2, [r3, #0]
		break;
 8001c0a:	e00b      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		/* xTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		*pszDesc = "Could not create TzCtrl";
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <prvTraceErrorGetDescription+0x10c>)
 8001c10:	601a      	str	r2, [r3, #0]
		break;
 8001c12:	e007      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_ASSERT:
		/* A TRC_ASSERT has triggered */
		*pszDesc = "ASSERT: %s (%d)";
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <prvTraceErrorGetDescription+0x110>)
 8001c18:	601a      	str	r2, [r3, #0]
		break;
 8001c1a:	e003      	b.n	8001c24 <prvTraceErrorGetDescription+0xd0>

	default:
		/* An unknown error occurred */
		*pszDesc = "Unknown error code: 0x%08X";
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <prvTraceErrorGetDescription+0x114>)
 8001c20:	601a      	str	r2, [r3, #0]
		break;
 8001c22:	bf00      	nop
	}

	return TRC_SUCCESS;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	0800b954 	.word	0x0800b954
 8001c38:	0800b978 	.word	0x0800b978
 8001c3c:	0800b9a4 	.word	0x0800b9a4
 8001c40:	0800b9b8 	.word	0x0800b9b8
 8001c44:	0800b9e4 	.word	0x0800b9e4
 8001c48:	0800ba10 	.word	0x0800ba10
 8001c4c:	0800ba2c 	.word	0x0800ba2c
 8001c50:	0800ba4c 	.word	0x0800ba4c
 8001c54:	0800ba60 	.word	0x0800ba60
 8001c58:	0800ba78 	.word	0x0800ba78
 8001c5c:	0800ba8c 	.word	0x0800ba8c
 8001c60:	0800baa8 	.word	0x0800baa8
 8001c64:	0800bac0 	.word	0x0800bac0
 8001c68:	0800b938 	.word	0x0800b938

08001c6c <xTraceEventInitialize>:
	}

TraceEventDataTable_t *pxTraceEventDataTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEventInitialize(TraceEventDataTable_t* pxBuffer)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	uint32_t i, j;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceEventDataTable = pxBuffer;
 8001c74:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <xTraceEventInitialize+0xa0>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e034      	b.n	8001cea <xTraceEventInitialize+0x7e>
	{
		pxCoreEventData = &pxTraceEventDataTable->coreEventData[i];
 8001c80:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <xTraceEventInitialize+0xa0>)
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4613      	mov	r3, r2
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	60fb      	str	r3, [r7, #12]

		pxCoreEventData->eventCounter = 0u;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	66da      	str	r2, [r3, #108]	; 0x6c

		for (j = 0u; j < ((uint32_t)(TRC_CFG_MAX_ISR_NESTING) + 1u); j++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	e01f      	b.n	8001cde <xTraceEventInitialize+0x72>
		{
			RESET_EVENT_DATA(&pxCoreEventData->eventData[j]);
 8001c9e:	68f9      	ldr	r1, [r7, #12]
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < ((uint32_t)(TRC_CFG_MAX_ISR_NESTING) + 1u); j++)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d9dc      	bls.n	8001c9e <xTraceEventInitialize+0x32>
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0c7      	beq.n	8001c80 <xTraceEventInitialize+0x14>
		}
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <xTraceEventInitialize+0xa4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf8:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <xTraceEventInitialize+0xa4>)
 8001cfa:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000314 	.word	0x20000314
 8001d10:	20003998 	.word	0x20003998

08001d14 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
	int32_t iBytesCommitted = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We need to check this */
	if (!xTraceIsRecorderEnabled())
 8001d26:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <xTraceEventCreate1+0xdc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <xTraceEventCreate1+0x28>
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <xTraceEventCreate1+0xe0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <xTraceEventCreate1+0x2c>
	{
		return TRC_FAIL;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e053      	b.n	8001de8 <xTraceEventCreate1+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001d40:	f3ef 8310 	mrs	r3, PRIMASK
 8001d44:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d46:	69fb      	ldr	r3, [r7, #28]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f383 8810 	msr	PRIMASK, r3
}
 8001d54:	bf00      	nop

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <xTraceEventCreate1+0xe4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d5c:	3201      	adds	r2, #1
 8001d5e:	66da      	str	r2, [r3, #108]	; 0x6c

	if (xTraceStreamPortAllocate(sizeof(TraceEvent1_t), (void**)&pxEventData) == TRC_FAIL) /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress pointer checks*/
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4619      	mov	r1, r3
 8001d66:	200c      	movs	r0, #12
 8001d68:	f000 fdf2 	bl	8002950 <xTraceInternalEventBufferAlloc>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d107      	bne.n	8001d82 <xTraceEventCreate1+0x6e>
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f383 8810 	msr	PRIMASK, r3
}
 8001d7c:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();
		return TRC_FAIL;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e032      	b.n	8001de8 <xTraceEventCreate1+0xd4>
	}

	SET_BASE_EVENT_DATA(pxEventData, uiEventCode, 1, pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter); /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	801a      	strh	r2, [r3, #0]
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <xTraceEventCreate1+0xe4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	b292      	uxth	r2, r2
 8001d9a:	805a      	strh	r2, [r3, #2]
 8001d9c:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <xTraceEventCreate1+0xe8>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <xTraceEventCreate1+0xec>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d204      	bcs.n	8001dbc <xTraceEventCreate1+0xa8>
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <xTraceEventCreate1+0xec>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	3201      	adds	r2, #1
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <xTraceEventCreate1+0xec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6852      	ldr	r2, [r2, #4]
 8001dc4:	615a      	str	r2, [r3, #20]

	pxEventData->uxParams[0] = uxParam1;
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	609a      	str	r2, [r3, #8]

	(void)xTraceStreamPortCommit(pxEventData, sizeof(TraceEvent1_t), &iBytesCommitted);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f107 020c 	add.w	r2, r7, #12
 8001dd2:	210c      	movs	r1, #12
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fdcf 	bl	8002978 <xTraceInternalEventBufferAllocCommit>
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f383 8810 	msr	PRIMASK, r3
}
 8001de4:	bf00      	nop

	/* We need to use iBytesCommitted for the above call but do not use the value,
	 * remove potential warnings */
	(void)iBytesCommitted;

	return TRC_SUCCESS;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20003998 	.word	0x20003998
 8001df4:	20003990 	.word	0x20003990
 8001df8:	20000314 	.word	0x20000314
 8001dfc:	e0001004 	.word	0xe0001004
 8001e00:	200039a0 	.word	0x200039a0

08001e04 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We need to check this */
	if (!xTraceIsRecorderEnabled())
 8001e18:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <xTraceEventCreate2+0xe4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <xTraceEventCreate2+0x2a>
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <xTraceEventCreate2+0xe8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <xTraceEventCreate2+0x2e>
	{
		return TRC_FAIL;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e056      	b.n	8001ee0 <xTraceEventCreate2+0xdc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001e32:	f3ef 8310 	mrs	r3, PRIMASK
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	f383 8810 	msr	PRIMASK, r3
}
 8001e46:	bf00      	nop

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <xTraceEventCreate2+0xec>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e4e:	3201      	adds	r2, #1
 8001e50:	66da      	str	r2, [r3, #108]	; 0x6c

	if (xTraceStreamPortAllocate(sizeof(TraceEvent2_t), (void**)&pxEventData) == TRC_FAIL) /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress pointer checks*/
 8001e52:	f107 0318 	add.w	r3, r7, #24
 8001e56:	4619      	mov	r1, r3
 8001e58:	2010      	movs	r0, #16
 8001e5a:	f000 fd79 	bl	8002950 <xTraceInternalEventBufferAlloc>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <xTraceEventCreate2+0x70>
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f383 8810 	msr	PRIMASK, r3
}
 8001e6e:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();
		return TRC_FAIL;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e035      	b.n	8001ee0 <xTraceEventCreate2+0xdc>
	}

	SET_BASE_EVENT_DATA(pxEventData, uiEventCode, 2, pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter); /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	801a      	strh	r2, [r3, #0]
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <xTraceEventCreate2+0xec>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	805a      	strh	r2, [r3, #2]
 8001e8e:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <xTraceEventCreate2+0xf0>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <xTraceEventCreate2+0xf4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d204      	bcs.n	8001eae <xTraceEventCreate2+0xaa>
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <xTraceEventCreate2+0xf4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	3201      	adds	r2, #1
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <xTraceEventCreate2+0xf4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6852      	ldr	r2, [r2, #4]
 8001eb6:	615a      	str	r2, [r3, #20]

	pxEventData->uxParams[0] = uxParam1;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	609a      	str	r2, [r3, #8]
	pxEventData->uxParams[1] = uxParam2;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]

	(void)xTraceStreamPortCommit(pxEventData, sizeof(TraceEvent2_t), &iBytesCommitted);
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	f107 0214 	add.w	r2, r7, #20
 8001eca:	2110      	movs	r1, #16
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fd53 	bl	8002978 <xTraceInternalEventBufferAllocCommit>
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f383 8810 	msr	PRIMASK, r3
}
 8001edc:	bf00      	nop

	/* We need to use iBytesCommitted for the above call but do not use the value,
	 * remove potential warnings */
	(void)iBytesCommitted;

	return TRC_SUCCESS;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20003998 	.word	0x20003998
 8001eec:	20003990 	.word	0x20003990
 8001ef0:	20000314 	.word	0x20000314
 8001ef4:	e0001004 	.word	0xe0001004
 8001ef8:	200039a0 	.word	0x200039a0

08001efc <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	; 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We need to check this */
	if (!xTraceIsRecorderEnabled())
 8001f12:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <xTraceEventCreate3+0xec>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <xTraceEventCreate3+0x2c>
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <xTraceEventCreate3+0xf0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <xTraceEventCreate3+0x30>
	{
		return TRC_FAIL;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e059      	b.n	8001fe0 <xTraceEventCreate3+0xe4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f36:	2301      	movs	r3, #1
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	f383 8810 	msr	PRIMASK, r3
}
 8001f40:	bf00      	nop

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <xTraceEventCreate3+0xf4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f48:	3201      	adds	r2, #1
 8001f4a:	66da      	str	r2, [r3, #108]	; 0x6c

	if (xTraceStreamPortAllocate(sizeof(TraceEvent3_t), (void**)&pxEventData) == TRC_FAIL) /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress pointer checks*/
 8001f4c:	f107 0318 	add.w	r3, r7, #24
 8001f50:	4619      	mov	r1, r3
 8001f52:	2014      	movs	r0, #20
 8001f54:	f000 fcfc 	bl	8002950 <xTraceInternalEventBufferAlloc>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <xTraceEventCreate3+0x72>
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f383 8810 	msr	PRIMASK, r3
}
 8001f68:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();
		return TRC_FAIL;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e038      	b.n	8001fe0 <xTraceEventCreate3+0xe4>
	}

	SET_BASE_EVENT_DATA(pxEventData, uiEventCode, 3, pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter); /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	801a      	strh	r2, [r3, #0]
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <xTraceEventCreate3+0xf4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	b292      	uxth	r2, r2
 8001f86:	805a      	strh	r2, [r3, #2]
 8001f88:	4a1a      	ldr	r2, [pc, #104]	; (8001ff4 <xTraceEventCreate3+0xf8>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <xTraceEventCreate3+0xfc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d204      	bcs.n	8001fa8 <xTraceEventCreate3+0xac>
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <xTraceEventCreate3+0xfc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	3201      	adds	r2, #1
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <xTraceEventCreate3+0xfc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6852      	ldr	r2, [r2, #4]
 8001fb0:	615a      	str	r2, [r3, #20]
	
	pxEventData->uxParams[0] = uxParam1;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	609a      	str	r2, [r3, #8]
	pxEventData->uxParams[1] = uxParam2;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	60da      	str	r2, [r3, #12]
	pxEventData->uxParams[2] = uxParam3;
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	611a      	str	r2, [r3, #16]

	(void)xTraceStreamPortCommit(pxEventData, sizeof(TraceEvent3_t), &iBytesCommitted);
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f107 0214 	add.w	r2, r7, #20
 8001fca:	2114      	movs	r1, #20
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fcd3 	bl	8002978 <xTraceInternalEventBufferAllocCommit>
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f383 8810 	msr	PRIMASK, r3
}
 8001fdc:	bf00      	nop

	/* We need to use iBytesCommitted for the above call but do not use the value,
	 * remove potential warnings */
	(void)iBytesCommitted;

	return TRC_SUCCESS;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3730      	adds	r7, #48	; 0x30
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20003998 	.word	0x20003998
 8001fec:	20003990 	.word	0x20003990
 8001ff0:	20000314 	.word	0x20000314
 8001ff4:	e0001004 	.word	0xe0001004
 8001ff8:	200039a0 	.word	0x200039a0

08001ffc <xTraceEventBeginRawOffline>:

	return TRC_SUCCESS;
}

traceResult xTraceEventBeginRawOffline(uint32_t uiSize, TraceEventHandle_t* pxEventHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	int32_t ISR_nesting = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
	TraceCoreEventData_t* pxCoreEventData;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_EVENT) == 0U)
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <xTraceEventBeginRawOffline+0xc0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <xTraceEventBeginRawOffline+0x1e>
	{
		return TRC_FAIL;
 8002016:	2301      	movs	r3, #1
 8002018:	e04c      	b.n	80020b4 <xTraceEventBeginRawOffline+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800201a:	f3ef 8310 	mrs	r3, PRIMASK
 800201e:	617b      	str	r3, [r7, #20]
  return(result);
 8002020:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEventHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
 8002024:	2301      	movs	r3, #1
 8002026:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f383 8810 	msr	PRIMASK, r3
}
 800202e:	bf00      	nop

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <xTraceEventBeginRawOffline+0xc4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002036:	3201      	adds	r2, #1
 8002038:	66da      	str	r2, [r3, #108]	; 0x6c

	pxCoreEventData = &pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()];
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <xTraceEventBeginRawOffline+0xc4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	623b      	str	r3, [r7, #32]

	/* We backup the local variable to the CORE specific variable */
	pxCoreEventData->TRACE_ALLOC_CRITICAL_SECTION_NAME = TRACE_ALLOC_CRITICAL_SECTION_NAME;
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002044:	675a      	str	r2, [r3, #116]	; 0x74

	(void)xTraceISRGetCurrentNesting(&ISR_nesting);
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <xTraceEventBeginRawOffline+0xc8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	60fb      	str	r3, [r7, #12]

	/* We add 1 since xTraceISRGetCurrentNesting(...) returns -1 if no ISR is active */
	pxEventData = &pxCoreEventData->eventData[ISR_nesting + 1];
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	6a3a      	ldr	r2, [r7, #32]
 800205c:	4413      	add	r3, r2
 800205e:	61fb      	str	r3, [r7, #28]

	/* This should never fail */
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData->pvBlob == 0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );

	VERIFY_EVENT_SIZE(uiSize); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b40      	cmp	r3, #64	; 0x40
 8002064:	d907      	bls.n	8002076 <xTraceEventBeginRawOffline+0x7a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3b40      	subs	r3, #64	; 0x40
 800206a:	4619      	mov	r1, r3
 800206c:	2002      	movs	r0, #2
 800206e:	f7ff fa9b 	bl	80015a8 <xTraceDiagnosticsSetIfHigher>
 8002072:	2340      	movs	r3, #64	; 0x40
 8002074:	607b      	str	r3, [r7, #4]

	pxEventData->size = ((uiSize + (sizeof(TraceUnsignedBaseType_t) - 1u)) / sizeof(TraceUnsignedBaseType_t)) * sizeof(TraceUnsignedBaseType_t);	/* BaseType align */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3303      	adds	r3, #3
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	605a      	str	r2, [r3, #4]

	pxEventData->offset = 0u;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]

	/* This can fail and we should handle it */
	if (xTraceStreamPortAllocate(pxEventData->size, &pxEventData->pvBlob) == TRC_FAIL)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fc5d 	bl	8002950 <xTraceInternalEventBufferAlloc>
 8002096:	4603      	mov	r3, r0
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <xTraceEventBeginRawOffline+0xb0>
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f383 8810 	msr	PRIMASK, r3
}
 80020a6:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();
		return TRC_FAIL;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e003      	b.n	80020b4 <xTraceEventBeginRawOffline+0xb8>
	}

	*pxEventHandle = (TraceEventHandle_t)pxEventData;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3728      	adds	r7, #40	; 0x28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20003998 	.word	0x20003998
 80020c0:	20000314 	.word	0x20000314
 80020c4:	2000031c 	.word	0x2000031c

080020c8 <xTraceEventBeginRawOfflineBlocking>:

traceResult xTraceEventBeginRawOfflineBlocking(uint32_t uiSize, TraceEventHandle_t* pxEventHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	TraceEventData_t* pxEventData;
	TraceCoreEventData_t* pxCoreEventData;
	int32_t ISR_nesting = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
	uint32_t uiAttempts = 0u;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_EVENT) == 0U)
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <xTraceEventBeginRawOfflineBlocking+0xc0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <xTraceEventBeginRawOfflineBlocking+0x22>
	{
		return TRC_FAIL;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e049      	b.n	800217e <xTraceEventBeginRawOfflineBlocking+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80020ea:	f3ef 8310 	mrs	r3, PRIMASK
 80020ee:	613b      	str	r3, [r7, #16]
  return(result);
 80020f0:	693b      	ldr	r3, [r7, #16]
	}

	/* This should never fail */
	TRC_ASSERT(pxEventHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 80020f2:	623b      	str	r3, [r7, #32]
 80020f4:	2301      	movs	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f383 8810 	msr	PRIMASK, r3
}
 80020fe:	bf00      	nop

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <xTraceEventBeginRawOfflineBlocking+0xc4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002106:	3201      	adds	r2, #1
 8002108:	66da      	str	r2, [r3, #108]	; 0x6c

	pxCoreEventData = &pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()];
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <xTraceEventBeginRawOfflineBlocking+0xc4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	61fb      	str	r3, [r7, #28]

	/* We backup the local variable to the CORE specific variable */
	pxCoreEventData->TRACE_ALLOC_CRITICAL_SECTION_NAME = TRACE_ALLOC_CRITICAL_SECTION_NAME;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	6a3a      	ldr	r2, [r7, #32]
 8002114:	675a      	str	r2, [r3, #116]	; 0x74

	(void)xTraceGetCurrentISRNesting(&ISR_nesting);
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <xTraceEventBeginRawOfflineBlocking+0xc8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	60fb      	str	r3, [r7, #12]

	/* We add 1 since xTraceISRGetCurrentNesting(...) returns -1 if no ISR is active */
	pxEventData = &pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventData[ISR_nesting + 1];
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <xTraceEventBeginRawOfflineBlocking+0xc4>)
 8002120:	6819      	ldr	r1, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	61bb      	str	r3, [r7, #24]

	/* This should never fail */
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData->pvBlob == 0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );

	VERIFY_EVENT_SIZE(uiSize); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d907      	bls.n	8002148 <xTraceEventBeginRawOfflineBlocking+0x80>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b40      	subs	r3, #64	; 0x40
 800213c:	4619      	mov	r1, r3
 800213e:	2002      	movs	r0, #2
 8002140:	f7ff fa32 	bl	80015a8 <xTraceDiagnosticsSetIfHigher>
 8002144:	2340      	movs	r3, #64	; 0x40
 8002146:	607b      	str	r3, [r7, #4]

	pxEventData->size = ((uiSize + (sizeof(TraceUnsignedBaseType_t) - 1u)) / sizeof(TraceUnsignedBaseType_t)) * sizeof(TraceUnsignedBaseType_t);	/* BaseType align */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3303      	adds	r3, #3
 800214c:	f023 0203 	bic.w	r2, r3, #3
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	605a      	str	r2, [r3, #4]

	pxEventData->offset = 0u;
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]

	/* This can fail and we should handle it */
	while (xTraceStreamPortAllocate(pxEventData->size, &pxEventData->pvBlob) != TRC_SUCCESS)
 800215a:	e002      	b.n	8002162 <xTraceEventBeginRawOfflineBlocking+0x9a>
	{
		uiAttempts++;
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	3301      	adds	r3, #1
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
	while (xTraceStreamPortAllocate(pxEventData->size, &pxEventData->pvBlob) != TRC_SUCCESS)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fbf0 	bl	8002950 <xTraceInternalEventBufferAlloc>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f2      	bne.n	800215c <xTraceEventBeginRawOfflineBlocking+0x94>
	}

	*pxEventHandle = (TraceEventHandle_t)pxEventData;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3728      	adds	r7, #40	; 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20003998 	.word	0x20003998
 800218c:	20000314 	.word	0x20000314
 8002190:	2000031c 	.word	0x2000031c

08002194 <xTraceEventEndOffline>:

traceResult xTraceEventEndOffline(TraceEventHandle_t xEventHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	TraceEventData_t* pxEventData = (TraceEventData_t*)xEventHandle;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	61fb      	str	r3, [r7, #28]
	const TraceCoreEventData_t* pxCoreEventData;
	int32_t iBytesCommitted = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]

	TRACE_ALLOC_CRITICAL_SECTION()

	pxCoreEventData = &pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()];
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <xTraceEventEndOffline+0x58>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]

	/* We restore the CORE specific variable to the local variable before any EXIT */
	TRACE_ALLOC_CRITICAL_SECTION_NAME = pxCoreEventData->TRACE_ALLOC_CRITICAL_SECTION_NAME;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ae:	617b      	str	r3, [r7, #20]
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData != (void*)0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );

	/* This should never fail */
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData->pvBlob != (void*)0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );

	(void)xTraceStreamPortCommit(pxEventData->pvBlob, pxEventData->size, &iBytesCommitted);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f107 020c 	add.w	r2, r7, #12
 80021bc:	4619      	mov	r1, r3
 80021be:	f000 fbdb 	bl	8002978 <xTraceInternalEventBufferAllocCommit>

	/* We need to use iBytesCommitted for the above call but do not use the value,
	 * remove potential warnings */
	(void)iBytesCommitted;

	RESET_EVENT_DATA(pxEventData);
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2200      	movs	r2, #0
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f383 8810 	msr	PRIMASK, r3
}
 80021de:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000314 	.word	0x20000314

080021f0 <xTraceEventEndOfflineBlocking>:

traceResult xTraceEventEndOfflineBlocking(TraceEventHandle_t xEventHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	TraceEventData_t* pxEventData = (TraceEventData_t*)xEventHandle;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	623b      	str	r3, [r7, #32]
	const TraceCoreEventData_t* pxCoreEventData;
	int32_t iBytesCommitted;
	uint32_t uiByteOffset = 0u;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t *pubBlob;

	TRACE_ALLOC_CRITICAL_SECTION()

	pxCoreEventData = &pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()];
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <xTraceEventEndOfflineBlocking+0x7c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61fb      	str	r3, [r7, #28]

	/* We restore the CORE specific variable to the local variable before any EXIT */
	TRACE_ALLOC_CRITICAL_SECTION_NAME = pxCoreEventData->TRACE_ALLOC_CRITICAL_SECTION_NAME;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220a:	61bb      	str	r3, [r7, #24]
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData != (void*)0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );

	/* This should never fail */
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData->pvBlob != (void*)0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );
	
	pubBlob = (uint8_t*)pxEventData->pvBlob; /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	617b      	str	r3, [r7, #20]

	while (pxEventData->size > uiByteOffset)
 8002212:	e012      	b.n	800223a <xTraceEventEndOfflineBlocking+0x4a>
	{
		iBytesCommitted = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
		(void)xTraceStreamPortCommit((void*)&pubBlob[uiByteOffset], pxEventData->size - uiByteOffset, &iBytesCommitted); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	18d0      	adds	r0, r2, r3
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f107 020c 	add.w	r2, r7, #12
 800222a:	4619      	mov	r1, r3
 800222c:	f000 fba4 	bl	8002978 <xTraceInternalEventBufferAllocCommit>

		uiByteOffset += (uint32_t)iBytesCommitted;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	461a      	mov	r2, r3
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	4413      	add	r3, r2
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
	while (pxEventData->size > uiByteOffset)
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002240:	429a      	cmp	r2, r3
 8002242:	d3e7      	bcc.n	8002214 <xTraceEventEndOfflineBlocking+0x24>
	}

	RESET_EVENT_DATA(pxEventData);
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	2200      	movs	r2, #0
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f383 8810 	msr	PRIMASK, r3
}
 8002260:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000314 	.word	0x20000314

08002270 <xTraceEventAddData>:

traceResult xTraceEventAddData(TraceEventHandle_t xEventHandle, const TraceUnsignedBaseType_t* const puxData, TraceUnsignedBaseType_t uxSize)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
	TraceEventData_t* pxEventData = (TraceEventData_t*)xEventHandle;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	617b      	str	r3, [r7, #20]
	TRC_ASSERT(puxData != (void*)0);

	/* This should never fail */
	TRC_ASSERT((((TraceEventData_t*)xEventHandle)->offset + (uint32_t)(uxSize * sizeof(TraceUnsignedBaseType_t))) <= ((TraceEventData_t*)xEventHandle)->size);

	memcpy(&((uint8_t*)pxEventData->pvBlob)[pxEventData->offset], puxData, uxSize * sizeof(TraceUnsignedBaseType_t));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	18d0      	adds	r0, r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	461a      	mov	r2, r3
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	f009 fab7 	bl	800b804 <memcpy>
	pxEventData->offset += uxSize * sizeof(TraceUnsignedBaseType_t);
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	441a      	add	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	609a      	str	r2, [r3, #8]

	return TRC_SUCCESS;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <xTraceEventBufferInitialize>:

#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

traceResult xTraceEventBufferInitialize(TraceEventBuffer_t* pxTraceEventBuffer, uint32_t uiOptions,
	uint8_t* puiBuffer, uint32_t uiSize)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
	TRC_ASSERT(puiBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uiSize != 0u);

	pxTraceEventBuffer->uiOptions = uiOptions;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	60da      	str	r2, [r3, #12]
	pxTraceEventBuffer->uiHead = 0u;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
	pxTraceEventBuffer->uiTail = 0u;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
	pxTraceEventBuffer->uiSize = uiSize;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	609a      	str	r2, [r3, #8]
	pxTraceEventBuffer->uiFree = uiSize;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	615a      	str	r2, [r3, #20]
	pxTraceEventBuffer->puiBuffer = puiBuffer;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
	pxTraceEventBuffer->uiSlack = 0u;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
	pxTraceEventBuffer->uiNextHead = 0u;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
	pxTraceEventBuffer->uiTimerWraparounds = 0u;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT_BUFFER);
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <xTraceEventBufferInitialize+0x60>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <xTraceEventBufferInitialize+0x60>)
 80022fe:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20003998 	.word	0x20003998

08002314 <prvTraceEventBufferAllocPop>:

	return TRC_SUCCESS;
}

static traceResult prvTraceEventBufferAllocPop(TraceEventBuffer_t *pxTraceEventBuffer)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	uint32_t uiFreeSize = 0u;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]

	/* Check if tail is in, or at the start of the slack area. We do not want to call
	 * a free when in the slack area since it would read garbage data and free would
	 * become undefined.
	 */
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	1acb      	subs	r3, r1, r3
 800232e:	429a      	cmp	r2, r3
 8002330:	d303      	bcc.n	800233a <prvTraceEventBufferAllocPop+0x26>
	{
		/* Tail was in the slack area, wrap back to the start of the buffer. */
		pxTraceEventBuffer->uiTail = 0u;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	e019      	b.n	800236e <prvTraceEventBufferAllocPop+0x5a>
	}
	else
	{
		/* Get size of event we are freeing (this should never fail) */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventGetSize(((void*)&(pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiTail])), &uiFreeSize) == TRC_SUCCESS); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4413      	add	r3, r2
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	0b1b      	lsrs	r3, r3, #12
 8002348:	b29b      	uxth	r3, r3
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3302      	adds	r3, #2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	60fb      	str	r3, [r7, #12]

		/* Update tail to point to the new last event */
		pxTraceEventBuffer->uiTail = (pxTraceEventBuffer->uiTail + uiFreeSize) % pxTraceEventBuffer->uiSize;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6892      	ldr	r2, [r2, #8]
 8002360:	fbb3 f1f2 	udiv	r1, r3, r2
 8002364:	fb01 f202 	mul.w	r2, r1, r2
 8002368:	1a9a      	subs	r2, r3, r2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	605a      	str	r2, [r3, #4]
	}

	return TRC_SUCCESS;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <xTraceEventBufferAlloc>:

traceResult xTraceEventBufferAlloc(TraceEventBuffer_t *pxTraceEventBuffer, uint32_t uiSize, void **ppvData)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
	TRC_ASSERT(pxTraceEventBuffer != (void*)0);
	
	/* This should never fail */
	TRC_ASSERT(ppvData != (void*)0);

	uiBufferSize = pxTraceEventBuffer->uiSize;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	61fb      	str	r3, [r7, #28]

	/* Handle overwrite buffer allocation, since this kind of allocation modifies
	 * both head and tail it should only be used for internal buffers without any
	 * flushing calls (Streaming Ringbuffer)
	 */
	if (pxTraceEventBuffer->uiOptions == TRC_EVENT_BUFFER_OPTION_OVERWRITE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b01      	cmp	r3, #1
 8002394:	f040 8093 	bne.w	80024be <xTraceEventBufferAlloc+0x142>
	{
		if (pxTraceEventBuffer->uiHead >= pxTraceEventBuffer->uiTail)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d341      	bcc.n	8002428 <xTraceEventBufferAlloc+0xac>
		{
			/* Do we have enough space to directly allocate from the buffer? */
			if ((uiBufferSize - pxTraceEventBuffer->uiHead) > uiSize)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d214      	bcs.n	80023dc <xTraceEventBufferAlloc+0x60>
			{
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	441a      	add	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	601a      	str	r2, [r3, #0]
				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4413      	add	r3, r2
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80023ce:	69f9      	ldr	r1, [r7, #28]
 80023d0:	fb01 f202 	mul.w	r2, r1, r2
 80023d4:	1a9a      	subs	r2, r3, r2
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	61da      	str	r2, [r3, #28]
 80023da:	e0e2      	b.n	80025a2 <xTraceEventBufferAlloc+0x226>
			{
				/* Free space until there is enough space for a contiguous
				 * allocation */
				do
				{
					(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff ff99 	bl	8002314 <prvTraceEventBufferAllocPop>
					uiFreeSpace = pxTraceEventBuffer->uiTail - sizeof(uint32_t);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	3b04      	subs	r3, #4
 80023e8:	613b      	str	r3, [r7, #16]
				} while (uiFreeSpace < uiSize);
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d3f4      	bcc.n	80023dc <xTraceEventBufferAlloc+0x60>

				/* Calculate slack from the wrapping */
				pxTraceEventBuffer->uiSlack = uiBufferSize - pxTraceEventBuffer->uiHead;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	1ad2      	subs	r2, r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	619a      	str	r2, [r3, #24]

				/* Wrap head */
				pxTraceEventBuffer->uiHead = 0u;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

				/* Allocate data */
				*ppvData = pxTraceEventBuffer->puiBuffer;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4413      	add	r3, r2
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	fbb3 f2f2 	udiv	r2, r3, r2
 800241a:	69f9      	ldr	r1, [r7, #28]
 800241c:	fb01 f202 	mul.w	r2, r1, r2
 8002420:	1a9a      	subs	r2, r3, r2
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	61da      	str	r2, [r3, #28]
 8002426:	e0bc      	b.n	80025a2 <xTraceEventBufferAlloc+0x226>
			}
		}
		else
		{
			uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	3b04      	subs	r3, #4
 8002434:	613b      	str	r3, [r7, #16]

			/* Check if we have to free space */
			if (uiFreeSpace < uiSize)
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	d231      	bcs.n	80024a2 <xTraceEventBufferAlloc+0x126>
			{
				/* Check if this is a wrapping alloc */
				if ((pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead) < uiSize)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	429a      	cmp	r2, r3
 800244c:	d910      	bls.n	8002470 <xTraceEventBufferAlloc+0xf4>
					/* To avoid uiHead and uiTail from becoming the same we want to
					 * pop any events that would make uiTail equal uiHead before
					 * wrapping the head. */
					do
					{
						(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7ff ff60 	bl	8002314 <prvTraceEventBufferAllocPop>
					} while (pxTraceEventBuffer->uiTail == 0u);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f8      	beq.n	800244e <xTraceEventBufferAlloc+0xd2>

					pxTraceEventBuffer->uiSlack = pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	1ad2      	subs	r2, r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	619a      	str	r2, [r3, #24]
					pxTraceEventBuffer->uiHead = 0u;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
				}
				
				do
				{
					(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff ff4f 	bl	8002314 <prvTraceEventBufferAllocPop>
					uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	3b04      	subs	r3, #4
 8002482:	613b      	str	r3, [r7, #16]
				} while (uiFreeSpace < uiSize);
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	429a      	cmp	r2, r3
 800248a:	d3f1      	bcc.n	8002470 <xTraceEventBufferAlloc+0xf4>

				if (pxTraceEventBuffer->uiTail == 0u)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d106      	bne.n	80024a2 <xTraceEventBufferAlloc+0x126>
				{
					*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	441a      	add	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	601a      	str	r2, [r3, #0]
				}
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	441a      	add	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	601a      	str	r2, [r3, #0]

			pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead + uiSize);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	441a      	add	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	61da      	str	r2, [r3, #28]
 80024bc:	e071      	b.n	80025a2 <xTraceEventBufferAlloc+0x226>
	else
	{
		/* Since a consumer could potentially update tail (free) during the procedure
		 * we have to save it here to avoid problems with it changing during this call.
		 */
		uiHead = pxTraceEventBuffer->uiHead;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61bb      	str	r3, [r7, #24]
		uiTail = pxTraceEventBuffer->uiTail;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	617b      	str	r3, [r7, #20]

		if (uiHead >= uiTail)
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d34d      	bcc.n	800256e <xTraceEventBufferAlloc+0x1f2>
		{
			uiFreeSpace = (uiBufferSize - uiHead - sizeof(uint32_t)) + uiTail;
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	1ad2      	subs	r2, r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4413      	add	r3, r2
 80024dc:	3b04      	subs	r3, #4
 80024de:	613b      	str	r3, [r7, #16]

			if (uiFreeSpace < uiSize)
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d204      	bcs.n	80024f2 <xTraceEventBufferAlloc+0x176>
			{
				*ppvData = 0;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

				return TRC_FAIL;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e058      	b.n	80025a4 <xTraceEventBufferAlloc+0x228>
			}

			/* Copy data */
			if ((uiBufferSize - uiHead) > uiSize)
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d213      	bcs.n	8002526 <xTraceEventBufferAlloc+0x1aa>
			{
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	441a      	add	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (uiHead + uiSize) % uiBufferSize;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4413      	add	r3, r2
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	fbb3 f2f2 	udiv	r2, r3, r2
 8002518:	69f9      	ldr	r1, [r7, #28]
 800251a:	fb01 f202 	mul.w	r2, r1, r2
 800251e:	1a9a      	subs	r2, r3, r2
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	61da      	str	r2, [r3, #28]
 8002524:	e03d      	b.n	80025a2 <xTraceEventBufferAlloc+0x226>
			}
			else
			{
				uiFreeSpace = uiTail;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	613b      	str	r3, [r7, #16]

				if (uiFreeSpace < uiSize)
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	d204      	bcs.n	800253c <xTraceEventBufferAlloc+0x1c0>
				{
					*ppvData = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

					return TRC_FAIL;
 8002538:	2301      	movs	r3, #1
 800253a:	e033      	b.n	80025a4 <xTraceEventBufferAlloc+0x228>
				}

				/* Calculate slack */
				pxTraceEventBuffer->uiSlack = uiBufferSize - uiHead;
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	1ad2      	subs	r2, r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	619a      	str	r2, [r3, #24]

				*ppvData = pxTraceEventBuffer->puiBuffer;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (uiHead + pxTraceEventBuffer->uiSlack + uiSize) % uiBufferSize;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	441a      	add	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4413      	add	r3, r2
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002560:	69f9      	ldr	r1, [r7, #28]
 8002562:	fb01 f202 	mul.w	r2, r1, r2
 8002566:	1a9a      	subs	r2, r3, r2
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	61da      	str	r2, [r3, #28]
 800256c:	e019      	b.n	80025a2 <xTraceEventBufferAlloc+0x226>
			}
		}
		else
		{
			uiFreeSpace = uiTail - uiHead - sizeof(uint32_t);
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	3b04      	subs	r3, #4
 8002576:	613b      	str	r3, [r7, #16]

			if (uiFreeSpace < uiSize)
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	429a      	cmp	r2, r3
 800257e:	d204      	bcs.n	800258a <xTraceEventBufferAlloc+0x20e>
			{
				*ppvData = 0;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

				return TRC_FAIL;
 8002586:	2301      	movs	r3, #1
 8002588:	e00c      	b.n	80025a4 <xTraceEventBufferAlloc+0x228>
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	441a      	add	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	601a      	str	r2, [r3, #0]

			pxTraceEventBuffer->uiNextHead = (uiHead + uiSize);
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	441a      	add	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	61da      	str	r2, [r3, #28]
		}
	}

	return TRC_SUCCESS;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <xTraceEventBufferAllocCommit>:

traceResult xTraceEventBufferAllocCommit(TraceEventBuffer_t *pxTraceEventBuffer, const void *pvData, uint32_t uiSize, int32_t *piBytesWritten)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
	(void)pvData;

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceTimestampGetWraparounds(&pxTraceEventBuffer->uiTimerWraparounds) == TRC_SUCCESS);
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <xTraceEventBufferAllocCommit+0x34>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	621a      	str	r2, [r3, #32]

	/* Advance head location */
	pxTraceEventBuffer->uiHead = pxTraceEventBuffer->uiNextHead;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]

	/* Update bytes written */
	*piBytesWritten = (int32_t)uiSize;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	200039a0 	.word	0x200039a0

080025e4 <xTraceEventBufferTransferAll>:

	return TRC_SUCCESS;
}

traceResult xTraceEventBufferTransferAll(TraceEventBuffer_t* pxTraceEventBuffer, int32_t* piBytesWritten)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	int32_t iBytesWritten = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
	int32_t iSumBytesWritten = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
	TRC_ASSERT(pxTraceEventBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT(piBytesWritten != (void*)0);

	uiHead = pxTraceEventBuffer->uiHead;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	61bb      	str	r3, [r7, #24]
	uiTail = pxTraceEventBuffer->uiTail;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	617b      	str	r3, [r7, #20]
	uiSlack = pxTraceEventBuffer->uiSlack;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	613b      	str	r3, [r7, #16]

	/* Check if core event buffer is empty */
	if (uiHead == uiTail)
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	d104      	bne.n	800261a <xTraceEventBufferTransferAll+0x36>
	{
		/* Make sure this value is set in case it was passed uninitialized. */
		*piBytesWritten = 0;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

		return TRC_SUCCESS;
 8002616:	2300      	movs	r3, #0
 8002618:	e048      	b.n	80026ac <xTraceEventBufferTransferAll+0xc8>
	}

	/* Check if we can do a direct write or if we have to handle wrapping */
	if (uiHead > uiTail)
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	429a      	cmp	r2, r3
 8002620:	d90d      	bls.n	800263e <xTraceEventBufferTransferAll+0x5a>
	{
		/* No wrapping */
		(void)xTraceStreamPortWriteData(&pxTraceEventBuffer->puiBuffer[uiTail], (uiHead - uiTail), &iBytesWritten); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	18d1      	adds	r1, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	461a      	mov	r2, r3
 8002632:	2001      	movs	r0, #1
 8002634:	f7fe fe50 	bl	80012d8 <SEGGER_RTT_Write>
 8002638:	4603      	mov	r3, r0
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e028      	b.n	8002690 <xTraceEventBufferTransferAll+0xac>
	else
	{
		/* Wrapping */

		/* Try to write: tail -> end of buffer */
		(void)xTraceStreamPortWriteData(&pxTraceEventBuffer->puiBuffer[uiTail], (pxTraceEventBuffer->uiSize - uiTail - uiSlack), &iBytesWritten); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	18d1      	adds	r1, r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad2      	subs	r2, r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	461a      	mov	r2, r3
 8002654:	2001      	movs	r0, #1
 8002656:	f7fe fe3f 	bl	80012d8 <SEGGER_RTT_Write>
 800265a:	4603      	mov	r3, r0
 800265c:	60fb      	str	r3, [r7, #12]

		/* Did we manage to write all bytes? */
		if ((uint32_t)iBytesWritten == (pxTraceEventBuffer->uiSize - uiTail - uiSlack))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	1ad2      	subs	r2, r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4293      	cmp	r3, r2
 800266e:	d10f      	bne.n	8002690 <xTraceEventBufferTransferAll+0xac>
		{
			/* uiTail is moved to start of buffer */
			pxTraceEventBuffer->uiTail = 0u;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]

			iSumBytesWritten = iBytesWritten;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	61fb      	str	r3, [r7, #28]

			/* We zero this here in case it does not get zeroed by the streamport. This isn't really a problem with our
			 * streamports, but there has been cases with custom streamport forgetting to set this to 0 if there is no
			 * data to write. */
			iBytesWritten = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]

			/* Try to write: start of buffer -> head */
			(void)xTraceStreamPortWriteData(&pxTraceEventBuffer->puiBuffer[0], uiHead, &iBytesWritten); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4619      	mov	r1, r3
 8002686:	2001      	movs	r0, #1
 8002688:	f7fe fe26 	bl	80012d8 <SEGGER_RTT_Write>
 800268c:	4603      	mov	r3, r0
 800268e:	60fb      	str	r3, [r7, #12]
		}
	}
	
	/* Move tail */
	pxTraceEventBuffer->uiTail += (uint32_t)iBytesWritten;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	441a      	add	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	605a      	str	r2, [r3, #4]
	
	iSumBytesWritten += iBytesWritten;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	61fb      	str	r3, [r7, #28]

	*piBytesWritten = iSumBytesWritten;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <xTraceEventBufferClear>:

	return TRC_SUCCESS;
}

traceResult xTraceEventBufferClear(TraceEventBuffer_t* pxTraceEventBuffer)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxTraceEventBuffer != (void*)0);

	pxTraceEventBuffer->uiHead = 0u;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
	pxTraceEventBuffer->uiTail = 0u;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
	pxTraceEventBuffer->uiFree = pxTraceEventBuffer->uiSize;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	615a      	str	r2, [r3, #20]
	pxTraceEventBuffer->uiSlack = 0u;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
	pxTraceEventBuffer->uiNextHead = 0u;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]

	return TRC_SUCCESS;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <xTraceExtensionInitialize>:
		)

static TraceExtensionData_t *pxExtensionData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceExtensionInitialize(TraceExtensionData_t* const pxBuffer)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);
	
	pxExtensionData = pxBuffer;
 80026f4:	4a09      	ldr	r2, [pc, #36]	; (800271c <xTraceExtensionInitialize+0x30>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
	
	pxExtensionData->uxNextFreeExtensionEventId = TRC_EXTENSION_BASE_EVENT_ID;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <xTraceExtensionInitialize+0x30>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	22fd      	movs	r2, #253	; 0xfd
 8002700:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <xTraceExtensionInitialize+0x34>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <xTraceExtensionInitialize+0x34>)
 800270c:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	20000318 	.word	0x20000318
 8002720:	20003998 	.word	0x20003998

08002724 <xTraceHardwarePortInitCortexM>:
#if (((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) || (TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M_NRF_SD)) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK

void xTraceHardwarePortInitCortexM(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
	/* Make sure the DWT registers are unlocked, in case the debugger doesn't do this. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <xTraceHardwarePortInitCortexM+0x54>)
 800272a:	4a14      	ldr	r2, [pc, #80]	; (800277c <xTraceHardwarePortInitCortexM+0x58>)
 800272c:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800272e:	4b14      	ldr	r3, [pc, #80]	; (8002780 <xTraceHardwarePortInitCortexM+0x5c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a13      	ldr	r2, [pc, #76]	; (8002780 <xTraceHardwarePortInitCortexM+0x5c>)
 8002734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002738:	6013      	str	r3, [r2, #0]

	do
	{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <xTraceHardwarePortInitCortexM+0x5c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			xTraceError(TRC_ERROR_DWT_NOT_SUPPORTED);
 8002742:	2004      	movs	r0, #4
 8002744:	f7ff f982 	bl	8001a4c <xTraceError>
			break;
 8002748:	e013      	b.n	8002772 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <xTraceHardwarePortInitCortexM+0x60>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			xTraceError(TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 8002756:	2005      	movs	r0, #5
 8002758:	f7ff f978 	bl	8001a4c <xTraceError>
			break;
 800275c:	e009      	b.n	8002772 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <xTraceHardwarePortInitCortexM+0x64>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <xTraceHardwarePortInitCortexM+0x60>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a06      	ldr	r2, [pc, #24]	; (8002784 <xTraceHardwarePortInitCortexM+0x60>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6013      	str	r3, [r2, #0]

	} while (0);	/* breaks above jump here */
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e0001fb0 	.word	0xe0001fb0
 800277c:	c5acce55 	.word	0xc5acce55
 8002780:	e000edfc 	.word	0xe000edfc
 8002784:	e0001000 	.word	0xe0001000
 8002788:	e0001004 	.word	0xe0001004

0800278c <xTraceHeapCreate>:

#if (TRC_USE_HEAPS == 1)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceHeapCreate(const char *szName, TraceUnsignedBaseType_t uxCurrent, TraceUnsignedBaseType_t uxHighWaterMark, TraceUnsignedBaseType_t uxMax, TraceHeapHandle_t *pxHeapHandle)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
 8002790:	af04      	add	r7, sp, #16
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
	TraceUnsignedBaseType_t uxStates[3];

	uxStates[TRC_HEAP_STATE_INDEX_CURRENT] = uxCurrent;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	617b      	str	r3, [r7, #20]
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	61bb      	str	r3, [r7, #24]
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	61fb      	str	r3, [r7, #28]

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2303      	movs	r3, #3
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	2100      	movs	r1, #0
 80027bc:	20f2      	movs	r0, #242	; 0xf2
 80027be:	f000 f9fd 	bl	8002bbc <xTraceObjectRegisterInternal>
 80027c2:	4603      	mov	r3, r0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <xTraceHeapAlloc>:

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <xTraceHeapAlloc+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 80027de:	2301      	movs	r3, #1
 80027e0:	e024      	b.n	800282c <xTraceHeapAlloc+0x60>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d015      	beq.n	8002814 <xTraceHeapAlloc+0x48>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	613b      	str	r3, [r7, #16]

		uxCurrent += uxSize;
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

		if (uxCurrent > uxHighWaterMark)
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	429a      	cmp	r2, r3
 8002802:	d904      	bls.n	800280e <xTraceHeapAlloc+0x42>
		{
			uxHighWaterMark = uxCurrent;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	613b      	str	r3, [r7, #16]
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	609a      	str	r2, [r3, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <xTraceHeapAlloc+0x52>
 800281a:	2338      	movs	r3, #56	; 0x38
 800281c:	e000      	b.n	8002820 <xTraceHeapAlloc+0x54>
 800281e:	23e9      	movs	r3, #233	; 0xe9
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff faed 	bl	8001e04 <xTraceEventCreate2>

	return TRC_SUCCESS;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <xTraceHeapFree>:

traceResult xTraceHeapFree(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent;

	if (xHeapHandle == 0)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <xTraceHeapFree+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 8002846:	2301      	movs	r3, #1
 8002848:	e018      	b.n	800287c <xTraceHeapFree+0x48>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <xTraceHeapFree+0x30>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	617b      	str	r3, [r7, #20]

		uxCurrent -= uxSize;
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_FREE : PSF_EVENT_FREE_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <xTraceHeapFree+0x3a>
 800286a:	2339      	movs	r3, #57	; 0x39
 800286c:	e000      	b.n	8002870 <xTraceHeapFree+0x3c>
 800286e:	23ea      	movs	r3, #234	; 0xea
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fac5 	bl	8001e04 <xTraceEventCreate2>

	return TRC_SUCCESS;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <xTraceISRInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceISRData_t* pxTraceISRData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceISRInitialize(TraceISRData_t *pxBuffer)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	uint32_t uiStackIndex;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceISRData = pxBuffer;
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <xTraceISRInitialize+0x78>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]

	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e020      	b.n	80028da <xTraceISRInitialize+0x56>
	{
		TraceISRCoreData_t* pxCoreData = &pxTraceISRData->cores[uiCoreIndex];
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <xTraceISRInitialize+0x78>)
 800289a:	6819      	ldr	r1, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	60fb      	str	r3, [r7, #12]

		/* Initialize ISR stack */
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	e007      	b.n	80028c0 <xTraceISRInitialize+0x3c>
		{
			pxCoreData->handleStack[uiStackIndex] = 0;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	2100      	movs	r1, #0
 80028b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	3301      	adds	r3, #1
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b07      	cmp	r3, #7
 80028c4:	d9f4      	bls.n	80028b0 <xTraceISRInitialize+0x2c>
		}
		
		pxCoreData->stackIndex = -1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	621a      	str	r2, [r3, #32]
		pxCoreData->isPendingContextSwitch = 0u;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24
	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0db      	beq.n	8002898 <xTraceISRInitialize+0x14>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <xTraceISRInitialize+0x7c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <xTraceISRInitialize+0x7c>)
 80028ea:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	2000031c 	.word	0x2000031c
 8002900:	20003998 	.word	0x20003998

08002904 <xTraceInternalEventBufferInitialize>:
#include <stdarg.h>

static TraceMultiCoreEventBuffer_t *pxInternalEventBuffer TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceInternalEventBufferInitialize(uint8_t* puiBuffer, uint32_t uiSize)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
	/* uiSize must be larger than sizeof(TraceMultiCoreEventBuffer_t) or there will be no room for any data */
	/* This should never fail */
	TRC_ASSERT(uiSize > sizeof(TraceMultiCoreEventBuffer_t));
	
	/* pxInternalBuffer will be placed at the beginning of the puiBuffer */
	pxInternalEventBuffer = (TraceMultiCoreEventBuffer_t*)puiBuffer;
 800290e:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <xTraceInternalEventBufferInitialize+0x44>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6013      	str	r3, [r2, #0]

	/* Send in a an address pointing after the TraceMultiCoreEventBuffer_t */
	/* We need to check this */
	if (xTraceMultiCoreEventBufferInitialize(pxInternalEventBuffer, TRC_EVENT_BUFFER_OPTION_SKIP,
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <xTraceInternalEventBufferInitialize+0x44>)
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1d1a      	adds	r2, r3, #4
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	3b04      	subs	r3, #4
 8002920:	2100      	movs	r1, #0
 8002922:	f000 f8cd 	bl	8002ac0 <xTraceMultiCoreEventBufferInitialize>
 8002926:	4603      	mov	r3, r0
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <xTraceInternalEventBufferInitialize+0x2c>
		&puiBuffer[sizeof(TraceMultiCoreEventBuffer_t)], uiSize - sizeof(TraceMultiCoreEventBuffer_t)) == TRC_FAIL)
	{
		return TRC_FAIL;
 800292c:	2301      	movs	r3, #1
 800292e:	e006      	b.n	800293e <xTraceInternalEventBufferInitialize+0x3a>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_INTERNAL_EVENT_BUFFER);
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <xTraceInternalEventBufferInitialize+0x48>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002938:	4a04      	ldr	r2, [pc, #16]	; (800294c <xTraceInternalEventBufferInitialize+0x48>)
 800293a:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000320 	.word	0x20000320
 800294c:	20003998 	.word	0x20003998

08002950 <xTraceInternalEventBufferAlloc>:

traceResult xTraceInternalEventBufferAlloc(uint32_t uiSize, void **ppvData)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_INTERNAL_EVENT_BUFFER));

	return xTraceMultiCoreEventBufferAlloc(pxInternalEventBuffer, uiSize, ppvData);
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <xTraceInternalEventBufferAlloc+0x24>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fd09 	bl	800237c <xTraceEventBufferAlloc>
 800296a:	4603      	mov	r3, r0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000320 	.word	0x20000320

08002978 <xTraceInternalEventBufferAllocCommit>:

traceResult xTraceInternalEventBufferAllocCommit(void *pvData, uint32_t uiSize, int32_t *piBytesWritten)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
	(void)pvData;

	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_INTERNAL_EVENT_BUFFER));

	return xTraceMultiCoreEventBufferAllocCommit(pxInternalEventBuffer, pvData, uiSize, piBytesWritten);
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <xTraceInternalEventBufferAllocCommit+0x28>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	68f9      	ldr	r1, [r7, #12]
 8002990:	f7ff fe0c 	bl	80025ac <xTraceEventBufferAllocCommit>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000320 	.word	0x20000320

080029a4 <xTraceInternalEventBufferTransferAll>:
	
	return xTraceMultiCoreEventBufferPush(pxInternalEventBuffer, pvData, uiSize, piBytesWritten);
}

traceResult xTraceInternalEventBufferTransferAll(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
	int32_t iBytesWritten = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]

	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_INTERNAL_EVENT_BUFFER));

	return xTraceMultiCoreEventBufferTransferAll(pxInternalEventBuffer, &iBytesWritten);
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <xTraceInternalEventBufferTransferAll+0x24>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1d3a      	adds	r2, r7, #4
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f8ba 	bl	8002b30 <xTraceMultiCoreEventBufferTransferAll>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000320 	.word	0x20000320

080029cc <xTraceInternalEventBufferClear>:

	return TRC_SUCCESS;
}

traceResult xTraceInternalEventBufferClear()
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_INTERNAL_EVENT_BUFFER));
	
	return xTraceMultiCoreEventBufferClear(pxInternalEventBuffer);
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <xTraceInternalEventBufferClear+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f8d8 	bl	8002b8a <xTraceMultiCoreEventBufferClear>
 80029da:	4603      	mov	r3, r0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000320 	.word	0x20000320

080029e4 <xTraceKernelPortInitialize>:
static TraceKernelPortData_t* pxKernelPortData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

#define TRC_PORT_MALLOC(size) pvPortMalloc(size)

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceKernelPortDataBuffer_t, TraceKernelPortData_t);
	
	if (pxBuffer == 0)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <xTraceKernelPortInitialize+0x12>
	{
		return TRC_FAIL;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00b      	b.n	8002a0e <xTraceKernelPortInitialize+0x2a>
	}
	
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <xTraceKernelPortInitialize+0x38>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6013      	str	r3, [r2, #0]

	pxKernelPortData->xSystemHeapHandle = 0;
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <xTraceKernelPortInitialize+0x38>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
	pxKernelPortData->xTzCtrlHandle = 0;
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <xTraceKernelPortInitialize+0x38>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
	
	return TRC_SUCCESS;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000324 	.word	0x20000324

08002a20 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af02      	add	r7, sp, #8
		xTraceEntrySetOptions(xIdleHandle, TRC_ENTRY_OPTION_IDLE_NAME);
	}
#endif
	
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
	if (pxKernelPortData->xSystemHeapHandle == 0)
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <xTraceKernelPortEnable+0x64>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <xTraceKernelPortEnable+0x24>
	{
#if defined(configTOTAL_HEAP_SIZE)
		xTraceHeapCreate("System Heap", 0, 0, configTOTAL_HEAP_SIZE, &pxKernelPortData->xSystemHeapHandle);
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <xTraceKernelPortEnable+0x64>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4812      	ldr	r0, [pc, #72]	; (8002a88 <xTraceKernelPortEnable+0x68>)
 8002a40:	f7ff fea4 	bl	800278c <xTraceHeapCreate>
		xTraceHeapCreate("System Heap", 0, 0, (TRC_CFG_TOTAL_HEAP_SIZE), &pxKernelPortData->xSystemHeapHandle);
#endif
	}
#endif
	
	if (pxKernelPortData->xTzCtrlHandle == 0)
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <xTraceKernelPortEnable+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <xTraceKernelPortEnable+0x5c>
	{
		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, &pxKernelPortData->xTzCtrlHandle);
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <xTraceKernelPortEnable+0x64>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3304      	adds	r3, #4
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	2301      	movs	r3, #1
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a60:	490a      	ldr	r1, [pc, #40]	; (8002a8c <xTraceKernelPortEnable+0x6c>)
 8002a62:	480b      	ldr	r0, [pc, #44]	; (8002a90 <xTraceKernelPortEnable+0x70>)
 8002a64:	f006 fedd 	bl	8009822 <xTaskCreate>
#endif

		if (pxKernelPortData->xTzCtrlHandle == 0)
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <xTraceKernelPortEnable+0x64>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d104      	bne.n	8002a7c <xTraceKernelPortEnable+0x5c>
		{
			xTraceError(TRC_ERROR_TZCTRLTASK_NOT_CREATED);
 8002a72:	2006      	movs	r0, #6
 8002a74:	f7fe ffea 	bl	8001a4c <xTraceError>

			return TRC_FAIL;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <xTraceKernelPortEnable+0x5e>
		}
	}
	
	return TRC_SUCCESS;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000324 	.word	0x20000324
 8002a88:	0800bad0 	.word	0x0800bad0
 8002a8c:	0800badc 	.word	0x0800badc
 8002a90:	08002a95 	.word	0x08002a95

08002a94 <TzCtrl>:

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		xTraceTzCtrl();
 8002a9c:	f000 ff10 	bl	80038c0 <xTraceTzCtrl>

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 8002aa0:	200a      	movs	r0, #10
 8002aa2:	f007 f829 	bl	8009af8 <vTaskDelay>
		xTraceTzCtrl();
 8002aa6:	e7f9      	b.n	8002a9c <TzCtrl+0x8>

08002aa8 <xTraceKernelPortGetSystemHeapHandle>:
#endif

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
	return pxKernelPortData->xSystemHeapHandle;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <xTraceKernelPortGetSystemHeapHandle+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	20000324 	.word	0x20000324

08002ac0 <xTraceMultiCoreEventBufferInitialize>:

#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

traceResult xTraceMultiCoreEventBufferInitialize(TraceMultiCoreEventBuffer_t* const pxTraceMultiCoreEventBuffer, uint32_t uiOptions,
	uint8_t* puiBuffer, uint32_t uiSize)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
	TRC_ASSERT(pxTraceMultiCoreEventBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT(puiBuffer != (void*)0);

	uiBufferSizePerCore = ((uiSize / (uint32_t)(TRC_CFG_CORE_COUNT)) / sizeof(TraceUnsignedBaseType_t)) * sizeof(TraceUnsignedBaseType_t); /* BaseType aligned */
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f023 0303 	bic.w	r3, r3, #3
 8002ad4:	613b      	str	r3, [r7, #16]

	/* This should never fail */
	TRC_ASSERT(uiBufferSizePerCore != 0u);

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e021      	b.n	8002b20 <xTraceMultiCoreEventBufferInitialize+0x60>
	{
		/* Set the event buffer pointers to point into the allocated space we have been given, this ensures
		 * a flat memory layout necessary for usage in streaming snaphot. */
		pxTraceMultiCoreEventBuffer->xEventBuffer[i] = (TraceEventBuffer_t*)(&puiBuffer[i * uiBufferSizePerCore]); /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/ /*cstat !MISRAC2004-17.4_b We need to access a spcific point in the buffer*/
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	18d1      	adds	r1, r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		/* Initialize the event buffer structure with its memory buffer placed following its own structure data. */
		/* We need to check this */
		if (xTraceEventBufferInitialize(pxTraceMultiCoreEventBuffer->xEventBuffer[i], uiOptions,
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
			&puiBuffer[(i * uiBufferSizePerCore) + sizeof(TraceEventBuffer_t)], /*cstat !MISRAC2004-17.4_b We need to access a specific point in the buffer*/
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	fb02 f303 	mul.w	r3, r2, r3
 8002b00:	332c      	adds	r3, #44	; 0x2c
		if (xTraceEventBufferInitialize(pxTraceMultiCoreEventBuffer->xEventBuffer[i], uiOptions,
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	441a      	add	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	3b2c      	subs	r3, #44	; 0x2c
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	f7ff fbd0 	bl	80022b0 <xTraceEventBufferInitialize>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <xTraceMultiCoreEventBufferInitialize+0x5a>
			uiBufferSizePerCore - sizeof(TraceEventBuffer_t)) == TRC_FAIL)
		{
			return TRC_FAIL;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e006      	b.n	8002b28 <xTraceMultiCoreEventBufferInitialize+0x68>
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0da      	beq.n	8002adc <xTraceMultiCoreEventBufferInitialize+0x1c>
		}
	}

	return TRC_SUCCESS;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <xTraceMultiCoreEventBufferTransferAll>:

#endif

/*cstat !MISRAC2012-Rule-5.1 Yes, these are long names*/
traceResult xTraceMultiCoreEventBufferTransferAll(const TraceMultiCoreEventBuffer_t* const pxTraceMultiCoreEventBuffer, int32_t* piBytesWritten)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	int32_t iBytesWritten = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
	TRC_ASSERT(pxTraceMultiCoreEventBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT(piBytesWritten != (void*)0);

	*piBytesWritten = 0;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

	for (uiCoreId = 0u; uiCoreId < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreId++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e017      	b.n	8002b7a <xTraceMultiCoreEventBufferTransferAll+0x4a>
	{
		/* We need to check this */
		if (xTraceEventBufferTransferAll(pxTraceMultiCoreEventBuffer->xEventBuffer[uiCoreId], &iBytesWritten) == TRC_FAIL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b52:	f107 0208 	add.w	r2, r7, #8
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fd43 	bl	80025e4 <xTraceEventBufferTransferAll>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <xTraceMultiCoreEventBufferTransferAll+0x38>
		{
			return TRC_FAIL;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e00c      	b.n	8002b82 <xTraceMultiCoreEventBufferTransferAll+0x52>
		}

		*piBytesWritten += iBytesWritten;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	441a      	add	r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	601a      	str	r2, [r3, #0]
	for (uiCoreId = 0u; uiCoreId < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreId++)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3301      	adds	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0e4      	beq.n	8002b4a <xTraceMultiCoreEventBufferTransferAll+0x1a>
	}

	return TRC_SUCCESS;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <xTraceMultiCoreEventBufferClear>:

	return TRC_SUCCESS;
}

traceResult xTraceMultiCoreEventBufferClear(const TraceMultiCoreEventBuffer_t* const pxTraceMultiCoreEventBuffer)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
	uint32_t uiCoreId;

	/* This should never fail */
	TRC_ASSERT(pxTraceMultiCoreEventBuffer != (void*)0);

	for (uiCoreId = 0u; uiCoreId < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreId++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	e009      	b.n	8002bac <xTraceMultiCoreEventBufferClear+0x22>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventBufferClear(pxTraceMultiCoreEventBuffer->xEventBuffer[uiCoreId]) == TRC_SUCCESS);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fd87 	bl	80026b4 <xTraceEventBufferClear>
	for (uiCoreId = 0u; uiCoreId < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreId++)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f2      	beq.n	8002b98 <xTraceMultiCoreEventBufferClear+0xe>
	}

	return TRC_SUCCESS;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <xTraceObjectRegisterInternal>:

traceResult prvTraceObjectSendNameEvent(void* pvObject, const char* szName, uint32_t uiLength);

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08e      	sub	sp, #56	; 0x38
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	TraceEventHandle_t xEventHandle = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bce:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	TRC_ASSERT(pxObjectHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8002bd8:	2301      	movs	r3, #1
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	f383 8810 	msr	PRIMASK, r3
}
 8002be2:	bf00      	nop

	if (pvObject != (void*)0)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01a      	beq.n	8002c20 <xTraceObjectRegisterInternal+0x64>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8002bea:	f107 0318 	add.w	r3, r7, #24
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fda4 	bl	800173c <xTraceEntryCreate>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d104      	bne.n	8002c04 <xTraceObjectRegisterInternal+0x48>
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <xTraceObjectRegisterInternal+0x4a>
 8002c04:	2301      	movs	r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <xTraceObjectRegisterInternal+0x5e>
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	f383 8810 	msr	PRIMASK, r3
}
 8002c14:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e0cf      	b.n	8002dba <xTraceObjectRegisterInternal+0x1fe>
		}
		
		pvAddress = pvObject;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	e012      	b.n	8002c46 <xTraceObjectRegisterInternal+0x8a>
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8002c20:	f107 0318 	add.w	r3, r7, #24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fd89 	bl	800173c <xTraceEntryCreate>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d107      	bne.n	8002c40 <xTraceObjectRegisterInternal+0x84>
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f383 8810 	msr	PRIMASK, r3
}
 8002c3a:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0bc      	b.n	8002dba <xTraceObjectRegisterInternal+0x1fe>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	613b      	str	r3, [r7, #16]
	}

	for (i = 0u; i < uxStateCount; i++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4a:	e00c      	b.n	8002c66 <xTraceObjectRegisterInternal+0xaa>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c52:	4413      	add	r3, r2
 8002c54:	69b9      	ldr	r1, [r7, #24]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < uxStateCount; i++)
 8002c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c62:	3301      	adds	r3, #1
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
 8002c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d3ee      	bcc.n	8002c4c <xTraceObjectRegisterInternal+0x90>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	6919      	ldr	r1, [r3, #16]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c76:	430a      	orrs	r2, r1
 8002c78:	611a      	str	r2, [r3, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f383 8810 	msr	PRIMASK, r3
}
 8002c8a:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <xTraceObjectRegisterInternal+0xe8>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d004      	beq.n	8002ca4 <xTraceObjectRegisterInternal+0xe8>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f8b2 	bl	8002e08 <xTraceObjectSetName>
	}

	/* Send the create event, if possible */
	/*We need to check this */
	if (xTraceEventBegin(uiEventCode, sizeof(void*) + (uxStateCount * sizeof(TraceUnsignedBaseType_t)), &xEventHandle) == TRC_SUCCESS)
 8002ca4:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <xTraceObjectRegisterInternal+0x208>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d047      	beq.n	8002d40 <xTraceObjectRegisterInternal+0x184>
 8002cb0:	4b45      	ldr	r3, [pc, #276]	; (8002dc8 <xTraceObjectRegisterInternal+0x20c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d042      	beq.n	8002d40 <xTraceObjectRegisterInternal+0x184>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	3303      	adds	r3, #3
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	f107 0214 	add.w	r2, r7, #20
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff f998 	bl	8001ffc <xTraceEventBeginRawOffline>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d134      	bne.n	8002d3c <xTraceObjectRegisterInternal+0x180>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	b21a      	sxth	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	3b08      	subs	r3, #8
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	031b      	lsls	r3, r3, #12
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b21a      	sxth	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	b292      	uxth	r2, r2
 8002cee:	801a      	strh	r2, [r3, #0]
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <xTraceObjectRegisterInternal+0x210>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	805a      	strh	r2, [r3, #2]
 8002cfe:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <xTraceObjectRegisterInternal+0x214>)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <xTraceObjectRegisterInternal+0x218>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d204      	bcs.n	8002d22 <xTraceObjectRegisterInternal+0x166>
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <xTraceObjectRegisterInternal+0x218>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	3201      	adds	r2, #1
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <xTraceObjectRegisterInternal+0x218>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6852      	ldr	r2, [r2, #4]
 8002d2c:	615a      	str	r2, [r3, #20]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3208      	adds	r2, #8
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e002      	b.n	8002d42 <xTraceObjectRegisterInternal+0x186>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <xTraceObjectRegisterInternal+0x186>
 8002d40:	2300      	movs	r3, #0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d038      	beq.n	8002db8 <xTraceObjectRegisterInternal+0x1fc>
	{
		(void)xTraceEventAddPointer(xEventHandle, pvAddress);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 0303 	bic.w	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	3204      	adds	r2, #4
 8002d60:	609a      	str	r2, [r3, #8]
		for (i = 0u; i < uxStateCount; i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
 8002d66:	e014      	b.n	8002d92 <xTraceObjectRegisterInternal+0x1d6>
		{
			(void)xTraceEventAddUnsignedBaseType(xEventHandle, uxStates[i]);
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d6e:	441a      	add	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 0303 	bic.w	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3204      	adds	r2, #4
 8002d8a:	609a      	str	r2, [r3, #8]
		for (i = 0u; i < uxStateCount; i++)
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8e:	3301      	adds	r3, #1
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
 8002d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d3e6      	bcc.n	8002d68 <xTraceObjectRegisterInternal+0x1ac>
		}
		(void)xTraceEventEnd(xEventHandle); /*cstat !MISRAC2012-Rule-17.7 Suppress ignored return value check (inside macro)*/
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <xTraceObjectRegisterInternal+0x208>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <xTraceObjectRegisterInternal+0x1fc>
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <xTraceObjectRegisterInternal+0x20c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <xTraceObjectRegisterInternal+0x1fc>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff f9ee 	bl	8002194 <xTraceEventEndOffline>
	}

	return TRC_SUCCESS;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3738      	adds	r7, #56	; 0x38
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20003998 	.word	0x20003998
 8002dc8:	20003990 	.word	0x20003990
 8002dcc:	20000314 	.word	0x20000314
 8002dd0:	e0001004 	.word	0xe0001004
 8002dd4:	200039a0 	.word	0x200039a0

08002dd8 <xTraceObjectRegister>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegister(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxState, TraceObjectHandle_t *pxObjectHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af04      	add	r7, sp, #16
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, pxObjectHandle);
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	9302      	str	r3, [sp, #8]
 8002dea:	2300      	movs	r3, #0
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	463b      	mov	r3, r7
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2301      	movs	r3, #1
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff fedf 	bl	8002bbc <xTraceObjectRegisterInternal>
 8002dfe:	4603      	mov	r3, r0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <xTraceObjectSetName>:
	return xTraceEntryDelete(xObjectHandle);
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
	void* pvObject = (void*)0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    /* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)pvObject;

	if (szName == (void*)0)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <xTraceObjectSetName+0x18>
	{
		szName = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <xTraceObjectSetName+0x60>)
 8002e1e:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e002      	b.n	8002e32 <xTraceObjectSetName+0x2a>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	4413      	add	r3, r2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <xTraceObjectSetName+0x3c>
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b7f      	cmp	r3, #127	; 0x7f
 8002e42:	d9f3      	bls.n	8002e2c <xTraceObjectSetName+0x24>

	uiLength = i;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	613b      	str	r3, [r7, #16]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 0)
	/* Send name event now since we don't do it on delete events */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(prvTraceObjectSendNameEvent(pvObject, szName, uiLength) == TRC_SUCCESS);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f864 	bl	8002f1c <prvTraceObjectSendNameEvent>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	6839      	ldr	r1, [r7, #0]
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fe fcfb 	bl	8001854 <xTraceEntrySetSymbol>
 8002e5e:	4603      	mov	r3, r0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	0800bae4 	.word	0x0800bae4

08002e6c <xTraceObjectRegisterWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegister(uiEventCode, pvObject, szName, uxState, &xObjectHandle);
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7ff ffa6 	bl	8002dd8 <xTraceObjectRegister>
 8002e8c:	4603      	mov	r3, r0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <xTraceObjectSetNameWithoutHandle>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetNameWithoutHandle(void* pvObject, const char* szName)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b08a      	sub	sp, #40	; 0x28
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ea6:	69bb      	ldr	r3, [r7, #24]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f383 8810 	msr	PRIMASK, r3
}
 8002eb4:	bf00      	nop

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7fe fc9d 	bl	80017fc <xTraceEntryFind>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d117      	bne.n	8002ef8 <xTraceObjectSetNameWithoutHandle+0x62>
	{
		/* No previous entry found. Create one. */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fc35 	bl	800173c <xTraceEntryCreate>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d104      	bne.n	8002ee2 <xTraceObjectSetNameWithoutHandle+0x4c>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e000      	b.n	8002ee4 <xTraceObjectSetNameWithoutHandle+0x4e>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <xTraceObjectSetNameWithoutHandle+0x62>
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f383 8810 	msr	PRIMASK, r3
}
 8002ef2:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e00c      	b.n	8002f12 <xTraceObjectSetNameWithoutHandle+0x7c>
		}
	}

	xResult = xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6839      	ldr	r1, [r7, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff83 	bl	8002e08 <xTraceObjectSetName>
 8002f02:	6238      	str	r0, [r7, #32]
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f383 8810 	msr	PRIMASK, r3
}
 8002f0e:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8002f10:	6a3b      	ldr	r3, [r7, #32]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3728      	adds	r7, #40	; 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <prvTraceObjectSendNameEvent>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult prvTraceObjectSendNameEvent(void* const pvObject, const char* szName, uint32_t uiLength)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
	uint32_t uiValue = 0u;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
	TraceEventHandle_t xEventHandle = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]

	if (xTraceEventBegin(PSF_EVENT_OBJ_NAME, sizeof(void*) + uiLength, &xEventHandle) == TRC_SUCCESS)
 8002f30:	4b46      	ldr	r3, [pc, #280]	; (800304c <prvTraceObjectSendNameEvent+0x130>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d045      	beq.n	8002fc8 <prvTraceObjectSendNameEvent+0xac>
 8002f3c:	4b44      	ldr	r3, [pc, #272]	; (8003050 <prvTraceObjectSendNameEvent+0x134>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d040      	beq.n	8002fc8 <prvTraceObjectSendNameEvent+0xac>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	f107 0210 	add.w	r2, r7, #16
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff f853 	bl	8001ffc <xTraceEventBeginRawOffline>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d133      	bne.n	8002fc4 <prvTraceObjectSendNameEvent+0xa8>
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	3b08      	subs	r3, #8
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	031b      	lsls	r3, r3, #12
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	f043 0303 	orr.w	r3, r3, #3
 8002f6e:	b21a      	sxth	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b292      	uxth	r2, r2
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	4b36      	ldr	r3, [pc, #216]	; (8003054 <prvTraceObjectSendNameEvent+0x138>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	b292      	uxth	r2, r2
 8002f84:	805a      	strh	r2, [r3, #2]
 8002f86:	4a34      	ldr	r2, [pc, #208]	; (8003058 <prvTraceObjectSendNameEvent+0x13c>)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4b31      	ldr	r3, [pc, #196]	; (800305c <prvTraceObjectSendNameEvent+0x140>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d204      	bcs.n	8002faa <prvTraceObjectSendNameEvent+0x8e>
 8002fa0:	4b2e      	ldr	r3, [pc, #184]	; (800305c <prvTraceObjectSendNameEvent+0x140>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	3201      	adds	r2, #1
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4b2b      	ldr	r3, [pc, #172]	; (800305c <prvTraceObjectSendNameEvent+0x140>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6852      	ldr	r2, [r2, #4]
 8002fb4:	615a      	str	r2, [r3, #20]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	3208      	adds	r2, #8
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e002      	b.n	8002fca <prvTraceObjectSendNameEvent+0xae>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e000      	b.n	8002fca <prvTraceObjectSendNameEvent+0xae>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d039      	beq.n	8003042 <prvTraceObjectSendNameEvent+0x126>
	{
		(void)xTraceEventAddPointer(xEventHandle, pvObject);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	3204      	adds	r2, #4
 8002fe8:	609a      	str	r2, [r3, #8]
		(void)xTraceEventAddString(xEventHandle, szName, uiLength);
 8002fea:	6938      	ldr	r0, [r7, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3303      	adds	r3, #3
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	f7ff f93b 	bl	8002270 <xTraceEventAddData>

		/* Check if we can truncate */
		(void)xTraceEventPayloadRemaining(xEventHandle, &uiValue);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
		if (uiValue > 0u)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <prvTraceObjectSendNameEvent+0x108>
		{
			(void)xTraceEventAdd8(xEventHandle, 0u);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4413      	add	r3, r2
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	3201      	adds	r2, #1
 8003022:	609a      	str	r2, [r3, #8]
		}

		(void)xTraceEventEnd(xEventHandle); /*cstat !MISRAC2012-Rule-17.7 Suppress ignored return value check (inside macro)*/
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <prvTraceObjectSendNameEvent+0x130>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <prvTraceObjectSendNameEvent+0x126>
 8003030:	4b07      	ldr	r3, [pc, #28]	; (8003050 <prvTraceObjectSendNameEvent+0x134>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <prvTraceObjectSendNameEvent+0x126>
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff f8a9 	bl	8002194 <xTraceEventEndOffline>
	}

	return TRC_SUCCESS;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20003998 	.word	0x20003998
 8003050:	20003990 	.word	0x20003990
 8003054:	20000314 	.word	0x20000314
 8003058:	e0001004 	.word	0xe0001004
 800305c:	200039a0 	.word	0x200039a0

08003060 <xTracePrintInitialize>:
static traceResult prvTraceVPrintF(const TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList);

static TracePrintData_t *pxPrintData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTracePrintInitialize(TracePrintData_t *pxBuffer)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxPrintData = pxBuffer;
 8003068:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <xTracePrintInitialize+0x38>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6013      	str	r3, [r2, #0]

	pxPrintData->defaultChannel = 0;
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <xTracePrintInitialize+0x38>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
	pxPrintData->consoleChannel = 0;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <xTracePrintInitialize+0x38>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	605a      	str	r2, [r3, #4]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_PRINT);
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <xTracePrintInitialize+0x3c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003086:	4a05      	ldr	r2, [pc, #20]	; (800309c <xTracePrintInitialize+0x3c>)
 8003088:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	20000328 	.word	0x20000328
 800309c:	20003998 	.word	0x20003998

080030a0 <xTracePrint>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTracePrint(TraceStringHandle_t xChannel, const char* szString)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
	uint32_t uiLength;
	uint32_t i;
	
	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <xTracePrint+0x64>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <xTracePrint+0x1a>
	{
		return TRC_FAIL;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01f      	b.n	80030fa <xTracePrint+0x5a>
	}

	if (szString == (void*)0)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <xTracePrint+0x24>
	{
		szString = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <xTracePrint+0x68>)
 80030c2:	603b      	str	r3, [r7, #0]
	}

	for (i = 0u; (szString[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e002      	b.n	80030d0 <xTracePrint+0x30>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3301      	adds	r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <xTracePrint+0x42>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b7f      	cmp	r3, #127	; 0x7f
 80030e0:	d9f3      	bls.n	80030ca <xTracePrint+0x2a>

	uiLength = i + 1u; /* Null termination */
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]

	return prvTraceVPrintF(xChannel, szString, uiLength, 0u, (va_list*)0);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 Suppress conversion of pointer to integer check*/ /*cstat !MISRAC2012-Rule-11.9 Suppress NULL recommendation*/
 80030e8:	2300      	movs	r3, #0
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	2300      	movs	r3, #0
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	6839      	ldr	r1, [r7, #0]
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f880 	bl	80031f8 <prvTraceVPrintF>
 80030f8:	4603      	mov	r3, r0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20003998 	.word	0x20003998
 8003108:	0800bae8 	.word	0x0800bae8

0800310c <xTracePrintF>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-16.1 Suppress variable parameter count check*/
traceResult xTracePrintF(TraceStringHandle_t xChannel, const char* szFormat, ...)
{
 800310c:	b40e      	push	{r1, r2, r3}
 800310e:	b580      	push	{r7, lr}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
	traceResult xResult;
	va_list xVariableList; /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <xTracePrintF+0x40>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <xTracePrintF+0x1a>
	{
		return TRC_FAIL;
 8003122:	2301      	movs	r3, #1
 8003124:	e00b      	b.n	800313e <xTracePrintF+0x32>
	}

	va_start(xVariableList, szFormat);
 8003126:	f107 0320 	add.w	r3, r7, #32
 800312a:	60bb      	str	r3, [r7, #8]
	xResult = xTraceVPrintF(xChannel, szFormat, &xVariableList);
 800312c:	f107 0308 	add.w	r3, r7, #8
 8003130:	461a      	mov	r2, r3
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f80b 	bl	8003150 <xTraceVPrintF>
 800313a:	60f8      	str	r0, [r7, #12]
	va_end(xVariableList);

	return xResult;
 800313c:	68fb      	ldr	r3, [r7, #12]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003148:	b003      	add	sp, #12
 800314a:	4770      	bx	lr
 800314c:	20003998 	.word	0x20003998

08003150 <xTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
traceResult xTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, va_list* pxVariableList)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	uint32_t uiArgs = 0u;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]
	uint32_t uiLength;

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <xTraceVPrintF+0xa0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <xTraceVPrintF+0x20>
	{
		return TRC_FAIL;
 800316c:	2301      	movs	r3, #1
 800316e:	e03b      	b.n	80031e8 <xTraceVPrintF+0x98>
	}

	if (szFormat == (void*)0)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <xTraceVPrintF+0x2a>
	{
		szFormat = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003176:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <xTraceVPrintF+0xa4>)
 8003178:	60bb      	str	r3, [r7, #8]
	}

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	e01e      	b.n	80031be <xTraceVPrintF+0x6e>
	{
		if (szFormat[i] == '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	4413      	add	r3, r2
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b25      	cmp	r3, #37	; 0x25
 800318a:	d115      	bne.n	80031b8 <xTraceVPrintF+0x68>
		{
			if (szFormat[i + 1u] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	3301      	adds	r3, #1
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	4413      	add	r3, r2
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <xTraceVPrintF+0x66>
			{
				/* Found end of string, let for loop detect it */
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
			}

			if (szFormat[i + 1u] != '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4413      	add	r3, r2
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b25      	cmp	r3, #37	; 0x25
 80031a6:	d002      	beq.n	80031ae <xTraceVPrintF+0x5e>
			{
				uiArgs++;        /* Found an argument */
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	3301      	adds	r3, #1
 80031ac:	61bb      	str	r3, [r7, #24]
			}

			/* Move past format specifier or non-argument '%' */
			i++; /*cstat !MISRAC2004-13.6 Suppress i increment inside for loop check*/
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3301      	adds	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e000      	b.n	80031b8 <xTraceVPrintF+0x68>
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
 80031b6:	bf00      	nop
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	3301      	adds	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	4413      	add	r3, r2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <xTraceVPrintF+0x80>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2b7f      	cmp	r3, #127	; 0x7f
 80031ce:	d9d7      	bls.n	8003180 <xTraceVPrintF+0x30>
		}
	}

	uiLength = i + 1u; /* Null termination */
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	3301      	adds	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]

	return prvTraceVPrintF(xChannel, szFormat, uiLength, uiArgs, pxVariableList);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f809 	bl	80031f8 <prvTraceVPrintF>
 80031e6:	4603      	mov	r3, r0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3720      	adds	r7, #32
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20003998 	.word	0x20003998
 80031f4:	0800bae8 	.word	0x0800bae8

080031f8 <prvTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
static traceResult prvTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
	TraceEventHandle_t xEventHandle = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
	uint32_t i, uiRemaining = 0u;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
	uint32_t uiValue = 0u;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
	const uint32_t uiEventCode = PSF_EVENT_USER_EVENT + 1u + uiArgs; /* Add channel (1) */
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	3391      	adds	r3, #145	; 0x91
 8003216:	623b      	str	r3, [r7, #32]
	const uint32_t uiSize = sizeof(void*) + (uiArgs * sizeof(TraceUnsignedBaseType_t)) + uiLength; /* Add channel (sizeof(void*)) */
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	61fb      	str	r3, [r7, #28]

	if (xChannel == 0)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d113      	bne.n	8003252 <prvTraceVPrintF+0x5a>
	{
		if (pxPrintData->defaultChannel == 0)
 800322a:	4b67      	ldr	r3, [pc, #412]	; (80033c8 <prvTraceVPrintF+0x1d0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <prvTraceVPrintF+0x52>
		{
			/* Channel is not present */
			if (xTraceStringRegister("Default", &pxPrintData->defaultChannel) == TRC_FAIL)
 8003234:	4b64      	ldr	r3, [pc, #400]	; (80033c8 <prvTraceVPrintF+0x1d0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4619      	mov	r1, r3
 800323a:	4864      	ldr	r0, [pc, #400]	; (80033cc <prvTraceVPrintF+0x1d4>)
 800323c:	f000 fd8e 	bl	8003d5c <xTraceStringRegister>
 8003240:	4603      	mov	r3, r0
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <prvTraceVPrintF+0x52>
			{
				return TRC_FAIL;
 8003246:	2301      	movs	r3, #1
 8003248:	e0ba      	b.n	80033c0 <prvTraceVPrintF+0x1c8>
			}
		}

		xChannel = pxPrintData->defaultChannel; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800324a:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <prvTraceVPrintF+0x1d0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
	}

	/* Added channel to uiEventCode and uiSize */
	if (xTraceEventBegin(uiEventCode, uiSize , &xEventHandle) == TRC_FAIL)
 8003252:	4b5f      	ldr	r3, [pc, #380]	; (80033d0 <prvTraceVPrintF+0x1d8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d046      	beq.n	80032ec <prvTraceVPrintF+0xf4>
 800325e:	4b5d      	ldr	r3, [pc, #372]	; (80033d4 <prvTraceVPrintF+0x1dc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d041      	beq.n	80032ec <prvTraceVPrintF+0xf4>
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3308      	adds	r3, #8
 800326c:	f107 0218 	add.w	r2, r7, #24
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fec2 	bl	8001ffc <xTraceEventBeginRawOffline>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d134      	bne.n	80032e8 <prvTraceVPrintF+0xf0>
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	b21a      	sxth	r2, r3
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	3b08      	subs	r3, #8
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	b29b      	uxth	r3, r3
 800328c:	031b      	lsls	r3, r3, #12
 800328e:	b21b      	sxth	r3, r3
 8003290:	4313      	orrs	r3, r2
 8003292:	b21a      	sxth	r2, r3
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b292      	uxth	r2, r2
 800329a:	801a      	strh	r2, [r3, #0]
 800329c:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <prvTraceVPrintF+0x1e0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	b292      	uxth	r2, r2
 80032a8:	805a      	strh	r2, [r3, #2]
 80032aa:	4a4c      	ldr	r2, [pc, #304]	; (80033dc <prvTraceVPrintF+0x1e4>)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <prvTraceVPrintF+0x1e8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d204      	bcs.n	80032ce <prvTraceVPrintF+0xd6>
 80032c4:	4b46      	ldr	r3, [pc, #280]	; (80033e0 <prvTraceVPrintF+0x1e8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	3201      	adds	r2, #1
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <prvTraceVPrintF+0x1e8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6852      	ldr	r2, [r2, #4]
 80032d8:	615a      	str	r2, [r3, #20]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	3208      	adds	r2, #8
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	2300      	movs	r3, #0
 80032e6:	e002      	b.n	80032ee <prvTraceVPrintF+0xf6>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <prvTraceVPrintF+0xf6>
 80032ec:	2301      	movs	r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <prvTraceVPrintF+0xfe>
	{
		return TRC_FAIL;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e064      	b.n	80033c0 <prvTraceVPrintF+0x1c8>
	}

	/* Add xChannel */
	(void)xTraceEventAddPointer(xEventHandle, (void*)xChannel);
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	3204      	adds	r2, #4
 8003310:	609a      	str	r2, [r3, #8]

	/* Add all arguments */
	for (i = 0u; i < uiArgs; i++)
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	e015      	b.n	8003344 <prvTraceVPrintF+0x14c>
	{
		(void)xTraceEventAddUnsignedBaseType(xEventHandle, va_arg(*pxVariableList, TraceUnsignedBaseType_t));
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f023 0303 	bic.w	r3, r3, #3
 8003324:	441a      	add	r2, r3
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	1d18      	adds	r0, r3, #4
 800332c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800332e:	6008      	str	r0, [r1, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	3204      	adds	r2, #4
 800333c:	609a      	str	r2, [r3, #8]
	for (i = 0u; i < uiArgs; i++)
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	3301      	adds	r3, #1
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
 8003344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d3e5      	bcc.n	8003318 <prvTraceVPrintF+0x120>
	}

	(void)xTraceEventPayloadRemaining(xEventHandle, &uiRemaining);
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	617b      	str	r3, [r7, #20]
	if (uiRemaining < uiLength)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d902      	bls.n	8003366 <prvTraceVPrintF+0x16e>
	{
		uiLength = uiRemaining - 1u; /* Make room for null termination */ /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3b01      	subs	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
	}

	/* Add format string */
	(void)xTraceEventAddString(xEventHandle, szFormat, uiLength);
 8003366:	69b8      	ldr	r0, [r7, #24]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3303      	adds	r3, #3
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	461a      	mov	r2, r3
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	f7fe ff7d 	bl	8002270 <xTraceEventAddData>

	/* Check if we can truncate */
	(void)xTraceEventPayloadRemaining(xEventHandle, &uiValue);
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	613b      	str	r3, [r7, #16]
	if (uiValue > 0u)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <prvTraceVPrintF+0x1a8>
	{
		(void)xTraceEventAdd8(xEventHandle, 0u);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4413      	add	r3, r2
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	3201      	adds	r2, #1
 800339e:	609a      	str	r2, [r3, #8]
	}

	(void)xTraceEventEnd(xEventHandle); /*cstat !MISRAC2012-Rule-17.7 Suppress ignored return value check (inside macro)*/
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <prvTraceVPrintF+0x1d8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <prvTraceVPrintF+0x1c6>
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <prvTraceVPrintF+0x1dc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <prvTraceVPrintF+0x1c6>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe feeb 	bl	8002194 <xTraceEventEndOffline>

	return TRC_SUCCESS;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3728      	adds	r7, #40	; 0x28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000328 	.word	0x20000328
 80033cc:	0800bafc 	.word	0x0800bafc
 80033d0:	20003998 	.word	0x20003998
 80033d4:	20003990 	.word	0x20003990
 80033d8:	20000314 	.word	0x20000314
 80033dc:	e0001004 	.word	0xe0001004
 80033e0:	200039a0 	.word	0x200039a0

080033e4 <xTraceStaticBufferInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceStaticBufferTable_t *pxTraceStaticBufferTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStaticBufferInitialize(TraceStaticBufferTable_t *pxBuffer)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceStaticBufferTable = pxBuffer;
 80033ec:	4a07      	ldr	r2, [pc, #28]	; (800340c <xTraceStaticBufferInitialize+0x28>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6013      	str	r3, [r2, #0]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <xTraceStaticBufferInitialize+0x2c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fa:	4a05      	ldr	r2, [pc, #20]	; (8003410 <xTraceStaticBufferInitialize+0x2c>)
 80033fc:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	2000032c 	.word	0x2000032c
 8003410:	20003998 	.word	0x20003998

08003414 <xTraceStreamPortInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceStreamPortBuffer_t* pxStreamPortRTT TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStreamPortInitialize(TraceStreamPortBuffer_t* pxBuffer)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceStreamPortBuffer_t, TraceStreamPortRTT_t);

	if (pxBuffer == 0)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <xTraceStreamPortInitialize+0x12>
	{
		return TRC_FAIL;
 8003422:	2301      	movs	r3, #1
 8003424:	e00a      	b.n	800343c <xTraceStreamPortInitialize+0x28>
	}

	pxStreamPortRTT = (TraceStreamPortBuffer_t*)pxBuffer;
 8003426:	4a07      	ldr	r2, [pc, #28]	; (8003444 <xTraceStreamPortInitialize+0x30>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6013      	str	r3, [r2, #0]

#if (TRC_USE_INTERNAL_BUFFER == 1)
	return xTraceInternalEventBufferInitialize(pxStreamPortRTT->bufferInternal, sizeof(pxStreamPortRTT->bufferInternal));
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <xTraceStreamPortInitialize+0x30>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fa65 	bl	8002904 <xTraceInternalEventBufferInitialize>
 800343a:	4603      	mov	r3, r0
#else
	return TRC_SUCCESS;
#endif
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000330 	.word	0x20000330

08003448 <xTraceStreamPortOnEnable>:

traceResult xTraceStreamPortOnEnable(uint32_t uiStartOption)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
	(void)uiStartOption;

	/* Configure the RTT buffers */
	if (SEGGER_RTT_ConfigUpBuffer(TRC_CFG_STREAM_PORT_RTT_UP_BUFFER_INDEX, "TzData", pxStreamPortRTT->bufferUp, sizeof(pxStreamPortRTT->bufferUp), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <xTraceStreamPortOnEnable+0x54>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f503 52a0 	add.w	r2, r3, #5120	; 0x1400
 8003458:	2300      	movs	r3, #0
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003460:	490f      	ldr	r1, [pc, #60]	; (80034a0 <xTraceStreamPortOnEnable+0x58>)
 8003462:	2001      	movs	r0, #1
 8003464:	f7fd ff5c 	bl	8001320 <SEGGER_RTT_ConfigUpBuffer>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	da01      	bge.n	8003472 <xTraceStreamPortOnEnable+0x2a>
	{
		return TRC_FAIL;
 800346e:	2301      	movs	r3, #1
 8003470:	e010      	b.n	8003494 <xTraceStreamPortOnEnable+0x4c>
	}

	if (SEGGER_RTT_ConfigDownBuffer(TRC_CFG_STREAM_PORT_RTT_DOWN_BUFFER_INDEX, "TzCtrl", pxStreamPortRTT->bufferDown, sizeof(pxStreamPortRTT->bufferDown), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <xTraceStreamPortOnEnable+0x54>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
 800347a:	2300      	movs	r3, #0
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2320      	movs	r3, #32
 8003480:	4908      	ldr	r1, [pc, #32]	; (80034a4 <xTraceStreamPortOnEnable+0x5c>)
 8003482:	2001      	movs	r0, #1
 8003484:	f7fd ffb6 	bl	80013f4 <SEGGER_RTT_ConfigDownBuffer>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	da01      	bge.n	8003492 <xTraceStreamPortOnEnable+0x4a>
	{
		return TRC_FAIL;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <xTraceStreamPortOnEnable+0x4c>
	}

	return TRC_SUCCESS;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000330 	.word	0x20000330
 80034a0:	0800bb04 	.word	0x0800bb04
 80034a4:	0800bb0c 	.word	0x0800bb0c

080034a8 <xTraceInitialize>:
* trace recorder can be enabled, at which point make sure to call this function
* as early as possible.
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h.
******************************************************************************/
traceResult xTraceInitialize(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceBaseType_t);

	/* TraceUnsignedBaseType_t is used to store handles (addresses) */
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceHandleBaseType_t);
	
	if (RecorderInitialized != 0u)
 80034ae:	4b76      	ldr	r3, [pc, #472]	; (8003688 <xTraceInitialize+0x1e0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <xTraceInitialize+0x12>
	{
		return TRC_SUCCESS;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e0e2      	b.n	8003680 <xTraceInitialize+0x1d8>
	}

	TRC_PORT_SPECIFIC_INIT();
 80034ba:	f7ff f933 	bl	8002724 <xTraceHardwarePortInitCortexM>
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	pxTraceRecorderData = &xRecorderData;
 80034be:	4b73      	ldr	r3, [pc, #460]	; (800368c <xTraceInitialize+0x1e4>)
 80034c0:	4a73      	ldr	r2, [pc, #460]	; (8003690 <xTraceInitialize+0x1e8>)
 80034c2:	601a      	str	r2, [r3, #0]
	/* Allocate data */
	pxTraceRecorderData = TRC_KERNEL_PORT_HEAP_MALLOC(sizeof(TraceRecorderData_t));
#endif

	/* These are set on init so they aren't overwritten by late initialization values. */
	pxTraceRecorderData->uiSessionCounter = 0u;
 80034c4:	4b71      	ldr	r3, [pc, #452]	; (800368c <xTraceInitialize+0x1e4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 80034cc:	4b6f      	ldr	r3, [pc, #444]	; (800368c <xTraceInitialize+0x1e4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2200      	movs	r2, #0
 80034d2:	605a      	str	r2, [r3, #4]
	
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	e009      	b.n	80034ee <xTraceInitialize+0x46>
	{
		pxTraceRecorderData->uxTraceSystemStates[i] = (TraceUnsignedBaseType_t)TRC_STATE_IN_STARTUP;
 80034da:	4b6c      	ldr	r3, [pc, #432]	; (800368c <xTraceInitialize+0x1e4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	3202      	adds	r2, #2
 80034e2:	2100      	movs	r1, #0
 80034e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3301      	adds	r3, #1
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f2      	beq.n	80034da <xTraceInitialize+0x32>
	}
	
	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceEntryIndexTableInitialize(&pxTraceRecorderData->xEntryIndexTableBuffer) == TRC_FAIL)
 80034f4:	4b65      	ldr	r3, [pc, #404]	; (800368c <xTraceInitialize+0x1e4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe f8b4 	bl	8001668 <xTraceEntryIndexTableInitialize>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <xTraceInitialize+0x62>
	{
		return TRC_FAIL;
 8003506:	2301      	movs	r3, #1
 8003508:	e0ba      	b.n	8003680 <xTraceInitialize+0x1d8>
	}

#if (TRC_EXTERNAL_BUFFERS == 0)
	if (xTraceHeaderInitialize(&pxTraceRecorderData->xHeaderBuffer) == TRC_FAIL)
 800350a:	4b60      	ldr	r3, [pc, #384]	; (800368c <xTraceInitialize+0x1e4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3354      	adds	r3, #84	; 0x54
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f8d1 	bl	80036b8 <xTraceHeaderInitialize>
 8003516:	4603      	mov	r3, r0
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <xTraceInitialize+0x78>
	{
		return TRC_FAIL;
 800351c:	2301      	movs	r3, #1
 800351e:	e0af      	b.n	8003680 <xTraceInitialize+0x1d8>
	}

	if (xTraceEntryTableInitialize(&pxTraceRecorderData->xEntryTable) == TRC_FAIL)
 8003520:	4b5a      	ldr	r3, [pc, #360]	; (800368c <xTraceInitialize+0x1e4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3374      	adds	r3, #116	; 0x74
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe f8ae 	bl	8001688 <xTraceEntryTableInitialize>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <xTraceInitialize+0x8e>
	{
		return TRC_FAIL;
 8003532:	2301      	movs	r3, #1
 8003534:	e0a4      	b.n	8003680 <xTraceInitialize+0x1d8>
	}

	if (xTraceTimestampInitialize(&pxTraceRecorderData->xTimestampBuffer) == TRC_FAIL)
 8003536:	4b55      	ldr	r3, [pc, #340]	; (800368c <xTraceInitialize+0x1e4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fd4a 	bl	8003fd8 <xTraceTimestampInitialize>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <xTraceInitialize+0xa6>
	{
		return TRC_FAIL;
 800354a:	2301      	movs	r3, #1
 800354c:	e098      	b.n	8003680 <xTraceInitialize+0x1d8>
	}
#endif
	
	if (xTraceCounterInitialize(&pxTraceRecorderData->xCounterBuffer) == TRC_FAIL)
 800354e:	4b4f      	ldr	r3, [pc, #316]	; (800368c <xTraceInitialize+0x1e4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8003556:	3318      	adds	r3, #24
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd ffb5 	bl	80014c8 <xTraceCounterInitialize>
 800355e:	4603      	mov	r3, r0
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <xTraceInitialize+0xc0>
	{
		return TRC_FAIL;
 8003564:	2301      	movs	r3, #1
 8003566:	e08b      	b.n	8003680 <xTraceInitialize+0x1d8>
	{
		return TRC_FAIL;
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortInitialize(&pxTraceRecorderData->xStreamPortBuffer) == TRC_FAIL)
 8003568:	4b48      	ldr	r3, [pc, #288]	; (800368c <xTraceInitialize+0x1e4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff4f 	bl	8003414 <xTraceStreamPortInitialize>
 8003576:	4603      	mov	r3, r0
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <xTraceInitialize+0xd8>
	{
		return TRC_FAIL;
 800357c:	2301      	movs	r3, #1
 800357e:	e07f      	b.n	8003680 <xTraceInitialize+0x1d8>
	if (xTraceAssertInitialize(&pxTraceRecorderData->xAssertBuffer) == TRC_FAIL)
	{
		return TRC_FAIL;
	}

	if (xTraceDiagnosticsInitialize(&pxTraceRecorderData->xDiagnosticsBuffer) == TRC_FAIL)
 8003580:	4b42      	ldr	r3, [pc, #264]	; (800368c <xTraceInitialize+0x1e4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8003588:	4618      	mov	r0, r3
 800358a:	f7fd ffb9 	bl	8001500 <xTraceDiagnosticsInitialize>
 800358e:	4603      	mov	r3, r0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <xTraceInitialize+0xf0>
	{
		return TRC_FAIL;
 8003594:	2301      	movs	r3, #1
 8003596:	e073      	b.n	8003680 <xTraceInitialize+0x1d8>
	}

	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceExtensionInitialize(&pxTraceRecorderData->xExtensionBuffer) == TRC_FAIL)
 8003598:	4b3c      	ldr	r3, [pc, #240]	; (800368c <xTraceInitialize+0x1e4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 80035a0:	3314      	adds	r3, #20
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff f8a2 	bl	80026ec <xTraceExtensionInitialize>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <xTraceInitialize+0x10a>
	{
		return TRC_FAIL;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e066      	b.n	8003680 <xTraceInitialize+0x1d8>
	}
	
	if (xTraceStaticBufferInitialize(&pxTraceRecorderData->xStaticBufferBuffer) == TRC_FAIL)
 80035b2:	4b36      	ldr	r3, [pc, #216]	; (800368c <xTraceInitialize+0x1e4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 80035ba:	333c      	adds	r3, #60	; 0x3c
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff11 	bl	80033e4 <xTraceStaticBufferInitialize>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <xTraceInitialize+0x124>
	{
		return TRC_FAIL;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e059      	b.n	8003680 <xTraceInitialize+0x1d8>
	}

	if (xTraceEventInitialize(&pxTraceRecorderData->xEventDataBuffer) == TRC_FAIL)
 80035cc:	4b2f      	ldr	r3, [pc, #188]	; (800368c <xTraceInitialize+0x1e4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 80035d4:	333c      	adds	r3, #60	; 0x3c
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fb48 	bl	8001c6c <xTraceEventInitialize>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <xTraceInitialize+0x13e>
	{
		return TRC_FAIL;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e04c      	b.n	8003680 <xTraceInitialize+0x1d8>
	}
	
	if (xTracePrintInitialize(&pxTraceRecorderData->xPrintBuffer) == TRC_FAIL)
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <xTraceInitialize+0x1e4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 80035ee:	3334      	adds	r3, #52	; 0x34
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fd35 	bl	8003060 <xTracePrintInitialize>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <xTraceInitialize+0x158>
	{
		return TRC_FAIL;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e03f      	b.n	8003680 <xTraceInitialize+0x1d8>
	}
	
	if (xTraceErrorInitialize(&pxTraceRecorderData->xErrorBuffer) == TRC_FAIL)
 8003600:	4b22      	ldr	r3, [pc, #136]	; (800368c <xTraceInitialize+0x1e4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8003608:	333c      	adds	r3, #60	; 0x3c
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe f9cc 	bl	80019a8 <xTraceErrorInitialize>
 8003610:	4603      	mov	r3, r0
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <xTraceInitialize+0x172>
	{
		return TRC_FAIL;
 8003616:	2301      	movs	r3, #1
 8003618:	e032      	b.n	8003680 <xTraceInitialize+0x1d8>
	}

	if (xTraceISRInitialize(&pxTraceRecorderData->xISRBuffer) == TRC_FAIL)
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <xTraceInitialize+0x1e4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8003622:	3308      	adds	r3, #8
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff f92d 	bl	8002884 <xTraceISRInitialize>
 800362a:	4603      	mov	r3, r0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <xTraceInitialize+0x18c>
	{
		return TRC_FAIL;
 8003630:	2301      	movs	r3, #1
 8003632:	e025      	b.n	8003680 <xTraceInitialize+0x1d8>
	}

	if (xTraceTaskInitialize(&pxTraceRecorderData->xTaskInfoBuffer) == TRC_FAIL)
 8003634:	4b15      	ldr	r3, [pc, #84]	; (800368c <xTraceInitialize+0x1e4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800363c:	3338      	adds	r3, #56	; 0x38
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fc52 	bl	8003ee8 <xTraceTaskInitialize>
 8003644:	4603      	mov	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <xTraceInitialize+0x1a6>
	{
		return TRC_FAIL;
 800364a:	2301      	movs	r3, #1
 800364c:	e018      	b.n	8003680 <xTraceInitialize+0x1d8>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortInitialize(&pxTraceRecorderData->xKernelPortBuffer) == TRC_FAIL)
 800364e:	4b0f      	ldr	r3, [pc, #60]	; (800368c <xTraceInitialize+0x1e4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8003656:	3330      	adds	r3, #48	; 0x30
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff f9c3 	bl	80029e4 <xTraceKernelPortInitialize>
 800365e:	4603      	mov	r3, r0
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <xTraceInitialize+0x1c0>
	{
		return TRC_FAIL;
 8003664:	2301      	movs	r3, #1
 8003666:	e00b      	b.n	8003680 <xTraceInitialize+0x1d8>
	}

	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <xTraceInitialize+0x1e4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f04f 32ff 	mov.w	r2, #4294967295
 8003670:	60da      	str	r2, [r3, #12]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <xTraceInitialize+0x1e0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	4a03      	ldr	r2, [pc, #12]	; (8003688 <xTraceInitialize+0x1e0>)
 800367c:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20003998 	.word	0x20003998
 800368c:	20003990 	.word	0x20003990
 8003690:	20000334 	.word	0x20000334

08003694 <prvVerifySizeAlignment>:

/* Do this in function to avoid unreachable code warnings */
traceResult prvVerifySizeAlignment(uint32_t ulSize)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	return (ulSize % sizeof(TraceUnsignedBaseType_t)) == 0 ? TRC_SUCCESS : TRC_FAIL;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bf14      	ite	ne
 80036a6:	2301      	movne	r3, #1
 80036a8:	2300      	moveq	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <xTraceHeaderInitialize>:

traceResult xTraceHeaderInitialize(TraceHeaderBuffer_t *pxBuffer)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	uint32_t i;
	const char* platform_cfg = TRC_PLATFORM_CFG; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80036c0:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <xTraceHeaderInitialize+0x110>)
 80036c2:	60bb      	str	r3, [r7, #8]

	TRC_ASSERT_EQUAL_SIZE(TraceHeaderBuffer_t, TraceHeader_t);

	if (pxBuffer == (void*)0)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <xTraceHeaderInitialize+0x16>
	{
		return TRC_FAIL;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e078      	b.n	80037c0 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceStreamPortBuffer_t)) == TRC_FAIL)
 80036ce:	f642 0020 	movw	r0, #10272	; 0x2820
 80036d2:	f7ff ffdf 	bl	8003694 <prvVerifySizeAlignment>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <xTraceHeaderInitialize+0x28>
	{
		/* TraceStreamPortBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 80036dc:	2301      	movs	r3, #1
 80036de:	e06f      	b.n	80037c0 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceEventDataTable_t)) == TRC_FAIL)
 80036e0:	2078      	movs	r0, #120	; 0x78
 80036e2:	f7ff ffd7 	bl	8003694 <prvVerifySizeAlignment>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <xTraceHeaderInitialize+0x38>
	{
		/* TraceEventDataTable_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e067      	b.n	80037c0 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceKernelPortDataBuffer_t)) == TRC_FAIL)
 80036f0:	2008      	movs	r0, #8
 80036f2:	f7ff ffcf 	bl	8003694 <prvVerifySizeAlignment>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <xTraceHeaderInitialize+0x48>
	{
		/* TraceKernelPortDataBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e05f      	b.n	80037c0 <xTraceHeaderInitialize+0x108>
	}

	pxHeader = (TraceHeader_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 8003700:	4a32      	ldr	r2, [pc, #200]	; (80037cc <xTraceHeaderInitialize+0x114>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6013      	str	r3, [r2, #0]

	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <xTraceHeaderInitialize+0x114>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a31      	ldr	r2, [pc, #196]	; (80037d0 <xTraceHeaderInitialize+0x118>)
 800370c:	601a      	str	r2, [r3, #0]
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 800370e:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <xTraceHeaderInitialize+0x114>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	220e      	movs	r2, #14
 8003714:	809a      	strh	r2, [r3, #4]
	pxHeader->uiPlatform = TRACE_KERNEL_VERSION;
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <xTraceHeaderInitialize+0x114>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 800371e:	80da      	strh	r2, [r3, #6]

	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e013      	b.n	800374e <xTraceHeaderInitialize+0x96>
	{
		pxHeader->platformCfg[i] = platform_cfg[i]; /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	4a27      	ldr	r2, [pc, #156]	; (80037cc <xTraceHeaderInitialize+0x114>)
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	7819      	ldrb	r1, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	3318      	adds	r3, #24
 8003738:	460a      	mov	r2, r1
 800373a:	701a      	strb	r2, [r3, #0]
		if (platform_cfg[i] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4413      	add	r3, r2
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d006      	beq.n	8003756 <xTraceHeaderInitialize+0x9e>
	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3301      	adds	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b07      	cmp	r3, #7
 8003752:	d9e8      	bls.n	8003726 <xTraceHeaderInitialize+0x6e>
 8003754:	e000      	b.n	8003758 <xTraceHeaderInitialize+0xa0>
		{
			break;
 8003756:	bf00      	nop
		}
	}
	pxHeader->uiPlatformCfgPatch = (uint16_t)TRC_PLATFORM_CFG_PATCH;
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <xTraceHeaderInitialize+0x114>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	829a      	strh	r2, [r3, #20]
	pxHeader->uiPlatformCfgMinor = (uint8_t)TRC_PLATFORM_CFG_MINOR;
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <xTraceHeaderInitialize+0x114>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2202      	movs	r2, #2
 8003766:	759a      	strb	r2, [r3, #22]
	pxHeader->uiPlatformCfgMajor = (uint8_t)TRC_PLATFORM_CFG_MAJOR;
 8003768:	4b18      	ldr	r3, [pc, #96]	; (80037cc <xTraceHeaderInitialize+0x114>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2201      	movs	r2, #1
 800376e:	75da      	strb	r2, [r3, #23]
	pxHeader->uiNumCores = (uint32_t)TRC_CFG_CORE_COUNT;
 8003770:	4b16      	ldr	r3, [pc, #88]	; (80037cc <xTraceHeaderInitialize+0x114>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2201      	movs	r2, #1
 8003776:	60da      	str	r2, [r3, #12]
	
#ifdef TRC_STREAM_PORT_MULTISTREAM_SUPPORT
	pxHeader->uiNumCores |= 2 << 8;
#else
	pxHeader->uiNumCores |= 3 << 8;
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <xTraceHeaderInitialize+0x114>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	4b13      	ldr	r3, [pc, #76]	; (80037cc <xTraceHeaderInitialize+0x114>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003786:	60da      	str	r2, [r3, #12]
#endif
	
	pxHeader->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <xTraceHeaderInitialize+0x114>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	611a      	str	r2, [r3, #16]

	/* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
	pxHeader->uiOptions = (((uint32_t)(TRC_IRQ_PRIORITY_ORDER)) << 0);
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <xTraceHeaderInitialize+0x114>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]

	/* 3rd bit used for TRC_CFG_TEST_MODE */
	pxHeader->uiOptions |= (((uint32_t)(TRC_CFG_TEST_MODE)) << 2);
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <xTraceHeaderInitialize+0x114>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <xTraceHeaderInitialize+0x114>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6892      	ldr	r2, [r2, #8]
 80037a2:	609a      	str	r2, [r3, #8]

	/* 4th bit used for 64-bit*/
	if (prvIs64bit()) /* Call helper function to avoid "unreachable code" */
 80037a4:	f000 f8e8 	bl	8003978 <prvIs64bit>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <xTraceHeaderInitialize+0x106>
	{
		pxHeader->uiOptions |= (1 << 3);
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <xTraceHeaderInitialize+0x114>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <xTraceHeaderInitialize+0x114>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0208 	orr.w	r2, r2, #8
 80037bc:	609a      	str	r2, [r3, #8]
	}

	return TRC_SUCCESS;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	0800bb14 	.word	0x0800bb14
 80037cc:	20003994 	.word	0x20003994
 80037d0:	50534600 	.word	0x50534600

080037d4 <xTraceEnable>:

traceResult xTraceEnable(uint32_t uiStartOption)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	TraceCommand_t xCommand = { 0 };
 80037dc:	f107 0310 	add.w	r3, r7, #16
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
	int32_t iBytes;

	if (xTraceInitialize() == TRC_FAIL)
 80037e6:	f7ff fe5f 	bl	80034a8 <xTraceInitialize>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <xTraceEnable+0x20>
	{
		return TRC_FAIL;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e055      	b.n	80038a0 <xTraceEnable+0xcc>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortOnEnable(uiStartOption) == TRC_FAIL)
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff fe27 	bl	8003448 <xTraceStreamPortOnEnable>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <xTraceEnable+0x30>
	{
		return TRC_FAIL;
 8003800:	2301      	movs	r3, #1
 8003802:	e04d      	b.n	80038a0 <xTraceEnable+0xcc>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortEnable() == TRC_FAIL)
 8003804:	f7ff f90c 	bl	8002a20 <xTraceKernelPortEnable>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <xTraceEnable+0x3e>
	{
		return TRC_FAIL;
 800380e:	2301      	movs	r3, #1
 8003810:	e046      	b.n	80038a0 <xTraceEnable+0xcc>
	}

	if (uiStartOption == TRC_START_AWAIT_HOST)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d130      	bne.n	800387a <xTraceEnable+0xa6>
	{
		/* We keep trying to read commands from host until the recorder has been started */
		do
		{
			iBytes = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

			if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), (int32_t*)&iBytes) == TRC_FAIL)
 800381c:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <xTraceEnable+0xd4>)
 800381e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003822:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <xTraceEnable+0xd4>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	429a      	cmp	r2, r3
 800382a:	d00a      	beq.n	8003842 <xTraceEnable+0x6e>
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	2208      	movs	r2, #8
 8003832:	4619      	mov	r1, r3
 8003834:	2001      	movs	r0, #1
 8003836:	f7fd fce3 	bl	8001200 <SEGGER_RTT_Read>
 800383a:	4603      	mov	r3, r0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <xTraceEnable+0x70>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <xTraceEnable+0x7a>
			{
				(void)xTraceWarning(TRC_WARNING_STREAM_PORT_READ);
 8003848:	200b      	movs	r0, #11
 800384a:	f7fe f8d1 	bl	80019f0 <xTraceWarning>
			}

			if ((uint32_t)iBytes == sizeof(TraceCommand_t))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d10c      	bne.n	800386e <xTraceEnable+0x9a>
			{
				if (prvIsValidCommand(&xCommand) != 0)
 8003854:	f107 0310 	add.w	r3, r7, #16
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fa2b 	bl	8003cb4 <prvIsValidCommand>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <xTraceEnable+0x9a>
				{
					prvProcessCommand(&xCommand);
 8003864:	f107 0310 	add.w	r3, r7, #16
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fa5f 	bl	8003d2c <prvProcessCommand>
				}
			}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0u);
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <xTraceEnable+0xd8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0cf      	beq.n	8003818 <xTraceEnable+0x44>
 8003878:	e011      	b.n	800389e <xTraceEnable+0xca>
	}
	else if (uiStartOption == (uint32_t)(TRC_START))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d109      	bne.n	8003894 <xTraceEnable+0xc0>
	{
		/* We start streaming directly - this assumes that the host interface is ready! */
		xCommand.cmdCode = CMD_SET_ACTIVE;
 8003880:	2301      	movs	r3, #1
 8003882:	743b      	strb	r3, [r7, #16]
		xCommand.param1 = 1u;
 8003884:	2301      	movs	r3, #1
 8003886:	747b      	strb	r3, [r7, #17]
		prvProcessCommand(&xCommand);
 8003888:	f107 0310 	add.w	r3, r7, #16
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fa4d 	bl	8003d2c <prvProcessCommand>
 8003892:	e004      	b.n	800389e <xTraceEnable+0xca>
	}
	else if (uiStartOption == TRC_START_FROM_HOST)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <xTraceEnable+0xca>
	{
		/* We prepare the system to receive commands from host, but let system resume execution until that happens */
	}
	else
	{
		return TRC_FAIL;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <xTraceEnable+0xcc>
	}

	return TRC_SUCCESS;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000208 	.word	0x20000208
 80038ac:	20003990 	.word	0x20003990

080038b0 <xTraceDisable>:

traceResult xTraceDisable(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	prvSetRecorderDisabled();
 80038b4:	f000 f8ba 	bl	8003a2c <prvSetRecorderDisabled>

	(void)xTraceStreamPortOnDisable();
	
	return TRC_SUCCESS;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <xTraceTzCtrl>:
	
	return TRC_SUCCESS;
}

traceResult xTraceTzCtrl(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
	TraceCommand_t xCommand = { 0 };
 80038c6:	f107 0308 	add.w	r3, r7, #8
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
	int32_t iRxBytes;
	
	do
	{
		/* Listen for new commands */
		iRxBytes = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	607b      	str	r3, [r7, #4]
		if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), &iRxBytes) == TRC_FAIL)
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <xTraceTzCtrl+0xac>)
 80038d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <xTraceTzCtrl+0xac>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d00a      	beq.n	80038fa <xTraceTzCtrl+0x3a>
 80038e4:	f107 0308 	add.w	r3, r7, #8
 80038e8:	2208      	movs	r2, #8
 80038ea:	4619      	mov	r1, r3
 80038ec:	2001      	movs	r0, #1
 80038ee:	f7fd fc87 	bl	8001200 <SEGGER_RTT_Read>
 80038f2:	4603      	mov	r3, r0
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <xTraceTzCtrl+0x3c>
 80038fa:	2300      	movs	r3, #0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <xTraceTzCtrl+0x48>
		{
			/* The connection has failed, stop tracing */
			(void)xTraceDisable();
 8003900:	f7ff ffd6 	bl	80038b0 <xTraceDisable>

			return TRC_FAIL;
 8003904:	2301      	movs	r3, #1
 8003906:	e02d      	b.n	8003964 <xTraceTzCtrl+0xa4>
		}

		if ((uint32_t)iRxBytes == sizeof(TraceCommand_t))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b08      	cmp	r3, #8
 800390c:	d10c      	bne.n	8003928 <xTraceTzCtrl+0x68>
		{
			if (prvIsValidCommand(&xCommand) != 0)
 800390e:	f107 0308 	add.w	r3, r7, #8
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f9ce 	bl	8003cb4 <prvIsValidCommand>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <xTraceTzCtrl+0x68>
			{
				prvProcessCommand(&xCommand); /* Start or Stop currently... */
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa02 	bl	8003d2c <prvProcessCommand>
			}
		}

		if (xTraceIsRecorderEnabled())
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <xTraceTzCtrl+0xb0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d006      	beq.n	8003942 <xTraceTzCtrl+0x82>
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <xTraceTzCtrl+0xb4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <xTraceTzCtrl+0x82>
		{
			(void)xTraceInternalEventBufferTransfer();
 800393e:	f7ff f831 	bl	80029a4 <xTraceInternalEventBufferTransferAll>
		}

		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */

	} while (iRxBytes > 0);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	dcc3      	bgt.n	80038d0 <xTraceTzCtrl+0x10>

	if (xTraceIsRecorderEnabled())
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <xTraceTzCtrl+0xb0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d006      	beq.n	8003962 <xTraceTzCtrl+0xa2>
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <xTraceTzCtrl+0xb4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <xTraceTzCtrl+0xa2>
	{
		(void)xTraceDiagnosticsCheckStatus();
 800395e:	f7fd fe41 	bl	80015e4 <xTraceDiagnosticsCheckStatus>
		(void)xTraceStackMonitorReport();
	}

	return TRC_SUCCESS;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000208 	.word	0x20000208
 8003970:	20003998 	.word	0x20003998
 8003974:	20003990 	.word	0x20003990

08003978 <prvIs64bit>:
/******************************************************************************/
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

static TraceUnsignedBaseType_t prvIs64bit(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
	return sizeof(TraceUnsignedBaseType_t) == 8;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <prvSetRecorderEnabled>:

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxTimestampFrequency = 0u;
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
	uint32_t uiTimestampPeriod = 0u;
 8003992:	2300      	movs	r3, #0
 8003994:	603b      	str	r3, [r7, #0]
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (pxTraceRecorderData->uiRecorderEnabled == 1u)
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <prvSetRecorderEnabled+0x98>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d03a      	beq.n	8003a16 <prvSetRecorderEnabled+0x8e>
	{
		return;
	}

	(void)xTraceTimestampGetFrequency(&uxTimestampFrequency);
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <prvSetRecorderEnabled+0x9c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	607b      	str	r3, [r7, #4]
	/* If not overridden using xTraceTimestampSetFrequency(...), use default value */
	if (uxTimestampFrequency == 0u)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d104      	bne.n	80039b8 <prvSetRecorderEnabled+0x30>
	{
		(void)xTraceTimestampSetFrequency((TraceUnsignedBaseType_t)(TRC_HWTC_FREQ_HZ));
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <prvSetRecorderEnabled+0x9c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <prvSetRecorderEnabled+0xa0>)
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	609a      	str	r2, [r3, #8]
	}

	(void)xTraceTimestampGetPeriod(&uiTimestampPeriod);
 80039b8:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <prvSetRecorderEnabled+0x9c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	603b      	str	r3, [r7, #0]
	/* If not overridden using xTraceTimestampSetPeriod(...), use default value */
	if (uiTimestampPeriod == 0u)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <prvSetRecorderEnabled+0x46>
	{
		(void)xTraceTimestampSetPeriod((TraceUnsignedBaseType_t)(TRC_HWTC_PERIOD));
 80039c6:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <prvSetRecorderEnabled+0x9c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039ce:	f3ef 8310 	mrs	r3, PRIMASK
 80039d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80039d4:	68bb      	ldr	r3, [r7, #8]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	2301      	movs	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f383 8810 	msr	PRIMASK, r3
}
 80039e2:	bf00      	nop

	/* If the internal event buffer is used, we must clear it */
	(void)xTraceInternalEventBufferClear();
 80039e4:	f7fe fff2 	bl	80029cc <xTraceInternalEventBufferClear>
	
	(void)xTraceStreamPortOnTraceBegin();

	prvTraceStoreHeader();
 80039e8:	f000 f846 	bl	8003a78 <prvTraceStoreHeader>
	prvTraceStoreTimestampInfo();
 80039ec:	f000 f860 	bl	8003ab0 <prvTraceStoreTimestampInfo>
	prvTraceStoreEntryTable();
 80039f0:	f000 f87c 	bl	8003aec <prvTraceStoreEntryTable>
	prvTraceStoreStartEvent();
 80039f4:	f000 f8e8 	bl	8003bc8 <prvTraceStoreStartEvent>

	pxTraceRecorderData->uiSessionCounter++;
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <prvSetRecorderEnabled+0x98>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	3201      	adds	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

	pxTraceRecorderData->uiRecorderEnabled = 1u;
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <prvSetRecorderEnabled+0x98>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2201      	movs	r2, #1
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	e000      	b.n	8003a18 <prvSetRecorderEnabled+0x90>
		return;
 8003a16:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();
}
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20003990 	.word	0x20003990
 8003a24:	200039a0 	.word	0x200039a0
 8003a28:	20000004 	.word	0x20000004

08003a2c <prvSetRecorderDisabled>:

static void prvSetRecorderDisabled(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
	TRACE_ALLOC_CRITICAL_SECTION();

	if (pxTraceRecorderData->uiRecorderEnabled == 0u)
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <prvSetRecorderDisabled+0x48>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d014      	beq.n	8003a66 <prvSetRecorderDisabled+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a40:	603b      	str	r3, [r7, #0]
  return(result);
 8003a42:	683b      	ldr	r3, [r7, #0]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	2301      	movs	r3, #1
 8003a48:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f383 8810 	msr	PRIMASK, r3
}
 8003a50:	bf00      	nop
	
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <prvSetRecorderDisabled+0x48>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f383 8810 	msr	PRIMASK, r3
}
 8003a64:	e000      	b.n	8003a68 <prvSetRecorderDisabled+0x3c>
		return;
 8003a66:	bf00      	nop

	(void)xTraceStreamPortOnTraceEnd();

	TRACE_EXIT_CRITICAL_SECTION();
}
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20003990 	.word	0x20003990

08003a78 <prvTraceStoreHeader>:

#if (TRC_EXTERNAL_BUFFERS == 0)
/* Stores the header information on Start */
static void prvTraceStoreHeader(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
	TraceEventHandle_t xEventHandle;

	if (xTraceEventBeginRawOfflineBlocking(sizeof(TraceHeader_t), &xEventHandle) == TRC_SUCCESS)
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	4619      	mov	r1, r3
 8003a82:	2020      	movs	r0, #32
 8003a84:	f7fe fb20 	bl	80020c8 <xTraceEventBeginRawOfflineBlocking>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <prvTraceStoreHeader+0x2c>
	{
		xTraceEventAddData(xEventHandle, (TraceUnsignedBaseType_t*)pxHeader, sizeof(TraceHeader_t) / sizeof(TraceUnsignedBaseType_t));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a06      	ldr	r2, [pc, #24]	; (8003aac <prvTraceStoreHeader+0x34>)
 8003a92:	6811      	ldr	r1, [r2, #0]
 8003a94:	2208      	movs	r2, #8
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fbea 	bl	8002270 <xTraceEventAddData>
		xTraceEventEndOfflineBlocking(xEventHandle);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe fba6 	bl	80021f0 <xTraceEventEndOfflineBlocking>
	}
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20003994 	.word	0x20003994

08003ab0 <prvTraceStoreTimestampInfo>:

/* Store the Timestamp */
static void prvTraceStoreTimestampInfo(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
	TraceEventHandle_t xEventHandle;

	if (xTraceEventBeginRawOfflineBlocking(sizeof(TraceTimestampData_t), &xEventHandle) == TRC_SUCCESS)
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	201c      	movs	r0, #28
 8003abc:	f7fe fb04 	bl	80020c8 <xTraceEventBeginRawOfflineBlocking>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10c      	bne.n	8003ae0 <prvTraceStoreTimestampInfo+0x30>
	{
		xTraceEventAddData(xEventHandle, (TraceUnsignedBaseType_t*)&pxTraceRecorderData->xTimestampBuffer, sizeof(TraceTimestampData_t) / sizeof(TraceUnsignedBaseType_t));
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <prvTraceStoreTimestampInfo+0x38>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f7fe fbcc 	bl	8002270 <xTraceEventAddData>
		xTraceEventEndOfflineBlocking(xEventHandle);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe fb88 	bl	80021f0 <xTraceEventEndOfflineBlocking>
	}
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20003990 	.word	0x20003990

08003aec <prvTraceStoreEntryTable>:

/* Stores the entry table on Start */
static void prvTraceStoreEntryTable(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
	TraceEventHandle_t xEventHandle;
	TraceEntryHandle_t xEntryHandle;
	uint32_t uiEntryCount;
	void *pvEntryAddress;

	(void)xTraceEntryGetCount(&uiEntryCount);
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fed4 	bl	80018a8 <xTraceEntryGetCount>
	
	if (xTraceEventBeginRawOfflineBlocking(sizeof(TraceUnsignedBaseType_t) + sizeof(TraceUnsignedBaseType_t) + sizeof(TraceUnsignedBaseType_t), &xEventHandle) == TRC_SUCCESS)
 8003b00:	f107 0310 	add.w	r3, r7, #16
 8003b04:	4619      	mov	r1, r3
 8003b06:	200c      	movs	r0, #12
 8003b08:	f7fe fade 	bl	80020c8 <xTraceEventBeginRawOfflineBlocking>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d12d      	bne.n	8003b6e <prvTraceStoreEntryTable+0x82>
	{
		(void)xTraceEventAddUnsignedBaseType(xEventHandle, (TraceUnsignedBaseType_t)uiEntryCount);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	3204      	adds	r2, #4
 8003b2c:	609a      	str	r2, [r3, #8]
		(void)xTraceEventAddUnsignedBaseType(xEventHandle, TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 0303 	bic.w	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	221c      	movs	r2, #28
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	3204      	adds	r2, #4
 8003b48:	609a      	str	r2, [r3, #8]
		(void)xTraceEventAddUnsignedBaseType(xEventHandle, TRC_ENTRY_TABLE_STATE_COUNT);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0303 	bic.w	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	2203      	movs	r2, #3
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	3204      	adds	r2, #4
 8003b64:	609a      	str	r2, [r3, #8]
		(void)xTraceEventEndOfflineBlocking(xEventHandle);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe fb41 	bl	80021f0 <xTraceEventEndOfflineBlocking>
	}
	
	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	e021      	b.n	8003bb8 <prvTraceStoreEntryTable+0xcc>
	{
		(void)xTraceEntryGetAtIndex(i, &xEntryHandle);
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6978      	ldr	r0, [r7, #20]
 8003b7c:	f7fd fea8 	bl	80018d0 <xTraceEntryGetAtIndex>
		(void)xTraceEntryGetAddress(xEntryHandle, &pvEntryAddress);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	607b      	str	r3, [r7, #4]
		/* We only send used entry slots */
		if (pvEntryAddress != 0)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d012      	beq.n	8003bb2 <prvTraceStoreEntryTable+0xc6>
		{
			/* Send entry */
			if (xTraceEventBeginRawOfflineBlocking(sizeof(TraceEntry_t), &xEventHandle) == TRC_SUCCESS)
 8003b8c:	f107 0310 	add.w	r3, r7, #16
 8003b90:	4619      	mov	r1, r3
 8003b92:	2030      	movs	r0, #48	; 0x30
 8003b94:	f7fe fa98 	bl	80020c8 <xTraceEventBeginRawOfflineBlocking>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <prvTraceStoreEntryTable+0xc6>
			{
				(void)xTraceEventAddData(xEventHandle, (TraceUnsignedBaseType_t*)xEntryHandle, sizeof(TraceEntry_t) / sizeof(TraceUnsignedBaseType_t));
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	68f9      	ldr	r1, [r7, #12]
 8003ba2:	220c      	movs	r2, #12
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fb63 	bl	8002270 <xTraceEventAddData>
				(void)xTraceEventEndOfflineBlocking(xEventHandle);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe fb1f 	bl	80021f0 <xTraceEventEndOfflineBlocking>
	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b37      	cmp	r3, #55	; 0x37
 8003bbc:	d9da      	bls.n	8003b74 <prvTraceStoreEntryTable+0x88>
			}
		}
	}
}
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <prvTraceStoreStartEvent>:
#endif /* (TRC_EXTERNAL_BUFFERS == 0) */

static void prvTraceStoreStartEvent(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
	TraceEventHandle_t xEventHandle = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]
	void* pvCurrentTask = (void*)0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	607b      	str	r3, [r7, #4]
	uint32_t i;

	if (xTraceEventBeginOffline(PSF_EVENT_TRACE_START, sizeof(TraceUnsignedBaseType_t) * (TRC_CFG_CORE_COUNT), &xEventHandle) == TRC_SUCCESS)
 8003bd6:	f107 0308 	add.w	r3, r7, #8
 8003bda:	4619      	mov	r1, r3
 8003bdc:	200c      	movs	r0, #12
 8003bde:	f7fe fa0d 	bl	8001ffc <xTraceEventBeginRawOffline>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d133      	bne.n	8003c50 <prvTraceStoreStartEvent+0x88>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	3b08      	subs	r3, #8
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	031b      	lsls	r3, r3, #12
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	b21a      	sxth	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	b292      	uxth	r2, r2
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <prvTraceStoreStartEvent+0xdc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	b292      	uxth	r2, r2
 8003c10:	805a      	strh	r2, [r3, #2]
 8003c12:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <prvTraceStoreStartEvent+0xe0>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	605a      	str	r2, [r3, #4]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	4b22      	ldr	r3, [pc, #136]	; (8003cac <prvTraceStoreStartEvent+0xe4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d204      	bcs.n	8003c36 <prvTraceStoreStartEvent+0x6e>
 8003c2c:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <prvTraceStoreStartEvent+0xe4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	3201      	adds	r2, #1
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <prvTraceStoreStartEvent+0xe4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6852      	ldr	r2, [r2, #4]
 8003c40:	615a      	str	r2, [r3, #20]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	3208      	adds	r2, #8
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <prvTraceStoreStartEvent+0x8a>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d021      	beq.n	8003c9a <prvTraceStoreStartEvent+0xd2>
	{
		for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	e017      	b.n	8003c8c <prvTraceStoreStartEvent+0xc4>
		{

			(void)xTraceTaskGetCurrentOnCore(i, &pvCurrentTask);
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <prvTraceStoreStartEvent+0xe8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c66:	607b      	str	r3, [r7, #4]
			(void)xTraceEventAddUnsignedBaseType(xEventHandle, (TraceUnsignedBaseType_t)pvCurrentTask);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f023 0303 	bic.w	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	460a      	mov	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	3204      	adds	r2, #4
 8003c84:	609a      	str	r2, [r3, #8]
		for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0e4      	beq.n	8003c5c <prvTraceStoreStartEvent+0x94>
		}
		(void)xTraceEventEndOffline(xEventHandle);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe fa7d 	bl	8002194 <xTraceEventEndOffline>
	}
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000314 	.word	0x20000314
 8003ca8:	e0001004 	.word	0xe0001004
 8003cac:	200039a0 	.word	0x200039a0
 8003cb0:	2000399c 	.word	0x2000399c

08003cb4 <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
static int32_t prvIsValidCommand(const TraceCommand_t* const cmd)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	781a      	ldrb	r2, [r3, #0]
												cmd->param1 +
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	785b      	ldrb	r3, [r3, #1]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003cc4:	4413      	add	r3, r2
 8003cc6:	b2da      	uxtb	r2, r3
												cmd->param2 +
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	789b      	ldrb	r3, [r3, #2]
												cmd->param1 +
 8003ccc:	4413      	add	r3, r2
 8003cce:	b2da      	uxtb	r2, r3
												cmd->param3 +
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
												cmd->param2 +
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b2da      	uxtb	r2, r3
												cmd->param4 +
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	791b      	ldrb	r3, [r3, #4]
												cmd->param3 +
 8003cdc:	4413      	add	r3, r2
 8003cde:	b2da      	uxtb	r2, r3
												cmd->param5);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	795b      	ldrb	r3, [r3, #5]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003ce4:	4413      	add	r3, r2
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	81fb      	strh	r3, [r7, #14]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	79da      	ldrb	r2, [r3, #7]
 8003cf2:	89fb      	ldrh	r3, [r7, #14]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d001      	beq.n	8003d02 <prvIsValidCommand+0x4e>
	{
		return 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e00e      	b.n	8003d20 <prvIsValidCommand+0x6c>
	}

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFFU)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	799a      	ldrb	r2, [r3, #6]
 8003d06:	89fb      	ldrh	r3, [r7, #14]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d001      	beq.n	8003d12 <prvIsValidCommand+0x5e>
	{
		return 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e006      	b.n	8003d20 <prvIsValidCommand+0x6c>
	}

	if (cmd->cmdCode > (unsigned char)(CMD_LAST_COMMAND)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d901      	bls.n	8003d1e <prvIsValidCommand+0x6a>
	{
		return 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <prvIsValidCommand+0x6c>
	}

	return 1;
 8003d1e:	2301      	movs	r3, #1
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
static void prvProcessCommand(const TraceCommand_t* const cmd)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d109      	bne.n	8003d50 <prvProcessCommand+0x24>
	{
		case CMD_SET_ACTIVE:
			if (cmd->param1 == 1u)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d102      	bne.n	8003d4a <prvProcessCommand+0x1e>
			{
				prvSetRecorderEnabled();
 8003d44:	f7ff fe20 	bl	8003988 <prvSetRecorderEnabled>
			}
			else
			{
				prvSetRecorderDisabled();
			}
		  	break;
 8003d48:	e003      	b.n	8003d52 <prvProcessCommand+0x26>
				prvSetRecorderDisabled();
 8003d4a:	f7ff fe6f 	bl	8003a2c <prvSetRecorderDisabled>
		  	break;
 8003d4e:	e000      	b.n	8003d52 <prvProcessCommand+0x26>
		default:
		  	break;
 8003d50:	bf00      	nop
	}
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <xTraceStringRegister>:

#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceStringRegister(const char* szString, TraceStringHandle_t *pString)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	TraceEventHandle_t xEventHandle = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
	int32_t i;
	uint32_t uiLength, uiValue = 0u;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
	
	/* This should never fail */
	TRC_ASSERT(pString != (void*)0);

	/* We need to check this */
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8003d6e:	f107 0314 	add.w	r3, r7, #20
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd fce2 	bl	800173c <xTraceEntryCreate>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <xTraceStringRegister+0x26>
	{
		return TRC_FAIL;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e0a3      	b.n	8003eca <xTraceStringRegister+0x16e>
	}

	for (i = 0; (szString[i] != (char)0) && (i < (int32_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	e002      	b.n	8003d8e <xTraceStringRegister+0x32>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4413      	add	r3, r2
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <xTraceStringRegister+0x44>
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b1b      	cmp	r3, #27
 8003d9e:	ddf3      	ble.n	8003d88 <xTraceStringRegister+0x2c>

	uiLength = (uint32_t)i;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	61bb      	str	r3, [r7, #24]

	/* The address to the available symbol table slot is the address we use */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString, uiLength) == TRC_SUCCESS);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd fd52 	bl	8001854 <xTraceEntrySetSymbol>

	*pString = (TraceStringHandle_t)xEntryHandle;
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	601a      	str	r2, [r3, #0]

	/* We need to check this */
	if (xTraceEventBegin(PSF_EVENT_OBJ_NAME, sizeof(void*) + uiLength, &xEventHandle) == TRC_SUCCESS)
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <xTraceStringRegister+0x178>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d045      	beq.n	8003e4e <xTraceStringRegister+0xf2>
 8003dc2:	4b45      	ldr	r3, [pc, #276]	; (8003ed8 <xTraceStringRegister+0x17c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d040      	beq.n	8003e4e <xTraceStringRegister+0xf2>
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	f107 0210 	add.w	r2, r7, #16
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe f910 	bl	8001ffc <xTraceEventBeginRawOffline>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d133      	bne.n	8003e4a <xTraceStringRegister+0xee>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	3b08      	subs	r3, #8
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	031b      	lsls	r3, r3, #12
 8003dee:	b21b      	sxth	r3, r3
 8003df0:	f043 0303 	orr.w	r3, r3, #3
 8003df4:	b21a      	sxth	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b292      	uxth	r2, r2
 8003dfc:	801a      	strh	r2, [r3, #0]
 8003dfe:	4b37      	ldr	r3, [pc, #220]	; (8003edc <xTraceStringRegister+0x180>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	805a      	strh	r2, [r3, #2]
 8003e0c:	4a34      	ldr	r2, [pc, #208]	; (8003ee0 <xTraceStringRegister+0x184>)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <xTraceStringRegister+0x188>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d204      	bcs.n	8003e30 <xTraceStringRegister+0xd4>
 8003e26:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <xTraceStringRegister+0x188>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	3201      	adds	r2, #1
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <xTraceStringRegister+0x188>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6852      	ldr	r2, [r2, #4]
 8003e3a:	615a      	str	r2, [r3, #20]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	3208      	adds	r2, #8
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	2301      	movs	r3, #1
 8003e48:	e002      	b.n	8003e50 <xTraceStringRegister+0xf4>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e000      	b.n	8003e50 <xTraceStringRegister+0xf4>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d039      	beq.n	8003ec8 <xTraceStringRegister+0x16c>
	{
		(void)xTraceEventAddPointer(xEventHandle, (void*)xEntryHandle);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f023 0303 	bic.w	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	3204      	adds	r2, #4
 8003e6e:	609a      	str	r2, [r3, #8]
		(void)xTraceEventAddString(xEventHandle, szString, uiLength);
 8003e70:	6938      	ldr	r0, [r7, #16]
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	3303      	adds	r3, #3
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	f7fe f9f8 	bl	8002270 <xTraceEventAddData>

		/* Check if we can truncate */
		(void)xTraceEventPayloadRemaining(xEventHandle, &uiValue);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	60fb      	str	r3, [r7, #12]
		if (uiValue > 0u)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <xTraceStringRegister+0x14e>
		{
			(void)xTraceEventAdd8(xEventHandle, 0u);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	3201      	adds	r2, #1
 8003ea8:	609a      	str	r2, [r3, #8]
		}
		
		(void)xTraceEventEnd(xEventHandle); /*cstat !MISRAC2012-Rule-17.7 Suppress ignored return value check (inside macro)*/
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <xTraceStringRegister+0x178>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <xTraceStringRegister+0x16c>
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <xTraceStringRegister+0x17c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <xTraceStringRegister+0x16c>
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe f966 	bl	8002194 <xTraceEventEndOffline>
	}

	return TRC_SUCCESS;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20003998 	.word	0x20003998
 8003ed8:	20003990 	.word	0x20003990
 8003edc:	20000314 	.word	0x20000314
 8003ee0:	e0001004 	.word	0xe0001004
 8003ee4:	200039a0 	.word	0x200039a0

08003ee8 <xTraceTaskInitialize>:
#define TRC_TASK_STATE_INDEX_PRIORITY		0u

TraceTaskData_t* pxTraceTaskData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTaskInitialize(TraceTaskData_t *pxBuffer)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	int32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTaskData= pxBuffer;
 8003ef0:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <xTraceTaskInitialize+0x48>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6013      	str	r3, [r2, #0]

	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e008      	b.n	8003f0e <xTraceTaskInitialize+0x26>
	{
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <xTraceTaskInitialize+0x48>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	2102      	movs	r1, #2
 8003f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	ddf3      	ble.n	8003efc <xTraceTaskInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <xTraceTaskInitialize+0x4c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f1c:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <xTraceTaskInitialize+0x4c>)
 8003f1e:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2000399c 	.word	0x2000399c
 8003f34:	20003998 	.word	0x20003998

08003f38 <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8003f46:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <xTraceTaskSwitch+0x94>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <xTraceTaskSwitch+0x1e>
	{
		return xResult;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	e035      	b.n	8003fc2 <xTraceTaskSwitch+0x8a>
	}

	if (!xTraceIsRecorderEnabled())
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <xTraceTaskSwitch+0x94>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <xTraceTaskSwitch+0x34>
 8003f62:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <xTraceTaskSwitch+0x98>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <xTraceTaskSwitch+0x40>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		xTraceTaskSetCurrent(pvTask);
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <xTraceTaskSwitch+0x9c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	601a      	str	r2, [r3, #0]

		return xResult;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	e024      	b.n	8003fc2 <xTraceTaskSwitch+0x8a>
	}

	xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 8003f78:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <xTraceTaskSwitch+0x98>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f80:	f3ef 8310 	mrs	r3, PRIMASK
 8003f84:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f86:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f383 8810 	msr	PRIMASK, r3
}
 8003f94:	bf00      	nop
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		xTraceTaskSetCurrent(pvTask);
 8003f96:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <xTraceTaskSwitch+0x9c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	2037      	movs	r0, #55	; 0x37
 8003fa6:	f7fd ff2d 	bl	8001e04 <xTraceEventCreate2>
 8003faa:	61f8      	str	r0, [r7, #28]
	}

	xTraceStateSet(TRC_STATE_IN_APPLICATION);
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <xTraceTaskSwitch+0x98>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f383 8810 	msr	PRIMASK, r3
}
 8003fbe:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20003998 	.word	0x20003998
 8003fd0:	20003990 	.word	0x20003990
 8003fd4:	2000399c 	.word	0x2000399c

08003fd8 <xTraceTimestampInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceTimestampData_t *pxTraceTimestamp TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTimestampInitialize(TraceTimestampData_t *pxBuffer)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTimestamp = pxBuffer;
 8003fe0:	4a16      	ldr	r2, [pc, #88]	; (800403c <xTraceTimestampInitialize+0x64>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6013      	str	r3, [r2, #0]

	/* These will be set when tracing is enabled */
	pxTraceTimestamp->frequency = 0u;
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <xTraceTimestampInitialize+0x64>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
	pxTraceTimestamp->period = 0u;
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <xTraceTimestampInitialize+0x64>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	605a      	str	r2, [r3, #4]

	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <xTraceTimestampInitialize+0x64>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ffe:	611a      	str	r2, [r3, #16]
	pxTraceTimestamp->osTickCount = 0u;
 8004000:	4b0e      	ldr	r3, [pc, #56]	; (800403c <xTraceTimestampInitialize+0x64>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2200      	movs	r2, #0
 8004006:	619a      	str	r2, [r3, #24]
	pxTraceTimestamp->wraparounds = 0u;
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <xTraceTimestampInitialize+0x64>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2200      	movs	r2, #0
 800400e:	60da      	str	r2, [r3, #12]
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 8004010:	4b0a      	ldr	r3, [pc, #40]	; (800403c <xTraceTimestampInitialize+0x64>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]

#if (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_INCR)
	pxTraceTimestamp->latestTimestamp = 0u;
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <xTraceTimestampInitialize+0x64>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2200      	movs	r2, #0
 800401e:	615a      	str	r2, [r3, #20]
#elif (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	pxTraceTimestamp->latestTimestamp = pxTraceTimestamp->period - 1u;
#endif

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <xTraceTimestampInitialize+0x68>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004028:	4a05      	ldr	r2, [pc, #20]	; (8004040 <xTraceTimestampInitialize+0x68>)
 800402a:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	200039a0 	.word	0x200039a0
 8004040:	20003998 	.word	0x20003998

08004044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <HAL_Init+0x40>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <HAL_Init+0x40>)
 800404e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_Init+0x40>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <HAL_Init+0x40>)
 800405a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800405e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004060:	4b08      	ldr	r3, [pc, #32]	; (8004084 <HAL_Init+0x40>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a07      	ldr	r2, [pc, #28]	; (8004084 <HAL_Init+0x40>)
 8004066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800406c:	2003      	movs	r0, #3
 800406e:	f000 f8d8 	bl	8004222 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004072:	200f      	movs	r0, #15
 8004074:	f7fc fe58 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004078:	f7fc fcf8 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40023c00 	.word	0x40023c00

08004088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_IncTick+0x20>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_IncTick+0x24>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4413      	add	r3, r2
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <HAL_IncTick+0x24>)
 800409a:	6013      	str	r3, [r2, #0]
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	2000000c 	.word	0x2000000c
 80040ac:	200039a4 	.word	0x200039a4

080040b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return uwTick;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <HAL_GetTick+0x14>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	200039a4 	.word	0x200039a4

080040c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e4:	4013      	ands	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	60d3      	str	r3, [r2, #12]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__NVIC_GetPriorityGrouping+0x18>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	f003 0307 	and.w	r3, r3, #7
}
 800411e:	4618      	mov	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	db0b      	blt.n	8004156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	4907      	ldr	r1, [pc, #28]	; (8004164 <__NVIC_EnableIRQ+0x38>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2001      	movs	r0, #1
 800414e:	fa00 f202 	lsl.w	r2, r0, r2
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	e000e100 	.word	0xe000e100

08004168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db0a      	blt.n	8004192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	490c      	ldr	r1, [pc, #48]	; (80041b4 <__NVIC_SetPriority+0x4c>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	440b      	add	r3, r1
 800418c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004190:	e00a      	b.n	80041a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4908      	ldr	r1, [pc, #32]	; (80041b8 <__NVIC_SetPriority+0x50>)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	3b04      	subs	r3, #4
 80041a0:	0112      	lsls	r2, r2, #4
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	440b      	add	r3, r1
 80041a6:	761a      	strb	r2, [r3, #24]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000e100 	.word	0xe000e100
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f1c3 0307 	rsb	r3, r3, #7
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	bf28      	it	cs
 80041da:	2304      	movcs	r3, #4
 80041dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d902      	bls.n	80041ec <NVIC_EncodePriority+0x30>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3b03      	subs	r3, #3
 80041ea:	e000      	b.n	80041ee <NVIC_EncodePriority+0x32>
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	401a      	ands	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004204:	f04f 31ff 	mov.w	r1, #4294967295
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43d9      	mvns	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004214:	4313      	orrs	r3, r2
         );
}
 8004216:	4618      	mov	r0, r3
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff ff4c 	bl	80040c8 <__NVIC_SetPriorityGrouping>
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800424a:	f7ff ff61 	bl	8004110 <__NVIC_GetPriorityGrouping>
 800424e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	6978      	ldr	r0, [r7, #20]
 8004256:	f7ff ffb1 	bl	80041bc <NVIC_EncodePriority>
 800425a:	4602      	mov	r2, r0
 800425c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ff80 	bl	8004168 <__NVIC_SetPriority>
}
 8004268:	bf00      	nop
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff54 	bl	800412c <__NVIC_EnableIRQ>
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800429e:	2300      	movs	r3, #0
 80042a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e16b      	b.n	8004580 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042a8:	2201      	movs	r2, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	f040 815a 	bne.w	800457a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d005      	beq.n	80042de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d130      	bne.n	8004340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	2203      	movs	r2, #3
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004314:	2201      	movs	r2, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 0201 	and.w	r2, r3, #1
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b03      	cmp	r3, #3
 800434a:	d017      	beq.n	800437c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	2203      	movs	r2, #3
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d123      	bne.n	80043d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	08da      	lsrs	r2, r3, #3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3208      	adds	r2, #8
 8004390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	220f      	movs	r2, #15
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	08da      	lsrs	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3208      	adds	r2, #8
 80043ca:	69b9      	ldr	r1, [r7, #24]
 80043cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	2203      	movs	r2, #3
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0203 	and.w	r2, r3, #3
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80b4 	beq.w	800457a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	4b60      	ldr	r3, [pc, #384]	; (8004598 <HAL_GPIO_Init+0x30c>)
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	4a5f      	ldr	r2, [pc, #380]	; (8004598 <HAL_GPIO_Init+0x30c>)
 800441c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004420:	6453      	str	r3, [r2, #68]	; 0x44
 8004422:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <HAL_GPIO_Init+0x30c>)
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800442e:	4a5b      	ldr	r2, [pc, #364]	; (800459c <HAL_GPIO_Init+0x310>)
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	089b      	lsrs	r3, r3, #2
 8004434:	3302      	adds	r3, #2
 8004436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	220f      	movs	r2, #15
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4013      	ands	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a52      	ldr	r2, [pc, #328]	; (80045a0 <HAL_GPIO_Init+0x314>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d02b      	beq.n	80044b2 <HAL_GPIO_Init+0x226>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a51      	ldr	r2, [pc, #324]	; (80045a4 <HAL_GPIO_Init+0x318>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d025      	beq.n	80044ae <HAL_GPIO_Init+0x222>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a50      	ldr	r2, [pc, #320]	; (80045a8 <HAL_GPIO_Init+0x31c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01f      	beq.n	80044aa <HAL_GPIO_Init+0x21e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a4f      	ldr	r2, [pc, #316]	; (80045ac <HAL_GPIO_Init+0x320>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d019      	beq.n	80044a6 <HAL_GPIO_Init+0x21a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a4e      	ldr	r2, [pc, #312]	; (80045b0 <HAL_GPIO_Init+0x324>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d013      	beq.n	80044a2 <HAL_GPIO_Init+0x216>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a4d      	ldr	r2, [pc, #308]	; (80045b4 <HAL_GPIO_Init+0x328>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00d      	beq.n	800449e <HAL_GPIO_Init+0x212>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a4c      	ldr	r2, [pc, #304]	; (80045b8 <HAL_GPIO_Init+0x32c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d007      	beq.n	800449a <HAL_GPIO_Init+0x20e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a4b      	ldr	r2, [pc, #300]	; (80045bc <HAL_GPIO_Init+0x330>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d101      	bne.n	8004496 <HAL_GPIO_Init+0x20a>
 8004492:	2307      	movs	r3, #7
 8004494:	e00e      	b.n	80044b4 <HAL_GPIO_Init+0x228>
 8004496:	2308      	movs	r3, #8
 8004498:	e00c      	b.n	80044b4 <HAL_GPIO_Init+0x228>
 800449a:	2306      	movs	r3, #6
 800449c:	e00a      	b.n	80044b4 <HAL_GPIO_Init+0x228>
 800449e:	2305      	movs	r3, #5
 80044a0:	e008      	b.n	80044b4 <HAL_GPIO_Init+0x228>
 80044a2:	2304      	movs	r3, #4
 80044a4:	e006      	b.n	80044b4 <HAL_GPIO_Init+0x228>
 80044a6:	2303      	movs	r3, #3
 80044a8:	e004      	b.n	80044b4 <HAL_GPIO_Init+0x228>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e002      	b.n	80044b4 <HAL_GPIO_Init+0x228>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_GPIO_Init+0x228>
 80044b2:	2300      	movs	r3, #0
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	f002 0203 	and.w	r2, r2, #3
 80044ba:	0092      	lsls	r2, r2, #2
 80044bc:	4093      	lsls	r3, r2
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044c4:	4935      	ldr	r1, [pc, #212]	; (800459c <HAL_GPIO_Init+0x310>)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	3302      	adds	r3, #2
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044d2:	4b3b      	ldr	r3, [pc, #236]	; (80045c0 <HAL_GPIO_Init+0x334>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	43db      	mvns	r3, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044f6:	4a32      	ldr	r2, [pc, #200]	; (80045c0 <HAL_GPIO_Init+0x334>)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044fc:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <HAL_GPIO_Init+0x334>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004520:	4a27      	ldr	r2, [pc, #156]	; (80045c0 <HAL_GPIO_Init+0x334>)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004526:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <HAL_GPIO_Init+0x334>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800454a:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <HAL_GPIO_Init+0x334>)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004550:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_GPIO_Init+0x334>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004574:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <HAL_GPIO_Init+0x334>)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	3301      	adds	r3, #1
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b0f      	cmp	r3, #15
 8004584:	f67f ae90 	bls.w	80042a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	3724      	adds	r7, #36	; 0x24
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	40013800 	.word	0x40013800
 80045a0:	40020000 	.word	0x40020000
 80045a4:	40020400 	.word	0x40020400
 80045a8:	40020800 	.word	0x40020800
 80045ac:	40020c00 	.word	0x40020c00
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40021400 	.word	0x40021400
 80045b8:	40021800 	.word	0x40021800
 80045bc:	40021c00 	.word	0x40021c00
 80045c0:	40013c00 	.word	0x40013c00

080045c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	807b      	strh	r3, [r7, #2]
 80045d0:	4613      	mov	r3, r2
 80045d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045d4:	787b      	ldrb	r3, [r7, #1]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045da:	887a      	ldrh	r2, [r7, #2]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045e0:	e003      	b.n	80045ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045e2:	887b      	ldrh	r3, [r7, #2]
 80045e4:	041a      	lsls	r2, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	619a      	str	r2, [r3, #24]
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004608:	887a      	ldrh	r2, [r7, #2]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4013      	ands	r3, r2
 800460e:	041a      	lsls	r2, r3, #16
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	43d9      	mvns	r1, r3
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	400b      	ands	r3, r1
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	619a      	str	r2, [r3, #24]
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f003 fd9d 	bl	8008180 <USB_GetMode>
 8004646:	4603      	mov	r3, r0
 8004648:	2b01      	cmp	r3, #1
 800464a:	f040 80fb 	bne.w	8004844 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f003 fd60 	bl	8008118 <USB_ReadInterrupts>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80f1 	beq.w	8004842 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f003 fd57 	bl	8008118 <USB_ReadInterrupts>
 800466a:	4603      	mov	r3, r0
 800466c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004674:	d104      	bne.n	8004680 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800467e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f003 fd47 	bl	8008118 <USB_ReadInterrupts>
 800468a:	4603      	mov	r3, r0
 800468c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004694:	d104      	bne.n	80046a0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800469e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f003 fd37 	bl	8008118 <USB_ReadInterrupts>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b4:	d104      	bne.n	80046c0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80046be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f003 fd27 	bl	8008118 <USB_ReadInterrupts>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d103      	bne.n	80046dc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2202      	movs	r2, #2
 80046da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f003 fd19 	bl	8008118 <USB_ReadInterrupts>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046f0:	d120      	bne.n	8004734 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80046fa:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d113      	bne.n	8004734 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800470c:	2110      	movs	r1, #16
 800470e:	6938      	ldr	r0, [r7, #16]
 8004710:	f003 fc4a 	bl	8007fa8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004714:	6938      	ldr	r0, [r7, #16]
 8004716:	f003 fc79 	bl	800800c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	7a5b      	ldrb	r3, [r3, #9]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d105      	bne.n	800472e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2101      	movs	r1, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f003 fd37 	bl	800819c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f006 ff54 	bl	800b5dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f003 fced 	bl	8008118 <USB_ReadInterrupts>
 800473e:	4603      	mov	r3, r0
 8004740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004748:	d102      	bne.n	8004750 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f001 fc87 	bl	800605e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f003 fcdf 	bl	8008118 <USB_ReadInterrupts>
 800475a:	4603      	mov	r3, r0
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b08      	cmp	r3, #8
 8004762:	d106      	bne.n	8004772 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f006 ff1d 	bl	800b5a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2208      	movs	r2, #8
 8004770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f003 fcce 	bl	8008118 <USB_ReadInterrupts>
 800477c:	4603      	mov	r3, r0
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004786:	d139      	bne.n	80047fc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f003 fd42 	bl	8008216 <USB_HC_ReadInterrupt>
 8004792:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e025      	b.n	80047e6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d018      	beq.n	80047e0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c4:	d106      	bne.n	80047d4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	4619      	mov	r1, r3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f859 	bl	8004884 <HCD_HC_IN_IRQHandler>
 80047d2:	e005      	b.n	80047e0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 febb 	bl	8005556 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	3301      	adds	r3, #1
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	795b      	ldrb	r3, [r3, #5]
 80047ea:	461a      	mov	r2, r3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d3d3      	bcc.n	800479a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f003 fc89 	bl	8008118 <USB_ReadInterrupts>
 8004806:	4603      	mov	r3, r0
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b10      	cmp	r3, #16
 800480e:	d101      	bne.n	8004814 <HAL_HCD_IRQHandler+0x1ea>
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <HAL_HCD_IRQHandler+0x1ec>
 8004814:	2300      	movs	r3, #0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d014      	beq.n	8004844 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0210 	bic.w	r2, r2, #16
 8004828:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 fb38 	bl	8005ea0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0210 	orr.w	r2, r2, #16
 800483e:	619a      	str	r2, [r3, #24]
 8004840:	e000      	b.n	8004844 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004842:	bf00      	nop
    }
  }
}
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_HCD_Stop+0x16>
 800485c:	2302      	movs	r3, #2
 800485e:	e00d      	b.n	800487c <HAL_HCD_Stop+0x32>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f003 fe03 	bl	8008478 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	4611      	mov	r1, r2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f003 fc4b 	bl	800813e <USB_ReadChInterrupts>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d11a      	bne.n	80048e8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048be:	461a      	mov	r2, r3
 80048c0:	2304      	movs	r3, #4
 80048c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	334d      	adds	r3, #77	; 0x4d
 80048d4:	2207      	movs	r2, #7
 80048d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	78fa      	ldrb	r2, [r7, #3]
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f003 fca9 	bl	8008238 <USB_HC_Halt>
 80048e6:	e09e      	b.n	8004a26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	4611      	mov	r1, r2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f003 fc24 	bl	800813e <USB_ReadChInterrupts>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004900:	d11b      	bne.n	800493a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4413      	add	r3, r2
 800490a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490e:	461a      	mov	r2, r3
 8004910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004914:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	334d      	adds	r3, #77	; 0x4d
 8004926:	2208      	movs	r2, #8
 8004928:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f003 fc80 	bl	8008238 <USB_HC_Halt>
 8004938:	e075      	b.n	8004a26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f003 fbfb 	bl	800813e <USB_ReadChInterrupts>
 8004948:	4603      	mov	r3, r0
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b08      	cmp	r3, #8
 8004950:	d11a      	bne.n	8004988 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495e:	461a      	mov	r2, r3
 8004960:	2308      	movs	r3, #8
 8004962:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	334d      	adds	r3, #77	; 0x4d
 8004974:	2206      	movs	r2, #6
 8004976:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	78fa      	ldrb	r2, [r7, #3]
 800497e:	4611      	mov	r1, r2
 8004980:	4618      	mov	r0, r3
 8004982:	f003 fc59 	bl	8008238 <USB_HC_Halt>
 8004986:	e04e      	b.n	8004a26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f003 fbd4 	bl	800813e <USB_ReadChInterrupts>
 8004996:	4603      	mov	r3, r0
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a0:	d11b      	bne.n	80049da <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ae:	461a      	mov	r2, r3
 80049b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	334d      	adds	r3, #77	; 0x4d
 80049c6:	2209      	movs	r2, #9
 80049c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f003 fc30 	bl	8008238 <USB_HC_Halt>
 80049d8:	e025      	b.n	8004a26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f003 fbab 	bl	800813e <USB_ReadChInterrupts>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b80      	cmp	r3, #128	; 0x80
 80049f0:	d119      	bne.n	8004a26 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fe:	461a      	mov	r2, r3
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004a04:	78fa      	ldrb	r2, [r7, #3]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	334d      	adds	r3, #77	; 0x4d
 8004a14:	2207      	movs	r2, #7
 8004a16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f003 fc09 	bl	8008238 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f003 fb85 	bl	800813e <USB_ReadChInterrupts>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a3e:	d112      	bne.n	8004a66 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	4611      	mov	r1, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f003 fbf5 	bl	8008238 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a60:	6093      	str	r3, [r2, #8]
 8004a62:	f000 bd75 	b.w	8005550 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f003 fb65 	bl	800813e <USB_ReadChInterrupts>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	f040 8128 	bne.w	8004cd0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2320      	movs	r3, #32
 8004a90:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	331b      	adds	r3, #27
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d119      	bne.n	8004adc <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	331b      	adds	r3, #27
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ada:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	799b      	ldrb	r3, [r3, #6]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01b      	beq.n	8004b1c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004ae4:	78fa      	ldrb	r2, [r7, #3]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	3330      	adds	r3, #48	; 0x30
 8004af4:	6819      	ldr	r1, [r3, #0]
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b08:	78fa      	ldrb	r2, [r7, #3]
 8004b0a:	1ac9      	subs	r1, r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4403      	add	r3, r0
 8004b18:	3338      	adds	r3, #56	; 0x38
 8004b1a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004b1c:	78fa      	ldrb	r2, [r7, #3]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	334d      	adds	r3, #77	; 0x4d
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3344      	adds	r3, #68	; 0x44
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b50:	461a      	mov	r2, r3
 8004b52:	2301      	movs	r3, #1
 8004b54:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	3326      	adds	r3, #38	; 0x26
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	3326      	adds	r3, #38	; 0x26
 8004b7c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d110      	bne.n	8004ba4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f003 fb54 	bl	8008238 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2310      	movs	r3, #16
 8004ba0:	6093      	str	r3, [r2, #8]
 8004ba2:	e03d      	b.n	8004c20 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	3326      	adds	r3, #38	; 0x26
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d00a      	beq.n	8004bd0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3326      	adds	r3, #38	; 0x26
 8004bca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d127      	bne.n	8004c20 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bee:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	334c      	adds	r3, #76	; 0x4c
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	334c      	adds	r3, #76	; 0x4c
 8004c14:	781a      	ldrb	r2, [r3, #0]
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f006 fcec 	bl	800b5f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	799b      	ldrb	r3, [r3, #6]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d13b      	bne.n	8004ca0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	3338      	adds	r3, #56	; 0x38
 8004c38:	6819      	ldr	r1, [r3, #0]
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4403      	add	r3, r0
 8004c48:	3328      	adds	r3, #40	; 0x28
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	440b      	add	r3, r1
 8004c4e:	1e59      	subs	r1, r3, #1
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4403      	add	r3, r0
 8004c5e:	3328      	adds	r3, #40	; 0x28
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8470 	beq.w	8005550 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	333c      	adds	r3, #60	; 0x3c
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	f083 0301 	eor.w	r3, r3, #1
 8004c88:	b2d8      	uxtb	r0, r3
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	333c      	adds	r3, #60	; 0x3c
 8004c98:	4602      	mov	r2, r0
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	f000 bc58 	b.w	8005550 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	333c      	adds	r3, #60	; 0x3c
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	78fa      	ldrb	r2, [r7, #3]
 8004cb4:	f083 0301 	eor.w	r3, r3, #1
 8004cb8:	b2d8      	uxtb	r0, r3
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	333c      	adds	r3, #60	; 0x3c
 8004cc8:	4602      	mov	r2, r0
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	f000 bc40 	b.w	8005550 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f003 fa30 	bl	800813e <USB_ReadChInterrupts>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d131      	bne.n	8004d4c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2320      	movs	r3, #32
 8004cf8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004cfa:	78fa      	ldrb	r2, [r7, #3]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	331a      	adds	r3, #26
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f040 841f 	bne.w	8005550 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	331b      	adds	r3, #27
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	334d      	adds	r3, #77	; 0x4d
 8004d36:	2203      	movs	r2, #3
 8004d38:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f003 fa78 	bl	8008238 <USB_HC_Halt>
 8004d48:	f000 bc02 	b.w	8005550 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	4611      	mov	r1, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f003 f9f2 	bl	800813e <USB_ReadChInterrupts>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	f040 8305 	bne.w	8005370 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d72:	461a      	mov	r2, r3
 8004d74:	2302      	movs	r3, #2
 8004d76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	334d      	adds	r3, #77	; 0x4d
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d114      	bne.n	8004db8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	334d      	adds	r3, #77	; 0x4d
 8004d9e:	2202      	movs	r2, #2
 8004da0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	334c      	adds	r3, #76	; 0x4c
 8004db2:	2201      	movs	r2, #1
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	e2cc      	b.n	8005352 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	334d      	adds	r3, #77	; 0x4d
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d114      	bne.n	8004df8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	334d      	adds	r3, #77	; 0x4d
 8004dde:	2202      	movs	r2, #2
 8004de0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	334c      	adds	r3, #76	; 0x4c
 8004df2:	2205      	movs	r2, #5
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e2ac      	b.n	8005352 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	334d      	adds	r3, #77	; 0x4d
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b07      	cmp	r3, #7
 8004e0c:	d00b      	beq.n	8004e26 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	334d      	adds	r3, #77	; 0x4d
 8004e1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004e20:	2b09      	cmp	r3, #9
 8004e22:	f040 80a6 	bne.w	8004f72 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e26:	78fa      	ldrb	r2, [r7, #3]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	334d      	adds	r3, #77	; 0x4d
 8004e36:	2202      	movs	r2, #2
 8004e38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	3344      	adds	r3, #68	; 0x44
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	1c59      	adds	r1, r3, #1
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4403      	add	r3, r0
 8004e5a:	3344      	adds	r3, #68	; 0x44
 8004e5c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3344      	adds	r3, #68	; 0x44
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d943      	bls.n	8004efc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	3344      	adds	r3, #68	; 0x44
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	331a      	adds	r3, #26
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d123      	bne.n	8004ee6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	331b      	adds	r3, #27
 8004eae:	2200      	movs	r2, #0
 8004eb0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	331c      	adds	r3, #28
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	334c      	adds	r3, #76	; 0x4c
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004efa:	e229      	b.n	8005350 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	334c      	adds	r3, #76	; 0x4c
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3326      	adds	r3, #38	; 0x26
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3326      	adds	r3, #38	; 0x26
 8004f36:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	f040 8209 	bne.w	8005350 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f54:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f5c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f70:	e1ee      	b.n	8005350 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	334d      	adds	r3, #77	; 0x4d
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	f040 80c8 	bne.w	800511a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	334d      	adds	r3, #77	; 0x4d
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	331b      	adds	r3, #27
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f040 81ce 	bne.w	8005352 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3326      	adds	r3, #38	; 0x26
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d16b      	bne.n	80050a4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	3348      	adds	r3, #72	; 0x48
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	1c59      	adds	r1, r3, #1
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4403      	add	r3, r0
 8004fec:	3348      	adds	r3, #72	; 0x48
 8004fee:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	3348      	adds	r3, #72	; 0x48
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d943      	bls.n	800508e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	3348      	adds	r3, #72	; 0x48
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800501a:	78fa      	ldrb	r2, [r7, #3]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	331b      	adds	r3, #27
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	3344      	adds	r3, #68	; 0x44
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d809      	bhi.n	8005058 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	331c      	adds	r3, #28
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	440a      	add	r2, r1
 800506e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005076:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	334c      	adds	r3, #76	; 0x4c
 8005088:	2204      	movs	r2, #4
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e014      	b.n	80050b8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800508e:	78fa      	ldrb	r2, [r7, #3]
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	334c      	adds	r3, #76	; 0x4c
 800509e:	2202      	movs	r2, #2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e009      	b.n	80050b8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050a4:	78fa      	ldrb	r2, [r7, #3]
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	334c      	adds	r3, #76	; 0x4c
 80050b4:	2202      	movs	r2, #2
 80050b6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	3326      	adds	r3, #38	; 0x26
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	3326      	adds	r3, #38	; 0x26
 80050de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	f040 8136 	bne.w	8005352 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005104:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	e11b      	b.n	8005352 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	334d      	adds	r3, #77	; 0x4d
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b03      	cmp	r3, #3
 800512e:	f040 8081 	bne.w	8005234 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	334d      	adds	r3, #77	; 0x4d
 8005142:	2202      	movs	r2, #2
 8005144:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	331b      	adds	r3, #27
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	f040 80fa 	bne.w	8005352 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	334c      	adds	r3, #76	; 0x4c
 800516e:	2202      	movs	r2, #2
 8005170:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4413      	add	r3, r2
 800517a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	440a      	add	r2, r1
 8005188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800518c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005190:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	0151      	lsls	r1, r2, #5
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	440a      	add	r2, r1
 80051c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051cc:	f023 0320 	bic.w	r3, r3, #32
 80051d0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	3326      	adds	r3, #38	; 0x26
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3326      	adds	r3, #38	; 0x26
 80051f8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	f040 80a9 	bne.w	8005352 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005216:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800521e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4413      	add	r3, r2
 8005228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522c:	461a      	mov	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e08e      	b.n	8005352 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005234:	78fa      	ldrb	r2, [r7, #3]
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	334d      	adds	r3, #77	; 0x4d
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b04      	cmp	r3, #4
 8005248:	d143      	bne.n	80052d2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	334d      	adds	r3, #77	; 0x4d
 800525a:	2202      	movs	r2, #2
 800525c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	334c      	adds	r3, #76	; 0x4c
 800526e:	2202      	movs	r2, #2
 8005270:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3326      	adds	r3, #38	; 0x26
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	3326      	adds	r3, #38	; 0x26
 8005298:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800529a:	2b02      	cmp	r3, #2
 800529c:	d159      	bne.n	8005352 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052b4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052bc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ca:	461a      	mov	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	e03f      	b.n	8005352 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	334d      	adds	r3, #77	; 0x4d
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d126      	bne.n	8005336 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052e8:	78fa      	ldrb	r2, [r7, #3]
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	334d      	adds	r3, #77	; 0x4d
 80052f8:	2202      	movs	r2, #2
 80052fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80052fc:	78fa      	ldrb	r2, [r7, #3]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3344      	adds	r3, #68	; 0x44
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	1c59      	adds	r1, r3, #1
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4403      	add	r3, r0
 800531c:	3344      	adds	r3, #68	; 0x44
 800531e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	334c      	adds	r3, #76	; 0x4c
 8005330:	2204      	movs	r2, #4
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	e00d      	b.n	8005352 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	334d      	adds	r3, #77	; 0x4d
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b02      	cmp	r3, #2
 800534a:	f000 8100 	beq.w	800554e <HCD_HC_IN_IRQHandler+0xcca>
 800534e:	e000      	b.n	8005352 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005350:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	334c      	adds	r3, #76	; 0x4c
 8005362:	781a      	ldrb	r2, [r3, #0]
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f006 f945 	bl	800b5f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800536e:	e0ef      	b.n	8005550 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	78fa      	ldrb	r2, [r7, #3]
 8005376:	4611      	mov	r1, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f002 fee0 	bl	800813e <USB_ReadChInterrupts>
 800537e:	4603      	mov	r3, r0
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d12f      	bne.n	80053e8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4413      	add	r3, r2
 8005390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005394:	461a      	mov	r2, r3
 8005396:	2340      	movs	r3, #64	; 0x40
 8005398:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	334d      	adds	r3, #77	; 0x4d
 80053aa:	2205      	movs	r2, #5
 80053ac:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80053ae:	78fa      	ldrb	r2, [r7, #3]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	331a      	adds	r3, #26
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d109      	bne.n	80053d8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	3344      	adds	r3, #68	; 0x44
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	78fa      	ldrb	r2, [r7, #3]
 80053de:	4611      	mov	r1, r2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f002 ff29 	bl	8008238 <USB_HC_Halt>
 80053e6:	e0b3      	b.n	8005550 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	4611      	mov	r1, r2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f002 fea4 	bl	800813e <USB_ReadChInterrupts>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	f040 80a7 	bne.w	8005550 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005402:	78fa      	ldrb	r2, [r7, #3]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	3326      	adds	r3, #38	; 0x26
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b03      	cmp	r3, #3
 8005416:	d11b      	bne.n	8005450 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	3344      	adds	r3, #68	; 0x44
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800542c:	78fa      	ldrb	r2, [r7, #3]
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	334d      	adds	r3, #77	; 0x4d
 800543c:	2204      	movs	r2, #4
 800543e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	78fa      	ldrb	r2, [r7, #3]
 8005446:	4611      	mov	r1, r2
 8005448:	4618      	mov	r0, r3
 800544a:	f002 fef5 	bl	8008238 <USB_HC_Halt>
 800544e:	e03f      	b.n	80054d0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005450:	78fa      	ldrb	r2, [r7, #3]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	1a9b      	subs	r3, r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	3326      	adds	r3, #38	; 0x26
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	3326      	adds	r3, #38	; 0x26
 8005476:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005478:	2b02      	cmp	r3, #2
 800547a:	d129      	bne.n	80054d0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	3344      	adds	r3, #68	; 0x44
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	799b      	ldrb	r3, [r3, #6]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HCD_HC_IN_IRQHandler+0xc2a>
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	331b      	adds	r3, #27
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d110      	bne.n	80054d0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	334d      	adds	r3, #77	; 0x4d
 80054be:	2204      	movs	r2, #4
 80054c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 feb4 	bl	8008238 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80054d0:	78fa      	ldrb	r2, [r7, #3]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	331b      	adds	r3, #27
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d129      	bne.n	800553a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	331b      	adds	r3, #27
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4413      	add	r3, r2
 8005502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	440a      	add	r2, r1
 8005510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005518:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	440a      	add	r2, r1
 8005530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005534:	f043 0320 	orr.w	r3, r3, #32
 8005538:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4413      	add	r3, r2
 8005542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005546:	461a      	mov	r2, r3
 8005548:	2310      	movs	r3, #16
 800554a:	6093      	str	r3, [r2, #8]
 800554c:	e000      	b.n	8005550 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800554e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b086      	sub	sp, #24
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	4611      	mov	r1, r2
 8005574:	4618      	mov	r0, r3
 8005576:	f002 fde2 	bl	800813e <USB_ReadChInterrupts>
 800557a:	4603      	mov	r3, r0
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b04      	cmp	r3, #4
 8005582:	d11b      	bne.n	80055bc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4413      	add	r3, r2
 800558c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005590:	461a      	mov	r2, r3
 8005592:	2304      	movs	r3, #4
 8005594:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	334d      	adds	r3, #77	; 0x4d
 80055a6:	2207      	movs	r2, #7
 80055a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	78fa      	ldrb	r2, [r7, #3]
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f002 fe40 	bl	8008238 <USB_HC_Halt>
 80055b8:	f000 bc6f 	b.w	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f002 fdba 	bl	800813e <USB_ReadChInterrupts>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	f040 8082 	bne.w	80056da <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e2:	461a      	mov	r2, r3
 80055e4:	2320      	movs	r3, #32
 80055e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80055e8:	78fa      	ldrb	r2, [r7, #3]
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	3319      	adds	r3, #25
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d124      	bne.n	8005648 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80055fe:	78fa      	ldrb	r2, [r7, #3]
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	3319      	adds	r3, #25
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	334c      	adds	r3, #76	; 0x4c
 8005622:	2202      	movs	r2, #2
 8005624:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005626:	78fa      	ldrb	r2, [r7, #3]
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	1a9b      	subs	r3, r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	334d      	adds	r3, #77	; 0x4d
 8005636:	2203      	movs	r2, #3
 8005638:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	78fa      	ldrb	r2, [r7, #3]
 8005640:	4611      	mov	r1, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f002 fdf8 	bl	8008238 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	331a      	adds	r3, #26
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b01      	cmp	r3, #1
 800565c:	f040 841d 	bne.w	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	331b      	adds	r3, #27
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 8411 	bne.w	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005678:	78fa      	ldrb	r2, [r7, #3]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	3326      	adds	r3, #38	; 0x26
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d009      	beq.n	80056a2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	331b      	adds	r3, #27
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	334d      	adds	r3, #77	; 0x4d
 80056b2:	2203      	movs	r2, #3
 80056b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	4611      	mov	r1, r2
 80056be:	4618      	mov	r0, r3
 80056c0:	f002 fdba 	bl	8008238 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	3344      	adds	r3, #68	; 0x44
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	e3df      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	78fa      	ldrb	r2, [r7, #3]
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f002 fd2b 	bl	800813e <USB_ReadChInterrupts>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f2:	d111      	bne.n	8005718 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005700:	461a      	mov	r2, r3
 8005702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005706:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	78fa      	ldrb	r2, [r7, #3]
 800570e:	4611      	mov	r1, r2
 8005710:	4618      	mov	r0, r3
 8005712:	f002 fd91 	bl	8008238 <USB_HC_Halt>
 8005716:	e3c0      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	78fa      	ldrb	r2, [r7, #3]
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f002 fd0c 	bl	800813e <USB_ReadChInterrupts>
 8005726:	4603      	mov	r3, r0
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b01      	cmp	r3, #1
 800572e:	d168      	bne.n	8005802 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	3344      	adds	r3, #68	; 0x44
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	4611      	mov	r1, r2
 800574c:	4618      	mov	r0, r3
 800574e:	f002 fcf6 	bl	800813e <USB_ReadChInterrupts>
 8005752:	4603      	mov	r3, r0
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d112      	bne.n	8005782 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	3319      	adds	r3, #25
 800576c:	2201      	movs	r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577c:	461a      	mov	r2, r3
 800577e:	2340      	movs	r3, #64	; 0x40
 8005780:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	331b      	adds	r3, #27
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d019      	beq.n	80057cc <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	331b      	adds	r3, #27
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ca:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d8:	461a      	mov	r2, r3
 80057da:	2301      	movs	r3, #1
 80057dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	334d      	adds	r3, #77	; 0x4d
 80057ee:	2201      	movs	r2, #1
 80057f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f002 fd1c 	bl	8008238 <USB_HC_Halt>
 8005800:	e34b      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	78fa      	ldrb	r2, [r7, #3]
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f002 fc97 	bl	800813e <USB_ReadChInterrupts>
 8005810:	4603      	mov	r3, r0
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d139      	bne.n	800588e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800581a:	78fa      	ldrb	r2, [r7, #3]
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	334d      	adds	r3, #77	; 0x4d
 800582a:	2205      	movs	r2, #5
 800582c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	331a      	adds	r3, #26
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	3319      	adds	r3, #25
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005858:	78fa      	ldrb	r2, [r7, #3]
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	1a9b      	subs	r3, r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	3344      	adds	r3, #68	; 0x44
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	78fa      	ldrb	r2, [r7, #3]
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f002 fcdf 	bl	8008238 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	461a      	mov	r2, r3
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	6093      	str	r3, [r2, #8]
 800588c:	e305      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f002 fc51 	bl	800813e <USB_ReadChInterrupts>
 800589c:	4603      	mov	r3, r0
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d11a      	bne.n	80058dc <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b2:	461a      	mov	r2, r3
 80058b4:	2308      	movs	r3, #8
 80058b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80058b8:	78fa      	ldrb	r2, [r7, #3]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	334d      	adds	r3, #77	; 0x4d
 80058c8:	2206      	movs	r2, #6
 80058ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	78fa      	ldrb	r2, [r7, #3]
 80058d2:	4611      	mov	r1, r2
 80058d4:	4618      	mov	r0, r3
 80058d6:	f002 fcaf 	bl	8008238 <USB_HC_Halt>
 80058da:	e2de      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	4611      	mov	r1, r2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f002 fc2a 	bl	800813e <USB_ReadChInterrupts>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d144      	bne.n	800597e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	3344      	adds	r3, #68	; 0x44
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	334d      	adds	r3, #77	; 0x4d
 8005918:	2204      	movs	r2, #4
 800591a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	4613      	mov	r3, r2
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	3319      	adds	r3, #25
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d114      	bne.n	800595c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	3318      	adds	r3, #24
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005948:	78fa      	ldrb	r2, [r7, #3]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	3319      	adds	r3, #25
 8005958:	2201      	movs	r2, #1
 800595a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f002 fc67 	bl	8008238 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005976:	461a      	mov	r2, r3
 8005978:	2310      	movs	r3, #16
 800597a:	6093      	str	r3, [r2, #8]
 800597c:	e28d      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	4611      	mov	r1, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f002 fbd9 	bl	800813e <USB_ReadChInterrupts>
 800598c:	4603      	mov	r3, r0
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b80      	cmp	r3, #128	; 0x80
 8005994:	d169      	bne.n	8005a6a <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	799b      	ldrb	r3, [r3, #6]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d111      	bne.n	80059c2 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800599e:	78fa      	ldrb	r2, [r7, #3]
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	334d      	adds	r3, #77	; 0x4d
 80059ae:	2207      	movs	r2, #7
 80059b0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	78fa      	ldrb	r2, [r7, #3]
 80059b8:	4611      	mov	r1, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f002 fc3c 	bl	8008238 <USB_HC_Halt>
 80059c0:	e049      	b.n	8005a56 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	3344      	adds	r3, #68	; 0x44
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	1c59      	adds	r1, r3, #1
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	1a9b      	subs	r3, r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4403      	add	r3, r0
 80059e2:	3344      	adds	r3, #68	; 0x44
 80059e4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	3344      	adds	r3, #68	; 0x44
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d922      	bls.n	8005a42 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80059fc:	78fa      	ldrb	r2, [r7, #3]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	3344      	adds	r3, #68	; 0x44
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	334c      	adds	r3, #76	; 0x4c
 8005a20:	2204      	movs	r2, #4
 8005a22:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005a24:	78fa      	ldrb	r2, [r7, #3]
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	334c      	adds	r3, #76	; 0x4c
 8005a34:	781a      	ldrb	r2, [r3, #0]
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f005 fddc 	bl	800b5f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005a40:	e009      	b.n	8005a56 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a42:	78fa      	ldrb	r2, [r7, #3]
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	1a9b      	subs	r3, r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	334c      	adds	r3, #76	; 0x4c
 8005a52:	2202      	movs	r2, #2
 8005a54:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a62:	461a      	mov	r2, r3
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	6093      	str	r3, [r2, #8]
 8005a68:	e217      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	78fa      	ldrb	r2, [r7, #3]
 8005a70:	4611      	mov	r1, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f002 fb63 	bl	800813e <USB_ReadChInterrupts>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a82:	d11b      	bne.n	8005abc <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005a84:	78fa      	ldrb	r2, [r7, #3]
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	334d      	adds	r3, #77	; 0x4d
 8005a94:	2209      	movs	r2, #9
 8005a96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	78fa      	ldrb	r2, [r7, #3]
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f002 fbc9 	bl	8008238 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ab8:	6093      	str	r3, [r2, #8]
 8005aba:	e1ee      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	78fa      	ldrb	r2, [r7, #3]
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f002 fb3a 	bl	800813e <USB_ReadChInterrupts>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	f040 81df 	bne.w	8005e94 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005ae8:	78fa      	ldrb	r2, [r7, #3]
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	334d      	adds	r3, #77	; 0x4d
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	f040 8093 	bne.w	8005c26 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	334d      	adds	r3, #77	; 0x4d
 8005b10:	2202      	movs	r2, #2
 8005b12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005b14:	78fa      	ldrb	r2, [r7, #3]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	334c      	adds	r3, #76	; 0x4c
 8005b24:	2201      	movs	r2, #1
 8005b26:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005b28:	78fa      	ldrb	r2, [r7, #3]
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	3326      	adds	r3, #38	; 0x26
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d00b      	beq.n	8005b56 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005b3e:	78fa      	ldrb	r2, [r7, #3]
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	3326      	adds	r3, #38	; 0x26
 8005b4e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	f040 8190 	bne.w	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	799b      	ldrb	r3, [r3, #6]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d115      	bne.n	8005b8a <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005b5e:	78fa      	ldrb	r2, [r7, #3]
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	333d      	adds	r3, #61	; 0x3d
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	78fa      	ldrb	r2, [r7, #3]
 8005b72:	f083 0301 	eor.w	r3, r3, #1
 8005b76:	b2d8      	uxtb	r0, r3
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	333d      	adds	r3, #61	; 0x3d
 8005b86:	4602      	mov	r2, r0
 8005b88:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	799b      	ldrb	r3, [r3, #6]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	f040 8171 	bne.w	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	3334      	adds	r3, #52	; 0x34
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8165 	beq.w	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005bac:	78fa      	ldrb	r2, [r7, #3]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	3334      	adds	r3, #52	; 0x34
 8005bbc:	6819      	ldr	r1, [r3, #0]
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4403      	add	r3, r0
 8005bcc:	3328      	adds	r3, #40	; 0x28
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	440b      	add	r3, r1
 8005bd2:	1e59      	subs	r1, r3, #1
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4403      	add	r3, r0
 8005be2:	3328      	adds	r3, #40	; 0x28
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bea:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 813f 	beq.w	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005bf8:	78fa      	ldrb	r2, [r7, #3]
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	333d      	adds	r3, #61	; 0x3d
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	78fa      	ldrb	r2, [r7, #3]
 8005c0c:	f083 0301 	eor.w	r3, r3, #1
 8005c10:	b2d8      	uxtb	r0, r3
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	333d      	adds	r3, #61	; 0x3d
 8005c20:	4602      	mov	r2, r0
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	e127      	b.n	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	1a9b      	subs	r3, r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	334d      	adds	r3, #77	; 0x4d
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d120      	bne.n	8005c7e <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	334d      	adds	r3, #77	; 0x4d
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005c50:	78fa      	ldrb	r2, [r7, #3]
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	331b      	adds	r3, #27
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	f040 8107 	bne.w	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c68:	78fa      	ldrb	r2, [r7, #3]
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	334c      	adds	r3, #76	; 0x4c
 8005c78:	2202      	movs	r2, #2
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	e0fb      	b.n	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	334d      	adds	r3, #77	; 0x4d
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d13a      	bne.n	8005d0a <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c94:	78fa      	ldrb	r2, [r7, #3]
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	334d      	adds	r3, #77	; 0x4d
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	334c      	adds	r3, #76	; 0x4c
 8005cb8:	2202      	movs	r2, #2
 8005cba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	331b      	adds	r3, #27
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	f040 80d1 	bne.w	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	331b      	adds	r3, #27
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d06:	6053      	str	r3, [r2, #4]
 8005d08:	e0b5      	b.n	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	1a9b      	subs	r3, r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	334d      	adds	r3, #77	; 0x4d
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b05      	cmp	r3, #5
 8005d1e:	d114      	bne.n	8005d4a <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d20:	78fa      	ldrb	r2, [r7, #3]
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	334d      	adds	r3, #77	; 0x4d
 8005d30:	2202      	movs	r2, #2
 8005d32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	334c      	adds	r3, #76	; 0x4c
 8005d44:	2202      	movs	r2, #2
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	e095      	b.n	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	334d      	adds	r3, #77	; 0x4d
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d114      	bne.n	8005d8a <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	334d      	adds	r3, #77	; 0x4d
 8005d70:	2202      	movs	r2, #2
 8005d72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005d74:	78fa      	ldrb	r2, [r7, #3]
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	334c      	adds	r3, #76	; 0x4c
 8005d84:	2205      	movs	r2, #5
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e075      	b.n	8005e76 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	334d      	adds	r3, #77	; 0x4d
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b07      	cmp	r3, #7
 8005d9e:	d00a      	beq.n	8005db6 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	334d      	adds	r3, #77	; 0x4d
 8005db0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005db2:	2b09      	cmp	r3, #9
 8005db4:	d170      	bne.n	8005e98 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	1a9b      	subs	r3, r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	334d      	adds	r3, #77	; 0x4d
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005dca:	78fa      	ldrb	r2, [r7, #3]
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3344      	adds	r3, #68	; 0x44
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	1c59      	adds	r1, r3, #1
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	4613      	mov	r3, r2
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4403      	add	r3, r0
 8005dea:	3344      	adds	r3, #68	; 0x44
 8005dec:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3344      	adds	r3, #68	; 0x44
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d914      	bls.n	8005e2e <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	3344      	adds	r3, #68	; 0x44
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	334c      	adds	r3, #76	; 0x4c
 8005e28:	2204      	movs	r2, #4
 8005e2a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005e2c:	e022      	b.n	8005e74 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	334c      	adds	r3, #76	; 0x4c
 8005e3e:	2202      	movs	r2, #2
 8005e40:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e58:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e60:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005e74:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	334c      	adds	r3, #76	; 0x4c
 8005e86:	781a      	ldrb	r2, [r3, #0]
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f005 fbb3 	bl	800b5f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005e92:	e002      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005e94:	bf00      	nop
 8005e96:	e000      	b.n	8005e9a <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005e98:	bf00      	nop
  }
}
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	; 0x28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	0c5b      	lsrs	r3, r3, #17
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	091b      	lsrs	r3, r3, #4
 8005ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d004      	beq.n	8005ee6 <HCD_RXQLVL_IRQHandler+0x46>
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	f000 80b6 	beq.w	8006050 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005ee4:	e0b7      	b.n	8006056 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80b3 	beq.w	8006054 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	332c      	adds	r3, #44	; 0x2c
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80a7 	beq.w	8006054 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3338      	adds	r3, #56	; 0x38
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	18d1      	adds	r1, r2, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	4613      	mov	r3, r2
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4403      	add	r3, r0
 8005f2a:	3334      	adds	r3, #52	; 0x34
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4299      	cmp	r1, r3
 8005f30:	f200 8083 	bhi.w	800603a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	332c      	adds	r3, #44	; 0x2c
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	b292      	uxth	r2, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f002 f88a 	bl	8008068 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	332c      	adds	r3, #44	; 0x2c
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	18d1      	adds	r1, r2, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4403      	add	r3, r0
 8005f78:	332c      	adds	r3, #44	; 0x2c
 8005f7a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4613      	mov	r3, r2
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	3338      	adds	r3, #56	; 0x38
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	18d1      	adds	r1, r2, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	4613      	mov	r3, r2
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4403      	add	r3, r0
 8005fa0:	3338      	adds	r3, #56	; 0x38
 8005fa2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	0cdb      	lsrs	r3, r3, #19
 8005fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fb8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3328      	adds	r3, #40	; 0x28
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d13f      	bne.n	8006054 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d03c      	beq.n	8006054 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ff0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ff8:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	4413      	add	r3, r2
 8006002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006006:	461a      	mov	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4613      	mov	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	333c      	adds	r3, #60	; 0x3c
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f083 0301 	eor.w	r3, r3, #1
 8006022:	b2d8      	uxtb	r0, r3
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	4613      	mov	r3, r2
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	333c      	adds	r3, #60	; 0x3c
 8006034:	4602      	mov	r2, r0
 8006036:	701a      	strb	r2, [r3, #0]
      break;
 8006038:	e00c      	b.n	8006054 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	4613      	mov	r3, r2
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	334c      	adds	r3, #76	; 0x4c
 800604a:	2204      	movs	r2, #4
 800604c:	701a      	strb	r2, [r3, #0]
      break;
 800604e:	e001      	b.n	8006054 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006050:	bf00      	nop
 8006052:	e000      	b.n	8006056 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006054:	bf00      	nop
  }
}
 8006056:	bf00      	nop
 8006058:	3728      	adds	r7, #40	; 0x28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b086      	sub	sp, #24
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800608a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b02      	cmp	r3, #2
 8006094:	d10b      	bne.n	80060ae <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b01      	cmp	r3, #1
 800609e:	d102      	bne.n	80060a6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f005 fa8d 	bl	800b5c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f043 0302 	orr.w	r3, r3, #2
 80060ac:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d132      	bne.n	800611e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f043 0308 	orr.w	r3, r3, #8
 80060be:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d126      	bne.n	8006118 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7a5b      	ldrb	r3, [r3, #9]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d113      	bne.n	80060fa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060dc:	d106      	bne.n	80060ec <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2102      	movs	r1, #2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f002 f859 	bl	800819c <USB_InitFSLSPClkSel>
 80060ea:	e011      	b.n	8006110 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2101      	movs	r1, #1
 80060f2:	4618      	mov	r0, r3
 80060f4:	f002 f852 	bl	800819c <USB_InitFSLSPClkSel>
 80060f8:	e00a      	b.n	8006110 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	79db      	ldrb	r3, [r3, #7]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d106      	bne.n	8006110 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006108:	461a      	mov	r2, r3
 800610a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800610e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f005 fa83 	bl	800b61c <HAL_HCD_PortEnabled_Callback>
 8006116:	e002      	b.n	800611e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f005 fa8d 	bl	800b638 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b20      	cmp	r3, #32
 8006126:	d103      	bne.n	8006130 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f043 0320 	orr.w	r3, r3, #32
 800612e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006136:	461a      	mov	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6013      	str	r3, [r2, #0]
}
 800613c:	bf00      	nop
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e12b      	b.n	80063ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fa fcaa 	bl	8000ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2224      	movs	r2, #36	; 0x24
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0201 	bic.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061a8:	f001 fa20 	bl	80075ec <HAL_RCC_GetPCLK1Freq>
 80061ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4a81      	ldr	r2, [pc, #516]	; (80063b8 <HAL_I2C_Init+0x274>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d807      	bhi.n	80061c8 <HAL_I2C_Init+0x84>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a80      	ldr	r2, [pc, #512]	; (80063bc <HAL_I2C_Init+0x278>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	bf94      	ite	ls
 80061c0:	2301      	movls	r3, #1
 80061c2:	2300      	movhi	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e006      	b.n	80061d6 <HAL_I2C_Init+0x92>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4a7d      	ldr	r2, [pc, #500]	; (80063c0 <HAL_I2C_Init+0x27c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	bf94      	ite	ls
 80061d0:	2301      	movls	r3, #1
 80061d2:	2300      	movhi	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e0e7      	b.n	80063ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a78      	ldr	r2, [pc, #480]	; (80063c4 <HAL_I2C_Init+0x280>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	0c9b      	lsrs	r3, r3, #18
 80061e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4a6a      	ldr	r2, [pc, #424]	; (80063b8 <HAL_I2C_Init+0x274>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d802      	bhi.n	8006218 <HAL_I2C_Init+0xd4>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	3301      	adds	r3, #1
 8006216:	e009      	b.n	800622c <HAL_I2C_Init+0xe8>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	4a69      	ldr	r2, [pc, #420]	; (80063c8 <HAL_I2C_Init+0x284>)
 8006224:	fba2 2303 	umull	r2, r3, r2, r3
 8006228:	099b      	lsrs	r3, r3, #6
 800622a:	3301      	adds	r3, #1
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	430b      	orrs	r3, r1
 8006232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800623e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	495c      	ldr	r1, [pc, #368]	; (80063b8 <HAL_I2C_Init+0x274>)
 8006248:	428b      	cmp	r3, r1
 800624a:	d819      	bhi.n	8006280 <HAL_I2C_Init+0x13c>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	1e59      	subs	r1, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	fbb1 f3f3 	udiv	r3, r1, r3
 800625a:	1c59      	adds	r1, r3, #1
 800625c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006260:	400b      	ands	r3, r1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_I2C_Init+0x138>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1e59      	subs	r1, r3, #1
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	fbb1 f3f3 	udiv	r3, r1, r3
 8006274:	3301      	adds	r3, #1
 8006276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627a:	e051      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 800627c:	2304      	movs	r3, #4
 800627e:	e04f      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d111      	bne.n	80062ac <HAL_I2C_Init+0x168>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	1e58      	subs	r0, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6859      	ldr	r1, [r3, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	440b      	add	r3, r1
 8006296:	fbb0 f3f3 	udiv	r3, r0, r3
 800629a:	3301      	adds	r3, #1
 800629c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e012      	b.n	80062d2 <HAL_I2C_Init+0x18e>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1e58      	subs	r0, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6859      	ldr	r1, [r3, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	0099      	lsls	r1, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	fbb0 f3f3 	udiv	r3, r0, r3
 80062c2:	3301      	adds	r3, #1
 80062c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf0c      	ite	eq
 80062cc:	2301      	moveq	r3, #1
 80062ce:	2300      	movne	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Init+0x196>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e022      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10e      	bne.n	8006300 <HAL_I2C_Init+0x1bc>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1e58      	subs	r0, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6859      	ldr	r1, [r3, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	440b      	add	r3, r1
 80062f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f4:	3301      	adds	r3, #1
 80062f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fe:	e00f      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1e58      	subs	r0, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6859      	ldr	r1, [r3, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	0099      	lsls	r1, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	fbb0 f3f3 	udiv	r3, r0, r3
 8006316:	3301      	adds	r3, #1
 8006318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800631c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	6809      	ldr	r1, [r1, #0]
 8006324:	4313      	orrs	r3, r2
 8006326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800634e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6911      	ldr	r1, [r2, #16]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68d2      	ldr	r2, [r2, #12]
 800635a:	4311      	orrs	r1, r2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	430b      	orrs	r3, r1
 8006362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	000186a0 	.word	0x000186a0
 80063bc:	001e847f 	.word	0x001e847f
 80063c0:	003d08ff 	.word	0x003d08ff
 80063c4:	431bde83 	.word	0x431bde83
 80063c8:	10624dd3 	.word	0x10624dd3

080063cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e128      	b.n	8006630 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a90      	ldr	r2, [pc, #576]	; (8006638 <HAL_I2S_Init+0x26c>)
 80063f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fa fbab 	bl	8000b54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006414:	f023 030f 	bic.w	r3, r3, #15
 8006418:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2202      	movs	r2, #2
 8006420:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d060      	beq.n	80064ec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006432:	2310      	movs	r3, #16
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	e001      	b.n	800643c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006438:	2320      	movs	r3, #32
 800643a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b20      	cmp	r3, #32
 8006442:	d802      	bhi.n	800644a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800644a:	2001      	movs	r0, #1
 800644c:	f001 fa0a 	bl	8007864 <HAL_RCCEx_GetPeriphCLKFreq>
 8006450:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800645a:	d125      	bne.n	80064a8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d010      	beq.n	8006486 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	fbb2 f2f3 	udiv	r2, r2, r3
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	461a      	mov	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	3305      	adds	r3, #5
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	e01f      	b.n	80064c6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	461a      	mov	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a2:	3305      	adds	r3, #5
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	e00e      	b.n	80064c6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	461a      	mov	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c2:	3305      	adds	r3, #5
 80064c4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	4a5c      	ldr	r2, [pc, #368]	; (800663c <HAL_I2S_Init+0x270>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	08db      	lsrs	r3, r3, #3
 80064d0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	021b      	lsls	r3, r3, #8
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	e003      	b.n	80064f4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80064ec:	2302      	movs	r3, #2
 80064ee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d902      	bls.n	8006500 <HAL_I2S_Init+0x134>
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	2bff      	cmp	r3, #255	; 0xff
 80064fe:	d907      	bls.n	8006510 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006504:	f043 0210 	orr.w	r2, r3, #16
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e08f      	b.n	8006630 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	ea42 0103 	orr.w	r1, r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	430a      	orrs	r2, r1
 8006522:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800652e:	f023 030f 	bic.w	r3, r3, #15
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6851      	ldr	r1, [r2, #4]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6892      	ldr	r2, [r2, #8]
 800653a:	4311      	orrs	r1, r2
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	68d2      	ldr	r2, [r2, #12]
 8006540:	4311      	orrs	r1, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6992      	ldr	r2, [r2, #24]
 8006546:	430a      	orrs	r2, r1
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006552:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d161      	bne.n	8006620 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a38      	ldr	r2, [pc, #224]	; (8006640 <HAL_I2S_Init+0x274>)
 8006560:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a37      	ldr	r2, [pc, #220]	; (8006644 <HAL_I2S_Init+0x278>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d101      	bne.n	8006570 <HAL_I2S_Init+0x1a4>
 800656c:	4b36      	ldr	r3, [pc, #216]	; (8006648 <HAL_I2S_Init+0x27c>)
 800656e:	e001      	b.n	8006574 <HAL_I2S_Init+0x1a8>
 8006570:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	4932      	ldr	r1, [pc, #200]	; (8006644 <HAL_I2S_Init+0x278>)
 800657c:	428a      	cmp	r2, r1
 800657e:	d101      	bne.n	8006584 <HAL_I2S_Init+0x1b8>
 8006580:	4a31      	ldr	r2, [pc, #196]	; (8006648 <HAL_I2S_Init+0x27c>)
 8006582:	e001      	b.n	8006588 <HAL_I2S_Init+0x1bc>
 8006584:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006588:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800658c:	f023 030f 	bic.w	r3, r3, #15
 8006590:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a2b      	ldr	r2, [pc, #172]	; (8006644 <HAL_I2S_Init+0x278>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d101      	bne.n	80065a0 <HAL_I2S_Init+0x1d4>
 800659c:	4b2a      	ldr	r3, [pc, #168]	; (8006648 <HAL_I2S_Init+0x27c>)
 800659e:	e001      	b.n	80065a4 <HAL_I2S_Init+0x1d8>
 80065a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065a4:	2202      	movs	r2, #2
 80065a6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a25      	ldr	r2, [pc, #148]	; (8006644 <HAL_I2S_Init+0x278>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d101      	bne.n	80065b6 <HAL_I2S_Init+0x1ea>
 80065b2:	4b25      	ldr	r3, [pc, #148]	; (8006648 <HAL_I2S_Init+0x27c>)
 80065b4:	e001      	b.n	80065ba <HAL_I2S_Init+0x1ee>
 80065b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c6:	d003      	beq.n	80065d0 <HAL_I2S_Init+0x204>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80065d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	e001      	b.n	80065dc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80065d8:	2300      	movs	r3, #0
 80065da:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065e6:	4313      	orrs	r3, r2
 80065e8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065f0:	4313      	orrs	r3, r2
 80065f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065fa:	4313      	orrs	r3, r2
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	897b      	ldrh	r3, [r7, #10]
 8006600:	4313      	orrs	r3, r2
 8006602:	b29b      	uxth	r3, r3
 8006604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006608:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a0d      	ldr	r2, [pc, #52]	; (8006644 <HAL_I2S_Init+0x278>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d101      	bne.n	8006618 <HAL_I2S_Init+0x24c>
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <HAL_I2S_Init+0x27c>)
 8006616:	e001      	b.n	800661c <HAL_I2S_Init+0x250>
 8006618:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800661c:	897a      	ldrh	r2, [r7, #10]
 800661e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	08006743 	.word	0x08006743
 800663c:	cccccccd 	.word	0xcccccccd
 8006640:	08006859 	.word	0x08006859
 8006644:	40003800 	.word	0x40003800
 8006648:	40003400 	.word	0x40003400

0800664c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	881a      	ldrh	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	1c9a      	adds	r2, r3, #2
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10e      	bne.n	80066dc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff ffb8 	bl	800664c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	b292      	uxth	r2, r2
 80066f8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	1c9a      	adds	r2, r3, #2
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10e      	bne.n	800673a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800672a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff ff93 	bl	8006660 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b086      	sub	sp, #24
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b04      	cmp	r3, #4
 800675c:	d13a      	bne.n	80067d4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b01      	cmp	r3, #1
 8006766:	d109      	bne.n	800677c <I2S_IRQHandler+0x3a>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d102      	bne.n	800677c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff ffb4 	bl	80066e4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d126      	bne.n	80067d4 <I2S_IRQHandler+0x92>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b20      	cmp	r3, #32
 8006792:	d11f      	bne.n	80067d4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80067a4:	2300      	movs	r3, #0
 80067a6:	613b      	str	r3, [r7, #16]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c6:	f043 0202 	orr.w	r2, r3, #2
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff ff50 	bl	8006674 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d136      	bne.n	800684e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d109      	bne.n	80067fe <I2S_IRQHandler+0xbc>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b80      	cmp	r3, #128	; 0x80
 80067f6:	d102      	bne.n	80067fe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ff45 	bl	8006688 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b08      	cmp	r3, #8
 8006806:	d122      	bne.n	800684e <I2S_IRQHandler+0x10c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b20      	cmp	r3, #32
 8006814:	d11b      	bne.n	800684e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006824:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006826:	2300      	movs	r3, #0
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006840:	f043 0204 	orr.w	r2, r3, #4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff ff13 	bl	8006674 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800684e:	bf00      	nop
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a92      	ldr	r2, [pc, #584]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d101      	bne.n	8006876 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006872:	4b92      	ldr	r3, [pc, #584]	; (8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006874:	e001      	b.n	800687a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a8b      	ldr	r2, [pc, #556]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d101      	bne.n	8006894 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006890:	4b8a      	ldr	r3, [pc, #552]	; (8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006892:	e001      	b.n	8006898 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a4:	d004      	beq.n	80068b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f040 8099 	bne.w	80069e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d107      	bne.n	80068ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f925 	bl	8006b14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d107      	bne.n	80068e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f9c8 	bl	8006c74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	d13a      	bne.n	8006964 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d035      	beq.n	8006964 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a6e      	ldr	r2, [pc, #440]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d101      	bne.n	8006906 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006902:	4b6e      	ldr	r3, [pc, #440]	; (8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006904:	e001      	b.n	800690a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4969      	ldr	r1, [pc, #420]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006912:	428b      	cmp	r3, r1
 8006914:	d101      	bne.n	800691a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006916:	4b69      	ldr	r3, [pc, #420]	; (8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006918:	e001      	b.n	800691e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800691a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800691e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006922:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006932:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	f043 0202 	orr.w	r2, r3, #2
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff fe88 	bl	8006674 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b08      	cmp	r3, #8
 800696c:	f040 80c3 	bne.w	8006af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80bd 	beq.w	8006af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800698a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a49      	ldr	r2, [pc, #292]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d101      	bne.n	800699a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006996:	4b49      	ldr	r3, [pc, #292]	; (8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006998:	e001      	b.n	800699e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800699a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4944      	ldr	r1, [pc, #272]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069a6:	428b      	cmp	r3, r1
 80069a8:	d101      	bne.n	80069ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80069aa:	4b44      	ldr	r3, [pc, #272]	; (8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069ac:	e001      	b.n	80069b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80069ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80069b8:	2300      	movs	r3, #0
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	60bb      	str	r3, [r7, #8]
 80069c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d2:	f043 0204 	orr.w	r2, r3, #4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff fe4a 	bl	8006674 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069e0:	e089      	b.n	8006af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d107      	bne.n	80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f8be 	bl	8006b78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d107      	bne.n	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f8fd 	bl	8006c10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1c:	2b40      	cmp	r3, #64	; 0x40
 8006a1e:	d12f      	bne.n	8006a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d02a      	beq.n	8006a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1e      	ldr	r2, [pc, #120]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006a44:	4b1d      	ldr	r3, [pc, #116]	; (8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a46:	e001      	b.n	8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4919      	ldr	r1, [pc, #100]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a54:	428b      	cmp	r3, r1
 8006a56:	d101      	bne.n	8006a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006a58:	4b18      	ldr	r3, [pc, #96]	; (8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a5a:	e001      	b.n	8006a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a72:	f043 0202 	orr.w	r2, r3, #2
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fdfa 	bl	8006674 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d136      	bne.n	8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d031      	beq.n	8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a07      	ldr	r2, [pc, #28]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d101      	bne.n	8006aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006a9e:	4b07      	ldr	r3, [pc, #28]	; (8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006aa0:	e001      	b.n	8006aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006aa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4902      	ldr	r1, [pc, #8]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006aae:	428b      	cmp	r3, r1
 8006ab0:	d106      	bne.n	8006ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006ab2:	4b02      	ldr	r3, [pc, #8]	; (8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ab4:	e006      	b.n	8006ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006ab6:	bf00      	nop
 8006ab8:	40003800 	.word	0x40003800
 8006abc:	40003400 	.word	0x40003400
 8006ac0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ac4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ac8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ad8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae6:	f043 0204 	orr.w	r2, r3, #4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fdc0 	bl	8006674 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006af4:	e000      	b.n	8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006af6:	bf00      	nop
}
 8006af8:	bf00      	nop
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	1c99      	adds	r1, r3, #2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6251      	str	r1, [r2, #36]	; 0x24
 8006b26:	881a      	ldrh	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d113      	bne.n	8006b6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff ffc9 	bl	8006b00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	1c99      	adds	r1, r3, #2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6251      	str	r1, [r2, #36]	; 0x24
 8006b8a:	8819      	ldrh	r1, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <I2SEx_TxISR_I2SExt+0x90>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d101      	bne.n	8006b9a <I2SEx_TxISR_I2SExt+0x22>
 8006b96:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <I2SEx_TxISR_I2SExt+0x94>)
 8006b98:	e001      	b.n	8006b9e <I2SEx_TxISR_I2SExt+0x26>
 8006b9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d121      	bne.n	8006bfe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a12      	ldr	r2, [pc, #72]	; (8006c08 <I2SEx_TxISR_I2SExt+0x90>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d101      	bne.n	8006bc8 <I2SEx_TxISR_I2SExt+0x50>
 8006bc4:	4b11      	ldr	r3, [pc, #68]	; (8006c0c <I2SEx_TxISR_I2SExt+0x94>)
 8006bc6:	e001      	b.n	8006bcc <I2SEx_TxISR_I2SExt+0x54>
 8006bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	490d      	ldr	r1, [pc, #52]	; (8006c08 <I2SEx_TxISR_I2SExt+0x90>)
 8006bd4:	428b      	cmp	r3, r1
 8006bd6:	d101      	bne.n	8006bdc <I2SEx_TxISR_I2SExt+0x64>
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <I2SEx_TxISR_I2SExt+0x94>)
 8006bda:	e001      	b.n	8006be0 <I2SEx_TxISR_I2SExt+0x68>
 8006bdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006be0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006be4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d106      	bne.n	8006bfe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff81 	bl	8006b00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40003800 	.word	0x40003800
 8006c0c:	40003400 	.word	0x40003400

08006c10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68d8      	ldr	r0, [r3, #12]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	1c99      	adds	r1, r3, #2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c28:	b282      	uxth	r2, r0
 8006c2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d113      	bne.n	8006c6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7ff ff4a 	bl	8006b00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a20      	ldr	r2, [pc, #128]	; (8006d04 <I2SEx_RxISR_I2SExt+0x90>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d101      	bne.n	8006c8a <I2SEx_RxISR_I2SExt+0x16>
 8006c86:	4b20      	ldr	r3, [pc, #128]	; (8006d08 <I2SEx_RxISR_I2SExt+0x94>)
 8006c88:	e001      	b.n	8006c8e <I2SEx_RxISR_I2SExt+0x1a>
 8006c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c8e:	68d8      	ldr	r0, [r3, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	1c99      	adds	r1, r3, #2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c9a:	b282      	uxth	r2, r0
 8006c9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d121      	bne.n	8006cfa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <I2SEx_RxISR_I2SExt+0x90>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d101      	bne.n	8006cc4 <I2SEx_RxISR_I2SExt+0x50>
 8006cc0:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <I2SEx_RxISR_I2SExt+0x94>)
 8006cc2:	e001      	b.n	8006cc8 <I2SEx_RxISR_I2SExt+0x54>
 8006cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	490d      	ldr	r1, [pc, #52]	; (8006d04 <I2SEx_RxISR_I2SExt+0x90>)
 8006cd0:	428b      	cmp	r3, r1
 8006cd2:	d101      	bne.n	8006cd8 <I2SEx_RxISR_I2SExt+0x64>
 8006cd4:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <I2SEx_RxISR_I2SExt+0x94>)
 8006cd6:	e001      	b.n	8006cdc <I2SEx_RxISR_I2SExt+0x68>
 8006cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ce0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d106      	bne.n	8006cfa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff ff03 	bl	8006b00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40003800 	.word	0x40003800
 8006d08:	40003400 	.word	0x40003400

08006d0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e267      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d075      	beq.n	8006e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d2a:	4b88      	ldr	r3, [pc, #544]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 030c 	and.w	r3, r3, #12
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d00c      	beq.n	8006d50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d36:	4b85      	ldr	r3, [pc, #532]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d112      	bne.n	8006d68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d42:	4b82      	ldr	r3, [pc, #520]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d4e:	d10b      	bne.n	8006d68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d50:	4b7e      	ldr	r3, [pc, #504]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d05b      	beq.n	8006e14 <HAL_RCC_OscConfig+0x108>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d157      	bne.n	8006e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e242      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d70:	d106      	bne.n	8006d80 <HAL_RCC_OscConfig+0x74>
 8006d72:	4b76      	ldr	r3, [pc, #472]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a75      	ldr	r2, [pc, #468]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	e01d      	b.n	8006dbc <HAL_RCC_OscConfig+0xb0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d88:	d10c      	bne.n	8006da4 <HAL_RCC_OscConfig+0x98>
 8006d8a:	4b70      	ldr	r3, [pc, #448]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a6f      	ldr	r2, [pc, #444]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	4b6d      	ldr	r3, [pc, #436]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a6c      	ldr	r2, [pc, #432]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	e00b      	b.n	8006dbc <HAL_RCC_OscConfig+0xb0>
 8006da4:	4b69      	ldr	r3, [pc, #420]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a68      	ldr	r2, [pc, #416]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	4b66      	ldr	r3, [pc, #408]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a65      	ldr	r2, [pc, #404]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d013      	beq.n	8006dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc4:	f7fd f974 	bl	80040b0 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dcc:	f7fd f970 	bl	80040b0 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b64      	cmp	r3, #100	; 0x64
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e207      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dde:	4b5b      	ldr	r3, [pc, #364]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0xc0>
 8006dea:	e014      	b.n	8006e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dec:	f7fd f960 	bl	80040b0 <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006df4:	f7fd f95c 	bl	80040b0 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b64      	cmp	r3, #100	; 0x64
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e1f3      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e06:	4b51      	ldr	r3, [pc, #324]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <HAL_RCC_OscConfig+0xe8>
 8006e12:	e000      	b.n	8006e16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d063      	beq.n	8006eea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e22:	4b4a      	ldr	r3, [pc, #296]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 030c 	and.w	r3, r3, #12
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00b      	beq.n	8006e46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e2e:	4b47      	ldr	r3, [pc, #284]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d11c      	bne.n	8006e74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e3a:	4b44      	ldr	r3, [pc, #272]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d116      	bne.n	8006e74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e46:	4b41      	ldr	r3, [pc, #260]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_RCC_OscConfig+0x152>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d001      	beq.n	8006e5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e1c7      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e5e:	4b3b      	ldr	r3, [pc, #236]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	4937      	ldr	r1, [pc, #220]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e72:	e03a      	b.n	8006eea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d020      	beq.n	8006ebe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e7c:	4b34      	ldr	r3, [pc, #208]	; (8006f50 <HAL_RCC_OscConfig+0x244>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e82:	f7fd f915 	bl	80040b0 <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e8a:	f7fd f911 	bl	80040b0 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e1a8      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9c:	4b2b      	ldr	r3, [pc, #172]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0f0      	beq.n	8006e8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea8:	4b28      	ldr	r3, [pc, #160]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	00db      	lsls	r3, r3, #3
 8006eb6:	4925      	ldr	r1, [pc, #148]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	600b      	str	r3, [r1, #0]
 8006ebc:	e015      	b.n	8006eea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ebe:	4b24      	ldr	r3, [pc, #144]	; (8006f50 <HAL_RCC_OscConfig+0x244>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec4:	f7fd f8f4 	bl	80040b0 <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ecc:	f7fd f8f0 	bl	80040b0 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e187      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ede:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f0      	bne.n	8006ecc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d036      	beq.n	8006f64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d016      	beq.n	8006f2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006efe:	4b15      	ldr	r3, [pc, #84]	; (8006f54 <HAL_RCC_OscConfig+0x248>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f04:	f7fd f8d4 	bl	80040b0 <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f0c:	f7fd f8d0 	bl	80040b0 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e167      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <HAL_RCC_OscConfig+0x240>)
 8006f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0f0      	beq.n	8006f0c <HAL_RCC_OscConfig+0x200>
 8006f2a:	e01b      	b.n	8006f64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <HAL_RCC_OscConfig+0x248>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f32:	f7fd f8bd 	bl	80040b0 <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f38:	e00e      	b.n	8006f58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f3a:	f7fd f8b9 	bl	80040b0 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d907      	bls.n	8006f58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e150      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	42470000 	.word	0x42470000
 8006f54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f58:	4b88      	ldr	r3, [pc, #544]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8006f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1ea      	bne.n	8006f3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8097 	beq.w	80070a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f72:	2300      	movs	r3, #0
 8006f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f76:	4b81      	ldr	r3, [pc, #516]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10f      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f82:	2300      	movs	r3, #0
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	4b7d      	ldr	r3, [pc, #500]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	4a7c      	ldr	r2, [pc, #496]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8006f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f90:	6413      	str	r3, [r2, #64]	; 0x40
 8006f92:	4b7a      	ldr	r3, [pc, #488]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f9a:	60bb      	str	r3, [r7, #8]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa2:	4b77      	ldr	r3, [pc, #476]	; (8007180 <HAL_RCC_OscConfig+0x474>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d118      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fae:	4b74      	ldr	r3, [pc, #464]	; (8007180 <HAL_RCC_OscConfig+0x474>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a73      	ldr	r2, [pc, #460]	; (8007180 <HAL_RCC_OscConfig+0x474>)
 8006fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fba:	f7fd f879 	bl	80040b0 <HAL_GetTick>
 8006fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc2:	f7fd f875 	bl	80040b0 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e10c      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fd4:	4b6a      	ldr	r3, [pc, #424]	; (8007180 <HAL_RCC_OscConfig+0x474>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0f0      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d106      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x2ea>
 8006fe8:	4b64      	ldr	r3, [pc, #400]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8006fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fec:	4a63      	ldr	r2, [pc, #396]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff4:	e01c      	b.n	8007030 <HAL_RCC_OscConfig+0x324>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b05      	cmp	r3, #5
 8006ffc:	d10c      	bne.n	8007018 <HAL_RCC_OscConfig+0x30c>
 8006ffe:	4b5f      	ldr	r3, [pc, #380]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	4a5e      	ldr	r2, [pc, #376]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8007004:	f043 0304 	orr.w	r3, r3, #4
 8007008:	6713      	str	r3, [r2, #112]	; 0x70
 800700a:	4b5c      	ldr	r3, [pc, #368]	; (800717c <HAL_RCC_OscConfig+0x470>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	4a5b      	ldr	r2, [pc, #364]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8007010:	f043 0301 	orr.w	r3, r3, #1
 8007014:	6713      	str	r3, [r2, #112]	; 0x70
 8007016:	e00b      	b.n	8007030 <HAL_RCC_OscConfig+0x324>
 8007018:	4b58      	ldr	r3, [pc, #352]	; (800717c <HAL_RCC_OscConfig+0x470>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701c:	4a57      	ldr	r2, [pc, #348]	; (800717c <HAL_RCC_OscConfig+0x470>)
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	6713      	str	r3, [r2, #112]	; 0x70
 8007024:	4b55      	ldr	r3, [pc, #340]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	4a54      	ldr	r2, [pc, #336]	; (800717c <HAL_RCC_OscConfig+0x470>)
 800702a:	f023 0304 	bic.w	r3, r3, #4
 800702e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d015      	beq.n	8007064 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007038:	f7fd f83a 	bl	80040b0 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800703e:	e00a      	b.n	8007056 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007040:	f7fd f836 	bl	80040b0 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	f241 3288 	movw	r2, #5000	; 0x1388
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e0cb      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007056:	4b49      	ldr	r3, [pc, #292]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0ee      	beq.n	8007040 <HAL_RCC_OscConfig+0x334>
 8007062:	e014      	b.n	800708e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007064:	f7fd f824 	bl	80040b0 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800706a:	e00a      	b.n	8007082 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800706c:	f7fd f820 	bl	80040b0 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	f241 3288 	movw	r2, #5000	; 0x1388
 800707a:	4293      	cmp	r3, r2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e0b5      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007082:	4b3e      	ldr	r3, [pc, #248]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1ee      	bne.n	800706c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d105      	bne.n	80070a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007094:	4b39      	ldr	r3, [pc, #228]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8007096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007098:	4a38      	ldr	r2, [pc, #224]	; (800717c <HAL_RCC_OscConfig+0x470>)
 800709a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800709e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80a1 	beq.w	80071ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070aa:	4b34      	ldr	r3, [pc, #208]	; (800717c <HAL_RCC_OscConfig+0x470>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 030c 	and.w	r3, r3, #12
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	d05c      	beq.n	8007170 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d141      	bne.n	8007142 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070be:	4b31      	ldr	r3, [pc, #196]	; (8007184 <HAL_RCC_OscConfig+0x478>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c4:	f7fc fff4 	bl	80040b0 <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070cc:	f7fc fff0 	bl	80040b0 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e087      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070de:	4b27      	ldr	r3, [pc, #156]	; (800717c <HAL_RCC_OscConfig+0x470>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1f0      	bne.n	80070cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69da      	ldr	r2, [r3, #28]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	019b      	lsls	r3, r3, #6
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	3b01      	subs	r3, #1
 8007104:	041b      	lsls	r3, r3, #16
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	061b      	lsls	r3, r3, #24
 800710e:	491b      	ldr	r1, [pc, #108]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8007110:	4313      	orrs	r3, r2
 8007112:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007114:	4b1b      	ldr	r3, [pc, #108]	; (8007184 <HAL_RCC_OscConfig+0x478>)
 8007116:	2201      	movs	r2, #1
 8007118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711a:	f7fc ffc9 	bl	80040b0 <HAL_GetTick>
 800711e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007120:	e008      	b.n	8007134 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007122:	f7fc ffc5 	bl	80040b0 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e05c      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007134:	4b11      	ldr	r3, [pc, #68]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0f0      	beq.n	8007122 <HAL_RCC_OscConfig+0x416>
 8007140:	e054      	b.n	80071ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007142:	4b10      	ldr	r3, [pc, #64]	; (8007184 <HAL_RCC_OscConfig+0x478>)
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007148:	f7fc ffb2 	bl	80040b0 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007150:	f7fc ffae 	bl	80040b0 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e045      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007162:	4b06      	ldr	r3, [pc, #24]	; (800717c <HAL_RCC_OscConfig+0x470>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x444>
 800716e:	e03d      	b.n	80071ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d107      	bne.n	8007188 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e038      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
 800717c:	40023800 	.word	0x40023800
 8007180:	40007000 	.word	0x40007000
 8007184:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007188:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <HAL_RCC_OscConfig+0x4ec>)
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d028      	beq.n	80071e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d121      	bne.n	80071e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d11a      	bne.n	80071e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071b8:	4013      	ands	r3, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d111      	bne.n	80071e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	085b      	lsrs	r3, r3, #1
 80071d0:	3b01      	subs	r3, #1
 80071d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d107      	bne.n	80071e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d001      	beq.n	80071ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40023800 	.word	0x40023800

080071fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e0cc      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007210:	4b68      	ldr	r3, [pc, #416]	; (80073b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d90c      	bls.n	8007238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800721e:	4b65      	ldr	r3, [pc, #404]	; (80073b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007226:	4b63      	ldr	r3, [pc, #396]	; (80073b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d001      	beq.n	8007238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e0b8      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d020      	beq.n	8007286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007250:	4b59      	ldr	r3, [pc, #356]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	4a58      	ldr	r2, [pc, #352]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800725a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007268:	4b53      	ldr	r3, [pc, #332]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	4a52      	ldr	r2, [pc, #328]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 800726e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007274:	4b50      	ldr	r3, [pc, #320]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	494d      	ldr	r1, [pc, #308]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007282:	4313      	orrs	r3, r2
 8007284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d044      	beq.n	800731c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d107      	bne.n	80072aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800729a:	4b47      	ldr	r3, [pc, #284]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d119      	bne.n	80072da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e07f      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d003      	beq.n	80072ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d107      	bne.n	80072ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ba:	4b3f      	ldr	r3, [pc, #252]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d109      	bne.n	80072da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e06f      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ca:	4b3b      	ldr	r3, [pc, #236]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e067      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072da:	4b37      	ldr	r3, [pc, #220]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f023 0203 	bic.w	r2, r3, #3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	4934      	ldr	r1, [pc, #208]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072ec:	f7fc fee0 	bl	80040b0 <HAL_GetTick>
 80072f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072f2:	e00a      	b.n	800730a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072f4:	f7fc fedc 	bl	80040b0 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007302:	4293      	cmp	r3, r2
 8007304:	d901      	bls.n	800730a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e04f      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800730a:	4b2b      	ldr	r3, [pc, #172]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 020c 	and.w	r2, r3, #12
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	429a      	cmp	r2, r3
 800731a:	d1eb      	bne.n	80072f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800731c:	4b25      	ldr	r3, [pc, #148]	; (80073b4 <HAL_RCC_ClockConfig+0x1b8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d20c      	bcs.n	8007344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800732a:	4b22      	ldr	r3, [pc, #136]	; (80073b4 <HAL_RCC_ClockConfig+0x1b8>)
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007332:	4b20      	ldr	r3, [pc, #128]	; (80073b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d001      	beq.n	8007344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e032      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007350:	4b19      	ldr	r3, [pc, #100]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4916      	ldr	r1, [pc, #88]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 800735e:	4313      	orrs	r3, r2
 8007360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b00      	cmp	r3, #0
 800736c:	d009      	beq.n	8007382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800736e:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	490e      	ldr	r1, [pc, #56]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 800737e:	4313      	orrs	r3, r2
 8007380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007382:	f000 f821 	bl	80073c8 <HAL_RCC_GetSysClockFreq>
 8007386:	4602      	mov	r2, r0
 8007388:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	091b      	lsrs	r3, r3, #4
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	490a      	ldr	r1, [pc, #40]	; (80073bc <HAL_RCC_ClockConfig+0x1c0>)
 8007394:	5ccb      	ldrb	r3, [r1, r3]
 8007396:	fa22 f303 	lsr.w	r3, r2, r3
 800739a:	4a09      	ldr	r2, [pc, #36]	; (80073c0 <HAL_RCC_ClockConfig+0x1c4>)
 800739c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800739e:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <HAL_RCC_ClockConfig+0x1c8>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7f9 fcc0 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40023c00 	.word	0x40023c00
 80073b8:	40023800 	.word	0x40023800
 80073bc:	0800bb3c 	.word	0x0800bb3c
 80073c0:	20000004 	.word	0x20000004
 80073c4:	20000008 	.word	0x20000008

080073c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073cc:	b094      	sub	sp, #80	; 0x50
 80073ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	647b      	str	r3, [r7, #68]	; 0x44
 80073d4:	2300      	movs	r3, #0
 80073d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d8:	2300      	movs	r3, #0
 80073da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073e0:	4b79      	ldr	r3, [pc, #484]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 030c 	and.w	r3, r3, #12
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d00d      	beq.n	8007408 <HAL_RCC_GetSysClockFreq+0x40>
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	f200 80e1 	bhi.w	80075b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_RCC_GetSysClockFreq+0x34>
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d003      	beq.n	8007402 <HAL_RCC_GetSysClockFreq+0x3a>
 80073fa:	e0db      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073fc:	4b73      	ldr	r3, [pc, #460]	; (80075cc <HAL_RCC_GetSysClockFreq+0x204>)
 80073fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007400:	e0db      	b.n	80075ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007402:	4b73      	ldr	r3, [pc, #460]	; (80075d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007404:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007406:	e0d8      	b.n	80075ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007408:	4b6f      	ldr	r3, [pc, #444]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007410:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007412:	4b6d      	ldr	r3, [pc, #436]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d063      	beq.n	80074e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800741e:	4b6a      	ldr	r3, [pc, #424]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	099b      	lsrs	r3, r3, #6
 8007424:	2200      	movs	r2, #0
 8007426:	63bb      	str	r3, [r7, #56]	; 0x38
 8007428:	63fa      	str	r2, [r7, #60]	; 0x3c
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007430:	633b      	str	r3, [r7, #48]	; 0x30
 8007432:	2300      	movs	r3, #0
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
 8007436:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800743a:	4622      	mov	r2, r4
 800743c:	462b      	mov	r3, r5
 800743e:	f04f 0000 	mov.w	r0, #0
 8007442:	f04f 0100 	mov.w	r1, #0
 8007446:	0159      	lsls	r1, r3, #5
 8007448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800744c:	0150      	lsls	r0, r2, #5
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4621      	mov	r1, r4
 8007454:	1a51      	subs	r1, r2, r1
 8007456:	6139      	str	r1, [r7, #16]
 8007458:	4629      	mov	r1, r5
 800745a:	eb63 0301 	sbc.w	r3, r3, r1
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800746c:	4659      	mov	r1, fp
 800746e:	018b      	lsls	r3, r1, #6
 8007470:	4651      	mov	r1, sl
 8007472:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007476:	4651      	mov	r1, sl
 8007478:	018a      	lsls	r2, r1, #6
 800747a:	4651      	mov	r1, sl
 800747c:	ebb2 0801 	subs.w	r8, r2, r1
 8007480:	4659      	mov	r1, fp
 8007482:	eb63 0901 	sbc.w	r9, r3, r1
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	f04f 0300 	mov.w	r3, #0
 800748e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800749a:	4690      	mov	r8, r2
 800749c:	4699      	mov	r9, r3
 800749e:	4623      	mov	r3, r4
 80074a0:	eb18 0303 	adds.w	r3, r8, r3
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	462b      	mov	r3, r5
 80074a8:	eb49 0303 	adc.w	r3, r9, r3
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	f04f 0200 	mov.w	r2, #0
 80074b2:	f04f 0300 	mov.w	r3, #0
 80074b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074ba:	4629      	mov	r1, r5
 80074bc:	024b      	lsls	r3, r1, #9
 80074be:	4621      	mov	r1, r4
 80074c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074c4:	4621      	mov	r1, r4
 80074c6:	024a      	lsls	r2, r1, #9
 80074c8:	4610      	mov	r0, r2
 80074ca:	4619      	mov	r1, r3
 80074cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ce:	2200      	movs	r2, #0
 80074d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074d8:	f7f8 fe7a 	bl	80001d0 <__aeabi_uldivmod>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4613      	mov	r3, r2
 80074e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074e4:	e058      	b.n	8007598 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074e6:	4b38      	ldr	r3, [pc, #224]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	099b      	lsrs	r3, r3, #6
 80074ec:	2200      	movs	r2, #0
 80074ee:	4618      	mov	r0, r3
 80074f0:	4611      	mov	r1, r2
 80074f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80074f6:	623b      	str	r3, [r7, #32]
 80074f8:	2300      	movs	r3, #0
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
 80074fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007500:	4642      	mov	r2, r8
 8007502:	464b      	mov	r3, r9
 8007504:	f04f 0000 	mov.w	r0, #0
 8007508:	f04f 0100 	mov.w	r1, #0
 800750c:	0159      	lsls	r1, r3, #5
 800750e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007512:	0150      	lsls	r0, r2, #5
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4641      	mov	r1, r8
 800751a:	ebb2 0a01 	subs.w	sl, r2, r1
 800751e:	4649      	mov	r1, r9
 8007520:	eb63 0b01 	sbc.w	fp, r3, r1
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007530:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007534:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007538:	ebb2 040a 	subs.w	r4, r2, sl
 800753c:	eb63 050b 	sbc.w	r5, r3, fp
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	00eb      	lsls	r3, r5, #3
 800754a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800754e:	00e2      	lsls	r2, r4, #3
 8007550:	4614      	mov	r4, r2
 8007552:	461d      	mov	r5, r3
 8007554:	4643      	mov	r3, r8
 8007556:	18e3      	adds	r3, r4, r3
 8007558:	603b      	str	r3, [r7, #0]
 800755a:	464b      	mov	r3, r9
 800755c:	eb45 0303 	adc.w	r3, r5, r3
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800756e:	4629      	mov	r1, r5
 8007570:	028b      	lsls	r3, r1, #10
 8007572:	4621      	mov	r1, r4
 8007574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007578:	4621      	mov	r1, r4
 800757a:	028a      	lsls	r2, r1, #10
 800757c:	4610      	mov	r0, r2
 800757e:	4619      	mov	r1, r3
 8007580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007582:	2200      	movs	r2, #0
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	61fa      	str	r2, [r7, #28]
 8007588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800758c:	f7f8 fe20 	bl	80001d0 <__aeabi_uldivmod>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4613      	mov	r3, r2
 8007596:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007598:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	3301      	adds	r3, #1
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80075a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075b2:	e002      	b.n	80075ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <HAL_RCC_GetSysClockFreq+0x204>)
 80075b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3750      	adds	r7, #80	; 0x50
 80075c0:	46bd      	mov	sp, r7
 80075c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075c6:	bf00      	nop
 80075c8:	40023800 	.word	0x40023800
 80075cc:	00f42400 	.word	0x00f42400
 80075d0:	007a1200 	.word	0x007a1200

080075d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075d8:	4b03      	ldr	r3, [pc, #12]	; (80075e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80075da:	681b      	ldr	r3, [r3, #0]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000004 	.word	0x20000004

080075ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075f0:	f7ff fff0 	bl	80075d4 <HAL_RCC_GetHCLKFreq>
 80075f4:	4602      	mov	r2, r0
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <HAL_RCC_GetPCLK1Freq+0x20>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	0a9b      	lsrs	r3, r3, #10
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	4903      	ldr	r1, [pc, #12]	; (8007610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007602:	5ccb      	ldrb	r3, [r1, r3]
 8007604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007608:	4618      	mov	r0, r3
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40023800 	.word	0x40023800
 8007610:	0800bb4c 	.word	0x0800bb4c

08007614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007618:	f7ff ffdc 	bl	80075d4 <HAL_RCC_GetHCLKFreq>
 800761c:	4602      	mov	r2, r0
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	0b5b      	lsrs	r3, r3, #13
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	4903      	ldr	r1, [pc, #12]	; (8007638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800762a:	5ccb      	ldrb	r3, [r1, r3]
 800762c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007630:	4618      	mov	r0, r3
 8007632:	bd80      	pop	{r7, pc}
 8007634:	40023800 	.word	0x40023800
 8007638:	0800bb4c 	.word	0x0800bb4c

0800763c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	220f      	movs	r2, #15
 800764a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800764c:	4b12      	ldr	r3, [pc, #72]	; (8007698 <HAL_RCC_GetClockConfig+0x5c>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0203 	and.w	r2, r3, #3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007658:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <HAL_RCC_GetClockConfig+0x5c>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007664:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <HAL_RCC_GetClockConfig+0x5c>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007670:	4b09      	ldr	r3, [pc, #36]	; (8007698 <HAL_RCC_GetClockConfig+0x5c>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	08db      	lsrs	r3, r3, #3
 8007676:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800767e:	4b07      	ldr	r3, [pc, #28]	; (800769c <HAL_RCC_GetClockConfig+0x60>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0207 	and.w	r2, r3, #7
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	601a      	str	r2, [r3, #0]
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40023800 	.word	0x40023800
 800769c:	40023c00 	.word	0x40023c00

080076a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d105      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d035      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076c8:	4b62      	ldr	r3, [pc, #392]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076ce:	f7fc fcef 	bl	80040b0 <HAL_GetTick>
 80076d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076d4:	e008      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076d6:	f7fc fceb 	bl	80040b0 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e0b0      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076e8:	4b5b      	ldr	r3, [pc, #364]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1f0      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	019a      	lsls	r2, r3, #6
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	071b      	lsls	r3, r3, #28
 8007700:	4955      	ldr	r1, [pc, #340]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007708:	4b52      	ldr	r3, [pc, #328]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800770a:	2201      	movs	r2, #1
 800770c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800770e:	f7fc fccf 	bl	80040b0 <HAL_GetTick>
 8007712:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007714:	e008      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007716:	f7fc fccb 	bl	80040b0 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d901      	bls.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e090      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007728:	4b4b      	ldr	r3, [pc, #300]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0f0      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8083 	beq.w	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	4b44      	ldr	r3, [pc, #272]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	4a43      	ldr	r2, [pc, #268]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800774c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007750:	6413      	str	r3, [r2, #64]	; 0x40
 8007752:	4b41      	ldr	r3, [pc, #260]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800775e:	4b3f      	ldr	r3, [pc, #252]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a3e      	ldr	r2, [pc, #248]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007768:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800776a:	f7fc fca1 	bl	80040b0 <HAL_GetTick>
 800776e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007770:	e008      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007772:	f7fc fc9d 	bl	80040b0 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e062      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007784:	4b35      	ldr	r3, [pc, #212]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0f0      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007790:	4b31      	ldr	r3, [pc, #196]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007798:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d02f      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d028      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077ae:	4b2a      	ldr	r3, [pc, #168]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077b8:	4b29      	ldr	r3, [pc, #164]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077be:	4b28      	ldr	r3, [pc, #160]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80077c4:	4a24      	ldr	r2, [pc, #144]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077ca:	4b23      	ldr	r3, [pc, #140]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d114      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80077d6:	f7fc fc6b 	bl	80040b0 <HAL_GetTick>
 80077da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077dc:	e00a      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077de:	f7fc fc67 	bl	80040b0 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e02a      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077f4:	4b18      	ldr	r3, [pc, #96]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0ee      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780c:	d10d      	bne.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800780e:	4b12      	ldr	r3, [pc, #72]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800781e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007822:	490d      	ldr	r1, [pc, #52]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007824:	4313      	orrs	r3, r2
 8007826:	608b      	str	r3, [r1, #8]
 8007828:	e005      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800782a:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	4a0a      	ldr	r2, [pc, #40]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007830:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007834:	6093      	str	r3, [r2, #8]
 8007836:	4b08      	ldr	r3, [pc, #32]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007842:	4905      	ldr	r1, [pc, #20]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007844:	4313      	orrs	r3, r2
 8007846:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	42470068 	.word	0x42470068
 8007858:	40023800 	.word	0x40023800
 800785c:	40007000 	.word	0x40007000
 8007860:	42470e40 	.word	0x42470e40

08007864 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d13f      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007882:	4b24      	ldr	r3, [pc, #144]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d006      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007898:	d12f      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800789a:	4b1f      	ldr	r3, [pc, #124]	; (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800789c:	617b      	str	r3, [r7, #20]
          break;
 800789e:	e02f      	b.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80078a0:	4b1c      	ldr	r3, [pc, #112]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ac:	d108      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078ae:	4b19      	ldr	r3, [pc, #100]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b6:	4a19      	ldr	r2, [pc, #100]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80078b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	e007      	b.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078c0:	4b14      	ldr	r3, [pc, #80]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c8:	4a15      	ldr	r2, [pc, #84]	; (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80078ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ce:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80078d0:	4b10      	ldr	r3, [pc, #64]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d6:	099b      	lsrs	r3, r3, #6
 80078d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	fb02 f303 	mul.w	r3, r2, r3
 80078e2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80078e4:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ea:	0f1b      	lsrs	r3, r3, #28
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f6:	617b      	str	r3, [r7, #20]
          break;
 80078f8:	e002      	b.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	617b      	str	r3, [r7, #20]
          break;
 80078fe:	bf00      	nop
        }
      }
      break;
 8007900:	e000      	b.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8007902:	bf00      	nop
    }
  }
  return frequency;
 8007904:	697b      	ldr	r3, [r7, #20]
}
 8007906:	4618      	mov	r0, r3
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40023800 	.word	0x40023800
 8007918:	00bb8000 	.word	0x00bb8000
 800791c:	007a1200 	.word	0x007a1200
 8007920:	00f42400 	.word	0x00f42400

08007924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e07b      	b.n	8007a2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	2b00      	cmp	r3, #0
 800793c:	d108      	bne.n	8007950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007946:	d009      	beq.n	800795c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	61da      	str	r2, [r3, #28]
 800794e:	e005      	b.n	800795c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d106      	bne.n	800797c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7f9 f96c 	bl	8000c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007992:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079a4:	431a      	orrs	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079d6:	431a      	orrs	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e0:	ea42 0103 	orr.w	r1, r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	0c1b      	lsrs	r3, r3, #16
 80079fa:	f003 0104 	and.w	r1, r3, #4
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	f003 0210 	and.w	r2, r3, #16
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e041      	b.n	8007acc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d106      	bne.n	8007a62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7f9 f941 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2202      	movs	r2, #2
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f000 f9b5 	bl	8007de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d001      	beq.n	8007aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e04e      	b.n	8007b8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a23      	ldr	r2, [pc, #140]	; (8007b98 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d022      	beq.n	8007b54 <HAL_TIM_Base_Start_IT+0x80>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b16:	d01d      	beq.n	8007b54 <HAL_TIM_Base_Start_IT+0x80>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a1f      	ldr	r2, [pc, #124]	; (8007b9c <HAL_TIM_Base_Start_IT+0xc8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d018      	beq.n	8007b54 <HAL_TIM_Base_Start_IT+0x80>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d013      	beq.n	8007b54 <HAL_TIM_Base_Start_IT+0x80>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1c      	ldr	r2, [pc, #112]	; (8007ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00e      	beq.n	8007b54 <HAL_TIM_Base_Start_IT+0x80>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1b      	ldr	r2, [pc, #108]	; (8007ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d009      	beq.n	8007b54 <HAL_TIM_Base_Start_IT+0x80>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <HAL_TIM_Base_Start_IT+0xd8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d004      	beq.n	8007b54 <HAL_TIM_Base_Start_IT+0x80>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a18      	ldr	r2, [pc, #96]	; (8007bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d111      	bne.n	8007b78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 0307 	and.w	r3, r3, #7
 8007b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b06      	cmp	r3, #6
 8007b64:	d010      	beq.n	8007b88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 0201 	orr.w	r2, r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b76:	e007      	b.n	8007b88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0201 	orr.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40000400 	.word	0x40000400
 8007ba0:	40000800 	.word	0x40000800
 8007ba4:	40000c00 	.word	0x40000c00
 8007ba8:	40010400 	.word	0x40010400
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40001800 	.word	0x40001800

08007bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d020      	beq.n	8007c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01b      	beq.n	8007c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0202 	mvn.w	r2, #2
 8007be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f8d2 	bl	8007da8 <HAL_TIM_IC_CaptureCallback>
 8007c04:	e005      	b.n	8007c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8c4 	bl	8007d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f8d5 	bl	8007dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d020      	beq.n	8007c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01b      	beq.n	8007c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0204 	mvn.w	r2, #4
 8007c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f8ac 	bl	8007da8 <HAL_TIM_IC_CaptureCallback>
 8007c50:	e005      	b.n	8007c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f89e 	bl	8007d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f8af 	bl	8007dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f003 0308 	and.w	r3, r3, #8
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d020      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f003 0308 	and.w	r3, r3, #8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01b      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f06f 0208 	mvn.w	r2, #8
 8007c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2204      	movs	r2, #4
 8007c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f886 	bl	8007da8 <HAL_TIM_IC_CaptureCallback>
 8007c9c:	e005      	b.n	8007caa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f878 	bl	8007d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f889 	bl	8007dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f003 0310 	and.w	r3, r3, #16
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d020      	beq.n	8007cfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01b      	beq.n	8007cfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f06f 0210 	mvn.w	r2, #16
 8007ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f860 	bl	8007da8 <HAL_TIM_IC_CaptureCallback>
 8007ce8:	e005      	b.n	8007cf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f852 	bl	8007d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f863 	bl	8007dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00c      	beq.n	8007d20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0201 	mvn.w	r2, #1
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7f8 fe8e 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00c      	beq.n	8007d44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d007      	beq.n	8007d44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f906 	bl	8007f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00c      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f834 	bl	8007dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00c      	beq.n	8007d8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f003 0320 	and.w	r3, r3, #32
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d007      	beq.n	8007d8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f06f 0220 	mvn.w	r2, #32
 8007d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f8d8 	bl	8007f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a46      	ldr	r2, [pc, #280]	; (8007f10 <TIM_Base_SetConfig+0x12c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d013      	beq.n	8007e24 <TIM_Base_SetConfig+0x40>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e02:	d00f      	beq.n	8007e24 <TIM_Base_SetConfig+0x40>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a43      	ldr	r2, [pc, #268]	; (8007f14 <TIM_Base_SetConfig+0x130>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00b      	beq.n	8007e24 <TIM_Base_SetConfig+0x40>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a42      	ldr	r2, [pc, #264]	; (8007f18 <TIM_Base_SetConfig+0x134>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d007      	beq.n	8007e24 <TIM_Base_SetConfig+0x40>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a41      	ldr	r2, [pc, #260]	; (8007f1c <TIM_Base_SetConfig+0x138>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <TIM_Base_SetConfig+0x40>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a40      	ldr	r2, [pc, #256]	; (8007f20 <TIM_Base_SetConfig+0x13c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d108      	bne.n	8007e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a35      	ldr	r2, [pc, #212]	; (8007f10 <TIM_Base_SetConfig+0x12c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d02b      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e44:	d027      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a32      	ldr	r2, [pc, #200]	; (8007f14 <TIM_Base_SetConfig+0x130>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d023      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a31      	ldr	r2, [pc, #196]	; (8007f18 <TIM_Base_SetConfig+0x134>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d01f      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a30      	ldr	r2, [pc, #192]	; (8007f1c <TIM_Base_SetConfig+0x138>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d01b      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a2f      	ldr	r2, [pc, #188]	; (8007f20 <TIM_Base_SetConfig+0x13c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d017      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a2e      	ldr	r2, [pc, #184]	; (8007f24 <TIM_Base_SetConfig+0x140>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d013      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a2d      	ldr	r2, [pc, #180]	; (8007f28 <TIM_Base_SetConfig+0x144>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d00f      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a2c      	ldr	r2, [pc, #176]	; (8007f2c <TIM_Base_SetConfig+0x148>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00b      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a2b      	ldr	r2, [pc, #172]	; (8007f30 <TIM_Base_SetConfig+0x14c>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d007      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2a      	ldr	r2, [pc, #168]	; (8007f34 <TIM_Base_SetConfig+0x150>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d003      	beq.n	8007e96 <TIM_Base_SetConfig+0xb2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a29      	ldr	r2, [pc, #164]	; (8007f38 <TIM_Base_SetConfig+0x154>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d108      	bne.n	8007ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a10      	ldr	r2, [pc, #64]	; (8007f10 <TIM_Base_SetConfig+0x12c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d003      	beq.n	8007edc <TIM_Base_SetConfig+0xf8>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a12      	ldr	r2, [pc, #72]	; (8007f20 <TIM_Base_SetConfig+0x13c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d103      	bne.n	8007ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d105      	bne.n	8007f02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f023 0201 	bic.w	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	611a      	str	r2, [r3, #16]
  }
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40010000 	.word	0x40010000
 8007f14:	40000400 	.word	0x40000400
 8007f18:	40000800 	.word	0x40000800
 8007f1c:	40000c00 	.word	0x40000c00
 8007f20:	40010400 	.word	0x40010400
 8007f24:	40014000 	.word	0x40014000
 8007f28:	40014400 	.word	0x40014400
 8007f2c:	40014800 	.word	0x40014800
 8007f30:	40001800 	.word	0x40001800
 8007f34:	40001c00 	.word	0x40001c00
 8007f38:	40002000 	.word	0x40002000

08007f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f043 0201 	orr.w	r2, r3, #1
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f023 0201 	bic.w	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007fc2:	d901      	bls.n	8007fc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e01b      	b.n	8008000 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	daf2      	bge.n	8007fb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	019b      	lsls	r3, r3, #6
 8007fd8:	f043 0220 	orr.w	r2, r3, #32
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007fec:	d901      	bls.n	8007ff2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e006      	b.n	8008000 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	d0f0      	beq.n	8007fe0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3301      	adds	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008024:	d901      	bls.n	800802a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e018      	b.n	800805c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	daf2      	bge.n	8008018 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2210      	movs	r2, #16
 800803a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008048:	d901      	bls.n	800804e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e006      	b.n	800805c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b10      	cmp	r3, #16
 8008058:	d0f0      	beq.n	800803c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008068:	b480      	push	{r7}
 800806a:	b08b      	sub	sp, #44	; 0x2c
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	089b      	lsrs	r3, r3, #2
 8008082:	b29b      	uxth	r3, r3
 8008084:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800808e:	2300      	movs	r3, #0
 8008090:	623b      	str	r3, [r7, #32]
 8008092:	e014      	b.n	80080be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	601a      	str	r2, [r3, #0]
    pDest++;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	3301      	adds	r3, #1
 80080a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	3301      	adds	r3, #1
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	3301      	adds	r3, #1
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	3301      	adds	r3, #1
 80080b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	3301      	adds	r3, #1
 80080bc:	623b      	str	r3, [r7, #32]
 80080be:	6a3a      	ldr	r2, [r7, #32]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d3e6      	bcc.n	8008094 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080c6:	8bfb      	ldrh	r3, [r7, #30]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d01e      	beq.n	800810a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d6:	461a      	mov	r2, r3
 80080d8:	f107 0310 	add.w	r3, r7, #16
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	701a      	strb	r2, [r3, #0]
      i++;
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	3301      	adds	r3, #1
 80080f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	3301      	adds	r3, #1
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80080fe:	8bfb      	ldrh	r3, [r7, #30]
 8008100:	3b01      	subs	r3, #1
 8008102:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008104:	8bfb      	ldrh	r3, [r7, #30]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1ea      	bne.n	80080e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800810c:	4618      	mov	r0, r3
 800810e:	372c      	adds	r7, #44	; 0x2c
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	4013      	ands	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008130:	68fb      	ldr	r3, [r7, #12]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800813e:	b480      	push	{r7}
 8008140:	b085      	sub	sp, #20
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	460b      	mov	r3, r1
 8008148:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800815e:	78fb      	ldrb	r3, [r7, #3]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4413      	add	r3, r2
 8008166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	4013      	ands	r3, r2
 8008170:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008172:	68bb      	ldr	r3, [r7, #8]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	f003 0301 	and.w	r3, r3, #1
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	f003 0303 	and.w	r3, r3, #3
 80081ce:	68f9      	ldr	r1, [r7, #12]
 80081d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80081d4:	4313      	orrs	r3, r2
 80081d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d107      	bne.n	80081ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081e4:	461a      	mov	r2, r3
 80081e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80081ea:	6053      	str	r3, [r2, #4]
 80081ec:	e00c      	b.n	8008208 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d107      	bne.n	8008204 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081fa:	461a      	mov	r2, r3
 80081fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8008200:	6053      	str	r3, [r2, #4]
 8008202:	e001      	b.n	8008208 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008216:	b480      	push	{r7}
 8008218:	b085      	sub	sp, #20
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	b29b      	uxth	r3, r3
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008238:	b480      	push	{r7}
 800823a:	b089      	sub	sp, #36	; 0x24
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	4413      	add	r3, r2
 8008258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	0c9b      	lsrs	r3, r3, #18
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	0fdb      	lsrs	r3, r3, #31
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	015a      	lsls	r2, r3, #5
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	4413      	add	r3, r2
 8008284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	0fdb      	lsrs	r3, r3, #31
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b20      	cmp	r3, #32
 800829c:	d10d      	bne.n	80082ba <USB_HC_Halt+0x82>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <USB_HC_Halt+0x82>
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d005      	beq.n	80082b6 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d002      	beq.n	80082b6 <USB_HC_Halt+0x7e>
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d101      	bne.n	80082ba <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	e0d8      	b.n	800846c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <USB_HC_Halt+0x8e>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d173      	bne.n	80083ae <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	0151      	lsls	r1, r2, #5
 80082d8:	69fa      	ldr	r2, [r7, #28]
 80082da:	440a      	add	r2, r1
 80082dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082e4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d14a      	bne.n	8008388 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d133      	bne.n	8008366 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	4413      	add	r3, r2
 8008306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	0151      	lsls	r1, r2, #5
 8008310:	69fa      	ldr	r2, [r7, #28]
 8008312:	440a      	add	r2, r1
 8008314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800831c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	4413      	add	r3, r2
 8008326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	0151      	lsls	r1, r2, #5
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	440a      	add	r2, r1
 8008334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800833c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	3301      	adds	r3, #1
 8008342:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800834a:	d82e      	bhi.n	80083aa <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800835e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008362:	d0ec      	beq.n	800833e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008364:	e081      	b.n	800846a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	440a      	add	r2, r1
 800837c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008384:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008386:	e070      	b.n	800846a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	4413      	add	r3, r2
 8008390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	69fa      	ldr	r2, [r7, #28]
 800839c:	440a      	add	r2, r1
 800839e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083a6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083a8:	e05f      	b.n	800846a <USB_HC_Halt+0x232>
            break;
 80083aa:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083ac:	e05d      	b.n	800846a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	69fa      	ldr	r2, [r7, #28]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083cc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d133      	bne.n	8008446 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083fc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	4413      	add	r3, r2
 8008406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	0151      	lsls	r1, r2, #5
 8008410:	69fa      	ldr	r2, [r7, #28]
 8008412:	440a      	add	r2, r1
 8008414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800841c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	3301      	adds	r3, #1
 8008422:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800842a:	d81d      	bhi.n	8008468 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	4413      	add	r3, r2
 8008434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800843e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008442:	d0ec      	beq.n	800841e <USB_HC_Halt+0x1e6>
 8008444:	e011      	b.n	800846a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	4413      	add	r3, r2
 800844e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	69fa      	ldr	r2, [r7, #28]
 800845a:	440a      	add	r2, r1
 800845c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	e000      	b.n	800846a <USB_HC_Halt+0x232>
          break;
 8008468:	bf00      	nop
    }
  }

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3724      	adds	r7, #36	; 0x24
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7ff fd7a 	bl	8007f86 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008492:	2110      	movs	r1, #16
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff fd87 	bl	8007fa8 <USB_FlushTxFifo>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff fdb1 	bl	800800c <USB_FlushRxFifo>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80084b4:	2300      	movs	r3, #0
 80084b6:	61bb      	str	r3, [r7, #24]
 80084b8:	e01f      	b.n	80084fa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ee:	461a      	mov	r2, r3
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	3301      	adds	r3, #1
 80084f8:	61bb      	str	r3, [r7, #24]
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	2b0f      	cmp	r3, #15
 80084fe:	d9dc      	bls.n	80084ba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008500:	2300      	movs	r3, #0
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	e034      	b.n	8008570 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800851c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008524:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800852c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	4413      	add	r3, r2
 8008536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853a:	461a      	mov	r2, r3
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3301      	adds	r3, #1
 8008544:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800854c:	d80c      	bhi.n	8008568 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	4413      	add	r3, r2
 8008556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008564:	d0ec      	beq.n	8008540 <USB_StopHost+0xc8>
 8008566:	e000      	b.n	800856a <USB_StopHost+0xf2>
        break;
 8008568:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	3301      	adds	r3, #1
 800856e:	61bb      	str	r3, [r7, #24]
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	2b0f      	cmp	r3, #15
 8008574:	d9c7      	bls.n	8008506 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800857c:	461a      	mov	r2, r3
 800857e:	f04f 33ff 	mov.w	r3, #4294967295
 8008582:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f04f 32ff 	mov.w	r2, #4294967295
 800858a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff fce9 	bl	8007f64 <USB_EnableGlobalInt>

  return ret;
 8008592:	7ffb      	ldrb	r3, [r7, #31]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3720      	adds	r7, #32
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f804 	bl	80085c0 <USBH_HandleSof>
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b0b      	cmp	r3, #11
 80085d0:	d10a      	bne.n	80085e8 <USBH_HandleSof+0x28>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d005      	beq.n	80085e8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	4798      	blx	r3
  }
}
 80085e8:	bf00      	nop
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008614:	2200      	movs	r2, #0
 8008616:	4619      	mov	r1, r3
 8008618:	f000 f8ae 	bl	8008778 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800861c:	bf00      	nop
}
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008634:	bf00      	nop
}
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008674:	2200      	movs	r2, #0
 8008676:	4619      	mov	r1, r3
 8008678:	f000 f87e 	bl	8008778 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f002 ffd4 	bl	800b654 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	791b      	ldrb	r3, [r3, #4]
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f830 	bl	8008718 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	795b      	ldrb	r3, [r3, #5]
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f82a 	bl	8008718 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086d8:	2200      	movs	r2, #0
 80086da:	4619      	mov	r1, r3
 80086dc:	f000 f84c 	bl	8008778 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008706:	2200      	movs	r2, #0
 8008708:	4619      	mov	r1, r3
 800870a:	f000 f835 	bl	8008778 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	2b0f      	cmp	r3, #15
 8008728:	d80d      	bhi.n	8008746 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	33e0      	adds	r3, #224	; 0xe0
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	78fb      	ldrb	r3, [r7, #3]
 8008738:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800873c:	6879      	ldr	r1, [r7, #4]
 800873e:	33e0      	adds	r3, #224	; 0xe0
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800875a:	f3ef 8305 	mrs	r3, IPSR
 800875e:	607b      	str	r3, [r7, #4]
  return(result);
 8008760:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008762:	2b00      	cmp	r3, #0
 8008764:	bf14      	ite	ne
 8008766:	2301      	movne	r3, #1
 8008768:	2300      	moveq	r3, #0
 800876a:	b2db      	uxtb	r3, r3
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008784:	2300      	movs	r3, #0
 8008786:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <osMessagePut+0x1e>
    ticks = 1;
 8008792:	2301      	movs	r3, #1
 8008794:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008796:	f7ff ffdd 	bl	8008754 <inHandlerMode>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d018      	beq.n	80087d2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80087a0:	f107 0210 	add.w	r2, r7, #16
 80087a4:	f107 0108 	add.w	r1, r7, #8
 80087a8:	2300      	movs	r3, #0
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fbc8 	bl	8008f40 <xQueueGenericSendFromISR>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d001      	beq.n	80087ba <osMessagePut+0x42>
      return osErrorOS;
 80087b6:	23ff      	movs	r3, #255	; 0xff
 80087b8:	e018      	b.n	80087ec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d014      	beq.n	80087ea <osMessagePut+0x72>
 80087c0:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <osMessagePut+0x7c>)
 80087c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	e00b      	b.n	80087ea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80087d2:	f107 0108 	add.w	r1, r7, #8
 80087d6:	2300      	movs	r3, #0
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 f9dc 	bl	8008b98 <xQueueGenericSend>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d001      	beq.n	80087ea <osMessagePut+0x72>
      return osErrorOS;
 80087e6:	23ff      	movs	r3, #255	; 0xff
 80087e8:	e000      	b.n	80087ec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	e000ed04 	.word	0xe000ed04

080087f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f103 0208 	add.w	r2, r3, #8
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f04f 32ff 	mov.w	r2, #4294967295
 8008810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f103 0208 	add.w	r2, r3, #8
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f103 0208 	add.w	r2, r3, #8
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008846:	bf00      	nop
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008852:	b480      	push	{r7}
 8008854:	b085      	sub	sp, #20
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	601a      	str	r2, [r3, #0]
}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800889a:	b480      	push	{r7}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b0:	d103      	bne.n	80088ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	e00c      	b.n	80088d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3308      	adds	r3, #8
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	e002      	b.n	80088c8 <vListInsert+0x2e>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d2f6      	bcs.n	80088c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	601a      	str	r2, [r3, #0]
}
 8008900:	bf00      	nop
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6892      	ldr	r2, [r2, #8]
 8008922:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	6852      	ldr	r2, [r2, #4]
 800892c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d103      	bne.n	8008940 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	1e5a      	subs	r2, r3, #1
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10a      	bne.n	800898a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008986:	bf00      	nop
 8008988:	e7fe      	b.n	8008988 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800898a:	f002 fad3 	bl	800af34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008996:	68f9      	ldr	r1, [r7, #12]
 8008998:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800899a:	fb01 f303 	mul.w	r3, r1, r3
 800899e:	441a      	add	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	3b01      	subs	r3, #1
 80089bc:	68f9      	ldr	r1, [r7, #12]
 80089be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	441a      	add	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	22ff      	movs	r2, #255	; 0xff
 80089ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	22ff      	movs	r2, #255	; 0xff
 80089d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d114      	bne.n	8008a0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01a      	beq.n	8008a1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3310      	adds	r3, #16
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 fb77 	bl	800a0e0 <xTaskRemoveFromEventList>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d012      	beq.n	8008a1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089f8:	4b0c      	ldr	r3, [pc, #48]	; (8008a2c <xQueueGenericReset+0xcc>)
 80089fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	e009      	b.n	8008a1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3310      	adds	r3, #16
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7ff fef2 	bl	80087f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3324      	adds	r3, #36	; 0x24
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff feed 	bl	80087f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a1e:	f002 fab9 	bl	800af94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a22:	2301      	movs	r3, #1
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	e000ed04 	.word	0xe000ed04

08008a30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08a      	sub	sp, #40	; 0x28
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	613b      	str	r3, [r7, #16]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	fb02 f303 	mul.w	r3, r2, r3
 8008a62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	3354      	adds	r3, #84	; 0x54
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f002 fb85 	bl	800b178 <pvPortMalloc>
 8008a6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00e      	beq.n	8008a94 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	3354      	adds	r3, #84	; 0x54
 8008a7e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a80:	79fa      	ldrb	r2, [r7, #7]
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4613      	mov	r3, r2
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 f82d 	bl	8008aec <prvInitialiseNewQueue>
 8008a92:	e026      	b.n	8008ae2 <xQueueGenericCreate+0xb2>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	2b04      	cmp	r3, #4
 8008a98:	d823      	bhi.n	8008ae2 <xQueueGenericCreate+0xb2>
 8008a9a:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <xQueueGenericCreate+0x70>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008ab5 	.word	0x08008ab5
 8008aa4:	08008acd 	.word	0x08008acd
 8008aa8:	08008ae3 	.word	0x08008ae3
 8008aac:	08008ac1 	.word	0x08008ac1
 8008ab0:	08008ad9 	.word	0x08008ad9
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	2041      	movs	r0, #65	; 0x41
 8008aba:	f7f9 f9a3 	bl	8001e04 <xTraceEventCreate2>
 8008abe:	e010      	b.n	8008ae2 <xQueueGenericCreate+0xb2>
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	2042      	movs	r0, #66	; 0x42
 8008ac6:	f7f9 f99d 	bl	8001e04 <xTraceEventCreate2>
 8008aca:	e00a      	b.n	8008ae2 <xQueueGenericCreate+0xb2>
 8008acc:	2200      	movs	r2, #0
 8008ace:	2100      	movs	r1, #0
 8008ad0:	2043      	movs	r0, #67	; 0x43
 8008ad2:	f7f9 f997 	bl	8001e04 <xTraceEventCreate2>
 8008ad6:	e004      	b.n	8008ae2 <xQueueGenericCreate+0xb2>
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2100      	movs	r1, #0
 8008adc:	2047      	movs	r0, #71	; 0x47
 8008ade:	f7f9 f991 	bl	8001e04 <xTraceEventCreate2>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3720      	adds	r7, #32
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d103      	bne.n	8008b08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	e002      	b.n	8008b0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	69b8      	ldr	r0, [r7, #24]
 8008b1e:	f7ff ff1f 	bl	8008960 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d827      	bhi.n	8008b8a <prvInitialiseNewQueue+0x9e>
 8008b3a:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <prvInitialiseNewQueue+0x54>)
 8008b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008b71 	.word	0x08008b71
 8008b48:	08008b8b 	.word	0x08008b8b
 8008b4c:	08008b63 	.word	0x08008b63
 8008b50:	08008b7f 	.word	0x08008b7f
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4a0f      	ldr	r2, [pc, #60]	; (8008b94 <prvInitialiseNewQueue+0xa8>)
 8008b58:	69b9      	ldr	r1, [r7, #24]
 8008b5a:	2011      	movs	r0, #17
 8008b5c:	f7fa f986 	bl	8002e6c <xTraceObjectRegisterWithoutHandle>
 8008b60:	e013      	b.n	8008b8a <prvInitialiseNewQueue+0x9e>
 8008b62:	2300      	movs	r3, #0
 8008b64:	4a0b      	ldr	r2, [pc, #44]	; (8008b94 <prvInitialiseNewQueue+0xa8>)
 8008b66:	69b9      	ldr	r1, [r7, #24]
 8008b68:	2012      	movs	r0, #18
 8008b6a:	f7fa f97f 	bl	8002e6c <xTraceObjectRegisterWithoutHandle>
 8008b6e:	e00c      	b.n	8008b8a <prvInitialiseNewQueue+0x9e>
 8008b70:	2300      	movs	r3, #0
 8008b72:	4a08      	ldr	r2, [pc, #32]	; (8008b94 <prvInitialiseNewQueue+0xa8>)
 8008b74:	69b9      	ldr	r1, [r7, #24]
 8008b76:	2013      	movs	r0, #19
 8008b78:	f7fa f978 	bl	8002e6c <xTraceObjectRegisterWithoutHandle>
 8008b7c:	e005      	b.n	8008b8a <prvInitialiseNewQueue+0x9e>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	4a04      	ldr	r2, [pc, #16]	; (8008b94 <prvInitialiseNewQueue+0xa8>)
 8008b82:	69b9      	ldr	r1, [r7, #24]
 8008b84:	2017      	movs	r0, #23
 8008b86:	f7fa f971 	bl	8002e6c <xTraceObjectRegisterWithoutHandle>
}
 8008b8a:	bf00      	nop
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	0800bb20 	.word	0x0800bb20

08008b98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08e      	sub	sp, #56	; 0x38
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10a      	bne.n	8008bca <xQueueGenericSend+0x32>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bc6:	bf00      	nop
 8008bc8:	e7fe      	b.n	8008bc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d103      	bne.n	8008bd8 <xQueueGenericSend+0x40>
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <xQueueGenericSend+0x44>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e000      	b.n	8008bde <xQueueGenericSend+0x46>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <xQueueGenericSend+0x60>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	623b      	str	r3, [r7, #32]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d103      	bne.n	8008c06 <xQueueGenericSend+0x6e>
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d101      	bne.n	8008c0a <xQueueGenericSend+0x72>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e000      	b.n	8008c0c <xQueueGenericSend+0x74>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10a      	bne.n	8008c26 <xQueueGenericSend+0x8e>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	61fb      	str	r3, [r7, #28]
}
 8008c22:	bf00      	nop
 8008c24:	e7fe      	b.n	8008c24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c26:	f001 fc03 	bl	800a430 <xTaskGetSchedulerState>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d102      	bne.n	8008c36 <xQueueGenericSend+0x9e>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <xQueueGenericSend+0xa2>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e000      	b.n	8008c3c <xQueueGenericSend+0xa4>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10a      	bne.n	8008c56 <xQueueGenericSend+0xbe>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	61bb      	str	r3, [r7, #24]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c56:	f002 f96d 	bl	800af34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d302      	bcc.n	8008c6c <xQueueGenericSend+0xd4>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d179      	bne.n	8008d60 <xQueueGenericSend+0x1c8>
			{
				traceQUEUE_SEND( pxQueue );
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d82e      	bhi.n	8008cd4 <xQueueGenericSend+0x13c>
 8008c76:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <xQueueGenericSend+0xe4>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008c91 	.word	0x08008c91
 8008c80:	08008cbf 	.word	0x08008cbf
 8008c84:	08008cad 	.word	0x08008cad
 8008c88:	08008cad 	.word	0x08008cad
 8008c8c:	08008ccb 	.word	0x08008ccb
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <xQueueGenericSend+0x102>
 8008c96:	2050      	movs	r0, #80	; 0x50
 8008c98:	e000      	b.n	8008c9c <xQueueGenericSend+0x104>
 8008c9a:	20c0      	movs	r0, #192	; 0xc0
 8008c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f7f9 f8ad 	bl	8001e04 <xTraceEventCreate2>
 8008caa:	e013      	b.n	8008cd4 <xQueueGenericSend+0x13c>
 8008cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	2051      	movs	r0, #81	; 0x51
 8008cb8:	f7f9 f8a4 	bl	8001e04 <xTraceEventCreate2>
 8008cbc:	e00a      	b.n	8008cd4 <xQueueGenericSend+0x13c>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	2052      	movs	r0, #82	; 0x52
 8008cc4:	f7f9 f826 	bl	8001d14 <xTraceEventCreate1>
 8008cc8:	e004      	b.n	8008cd4 <xQueueGenericSend+0x13c>
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	4619      	mov	r1, r3
 8008cce:	20c5      	movs	r0, #197	; 0xc5
 8008cd0:	f7f9 f820 	bl	8001d14 <xTraceEventCreate1>

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	68b9      	ldr	r1, [r7, #8]
 8008cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ce0:	f000 fbc0 	bl	8009464 <prvCopyDataToQueue>
 8008ce4:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d014      	beq.n	8008d18 <xQueueGenericSend+0x180>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d102      	bne.n	8008cfa <xQueueGenericSend+0x162>
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d12e      	bne.n	8008d58 <xQueueGenericSend+0x1c0>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8008cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cfc:	f000 fd30 	bl	8009760 <prvNotifyQueueSetContainer>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d028      	beq.n	8008d58 <xQueueGenericSend+0x1c0>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d06:	4b8d      	ldr	r3, [pc, #564]	; (8008f3c <xQueueGenericSend+0x3a4>)
 8008d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	e01f      	b.n	8008d58 <xQueueGenericSend+0x1c0>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d010      	beq.n	8008d42 <xQueueGenericSend+0x1aa>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	3324      	adds	r3, #36	; 0x24
 8008d24:	4618      	mov	r0, r3
 8008d26:	f001 f9db 	bl	800a0e0 <xTaskRemoveFromEventList>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d013      	beq.n	8008d58 <xQueueGenericSend+0x1c0>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8008d30:	4b82      	ldr	r3, [pc, #520]	; (8008f3c <xQueueGenericSend+0x3a4>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	e00a      	b.n	8008d58 <xQueueGenericSend+0x1c0>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d007      	beq.n	8008d58 <xQueueGenericSend+0x1c0>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d48:	4b7c      	ldr	r3, [pc, #496]	; (8008f3c <xQueueGenericSend+0x3a4>)
 8008d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d58:	f002 f91c 	bl	800af94 <vPortExitCritical>
				return pdPASS;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0e8      	b.n	8008f32 <xQueueGenericSend+0x39a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d130      	bne.n	8008dc8 <xQueueGenericSend+0x230>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d66:	f002 f915 	bl	800af94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d827      	bhi.n	8008dc4 <xQueueGenericSend+0x22c>
 8008d74:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <xQueueGenericSend+0x1e4>)
 8008d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008d91 	.word	0x08008d91
 8008d80:	08008dbb 	.word	0x08008dbb
 8008d84:	08008dab 	.word	0x08008dab
 8008d88:	08008dab 	.word	0x08008dab
 8008d8c:	08008dbb 	.word	0x08008dbb
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <xQueueGenericSend+0x202>
 8008d96:	2053      	movs	r0, #83	; 0x53
 8008d98:	e000      	b.n	8008d9c <xQueueGenericSend+0x204>
 8008d9a:	20c1      	movs	r0, #193	; 0xc1
 8008d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	461a      	mov	r2, r3
 8008da4:	f7f9 f82e 	bl	8001e04 <xTraceEventCreate2>
 8008da8:	e00c      	b.n	8008dc4 <xQueueGenericSend+0x22c>
 8008daa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	461a      	mov	r2, r3
 8008db2:	2054      	movs	r0, #84	; 0x54
 8008db4:	f7f9 f826 	bl	8001e04 <xTraceEventCreate2>
 8008db8:	e004      	b.n	8008dc4 <xQueueGenericSend+0x22c>
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	2055      	movs	r0, #85	; 0x55
 8008dc0:	f7f8 ffa8 	bl	8001d14 <xTraceEventCreate1>
					return errQUEUE_FULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e0b4      	b.n	8008f32 <xQueueGenericSend+0x39a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <xQueueGenericSend+0x244>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dce:	f107 0310 	add.w	r3, r7, #16
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f001 f9ec 	bl	800a1b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ddc:	f002 f8da 	bl	800af94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008de0:	f000 ff22 	bl	8009c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008de4:	f002 f8a6 	bl	800af34 <vPortEnterCritical>
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dee:	b25b      	sxtb	r3, r3
 8008df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df4:	d103      	bne.n	8008dfe <xQueueGenericSend+0x266>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e04:	b25b      	sxtb	r3, r3
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0a:	d103      	bne.n	8008e14 <xQueueGenericSend+0x27c>
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e14:	f002 f8be 	bl	800af94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e18:	1d3a      	adds	r2, r7, #4
 8008e1a:	f107 0310 	add.w	r3, r7, #16
 8008e1e:	4611      	mov	r1, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f001 f9db 	bl	800a1dc <xTaskCheckForTimeOut>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d150      	bne.n	8008ece <xQueueGenericSend+0x336>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e2e:	f000 fc1e 	bl	800966e <prvIsQueueFull>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d044      	beq.n	8008ec2 <xQueueGenericSend+0x32a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d826      	bhi.n	8008e90 <xQueueGenericSend+0x2f8>
 8008e42:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <xQueueGenericSend+0x2b0>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e5d 	.word	0x08008e5d
 8008e4c:	08008e87 	.word	0x08008e87
 8008e50:	08008e77 	.word	0x08008e77
 8008e54:	08008e77 	.word	0x08008e77
 8008e58:	08008e87 	.word	0x08008e87
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <xQueueGenericSend+0x2ce>
 8008e62:	2056      	movs	r0, #86	; 0x56
 8008e64:	e000      	b.n	8008e68 <xQueueGenericSend+0x2d0>
 8008e66:	20c2      	movs	r0, #194	; 0xc2
 8008e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f7f8 ffc8 	bl	8001e04 <xTraceEventCreate2>
 8008e74:	e00c      	b.n	8008e90 <xQueueGenericSend+0x2f8>
 8008e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	2057      	movs	r0, #87	; 0x57
 8008e80:	f7f8 ffc0 	bl	8001e04 <xTraceEventCreate2>
 8008e84:	e004      	b.n	8008e90 <xQueueGenericSend+0x2f8>
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	4619      	mov	r1, r3
 8008e8a:	2058      	movs	r0, #88	; 0x58
 8008e8c:	f7f8 ff42 	bl	8001d14 <xTraceEventCreate1>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	3310      	adds	r3, #16
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 f8c7 	bl	800a02c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ea0:	f000 fb70 	bl	8009584 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ea4:	f000 fece 	bl	8009c44 <xTaskResumeAll>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f47f aed3 	bne.w	8008c56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008eb0:	4b22      	ldr	r3, [pc, #136]	; (8008f3c <xQueueGenericSend+0x3a4>)
 8008eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	e6c9      	b.n	8008c56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ec4:	f000 fb5e 	bl	8009584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ec8:	f000 febc 	bl	8009c44 <xTaskResumeAll>
 8008ecc:	e6c3      	b.n	8008c56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ed0:	f000 fb58 	bl	8009584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ed4:	f000 feb6 	bl	8009c44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d826      	bhi.n	8008f30 <xQueueGenericSend+0x398>
 8008ee2:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <xQueueGenericSend+0x350>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008efd 	.word	0x08008efd
 8008eec:	08008f27 	.word	0x08008f27
 8008ef0:	08008f17 	.word	0x08008f17
 8008ef4:	08008f17 	.word	0x08008f17
 8008ef8:	08008f27 	.word	0x08008f27
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <xQueueGenericSend+0x36e>
 8008f02:	2053      	movs	r0, #83	; 0x53
 8008f04:	e000      	b.n	8008f08 <xQueueGenericSend+0x370>
 8008f06:	20c1      	movs	r0, #193	; 0xc1
 8008f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f7f8 ff78 	bl	8001e04 <xTraceEventCreate2>
 8008f14:	e00c      	b.n	8008f30 <xQueueGenericSend+0x398>
 8008f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	2054      	movs	r0, #84	; 0x54
 8008f20:	f7f8 ff70 	bl	8001e04 <xTraceEventCreate2>
 8008f24:	e004      	b.n	8008f30 <xQueueGenericSend+0x398>
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	4619      	mov	r1, r3
 8008f2a:	2055      	movs	r0, #85	; 0x55
 8008f2c:	f7f8 fef2 	bl	8001d14 <xTraceEventCreate1>
			return errQUEUE_FULL;
 8008f30:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3738      	adds	r7, #56	; 0x38
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b090      	sub	sp, #64	; 0x40
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10a      	bne.n	8008f6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d103      	bne.n	8008f7c <xQueueGenericSendFromISR+0x3c>
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <xQueueGenericSendFromISR+0x40>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e000      	b.n	8008f82 <xQueueGenericSendFromISR+0x42>
 8008f80:	2300      	movs	r3, #0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10a      	bne.n	8008f9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d103      	bne.n	8008faa <xQueueGenericSendFromISR+0x6a>
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d101      	bne.n	8008fae <xQueueGenericSendFromISR+0x6e>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <xQueueGenericSendFromISR+0x70>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10a      	bne.n	8008fca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb8:	f383 8811 	msr	BASEPRI, r3
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f3bf 8f4f 	dsb	sy
 8008fc4:	623b      	str	r3, [r7, #32]
}
 8008fc6:	bf00      	nop
 8008fc8:	e7fe      	b.n	8008fc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fca:	f002 f895 	bl	800b0f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fce:	f3ef 8211 	mrs	r2, BASEPRI
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	61fa      	str	r2, [r7, #28]
 8008fe4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d302      	bcc.n	8008ffc <xQueueGenericSendFromISR+0xbc>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d167      	bne.n	80090cc <xQueueGenericSendFromISR+0x18c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900a:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <xQueueGenericSendFromISR+0xe2>
 8009016:	2b00      	cmp	r3, #0
 8009018:	db19      	blt.n	800904e <xQueueGenericSendFromISR+0x10e>
 800901a:	3b02      	subs	r3, #2
 800901c:	2b01      	cmp	r3, #1
 800901e:	d816      	bhi.n	800904e <xQueueGenericSendFromISR+0x10e>
 8009020:	e00d      	b.n	800903e <xQueueGenericSendFromISR+0xfe>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <xQueueGenericSendFromISR+0xec>
 8009028:	2059      	movs	r0, #89	; 0x59
 800902a:	e000      	b.n	800902e <xQueueGenericSendFromISR+0xee>
 800902c:	20c3      	movs	r0, #195	; 0xc3
 800902e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009034:	3301      	adds	r3, #1
 8009036:	461a      	mov	r2, r3
 8009038:	f7f8 fee4 	bl	8001e04 <xTraceEventCreate2>
 800903c:	e007      	b.n	800904e <xQueueGenericSendFromISR+0x10e>
 800903e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009044:	3301      	adds	r3, #1
 8009046:	461a      	mov	r2, r3
 8009048:	205a      	movs	r0, #90	; 0x5a
 800904a:	f7f8 fedb 	bl	8001e04 <xTraceEventCreate2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	68b9      	ldr	r1, [r7, #8]
 8009052:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009054:	f000 fa06 	bl	8009464 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009058:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800905c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009060:	d129      	bne.n	80090b6 <xQueueGenericSendFromISR+0x176>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009066:	2b00      	cmp	r3, #0
 8009068:	d012      	beq.n	8009090 <xQueueGenericSendFromISR+0x150>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b02      	cmp	r3, #2
 800906e:	d102      	bne.n	8009076 <xQueueGenericSendFromISR+0x136>
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d127      	bne.n	80090c6 <xQueueGenericSendFromISR+0x186>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8009076:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009078:	f000 fb72 	bl	8009760 <prvNotifyQueueSetContainer>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d021      	beq.n	80090c6 <xQueueGenericSendFromISR+0x186>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01e      	beq.n	80090c6 <xQueueGenericSendFromISR+0x186>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	e01a      	b.n	80090c6 <xQueueGenericSendFromISR+0x186>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	d016      	beq.n	80090c6 <xQueueGenericSendFromISR+0x186>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	3324      	adds	r3, #36	; 0x24
 800909c:	4618      	mov	r0, r3
 800909e:	f001 f81f 	bl	800a0e0 <xTaskRemoveFromEventList>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00e      	beq.n	80090c6 <xQueueGenericSendFromISR+0x186>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <xQueueGenericSendFromISR+0x186>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	e007      	b.n	80090c6 <xQueueGenericSendFromISR+0x186>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090ba:	3301      	adds	r3, #1
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	b25a      	sxtb	r2, r3
 80090c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090c6:	2301      	movs	r3, #1
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80090ca:	e020      	b.n	800910e <xQueueGenericSendFromISR+0x1ce>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <xQueueGenericSendFromISR+0x1a2>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	db17      	blt.n	800910a <xQueueGenericSendFromISR+0x1ca>
 80090da:	3b02      	subs	r3, #2
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d814      	bhi.n	800910a <xQueueGenericSendFromISR+0x1ca>
 80090e0:	e00c      	b.n	80090fc <xQueueGenericSendFromISR+0x1bc>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <xQueueGenericSendFromISR+0x1ac>
 80090e8:	205c      	movs	r0, #92	; 0x5c
 80090ea:	e000      	b.n	80090ee <xQueueGenericSendFromISR+0x1ae>
 80090ec:	20c4      	movs	r0, #196	; 0xc4
 80090ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	461a      	mov	r2, r3
 80090f6:	f7f8 fe85 	bl	8001e04 <xTraceEventCreate2>
 80090fa:	e006      	b.n	800910a <xQueueGenericSendFromISR+0x1ca>
 80090fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	461a      	mov	r2, r3
 8009104:	205d      	movs	r0, #93	; 0x5d
 8009106:	f7f8 fe7d 	bl	8001e04 <xTraceEventCreate2>
			xReturn = errQUEUE_FULL;
 800910a:	2300      	movs	r3, #0
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800910e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009110:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009118:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800911a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800911c:	4618      	mov	r0, r3
 800911e:	3740      	adds	r7, #64	; 0x40
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08c      	sub	sp, #48	; 0x30
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009130:	2300      	movs	r3, #0
 8009132:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10a      	bne.n	8009154 <xQueueReceive+0x30>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	623b      	str	r3, [r7, #32]
}
 8009150:	bf00      	nop
 8009152:	e7fe      	b.n	8009152 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d103      	bne.n	8009162 <xQueueReceive+0x3e>
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <xQueueReceive+0x42>
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <xQueueReceive+0x44>
 8009166:	2300      	movs	r3, #0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <xQueueReceive+0x5e>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	61fb      	str	r3, [r7, #28]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009182:	f001 f955 	bl	800a430 <xTaskGetSchedulerState>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d102      	bne.n	8009192 <xQueueReceive+0x6e>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <xQueueReceive+0x72>
 8009192:	2301      	movs	r3, #1
 8009194:	e000      	b.n	8009198 <xQueueReceive+0x74>
 8009196:	2300      	movs	r3, #0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10a      	bne.n	80091b2 <xQueueReceive+0x8e>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	61bb      	str	r3, [r7, #24]
}
 80091ae:	bf00      	nop
 80091b0:	e7fe      	b.n	80091b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091b2:	f001 febf 	bl	800af34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d051      	beq.n	8009266 <xQueueReceive+0x142>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091c2:	68b9      	ldr	r1, [r7, #8]
 80091c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c6:	f000 f9b7 	bl	8009538 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091d0:	2b04      	cmp	r3, #4
 80091d2:	d82c      	bhi.n	800922e <xQueueReceive+0x10a>
 80091d4:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <xQueueReceive+0xb8>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	080091f1 	.word	0x080091f1
 80091e0:	08009215 	.word	0x08009215
 80091e4:	08009203 	.word	0x08009203
 80091e8:	08009203 	.word	0x08009203
 80091ec:	08009223 	.word	0x08009223
 80091f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	3b01      	subs	r3, #1
 80091fa:	2060      	movs	r0, #96	; 0x60
 80091fc:	f7f8 fe7e 	bl	8001efc <xTraceEventCreate3>
 8009200:	e015      	b.n	800922e <xQueueReceive+0x10a>
 8009202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920a:	3b01      	subs	r3, #1
 800920c:	2061      	movs	r0, #97	; 0x61
 800920e:	f7f8 fe75 	bl	8001efc <xTraceEventCreate3>
 8009212:	e00c      	b.n	800922e <xQueueReceive+0x10a>
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	4619      	mov	r1, r3
 800921a:	2062      	movs	r0, #98	; 0x62
 800921c:	f7f8 fdf2 	bl	8001e04 <xTraceEventCreate2>
 8009220:	e005      	b.n	800922e <xQueueReceive+0x10a>
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	4619      	mov	r1, r3
 8009228:	20c7      	movs	r0, #199	; 0xc7
 800922a:	f7f8 fdeb 	bl	8001e04 <xTraceEventCreate2>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	1e5a      	subs	r2, r3, #1
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00f      	beq.n	800925e <xQueueReceive+0x13a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	3310      	adds	r3, #16
 8009242:	4618      	mov	r0, r3
 8009244:	f000 ff4c 	bl	800a0e0 <xTaskRemoveFromEventList>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d007      	beq.n	800925e <xQueueReceive+0x13a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800924e:	4b84      	ldr	r3, [pc, #528]	; (8009460 <xQueueReceive+0x33c>)
 8009250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800925e:	f001 fe99 	bl	800af94 <vPortExitCritical>
				return pdPASS;
 8009262:	2301      	movs	r3, #1
 8009264:	e0f8      	b.n	8009458 <xQueueReceive+0x334>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d132      	bne.n	80092d2 <xQueueReceive+0x1ae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800926c:	f001 fe92 	bl	800af94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009276:	2b04      	cmp	r3, #4
 8009278:	d829      	bhi.n	80092ce <xQueueReceive+0x1aa>
 800927a:	a201      	add	r2, pc, #4	; (adr r2, 8009280 <xQueueReceive+0x15c>)
 800927c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009280:	08009295 	.word	0x08009295
 8009284:	080092b5 	.word	0x080092b5
 8009288:	080092a5 	.word	0x080092a5
 800928c:	080092a5 	.word	0x080092a5
 8009290:	080092c3 	.word	0x080092c3
 8009294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	2063      	movs	r0, #99	; 0x63
 800929e:	f7f8 fe2d 	bl	8001efc <xTraceEventCreate3>
 80092a2:	e014      	b.n	80092ce <xQueueReceive+0x1aa>
 80092a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	2064      	movs	r0, #100	; 0x64
 80092ae:	f7f8 fe25 	bl	8001efc <xTraceEventCreate3>
 80092b2:	e00c      	b.n	80092ce <xQueueReceive+0x1aa>
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	4619      	mov	r1, r3
 80092ba:	2065      	movs	r0, #101	; 0x65
 80092bc:	f7f8 fda2 	bl	8001e04 <xTraceEventCreate2>
 80092c0:	e005      	b.n	80092ce <xQueueReceive+0x1aa>
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	4619      	mov	r1, r3
 80092c8:	20c8      	movs	r0, #200	; 0xc8
 80092ca:	f7f8 fd9b 	bl	8001e04 <xTraceEventCreate2>
					return errQUEUE_EMPTY;
 80092ce:	2300      	movs	r3, #0
 80092d0:	e0c2      	b.n	8009458 <xQueueReceive+0x334>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d106      	bne.n	80092e6 <xQueueReceive+0x1c2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092d8:	f107 0310 	add.w	r3, r7, #16
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 ff67 	bl	800a1b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092e2:	2301      	movs	r3, #1
 80092e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092e6:	f001 fe55 	bl	800af94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092ea:	f000 fc9d 	bl	8009c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092ee:	f001 fe21 	bl	800af34 <vPortEnterCritical>
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092f8:	b25b      	sxtb	r3, r3
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d103      	bne.n	8009308 <xQueueReceive+0x1e4>
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800930e:	b25b      	sxtb	r3, r3
 8009310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009314:	d103      	bne.n	800931e <xQueueReceive+0x1fa>
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800931e:	f001 fe39 	bl	800af94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009322:	1d3a      	adds	r2, r7, #4
 8009324:	f107 0310 	add.w	r3, r7, #16
 8009328:	4611      	mov	r1, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f000 ff56 	bl	800a1dc <xTaskCheckForTimeOut>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d154      	bne.n	80093e0 <xQueueReceive+0x2bc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009338:	f000 f983 	bl	8009642 <prvIsQueueEmpty>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d048      	beq.n	80093d4 <xQueueReceive+0x2b0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009348:	2b04      	cmp	r3, #4
 800934a:	d82a      	bhi.n	80093a2 <xQueueReceive+0x27e>
 800934c:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <xQueueReceive+0x230>)
 800934e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009352:	bf00      	nop
 8009354:	08009369 	.word	0x08009369
 8009358:	08009389 	.word	0x08009389
 800935c:	08009379 	.word	0x08009379
 8009360:	08009379 	.word	0x08009379
 8009364:	08009397 	.word	0x08009397
 8009368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009370:	2066      	movs	r0, #102	; 0x66
 8009372:	f7f8 fdc3 	bl	8001efc <xTraceEventCreate3>
 8009376:	e014      	b.n	80093a2 <xQueueReceive+0x27e>
 8009378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009380:	2067      	movs	r0, #103	; 0x67
 8009382:	f7f8 fdbb 	bl	8001efc <xTraceEventCreate3>
 8009386:	e00c      	b.n	80093a2 <xQueueReceive+0x27e>
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	4619      	mov	r1, r3
 800938e:	2068      	movs	r0, #104	; 0x68
 8009390:	f7f8 fd38 	bl	8001e04 <xTraceEventCreate2>
 8009394:	e005      	b.n	80093a2 <xQueueReceive+0x27e>
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	4619      	mov	r1, r3
 800939c:	20f6      	movs	r0, #246	; 0xf6
 800939e:	f7f8 fd31 	bl	8001e04 <xTraceEventCreate2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	3324      	adds	r3, #36	; 0x24
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fe3e 	bl	800a02c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b2:	f000 f8e7 	bl	8009584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093b6:	f000 fc45 	bl	8009c44 <xTaskResumeAll>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f47f aef8 	bne.w	80091b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80093c2:	4b27      	ldr	r3, [pc, #156]	; (8009460 <xQueueReceive+0x33c>)
 80093c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	e6ee      	b.n	80091b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093d6:	f000 f8d5 	bl	8009584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093da:	f000 fc33 	bl	8009c44 <xTaskResumeAll>
 80093de:	e6e8      	b.n	80091b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093e2:	f000 f8cf 	bl	8009584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093e6:	f000 fc2d 	bl	8009c44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ec:	f000 f929 	bl	8009642 <prvIsQueueEmpty>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f43f aedd 	beq.w	80091b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d829      	bhi.n	8009456 <xQueueReceive+0x332>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <xQueueReceive+0x2e4>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	0800941d 	.word	0x0800941d
 800940c:	0800943d 	.word	0x0800943d
 8009410:	0800942d 	.word	0x0800942d
 8009414:	0800942d 	.word	0x0800942d
 8009418:	0800944b 	.word	0x0800944b
 800941c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	2063      	movs	r0, #99	; 0x63
 8009426:	f7f8 fd69 	bl	8001efc <xTraceEventCreate3>
 800942a:	e014      	b.n	8009456 <xQueueReceive+0x332>
 800942c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009434:	2064      	movs	r0, #100	; 0x64
 8009436:	f7f8 fd61 	bl	8001efc <xTraceEventCreate3>
 800943a:	e00c      	b.n	8009456 <xQueueReceive+0x332>
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	4619      	mov	r1, r3
 8009442:	2065      	movs	r0, #101	; 0x65
 8009444:	f7f8 fcde 	bl	8001e04 <xTraceEventCreate2>
 8009448:	e005      	b.n	8009456 <xQueueReceive+0x332>
 800944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	4619      	mov	r1, r3
 8009450:	20c8      	movs	r0, #200	; 0xc8
 8009452:	f7f8 fcd7 	bl	8001e04 <xTraceEventCreate2>
				return errQUEUE_EMPTY;
 8009456:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009458:	4618      	mov	r0, r3
 800945a:	3730      	adds	r7, #48	; 0x30
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	e000ed04 	.word	0xe000ed04

08009464 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10d      	bne.n	800949e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d14d      	bne.n	8009526 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	4618      	mov	r0, r3
 8009490:	f000 ffec 	bl	800a46c <xTaskPriorityDisinherit>
 8009494:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	609a      	str	r2, [r3, #8]
 800949c:	e043      	b.n	8009526 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d119      	bne.n	80094d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6858      	ldr	r0, [r3, #4]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	461a      	mov	r2, r3
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	f002 f9a8 	bl	800b804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094bc:	441a      	add	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d32b      	bcc.n	8009526 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	605a      	str	r2, [r3, #4]
 80094d6:	e026      	b.n	8009526 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	68d8      	ldr	r0, [r3, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e0:	461a      	mov	r2, r3
 80094e2:	68b9      	ldr	r1, [r7, #8]
 80094e4:	f002 f98e 	bl	800b804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f0:	425b      	negs	r3, r3
 80094f2:	441a      	add	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d207      	bcs.n	8009514 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950c:	425b      	negs	r3, r3
 800950e:	441a      	add	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d105      	bne.n	8009526 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	3b01      	subs	r3, #1
 8009524:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800952e:	697b      	ldr	r3, [r7, #20]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009546:	2b00      	cmp	r3, #0
 8009548:	d018      	beq.n	800957c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	441a      	add	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68da      	ldr	r2, [r3, #12]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	429a      	cmp	r2, r3
 8009562:	d303      	bcc.n	800956c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68d9      	ldr	r1, [r3, #12]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009574:	461a      	mov	r2, r3
 8009576:	6838      	ldr	r0, [r7, #0]
 8009578:	f002 f944 	bl	800b804 <memcpy>
	}
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800958c:	f001 fcd2 	bl	800af34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009596:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009598:	e01e      	b.n	80095d8 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d008      	beq.n	80095b4 <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f8dc 	bl	8009760 <prvNotifyQueueSetContainer>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d010      	beq.n	80095d0 <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 80095ae:	f000 fe77 	bl	800a2a0 <vTaskMissedYield>
 80095b2:	e00d      	b.n	80095d0 <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d012      	beq.n	80095e2 <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3324      	adds	r3, #36	; 0x24
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 fd8d 	bl	800a0e0 <xTaskRemoveFromEventList>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80095cc:	f000 fe68 	bl	800a2a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dcdc      	bgt.n	800959a <prvUnlockQueue+0x16>
 80095e0:	e000      	b.n	80095e4 <prvUnlockQueue+0x60>
						break;
 80095e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	22ff      	movs	r2, #255	; 0xff
 80095e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80095ec:	f001 fcd2 	bl	800af94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095f0:	f001 fca0 	bl	800af34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095fc:	e011      	b.n	8009622 <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d012      	beq.n	800962c <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3310      	adds	r3, #16
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fd68 	bl	800a0e0 <xTaskRemoveFromEventList>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 8009616:	f000 fe43 	bl	800a2a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	3b01      	subs	r3, #1
 800961e:	b2db      	uxtb	r3, r3
 8009620:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009622:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009626:	2b00      	cmp	r3, #0
 8009628:	dce9      	bgt.n	80095fe <prvUnlockQueue+0x7a>
 800962a:	e000      	b.n	800962e <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 800962c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	22ff      	movs	r2, #255	; 0xff
 8009632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009636:	f001 fcad 	bl	800af94 <vPortExitCritical>
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800964a:	f001 fc73 	bl	800af34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009652:	2b00      	cmp	r3, #0
 8009654:	d102      	bne.n	800965c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009656:	2301      	movs	r3, #1
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	e001      	b.n	8009660 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009660:	f001 fc98 	bl	800af94 <vPortExitCritical>

	return xReturn;
 8009664:	68fb      	ldr	r3, [r7, #12]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009676:	f001 fc5d 	bl	800af34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009682:	429a      	cmp	r2, r3
 8009684:	d102      	bne.n	800968c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009686:	2301      	movs	r3, #1
 8009688:	60fb      	str	r3, [r7, #12]
 800968a:	e001      	b.n	8009690 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800968c:	2300      	movs	r3, #0
 800968e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009690:	f001 fc80 	bl	800af94 <vPortExitCritical>

	return xReturn;
 8009694:	68fb      	ldr	r3, [r7, #12]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096aa:	2300      	movs	r3, #0
 80096ac:	60fb      	str	r3, [r7, #12]
 80096ae:	e018      	b.n	80096e2 <vQueueAddToRegistry+0x42>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096b0:	4a10      	ldr	r2, [pc, #64]	; (80096f4 <vQueueAddToRegistry+0x54>)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10f      	bne.n	80096dc <vQueueAddToRegistry+0x3c>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096bc:	490d      	ldr	r1, [pc, #52]	; (80096f4 <vQueueAddToRegistry+0x54>)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096c6:	4a0b      	ldr	r2, [pc, #44]	; (80096f4 <vQueueAddToRegistry+0x54>)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	4413      	add	r3, r2
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7f9 fbde 	bl	8002e96 <xTraceObjectSetNameWithoutHandle>
				break;
 80096da:	e006      	b.n	80096ea <vQueueAddToRegistry+0x4a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	3301      	adds	r3, #1
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b07      	cmp	r3, #7
 80096e6:	d9e3      	bls.n	80096b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096e8:	bf00      	nop
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	200039a8 	.word	0x200039a8

080096f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009708:	f001 fc14 	bl	800af34 <vPortEnterCritical>
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009712:	b25b      	sxtb	r3, r3
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d103      	bne.n	8009722 <vQueueWaitForMessageRestricted+0x2a>
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009728:	b25b      	sxtb	r3, r3
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	d103      	bne.n	8009738 <vQueueWaitForMessageRestricted+0x40>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009738:	f001 fc2c 	bl	800af94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009740:	2b00      	cmp	r3, #0
 8009742:	d106      	bne.n	8009752 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	3324      	adds	r3, #36	; 0x24
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	68b9      	ldr	r1, [r7, #8]
 800974c:	4618      	mov	r0, r3
 800974e:	f000 fc91 	bl	800a074 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009752:	6978      	ldr	r0, [r7, #20]
 8009754:	f7ff ff16 	bl	8009584 <prvUnlockQueue>
	}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800976c:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 800976e:	2300      	movs	r3, #0
 8009770:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10a      	bne.n	800978e <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	613b      	str	r3, [r7, #16]
}
 800978a:	bf00      	nop
 800978c:	e7fe      	b.n	800978c <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009796:	429a      	cmp	r2, r3
 8009798:	d30a      	bcc.n	80097b0 <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	60fb      	str	r3, [r7, #12]
}
 80097ac:	bf00      	nop
 80097ae:	e7fe      	b.n	80097ae <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d22d      	bcs.n	8009818 <prvNotifyQueueSetContainer+0xb8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097c2:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SET_SEND( pxQueueSetContainer );
 80097c4:	69b9      	ldr	r1, [r7, #24]
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	3301      	adds	r3, #1
 80097cc:	461a      	mov	r2, r3
 80097ce:	2050      	movs	r0, #80	; 0x50
 80097d0:	f7f8 fb18 	bl	8001e04 <xTraceEventCreate2>

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80097d4:	1d3b      	adds	r3, r7, #4
 80097d6:	2200      	movs	r2, #0
 80097d8:	4619      	mov	r1, r3
 80097da:	69b8      	ldr	r0, [r7, #24]
 80097dc:	f7ff fe42 	bl	8009464 <prvCopyDataToQueue>
 80097e0:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80097e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d10e      	bne.n	800980a <prvNotifyQueueSetContainer+0xaa>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d011      	beq.n	8009818 <prvNotifyQueueSetContainer+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	3324      	adds	r3, #36	; 0x24
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 fc71 	bl	800a0e0 <xTaskRemoveFromEventList>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d009      	beq.n	8009818 <prvNotifyQueueSetContainer+0xb8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8009804:	2301      	movs	r3, #1
 8009806:	61fb      	str	r3, [r7, #28]
 8009808:	e006      	b.n	8009818 <prvNotifyQueueSetContainer+0xb8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	3301      	adds	r3, #1
 800980e:	b2db      	uxtb	r3, r3
 8009810:	b25a      	sxtb	r2, r3
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009818:	69fb      	ldr	r3, [r7, #28]
	}
 800981a:	4618      	mov	r0, r3
 800981c:	3720      	adds	r7, #32
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009822:	b580      	push	{r7, lr}
 8009824:	b08c      	sub	sp, #48	; 0x30
 8009826:	af04      	add	r7, sp, #16
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	603b      	str	r3, [r7, #0]
 800982e:	4613      	mov	r3, r2
 8009830:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009832:	88fb      	ldrh	r3, [r7, #6]
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4618      	mov	r0, r3
 8009838:	f001 fc9e 	bl	800b178 <pvPortMalloc>
 800983c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00e      	beq.n	8009862 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009844:	20a8      	movs	r0, #168	; 0xa8
 8009846:	f001 fc97 	bl	800b178 <pvPortMalloc>
 800984a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	631a      	str	r2, [r3, #48]	; 0x30
 8009858:	e005      	b.n	8009866 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800985a:	6978      	ldr	r0, [r7, #20]
 800985c:	f001 fd6e 	bl	800b33c <vPortFree>
 8009860:	e001      	b.n	8009866 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d013      	beq.n	8009894 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800986c:	88fa      	ldrh	r2, [r7, #6]
 800986e:	2300      	movs	r3, #0
 8009870:	9303      	str	r3, [sp, #12]
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	9302      	str	r3, [sp, #8]
 8009876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68b9      	ldr	r1, [r7, #8]
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f000 f80e 	bl	80098a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009888:	69f8      	ldr	r0, [r7, #28]
 800988a:	f000 f8b1 	bl	80099f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800988e:	2301      	movs	r3, #1
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	e002      	b.n	800989a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009894:	f04f 33ff 	mov.w	r3, #4294967295
 8009898:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800989a:	69bb      	ldr	r3, [r7, #24]
	}
 800989c:	4618      	mov	r0, r3
 800989e:	3720      	adds	r7, #32
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	461a      	mov	r2, r3
 80098bc:	21a5      	movs	r1, #165	; 0xa5
 80098be:	f001 ff1d 	bl	800b6fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098cc:	3b01      	subs	r3, #1
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	f023 0307 	bic.w	r3, r3, #7
 80098da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	617b      	str	r3, [r7, #20]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d01f      	beq.n	8009942 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009902:	2300      	movs	r3, #0
 8009904:	61fb      	str	r3, [r7, #28]
 8009906:	e012      	b.n	800992e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	4413      	add	r3, r2
 800990e:	7819      	ldrb	r1, [r3, #0]
 8009910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	4413      	add	r3, r2
 8009916:	3334      	adds	r3, #52	; 0x34
 8009918:	460a      	mov	r2, r1
 800991a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	4413      	add	r3, r2
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d006      	beq.n	8009936 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	3301      	adds	r3, #1
 800992c:	61fb      	str	r3, [r7, #28]
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	2b0f      	cmp	r3, #15
 8009932:	d9e9      	bls.n	8009908 <prvInitialiseNewTask+0x64>
 8009934:	e000      	b.n	8009938 <prvInitialiseNewTask+0x94>
			{
				break;
 8009936:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009940:	e003      	b.n	800994a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	2b06      	cmp	r3, #6
 800994e:	d901      	bls.n	8009954 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009950:	2306      	movs	r3, #6
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009958:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800995e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	2200      	movs	r2, #0
 8009964:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	3304      	adds	r3, #4
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe ff64 	bl	8008838 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	3318      	adds	r3, #24
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe ff5f 	bl	8008838 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	f1c3 0207 	rsb	r2, r3, #7
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800998e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009992:	2200      	movs	r2, #0
 8009994:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999a:	2200      	movs	r2, #0
 800999c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	3354      	adds	r3, #84	; 0x54
 80099a4:	224c      	movs	r2, #76	; 0x4c
 80099a6:	2100      	movs	r1, #0
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 fea7 	bl	800b6fc <memset>
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	4a0c      	ldr	r2, [pc, #48]	; (80099e4 <prvInitialiseNewTask+0x140>)
 80099b2:	659a      	str	r2, [r3, #88]	; 0x58
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	4a0c      	ldr	r2, [pc, #48]	; (80099e8 <prvInitialiseNewTask+0x144>)
 80099b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80099ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099bc:	4a0b      	ldr	r2, [pc, #44]	; (80099ec <prvInitialiseNewTask+0x148>)
 80099be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	68f9      	ldr	r1, [r7, #12]
 80099c4:	69b8      	ldr	r0, [r7, #24]
 80099c6:	f001 f977 	bl	800acb8 <pxPortInitialiseStack>
 80099ca:	4602      	mov	r2, r0
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099dc:	bf00      	nop
 80099de:	3720      	adds	r7, #32
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	20007b5c 	.word	0x20007b5c
 80099e8:	20007bc4 	.word	0x20007bc4
 80099ec:	20007c2c 	.word	0x20007c2c

080099f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099f8:	f001 fa9c 	bl	800af34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099fc:	4b37      	ldr	r3, [pc, #220]	; (8009adc <prvAddNewTaskToReadyList+0xec>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3301      	adds	r3, #1
 8009a02:	4a36      	ldr	r2, [pc, #216]	; (8009adc <prvAddNewTaskToReadyList+0xec>)
 8009a04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a06:	4b36      	ldr	r3, [pc, #216]	; (8009ae0 <prvAddNewTaskToReadyList+0xf0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d109      	bne.n	8009a22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a0e:	4a34      	ldr	r2, [pc, #208]	; (8009ae0 <prvAddNewTaskToReadyList+0xf0>)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a14:	4b31      	ldr	r3, [pc, #196]	; (8009adc <prvAddNewTaskToReadyList+0xec>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d110      	bne.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a1c:	f000 fc64 	bl	800a2e8 <prvInitialiseTaskLists>
 8009a20:	e00d      	b.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a22:	4b30      	ldr	r3, [pc, #192]	; (8009ae4 <prvAddNewTaskToReadyList+0xf4>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d109      	bne.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a2a:	4b2d      	ldr	r3, [pc, #180]	; (8009ae0 <prvAddNewTaskToReadyList+0xf0>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d802      	bhi.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a38:	4a29      	ldr	r2, [pc, #164]	; (8009ae0 <prvAddNewTaskToReadyList+0xf0>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a3e:	4b2a      	ldr	r3, [pc, #168]	; (8009ae8 <prvAddNewTaskToReadyList+0xf8>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3301      	adds	r3, #1
 8009a44:	4a28      	ldr	r2, [pc, #160]	; (8009ae8 <prvAddNewTaskToReadyList+0xf8>)
 8009a46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a48:	4b27      	ldr	r3, [pc, #156]	; (8009ae8 <prvAddNewTaskToReadyList+0xf8>)
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00d      	beq.n	8009a72 <prvAddNewTaskToReadyList+0x82>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00a      	beq.n	8009a72 <prvAddNewTaskToReadyList+0x82>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	2010      	movs	r0, #16
 8009a6a:	f7f9 f9ff 	bl	8002e6c <xTraceObjectRegisterWithoutHandle>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0

		prvAddTaskToReadyList( pxNewTCB );
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4619      	mov	r1, r3
 8009a76:	2030      	movs	r0, #48	; 0x30
 8009a78:	f7f8 f94c 	bl	8001d14 <xTraceEventCreate1>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	2201      	movs	r2, #1
 8009a82:	409a      	lsls	r2, r3
 8009a84:	4b19      	ldr	r3, [pc, #100]	; (8009aec <prvAddNewTaskToReadyList+0xfc>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	4a18      	ldr	r2, [pc, #96]	; (8009aec <prvAddNewTaskToReadyList+0xfc>)
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4a15      	ldr	r2, [pc, #84]	; (8009af0 <prvAddNewTaskToReadyList+0x100>)
 8009a9c:	441a      	add	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fe fed4 	bl	8008852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009aaa:	f001 fa73 	bl	800af94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009aae:	4b0d      	ldr	r3, [pc, #52]	; (8009ae4 <prvAddNewTaskToReadyList+0xf4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00e      	beq.n	8009ad4 <prvAddNewTaskToReadyList+0xe4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	; (8009ae0 <prvAddNewTaskToReadyList+0xf0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d207      	bcs.n	8009ad4 <prvAddNewTaskToReadyList+0xe4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ac4:	4b0b      	ldr	r3, [pc, #44]	; (8009af4 <prvAddNewTaskToReadyList+0x104>)
 8009ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aca:	601a      	str	r2, [r3, #0]
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20003ae8 	.word	0x20003ae8
 8009ae0:	200039e8 	.word	0x200039e8
 8009ae4:	20003af4 	.word	0x20003af4
 8009ae8:	20003b04 	.word	0x20003b04
 8009aec:	20003af0 	.word	0x20003af0
 8009af0:	200039ec 	.word	0x200039ec
 8009af4:	e000ed04 	.word	0xe000ed04

08009af8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d01b      	beq.n	8009b42 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b0a:	4b15      	ldr	r3, [pc, #84]	; (8009b60 <vTaskDelay+0x68>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <vTaskDelay+0x30>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	60bb      	str	r3, [r7, #8]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b28:	f000 f87e 	bl	8009c28 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	207a      	movs	r0, #122	; 0x7a
 8009b30:	f7f8 f8f0 	bl	8001d14 <xTraceEventCreate1>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b34:	2100      	movs	r1, #0
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fd2a 	bl	800a590 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b3c:	f000 f882 	bl	8009c44 <xTaskResumeAll>
 8009b40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d107      	bne.n	8009b58 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8009b48:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <vTaskDelay+0x6c>)
 8009b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20003b10 	.word	0x20003b10
 8009b64:	e000ed04 	.word	0xe000ed04

08009b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009b6e:	4b26      	ldr	r3, [pc, #152]	; (8009c08 <vTaskStartScheduler+0xa0>)
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	2300      	movs	r3, #0
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	2300      	movs	r3, #0
 8009b78:	2280      	movs	r2, #128	; 0x80
 8009b7a:	4924      	ldr	r1, [pc, #144]	; (8009c0c <vTaskStartScheduler+0xa4>)
 8009b7c:	4824      	ldr	r0, [pc, #144]	; (8009c10 <vTaskStartScheduler+0xa8>)
 8009b7e:	f7ff fe50 	bl	8009822 <xTaskCreate>
 8009b82:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d102      	bne.n	8009b90 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8009b8a:	f000 fd67 	bl	800a65c <xTimerCreateTimerTask>
 8009b8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d124      	bne.n	8009be0 <vTaskStartScheduler+0x78>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	60bb      	str	r3, [r7, #8]
}
 8009ba8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009baa:	4b1a      	ldr	r3, [pc, #104]	; (8009c14 <vTaskStartScheduler+0xac>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3354      	adds	r3, #84	; 0x54
 8009bb0:	4a19      	ldr	r2, [pc, #100]	; (8009c18 <vTaskStartScheduler+0xb0>)
 8009bb2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bb4:	4b19      	ldr	r3, [pc, #100]	; (8009c1c <vTaskStartScheduler+0xb4>)
 8009bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bbc:	4b18      	ldr	r3, [pc, #96]	; (8009c20 <vTaskStartScheduler+0xb8>)
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bc2:	4b18      	ldr	r3, [pc, #96]	; (8009c24 <vTaskStartScheduler+0xbc>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8009bc8:	4b12      	ldr	r3, [pc, #72]	; (8009c14 <vTaskStartScheduler+0xac>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <vTaskStartScheduler+0xac>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f7fa f9af 	bl	8003f38 <xTraceTaskSwitch>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bda:	f001 f8f9 	bl	800add0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bde:	e00e      	b.n	8009bfe <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be6:	d10a      	bne.n	8009bfe <vTaskStartScheduler+0x96>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	607b      	str	r3, [r7, #4]
}
 8009bfa:	bf00      	nop
 8009bfc:	e7fe      	b.n	8009bfc <vTaskStartScheduler+0x94>
}
 8009bfe:	bf00      	nop
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20003b0c 	.word	0x20003b0c
 8009c0c:	0800bb24 	.word	0x0800bb24
 8009c10:	0800a2b9 	.word	0x0800a2b9
 8009c14:	200039e8 	.word	0x200039e8
 8009c18:	20000060 	.word	0x20000060
 8009c1c:	20003b08 	.word	0x20003b08
 8009c20:	20003af4 	.word	0x20003af4
 8009c24:	20003aec 	.word	0x20003aec

08009c28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c2c:	4b04      	ldr	r3, [pc, #16]	; (8009c40 <vTaskSuspendAll+0x18>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3301      	adds	r3, #1
 8009c32:	4a03      	ldr	r2, [pc, #12]	; (8009c40 <vTaskSuspendAll+0x18>)
 8009c34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c36:	bf00      	nop
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	20003b10 	.word	0x20003b10

08009c44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c52:	4b44      	ldr	r3, [pc, #272]	; (8009d64 <xTaskResumeAll+0x120>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <xTaskResumeAll+0x2c>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	603b      	str	r3, [r7, #0]
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c70:	f001 f960 	bl	800af34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c74:	4b3b      	ldr	r3, [pc, #236]	; (8009d64 <xTaskResumeAll+0x120>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	4a3a      	ldr	r2, [pc, #232]	; (8009d64 <xTaskResumeAll+0x120>)
 8009c7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c7e:	4b39      	ldr	r3, [pc, #228]	; (8009d64 <xTaskResumeAll+0x120>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d166      	bne.n	8009d54 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c86:	4b38      	ldr	r3, [pc, #224]	; (8009d68 <xTaskResumeAll+0x124>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d062      	beq.n	8009d54 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c8e:	e033      	b.n	8009cf8 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c90:	4b36      	ldr	r3, [pc, #216]	; (8009d6c <xTaskResumeAll+0x128>)
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3318      	adds	r3, #24
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fe fe35 	bl	800890c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe fe30 	bl	800890c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	2030      	movs	r0, #48	; 0x30
 8009cb2:	f7f8 f82f 	bl	8001d14 <xTraceEventCreate1>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cba:	2201      	movs	r2, #1
 8009cbc:	409a      	lsls	r2, r3
 8009cbe:	4b2c      	ldr	r3, [pc, #176]	; (8009d70 <xTaskResumeAll+0x12c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	4a2a      	ldr	r2, [pc, #168]	; (8009d70 <xTaskResumeAll+0x12c>)
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4a27      	ldr	r2, [pc, #156]	; (8009d74 <xTaskResumeAll+0x130>)
 8009cd6:	441a      	add	r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	f7fe fdb7 	bl	8008852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce8:	4b23      	ldr	r3, [pc, #140]	; (8009d78 <xTaskResumeAll+0x134>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d302      	bcc.n	8009cf8 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8009cf2:	4b22      	ldr	r3, [pc, #136]	; (8009d7c <xTaskResumeAll+0x138>)
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cf8:	4b1c      	ldr	r3, [pc, #112]	; (8009d6c <xTaskResumeAll+0x128>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1c7      	bne.n	8009c90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d06:	f000 fb73 	bl	800a3f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d0a:	4b1d      	ldr	r3, [pc, #116]	; (8009d80 <xTaskResumeAll+0x13c>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d010      	beq.n	8009d38 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d16:	f000 f847 	bl	8009da8 <xTaskIncrementTick>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8009d20:	4b16      	ldr	r3, [pc, #88]	; (8009d7c <xTaskResumeAll+0x138>)
 8009d22:	2201      	movs	r2, #1
 8009d24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1f1      	bne.n	8009d16 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8009d32:	4b13      	ldr	r3, [pc, #76]	; (8009d80 <xTaskResumeAll+0x13c>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d38:	4b10      	ldr	r3, [pc, #64]	; (8009d7c <xTaskResumeAll+0x138>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d009      	beq.n	8009d54 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d40:	2301      	movs	r3, #1
 8009d42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d44:	4b0f      	ldr	r3, [pc, #60]	; (8009d84 <xTaskResumeAll+0x140>)
 8009d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d54:	f001 f91e 	bl	800af94 <vPortExitCritical>

	return xAlreadyYielded;
 8009d58:	68bb      	ldr	r3, [r7, #8]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20003b10 	.word	0x20003b10
 8009d68:	20003ae8 	.word	0x20003ae8
 8009d6c:	20003aa8 	.word	0x20003aa8
 8009d70:	20003af0 	.word	0x20003af0
 8009d74:	200039ec 	.word	0x200039ec
 8009d78:	200039e8 	.word	0x200039e8
 8009d7c:	20003afc 	.word	0x20003afc
 8009d80:	20003af8 	.word	0x20003af8
 8009d84:	e000ed04 	.word	0xe000ed04

08009d88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d8e:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <xTaskGetTickCount+0x1c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d94:	687b      	ldr	r3, [r7, #4]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	20003aec 	.word	0x20003aec

08009da8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dae:	2300      	movs	r3, #0
 8009db0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8009db2:	4b5d      	ldr	r3, [pc, #372]	; (8009f28 <xTaskIncrementTick+0x180>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d003      	beq.n	8009dc2 <xTaskIncrementTick+0x1a>
 8009dba:	4b5c      	ldr	r3, [pc, #368]	; (8009f2c <xTaskIncrementTick+0x184>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d105      	bne.n	8009dce <xTaskIncrementTick+0x26>
 8009dc2:	4b5b      	ldr	r3, [pc, #364]	; (8009f30 <xTaskIncrementTick+0x188>)
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	4b5b      	ldr	r3, [pc, #364]	; (8009f34 <xTaskIncrementTick+0x18c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3201      	adds	r2, #1
 8009dcc:	619a      	str	r2, [r3, #24]
 8009dce:	4b56      	ldr	r3, [pc, #344]	; (8009f28 <xTaskIncrementTick+0x180>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d106      	bne.n	8009de4 <xTaskIncrementTick+0x3c>
 8009dd6:	4b56      	ldr	r3, [pc, #344]	; (8009f30 <xTaskIncrementTick+0x188>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	4619      	mov	r1, r3
 8009dde:	2031      	movs	r0, #49	; 0x31
 8009de0:	f7f7 ff98 	bl	8001d14 <xTraceEventCreate1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009de4:	4b50      	ldr	r3, [pc, #320]	; (8009f28 <xTaskIncrementTick+0x180>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f040 8093 	bne.w	8009f14 <xTaskIncrementTick+0x16c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dee:	4b50      	ldr	r3, [pc, #320]	; (8009f30 <xTaskIncrementTick+0x188>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009df6:	4a4e      	ldr	r2, [pc, #312]	; (8009f30 <xTaskIncrementTick+0x188>)
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d120      	bne.n	8009e44 <xTaskIncrementTick+0x9c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e02:	4b4d      	ldr	r3, [pc, #308]	; (8009f38 <xTaskIncrementTick+0x190>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00a      	beq.n	8009e22 <xTaskIncrementTick+0x7a>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	603b      	str	r3, [r7, #0]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <xTaskIncrementTick+0x78>
 8009e22:	4b45      	ldr	r3, [pc, #276]	; (8009f38 <xTaskIncrementTick+0x190>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	4b44      	ldr	r3, [pc, #272]	; (8009f3c <xTaskIncrementTick+0x194>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a42      	ldr	r2, [pc, #264]	; (8009f38 <xTaskIncrementTick+0x190>)
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	4a42      	ldr	r2, [pc, #264]	; (8009f3c <xTaskIncrementTick+0x194>)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	4b42      	ldr	r3, [pc, #264]	; (8009f40 <xTaskIncrementTick+0x198>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	4a40      	ldr	r2, [pc, #256]	; (8009f40 <xTaskIncrementTick+0x198>)
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	f000 fad6 	bl	800a3f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e44:	4b3f      	ldr	r3, [pc, #252]	; (8009f44 <xTaskIncrementTick+0x19c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d34d      	bcc.n	8009eea <xTaskIncrementTick+0x142>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e4e:	4b3a      	ldr	r3, [pc, #232]	; (8009f38 <xTaskIncrementTick+0x190>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d104      	bne.n	8009e62 <xTaskIncrementTick+0xba>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e58:	4b3a      	ldr	r3, [pc, #232]	; (8009f44 <xTaskIncrementTick+0x19c>)
 8009e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5e:	601a      	str	r2, [r3, #0]
					break;
 8009e60:	e043      	b.n	8009eea <xTaskIncrementTick+0x142>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e62:	4b35      	ldr	r3, [pc, #212]	; (8009f38 <xTaskIncrementTick+0x190>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d203      	bcs.n	8009e82 <xTaskIncrementTick+0xda>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e7a:	4a32      	ldr	r2, [pc, #200]	; (8009f44 <xTaskIncrementTick+0x19c>)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e80:	e033      	b.n	8009eea <xTaskIncrementTick+0x142>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	3304      	adds	r3, #4
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe fd40 	bl	800890c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <xTaskIncrementTick+0xf6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	3318      	adds	r3, #24
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe fd37 	bl	800890c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	2030      	movs	r0, #48	; 0x30
 8009ea4:	f7f7 ff36 	bl	8001d14 <xTraceEventCreate1>
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eac:	2201      	movs	r2, #1
 8009eae:	409a      	lsls	r2, r3
 8009eb0:	4b25      	ldr	r3, [pc, #148]	; (8009f48 <xTaskIncrementTick+0x1a0>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	4a24      	ldr	r2, [pc, #144]	; (8009f48 <xTaskIncrementTick+0x1a0>)
 8009eb8:	6013      	str	r3, [r2, #0]
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4a21      	ldr	r2, [pc, #132]	; (8009f4c <xTaskIncrementTick+0x1a4>)
 8009ec8:	441a      	add	r2, r3
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	f7fe fcbe 	bl	8008852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eda:	4b1d      	ldr	r3, [pc, #116]	; (8009f50 <xTaskIncrementTick+0x1a8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d3b4      	bcc.n	8009e4e <xTaskIncrementTick+0xa6>
						{
							xSwitchRequired = pdTRUE;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ee8:	e7b1      	b.n	8009e4e <xTaskIncrementTick+0xa6>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009eea:	4b19      	ldr	r3, [pc, #100]	; (8009f50 <xTaskIncrementTick+0x1a8>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef0:	4916      	ldr	r1, [pc, #88]	; (8009f4c <xTaskIncrementTick+0x1a4>)
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	440b      	add	r3, r1
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d901      	bls.n	8009f06 <xTaskIncrementTick+0x15e>
			{
				xSwitchRequired = pdTRUE;
 8009f02:	2301      	movs	r3, #1
 8009f04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f06:	4b13      	ldr	r3, [pc, #76]	; (8009f54 <xTaskIncrementTick+0x1ac>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d007      	beq.n	8009f1e <xTaskIncrementTick+0x176>
			{
				xSwitchRequired = pdTRUE;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	617b      	str	r3, [r7, #20]
 8009f12:	e004      	b.n	8009f1e <xTaskIncrementTick+0x176>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f14:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <xTaskIncrementTick+0x184>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	4a04      	ldr	r2, [pc, #16]	; (8009f2c <xTaskIncrementTick+0x184>)
 8009f1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f1e:	697b      	ldr	r3, [r7, #20]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3718      	adds	r7, #24
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	20003b10 	.word	0x20003b10
 8009f2c:	20003af8 	.word	0x20003af8
 8009f30:	20003aec 	.word	0x20003aec
 8009f34:	200039a0 	.word	0x200039a0
 8009f38:	20003aa0 	.word	0x20003aa0
 8009f3c:	20003aa4 	.word	0x20003aa4
 8009f40:	20003b00 	.word	0x20003b00
 8009f44:	20003b08 	.word	0x20003b08
 8009f48:	20003af0 	.word	0x20003af0
 8009f4c:	200039ec 	.word	0x200039ec
 8009f50:	200039e8 	.word	0x200039e8
 8009f54:	20003afc 	.word	0x20003afc

08009f58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f5e:	4b2d      	ldr	r3, [pc, #180]	; (800a014 <vTaskSwitchContext+0xbc>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f66:	4b2c      	ldr	r3, [pc, #176]	; (800a018 <vTaskSwitchContext+0xc0>)
 8009f68:	2201      	movs	r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f6c:	e04d      	b.n	800a00a <vTaskSwitchContext+0xb2>
		xYieldPending = pdFALSE;
 8009f6e:	4b2a      	ldr	r3, [pc, #168]	; (800a018 <vTaskSwitchContext+0xc0>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f74:	4b29      	ldr	r3, [pc, #164]	; (800a01c <vTaskSwitchContext+0xc4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	fab3 f383 	clz	r3, r3
 8009f80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f82:	7afb      	ldrb	r3, [r7, #11]
 8009f84:	f1c3 031f 	rsb	r3, r3, #31
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	4925      	ldr	r1, [pc, #148]	; (800a020 <vTaskSwitchContext+0xc8>)
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	440b      	add	r3, r1
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10a      	bne.n	8009fb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	607b      	str	r3, [r7, #4]
}
 8009fb0:	bf00      	nop
 8009fb2:	e7fe      	b.n	8009fb2 <vTaskSwitchContext+0x5a>
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4a18      	ldr	r2, [pc, #96]	; (800a020 <vTaskSwitchContext+0xc8>)
 8009fc0:	4413      	add	r3, r2
 8009fc2:	613b      	str	r3, [r7, #16]
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d104      	bne.n	8009fe4 <vTaskSwitchContext+0x8c>
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	605a      	str	r2, [r3, #4]
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	4a0e      	ldr	r2, [pc, #56]	; (800a024 <vTaskSwitchContext+0xcc>)
 8009fec:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009fee:	4b0d      	ldr	r3, [pc, #52]	; (800a024 <vTaskSwitchContext+0xcc>)
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	4b0c      	ldr	r3, [pc, #48]	; (800a024 <vTaskSwitchContext+0xcc>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	f7f9 ff9c 	bl	8003f38 <xTraceTaskSwitch>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a000:	4b08      	ldr	r3, [pc, #32]	; (800a024 <vTaskSwitchContext+0xcc>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3354      	adds	r3, #84	; 0x54
 800a006:	4a08      	ldr	r2, [pc, #32]	; (800a028 <vTaskSwitchContext+0xd0>)
 800a008:	6013      	str	r3, [r2, #0]
}
 800a00a:	bf00      	nop
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	20003b10 	.word	0x20003b10
 800a018:	20003afc 	.word	0x20003afc
 800a01c:	20003af0 	.word	0x20003af0
 800a020:	200039ec 	.word	0x200039ec
 800a024:	200039e8 	.word	0x200039e8
 800a028:	20000060 	.word	0x20000060

0800a02c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10a      	bne.n	800a052 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	60fb      	str	r3, [r7, #12]
}
 800a04e:	bf00      	nop
 800a050:	e7fe      	b.n	800a050 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a052:	4b07      	ldr	r3, [pc, #28]	; (800a070 <vTaskPlaceOnEventList+0x44>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3318      	adds	r3, #24
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7fe fc1d 	bl	800889a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a060:	2101      	movs	r1, #1
 800a062:	6838      	ldr	r0, [r7, #0]
 800a064:	f000 fa94 	bl	800a590 <prvAddCurrentTaskToDelayedList>
}
 800a068:	bf00      	nop
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	200039e8 	.word	0x200039e8

0800a074 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10a      	bne.n	800a09c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	617b      	str	r3, [r7, #20]
}
 800a098:	bf00      	nop
 800a09a:	e7fe      	b.n	800a09a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a09c:	4b0e      	ldr	r3, [pc, #56]	; (800a0d8 <vTaskPlaceOnEventListRestricted+0x64>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3318      	adds	r3, #24
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f7fe fbd4 	bl	8008852 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a0b6:	4b09      	ldr	r3, [pc, #36]	; (800a0dc <vTaskPlaceOnEventListRestricted+0x68>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	4413      	add	r3, r2
 800a0be:	4619      	mov	r1, r3
 800a0c0:	2079      	movs	r0, #121	; 0x79
 800a0c2:	f7f7 fe27 	bl	8001d14 <xTraceEventCreate1>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0c6:	6879      	ldr	r1, [r7, #4]
 800a0c8:	68b8      	ldr	r0, [r7, #8]
 800a0ca:	f000 fa61 	bl	800a590 <prvAddCurrentTaskToDelayedList>
	}
 800a0ce:	bf00      	nop
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	200039e8 	.word	0x200039e8
 800a0dc:	20003aec 	.word	0x20003aec

0800a0e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	60fb      	str	r3, [r7, #12]
}
 800a108:	bf00      	nop
 800a10a:	e7fe      	b.n	800a10a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	3318      	adds	r3, #24
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe fbfb 	bl	800890c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a116:	4b20      	ldr	r3, [pc, #128]	; (800a198 <xTaskRemoveFromEventList+0xb8>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d121      	bne.n	800a162 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	3304      	adds	r3, #4
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fbf2 	bl	800890c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	4619      	mov	r1, r3
 800a12c:	2030      	movs	r0, #48	; 0x30
 800a12e:	f7f7 fdf1 	bl	8001d14 <xTraceEventCreate1>
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	2201      	movs	r2, #1
 800a138:	409a      	lsls	r2, r3
 800a13a:	4b18      	ldr	r3, [pc, #96]	; (800a19c <xTaskRemoveFromEventList+0xbc>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4313      	orrs	r3, r2
 800a140:	4a16      	ldr	r2, [pc, #88]	; (800a19c <xTaskRemoveFromEventList+0xbc>)
 800a142:	6013      	str	r3, [r2, #0]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a148:	4613      	mov	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4a13      	ldr	r2, [pc, #76]	; (800a1a0 <xTaskRemoveFromEventList+0xc0>)
 800a152:	441a      	add	r2, r3
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	3304      	adds	r3, #4
 800a158:	4619      	mov	r1, r3
 800a15a:	4610      	mov	r0, r2
 800a15c:	f7fe fb79 	bl	8008852 <vListInsertEnd>
 800a160:	e005      	b.n	800a16e <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	3318      	adds	r3, #24
 800a166:	4619      	mov	r1, r3
 800a168:	480e      	ldr	r0, [pc, #56]	; (800a1a4 <xTaskRemoveFromEventList+0xc4>)
 800a16a:	f7fe fb72 	bl	8008852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a172:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <xTaskRemoveFromEventList+0xc8>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	429a      	cmp	r2, r3
 800a17a:	d905      	bls.n	800a188 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a17c:	2301      	movs	r3, #1
 800a17e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a180:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <xTaskRemoveFromEventList+0xcc>)
 800a182:	2201      	movs	r2, #1
 800a184:	601a      	str	r2, [r3, #0]
 800a186:	e001      	b.n	800a18c <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a18c:	697b      	ldr	r3, [r7, #20]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20003b10 	.word	0x20003b10
 800a19c:	20003af0 	.word	0x20003af0
 800a1a0:	200039ec 	.word	0x200039ec
 800a1a4:	20003aa8 	.word	0x20003aa8
 800a1a8:	200039e8 	.word	0x200039e8
 800a1ac:	20003afc 	.word	0x20003afc

0800a1b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1b8:	4b06      	ldr	r3, [pc, #24]	; (800a1d4 <vTaskInternalSetTimeOutState+0x24>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1c0:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <vTaskInternalSetTimeOutState+0x28>)
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	605a      	str	r2, [r3, #4]
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	20003b00 	.word	0x20003b00
 800a1d8:	20003aec 	.word	0x20003aec

0800a1dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b088      	sub	sp, #32
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10a      	bne.n	800a202 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	613b      	str	r3, [r7, #16]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	60fb      	str	r3, [r7, #12]
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a21e:	f000 fe89 	bl	800af34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a222:	4b1d      	ldr	r3, [pc, #116]	; (800a298 <xTaskCheckForTimeOut+0xbc>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	69ba      	ldr	r2, [r7, #24]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23a:	d102      	bne.n	800a242 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a23c:	2300      	movs	r3, #0
 800a23e:	61fb      	str	r3, [r7, #28]
 800a240:	e023      	b.n	800a28a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	4b15      	ldr	r3, [pc, #84]	; (800a29c <xTaskCheckForTimeOut+0xc0>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d007      	beq.n	800a25e <xTaskCheckForTimeOut+0x82>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	429a      	cmp	r2, r3
 800a256:	d302      	bcc.n	800a25e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a258:	2301      	movs	r3, #1
 800a25a:	61fb      	str	r3, [r7, #28]
 800a25c:	e015      	b.n	800a28a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	429a      	cmp	r2, r3
 800a266:	d20b      	bcs.n	800a280 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	1ad2      	subs	r2, r2, r3
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff ff9b 	bl	800a1b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a27a:	2300      	movs	r3, #0
 800a27c:	61fb      	str	r3, [r7, #28]
 800a27e:	e004      	b.n	800a28a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a286:	2301      	movs	r3, #1
 800a288:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a28a:	f000 fe83 	bl	800af94 <vPortExitCritical>

	return xReturn;
 800a28e:	69fb      	ldr	r3, [r7, #28]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3720      	adds	r7, #32
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	20003aec 	.word	0x20003aec
 800a29c:	20003b00 	.word	0x20003b00

0800a2a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2a4:	4b03      	ldr	r3, [pc, #12]	; (800a2b4 <vTaskMissedYield+0x14>)
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	601a      	str	r2, [r3, #0]
}
 800a2aa:	bf00      	nop
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	20003afc 	.word	0x20003afc

0800a2b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2c0:	f000 f852 	bl	800a368 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2c4:	4b06      	ldr	r3, [pc, #24]	; (800a2e0 <prvIdleTask+0x28>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d9f9      	bls.n	800a2c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2cc:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <prvIdleTask+0x2c>)
 800a2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2dc:	e7f0      	b.n	800a2c0 <prvIdleTask+0x8>
 800a2de:	bf00      	nop
 800a2e0:	200039ec 	.word	0x200039ec
 800a2e4:	e000ed04 	.word	0xe000ed04

0800a2e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	607b      	str	r3, [r7, #4]
 800a2f2:	e00c      	b.n	800a30e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4a12      	ldr	r2, [pc, #72]	; (800a348 <prvInitialiseTaskLists+0x60>)
 800a300:	4413      	add	r3, r2
 800a302:	4618      	mov	r0, r3
 800a304:	f7fe fa78 	bl	80087f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	3301      	adds	r3, #1
 800a30c:	607b      	str	r3, [r7, #4]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b06      	cmp	r3, #6
 800a312:	d9ef      	bls.n	800a2f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a314:	480d      	ldr	r0, [pc, #52]	; (800a34c <prvInitialiseTaskLists+0x64>)
 800a316:	f7fe fa6f 	bl	80087f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a31a:	480d      	ldr	r0, [pc, #52]	; (800a350 <prvInitialiseTaskLists+0x68>)
 800a31c:	f7fe fa6c 	bl	80087f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a320:	480c      	ldr	r0, [pc, #48]	; (800a354 <prvInitialiseTaskLists+0x6c>)
 800a322:	f7fe fa69 	bl	80087f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a326:	480c      	ldr	r0, [pc, #48]	; (800a358 <prvInitialiseTaskLists+0x70>)
 800a328:	f7fe fa66 	bl	80087f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a32c:	480b      	ldr	r0, [pc, #44]	; (800a35c <prvInitialiseTaskLists+0x74>)
 800a32e:	f7fe fa63 	bl	80087f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a332:	4b0b      	ldr	r3, [pc, #44]	; (800a360 <prvInitialiseTaskLists+0x78>)
 800a334:	4a05      	ldr	r2, [pc, #20]	; (800a34c <prvInitialiseTaskLists+0x64>)
 800a336:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a338:	4b0a      	ldr	r3, [pc, #40]	; (800a364 <prvInitialiseTaskLists+0x7c>)
 800a33a:	4a05      	ldr	r2, [pc, #20]	; (800a350 <prvInitialiseTaskLists+0x68>)
 800a33c:	601a      	str	r2, [r3, #0]
}
 800a33e:	bf00      	nop
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	200039ec 	.word	0x200039ec
 800a34c:	20003a78 	.word	0x20003a78
 800a350:	20003a8c 	.word	0x20003a8c
 800a354:	20003aa8 	.word	0x20003aa8
 800a358:	20003abc 	.word	0x20003abc
 800a35c:	20003ad4 	.word	0x20003ad4
 800a360:	20003aa0 	.word	0x20003aa0
 800a364:	20003aa4 	.word	0x20003aa4

0800a368 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a36e:	e019      	b.n	800a3a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a370:	f000 fde0 	bl	800af34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a374:	4b10      	ldr	r3, [pc, #64]	; (800a3b8 <prvCheckTasksWaitingTermination+0x50>)
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3304      	adds	r3, #4
 800a380:	4618      	mov	r0, r3
 800a382:	f7fe fac3 	bl	800890c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a386:	4b0d      	ldr	r3, [pc, #52]	; (800a3bc <prvCheckTasksWaitingTermination+0x54>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	4a0b      	ldr	r2, [pc, #44]	; (800a3bc <prvCheckTasksWaitingTermination+0x54>)
 800a38e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a390:	4b0b      	ldr	r3, [pc, #44]	; (800a3c0 <prvCheckTasksWaitingTermination+0x58>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3b01      	subs	r3, #1
 800a396:	4a0a      	ldr	r2, [pc, #40]	; (800a3c0 <prvCheckTasksWaitingTermination+0x58>)
 800a398:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a39a:	f000 fdfb 	bl	800af94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f810 	bl	800a3c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3a4:	4b06      	ldr	r3, [pc, #24]	; (800a3c0 <prvCheckTasksWaitingTermination+0x58>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e1      	bne.n	800a370 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3ac:	bf00      	nop
 800a3ae:	bf00      	nop
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20003abc 	.word	0x20003abc
 800a3bc:	20003ae8 	.word	0x20003ae8
 800a3c0:	20003ad0 	.word	0x20003ad0

0800a3c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3354      	adds	r3, #84	; 0x54
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f001 f99b 	bl	800b70c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 ffae 	bl	800b33c <vPortFree>
			vPortFree( pxTCB );
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 ffab 	bl	800b33c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3f6:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <prvResetNextTaskUnblockTime+0x38>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d104      	bne.n	800a40a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <prvResetNextTaskUnblockTime+0x3c>)
 800a402:	f04f 32ff 	mov.w	r2, #4294967295
 800a406:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a408:	e008      	b.n	800a41c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a40a:	4b07      	ldr	r3, [pc, #28]	; (800a428 <prvResetNextTaskUnblockTime+0x38>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	4a04      	ldr	r2, [pc, #16]	; (800a42c <prvResetNextTaskUnblockTime+0x3c>)
 800a41a:	6013      	str	r3, [r2, #0]
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	20003aa0 	.word	0x20003aa0
 800a42c:	20003b08 	.word	0x20003b08

0800a430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a436:	4b0b      	ldr	r3, [pc, #44]	; (800a464 <xTaskGetSchedulerState+0x34>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a43e:	2301      	movs	r3, #1
 800a440:	607b      	str	r3, [r7, #4]
 800a442:	e008      	b.n	800a456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a444:	4b08      	ldr	r3, [pc, #32]	; (800a468 <xTaskGetSchedulerState+0x38>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a44c:	2302      	movs	r3, #2
 800a44e:	607b      	str	r3, [r7, #4]
 800a450:	e001      	b.n	800a456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a452:	2300      	movs	r3, #0
 800a454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a456:	687b      	ldr	r3, [r7, #4]
	}
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	20003af4 	.word	0x20003af4
 800a468:	20003b10 	.word	0x20003b10

0800a46c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a478:	2300      	movs	r3, #0
 800a47a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d07a      	beq.n	800a578 <xTaskPriorityDisinherit+0x10c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a482:	4b40      	ldr	r3, [pc, #256]	; (800a584 <xTaskPriorityDisinherit+0x118>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d00a      	beq.n	800a4a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	60fb      	str	r3, [r7, #12]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10a      	bne.n	800a4c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	60bb      	str	r3, [r7, #8]
}
 800a4bc:	bf00      	nop
 800a4be:	e7fe      	b.n	800a4be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4c4:	1e5a      	subs	r2, r3, #1
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d050      	beq.n	800a578 <xTaskPriorityDisinherit+0x10c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d14c      	bne.n	800a578 <xTaskPriorityDisinherit+0x10c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe fa12 	bl	800890c <uxListRemove>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d115      	bne.n	800a51a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f2:	4925      	ldr	r1, [pc, #148]	; (800a588 <xTaskPriorityDisinherit+0x11c>)
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	440b      	add	r3, r1
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <xTaskPriorityDisinherit+0xae>
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	2201      	movs	r2, #1
 800a50a:	fa02 f303 	lsl.w	r3, r2, r3
 800a50e:	43da      	mvns	r2, r3
 800a510:	4b1e      	ldr	r3, [pc, #120]	; (800a58c <xTaskPriorityDisinherit+0x120>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4013      	ands	r3, r2
 800a516:	4a1d      	ldr	r2, [pc, #116]	; (800a58c <xTaskPriorityDisinherit+0x120>)
 800a518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a51a:	6939      	ldr	r1, [r7, #16]
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a520:	461a      	mov	r2, r3
 800a522:	2006      	movs	r0, #6
 800a524:	f7f7 fc6e 	bl	8001e04 <xTraceEventCreate2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	f1c3 0207 	rsb	r2, r3, #7
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	4619      	mov	r1, r3
 800a540:	2030      	movs	r0, #48	; 0x30
 800a542:	f7f7 fbe7 	bl	8001d14 <xTraceEventCreate1>
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54a:	2201      	movs	r2, #1
 800a54c:	409a      	lsls	r2, r3
 800a54e:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <xTaskPriorityDisinherit+0x120>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4313      	orrs	r3, r2
 800a554:	4a0d      	ldr	r2, [pc, #52]	; (800a58c <xTaskPriorityDisinherit+0x120>)
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55c:	4613      	mov	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4a08      	ldr	r2, [pc, #32]	; (800a588 <xTaskPriorityDisinherit+0x11c>)
 800a566:	441a      	add	r2, r3
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	3304      	adds	r3, #4
 800a56c:	4619      	mov	r1, r3
 800a56e:	4610      	mov	r0, r2
 800a570:	f7fe f96f 	bl	8008852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a574:	2301      	movs	r3, #1
 800a576:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a578:	697b      	ldr	r3, [r7, #20]
	}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	200039e8 	.word	0x200039e8
 800a588:	200039ec 	.word	0x200039ec
 800a58c:	20003af0 	.word	0x20003af0

0800a590 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a59a:	4b29      	ldr	r3, [pc, #164]	; (800a640 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5a0:	4b28      	ldr	r3, [pc, #160]	; (800a644 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe f9b0 	bl	800890c <uxListRemove>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10b      	bne.n	800a5ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a5b2:	4b24      	ldr	r3, [pc, #144]	; (800a644 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a5be:	43da      	mvns	r2, r3
 800a5c0:	4b21      	ldr	r3, [pc, #132]	; (800a648 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	4a20      	ldr	r2, [pc, #128]	; (800a648 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a5c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d0:	d10a      	bne.n	800a5e8 <prvAddCurrentTaskToDelayedList+0x58>
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d007      	beq.n	800a5e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5d8:	4b1a      	ldr	r3, [pc, #104]	; (800a644 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	4619      	mov	r1, r3
 800a5e0:	481a      	ldr	r0, [pc, #104]	; (800a64c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a5e2:	f7fe f936 	bl	8008852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5e6:	e026      	b.n	800a636 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5f0:	4b14      	ldr	r3, [pc, #80]	; (800a644 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d209      	bcs.n	800a614 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a600:	4b13      	ldr	r3, [pc, #76]	; (800a650 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	4b0f      	ldr	r3, [pc, #60]	; (800a644 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	3304      	adds	r3, #4
 800a60a:	4619      	mov	r1, r3
 800a60c:	4610      	mov	r0, r2
 800a60e:	f7fe f944 	bl	800889a <vListInsert>
}
 800a612:	e010      	b.n	800a636 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a614:	4b0f      	ldr	r3, [pc, #60]	; (800a654 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3304      	adds	r3, #4
 800a61e:	4619      	mov	r1, r3
 800a620:	4610      	mov	r0, r2
 800a622:	f7fe f93a 	bl	800889a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a626:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d202      	bcs.n	800a636 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a630:	4a09      	ldr	r2, [pc, #36]	; (800a658 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	6013      	str	r3, [r2, #0]
}
 800a636:	bf00      	nop
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20003aec 	.word	0x20003aec
 800a644:	200039e8 	.word	0x200039e8
 800a648:	20003af0 	.word	0x20003af0
 800a64c:	20003ad4 	.word	0x20003ad4
 800a650:	20003aa4 	.word	0x20003aa4
 800a654:	20003aa0 	.word	0x20003aa0
 800a658:	20003b08 	.word	0x20003b08

0800a65c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800a662:	2300      	movs	r3, #0
 800a664:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a666:	f000 faf1 	bl	800ac4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a66a:	4b11      	ldr	r3, [pc, #68]	; (800a6b0 <xTimerCreateTimerTask+0x54>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00b      	beq.n	800a68a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800a672:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <xTimerCreateTimerTask+0x58>)
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	2305      	movs	r3, #5
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	2300      	movs	r3, #0
 800a67c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a680:	490d      	ldr	r1, [pc, #52]	; (800a6b8 <xTimerCreateTimerTask+0x5c>)
 800a682:	480e      	ldr	r0, [pc, #56]	; (800a6bc <xTimerCreateTimerTask+0x60>)
 800a684:	f7ff f8cd 	bl	8009822 <xTaskCreate>
 800a688:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	603b      	str	r3, [r7, #0]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800a6a6:	687b      	ldr	r3, [r7, #4]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20003b44 	.word	0x20003b44
 800a6b4:	20003b48 	.word	0x20003b48
 800a6b8:	0800bb2c 	.word	0x0800bb2c
 800a6bc:	0800a7f5 	.word	0x0800a7f5

0800a6c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08a      	sub	sp, #40	; 0x28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xTimerGenericCommand+0x2e>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	623b      	str	r3, [r7, #32]
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6ee:	4b1a      	ldr	r3, [pc, #104]	; (800a758 <xTimerGenericCommand+0x98>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d02a      	beq.n	800a74c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	2b05      	cmp	r3, #5
 800a706:	dc18      	bgt.n	800a73a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a708:	f7ff fe92 	bl	800a430 <xTaskGetSchedulerState>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d109      	bne.n	800a726 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a712:	4b11      	ldr	r3, [pc, #68]	; (800a758 <xTimerGenericCommand+0x98>)
 800a714:	6818      	ldr	r0, [r3, #0]
 800a716:	f107 0110 	add.w	r1, r7, #16
 800a71a:	2300      	movs	r3, #0
 800a71c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a71e:	f7fe fa3b 	bl	8008b98 <xQueueGenericSend>
 800a722:	6278      	str	r0, [r7, #36]	; 0x24
 800a724:	e012      	b.n	800a74c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a726:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <xTimerGenericCommand+0x98>)
 800a728:	6818      	ldr	r0, [r3, #0]
 800a72a:	f107 0110 	add.w	r1, r7, #16
 800a72e:	2300      	movs	r3, #0
 800a730:	2200      	movs	r2, #0
 800a732:	f7fe fa31 	bl	8008b98 <xQueueGenericSend>
 800a736:	6278      	str	r0, [r7, #36]	; 0x24
 800a738:	e008      	b.n	800a74c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a73a:	4b07      	ldr	r3, [pc, #28]	; (800a758 <xTimerGenericCommand+0x98>)
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	f107 0110 	add.w	r1, r7, #16
 800a742:	2300      	movs	r3, #0
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	f7fe fbfb 	bl	8008f40 <xQueueGenericSendFromISR>
 800a74a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3728      	adds	r7, #40	; 0x28
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20003b44 	.word	0x20003b44

0800a75c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af02      	add	r7, sp, #8
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a766:	4b22      	ldr	r3, [pc, #136]	; (800a7f0 <prvProcessExpiredTimer+0x94>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	3304      	adds	r3, #4
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe f8c9 	bl	800890c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b00      	cmp	r3, #0
 800a786:	d022      	beq.n	800a7ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	699a      	ldr	r2, [r3, #24]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	18d1      	adds	r1, r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	6978      	ldr	r0, [r7, #20]
 800a796:	f000 f8d1 	bl	800a93c <prvInsertTimerInActiveList>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d01f      	beq.n	800a7e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	6978      	ldr	r0, [r7, #20]
 800a7ac:	f7ff ff88 	bl	800a6c0 <xTimerGenericCommand>
 800a7b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d113      	bne.n	800a7e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	60fb      	str	r3, [r7, #12]
}
 800a7ca:	bf00      	nop
 800a7cc:	e7fe      	b.n	800a7cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d4:	f023 0301 	bic.w	r3, r3, #1
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	6978      	ldr	r0, [r7, #20]
 800a7e6:	4798      	blx	r3
}
 800a7e8:	bf00      	nop
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20003b3c 	.word	0x20003b3c

0800a7f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7fc:	f107 0308 	add.w	r3, r7, #8
 800a800:	4618      	mov	r0, r3
 800a802:	f000 f857 	bl	800a8b4 <prvGetNextExpireTime>
 800a806:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	4619      	mov	r1, r3
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f000 f803 	bl	800a818 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a812:	f000 f8d5 	bl	800a9c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a816:	e7f1      	b.n	800a7fc <prvTimerTask+0x8>

0800a818 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a822:	f7ff fa01 	bl	8009c28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a826:	f107 0308 	add.w	r3, r7, #8
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 f866 	bl	800a8fc <prvSampleTimeNow>
 800a830:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d130      	bne.n	800a89a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10a      	bne.n	800a854 <prvProcessTimerOrBlockTask+0x3c>
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	429a      	cmp	r2, r3
 800a844:	d806      	bhi.n	800a854 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a846:	f7ff f9fd 	bl	8009c44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a84a:	68f9      	ldr	r1, [r7, #12]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff ff85 	bl	800a75c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a852:	e024      	b.n	800a89e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d008      	beq.n	800a86c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a85a:	4b13      	ldr	r3, [pc, #76]	; (800a8a8 <prvProcessTimerOrBlockTask+0x90>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <prvProcessTimerOrBlockTask+0x50>
 800a864:	2301      	movs	r3, #1
 800a866:	e000      	b.n	800a86a <prvProcessTimerOrBlockTask+0x52>
 800a868:	2300      	movs	r3, #0
 800a86a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a86c:	4b0f      	ldr	r3, [pc, #60]	; (800a8ac <prvProcessTimerOrBlockTask+0x94>)
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	4619      	mov	r1, r3
 800a87a:	f7fe ff3d 	bl	80096f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a87e:	f7ff f9e1 	bl	8009c44 <xTaskResumeAll>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a888:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <prvProcessTimerOrBlockTask+0x98>)
 800a88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	f3bf 8f6f 	isb	sy
}
 800a898:	e001      	b.n	800a89e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a89a:	f7ff f9d3 	bl	8009c44 <xTaskResumeAll>
}
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20003b40 	.word	0x20003b40
 800a8ac:	20003b44 	.word	0x20003b44
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8bc:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <prvGetNextExpireTime+0x44>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <prvGetNextExpireTime+0x16>
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	e000      	b.n	800a8cc <prvGetNextExpireTime+0x18>
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d105      	bne.n	800a8e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8d8:	4b07      	ldr	r3, [pc, #28]	; (800a8f8 <prvGetNextExpireTime+0x44>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	e001      	b.n	800a8e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	20003b3c 	.word	0x20003b3c

0800a8fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a904:	f7ff fa40 	bl	8009d88 <xTaskGetTickCount>
 800a908:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a90a:	4b0b      	ldr	r3, [pc, #44]	; (800a938 <prvSampleTimeNow+0x3c>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	429a      	cmp	r2, r3
 800a912:	d205      	bcs.n	800a920 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a914:	f000 f936 	bl	800ab84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	e002      	b.n	800a926 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a926:	4a04      	ldr	r2, [pc, #16]	; (800a938 <prvSampleTimeNow+0x3c>)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a92c:	68fb      	ldr	r3, [r7, #12]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20003b4c 	.word	0x20003b4c

0800a93c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
 800a948:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a94a:	2300      	movs	r3, #0
 800a94c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d812      	bhi.n	800a988 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	1ad2      	subs	r2, r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d302      	bcc.n	800a976 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a970:	2301      	movs	r3, #1
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	e01b      	b.n	800a9ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a976:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <prvInsertTimerInActiveList+0x7c>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3304      	adds	r3, #4
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7fd ff8a 	bl	800889a <vListInsert>
 800a986:	e012      	b.n	800a9ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d206      	bcs.n	800a99e <prvInsertTimerInActiveList+0x62>
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	429a      	cmp	r2, r3
 800a996:	d302      	bcc.n	800a99e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a998:	2301      	movs	r3, #1
 800a99a:	617b      	str	r3, [r7, #20]
 800a99c:	e007      	b.n	800a9ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a99e:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <prvInsertTimerInActiveList+0x80>)
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	f7fd ff76 	bl	800889a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a9ae:	697b      	ldr	r3, [r7, #20]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3718      	adds	r7, #24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	20003b40 	.word	0x20003b40
 800a9bc:	20003b3c 	.word	0x20003b3c

0800a9c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08e      	sub	sp, #56	; 0x38
 800a9c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9c6:	e0ca      	b.n	800ab5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	da18      	bge.n	800aa00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a9ce:	1d3b      	adds	r3, r7, #4
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10a      	bne.n	800a9f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	61fb      	str	r3, [r7, #28]
}
 800a9ec:	bf00      	nop
 800a9ee:	e7fe      	b.n	800a9ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9f6:	6850      	ldr	r0, [r2, #4]
 800a9f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9fa:	6892      	ldr	r2, [r2, #8]
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f2c0 80ab 	blt.w	800ab5e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d004      	beq.n	800aa1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa16:	3304      	adds	r3, #4
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fd ff77 	bl	800890c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa1e:	463b      	mov	r3, r7
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff ff6b 	bl	800a8fc <prvSampleTimeNow>
 800aa26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b09      	cmp	r3, #9
 800aa2c:	f200 8096 	bhi.w	800ab5c <prvProcessReceivedCommands+0x19c>
 800aa30:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <prvProcessReceivedCommands+0x78>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aa61 	.word	0x0800aa61
 800aa3c:	0800aa61 	.word	0x0800aa61
 800aa40:	0800aa61 	.word	0x0800aa61
 800aa44:	0800aad5 	.word	0x0800aad5
 800aa48:	0800aae9 	.word	0x0800aae9
 800aa4c:	0800ab33 	.word	0x0800ab33
 800aa50:	0800aa61 	.word	0x0800aa61
 800aa54:	0800aa61 	.word	0x0800aa61
 800aa58:	0800aad5 	.word	0x0800aad5
 800aa5c:	0800aae9 	.word	0x0800aae9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa66:	f043 0301 	orr.w	r3, r3, #1
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	18d1      	adds	r1, r2, r3
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa80:	f7ff ff5c 	bl	800a93c <prvInsertTimerInActiveList>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d069      	beq.n	800ab5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d05e      	beq.n	800ab5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	441a      	add	r2, r3
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	2300      	movs	r3, #0
 800aaae:	2100      	movs	r1, #0
 800aab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab2:	f7ff fe05 	bl	800a6c0 <xTimerGenericCommand>
 800aab6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d14f      	bne.n	800ab5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	61bb      	str	r3, [r7, #24]
}
 800aad0:	bf00      	nop
 800aad2:	e7fe      	b.n	800aad2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aada:	f023 0301 	bic.w	r3, r3, #1
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aae6:	e03a      	b.n	800ab5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaee:	f043 0301 	orr.w	r3, r3, #1
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10a      	bne.n	800ab1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	617b      	str	r3, [r7, #20]
}
 800ab1a:	bf00      	nop
 800ab1c:	e7fe      	b.n	800ab1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	18d1      	adds	r1, r2, r3
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab2c:	f7ff ff06 	bl	800a93c <prvInsertTimerInActiveList>
					break;
 800ab30:	e015      	b.n	800ab5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab38:	f003 0302 	and.w	r3, r3, #2
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d103      	bne.n	800ab48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ab40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab42:	f000 fbfb 	bl	800b33c <vPortFree>
 800ab46:	e00a      	b.n	800ab5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab4e:	f023 0301 	bic.w	r3, r3, #1
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab5a:	e000      	b.n	800ab5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ab5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab5e:	4b08      	ldr	r3, [pc, #32]	; (800ab80 <prvProcessReceivedCommands+0x1c0>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	1d39      	adds	r1, r7, #4
 800ab64:	2200      	movs	r2, #0
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe fadc 	bl	8009124 <xQueueReceive>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f47f af2a 	bne.w	800a9c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop
 800ab78:	3730      	adds	r7, #48	; 0x30
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	20003b44 	.word	0x20003b44

0800ab84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b088      	sub	sp, #32
 800ab88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab8a:	e048      	b.n	800ac1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab8c:	4b2d      	ldr	r3, [pc, #180]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab96:	4b2b      	ldr	r3, [pc, #172]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3304      	adds	r3, #4
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fd feb1 	bl	800890c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abb8:	f003 0304 	and.w	r3, r3, #4
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d02e      	beq.n	800ac1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	4413      	add	r3, r2
 800abc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d90e      	bls.n	800abf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abde:	4b19      	ldr	r3, [pc, #100]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3304      	adds	r3, #4
 800abe6:	4619      	mov	r1, r3
 800abe8:	4610      	mov	r0, r2
 800abea:	f7fd fe56 	bl	800889a <vListInsert>
 800abee:	e016      	b.n	800ac1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abf0:	2300      	movs	r3, #0
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	2300      	movs	r3, #0
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	2100      	movs	r1, #0
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f7ff fd60 	bl	800a6c0 <xTimerGenericCommand>
 800ac00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10a      	bne.n	800ac1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	603b      	str	r3, [r7, #0]
}
 800ac1a:	bf00      	nop
 800ac1c:	e7fe      	b.n	800ac1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac1e:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1b1      	bne.n	800ab8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac28:	4b06      	ldr	r3, [pc, #24]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac2e:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <prvSwitchTimerLists+0xc4>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a04      	ldr	r2, [pc, #16]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800ac34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac36:	4a04      	ldr	r2, [pc, #16]	; (800ac48 <prvSwitchTimerLists+0xc4>)
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	6013      	str	r3, [r2, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20003b3c 	.word	0x20003b3c
 800ac48:	20003b40 	.word	0x20003b40

0800ac4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac50:	f000 f970 	bl	800af34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac54:	4b12      	ldr	r3, [pc, #72]	; (800aca0 <prvCheckForValidListAndQueue+0x54>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d11d      	bne.n	800ac98 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac5c:	4811      	ldr	r0, [pc, #68]	; (800aca4 <prvCheckForValidListAndQueue+0x58>)
 800ac5e:	f7fd fdcb 	bl	80087f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac62:	4811      	ldr	r0, [pc, #68]	; (800aca8 <prvCheckForValidListAndQueue+0x5c>)
 800ac64:	f7fd fdc8 	bl	80087f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac68:	4b10      	ldr	r3, [pc, #64]	; (800acac <prvCheckForValidListAndQueue+0x60>)
 800ac6a:	4a0e      	ldr	r2, [pc, #56]	; (800aca4 <prvCheckForValidListAndQueue+0x58>)
 800ac6c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac6e:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <prvCheckForValidListAndQueue+0x64>)
 800ac70:	4a0d      	ldr	r2, [pc, #52]	; (800aca8 <prvCheckForValidListAndQueue+0x5c>)
 800ac72:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ac74:	2200      	movs	r2, #0
 800ac76:	2110      	movs	r1, #16
 800ac78:	2014      	movs	r0, #20
 800ac7a:	f7fd fed9 	bl	8008a30 <xQueueGenericCreate>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4a07      	ldr	r2, [pc, #28]	; (800aca0 <prvCheckForValidListAndQueue+0x54>)
 800ac82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac84:	4b06      	ldr	r3, [pc, #24]	; (800aca0 <prvCheckForValidListAndQueue+0x54>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d005      	beq.n	800ac98 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac8c:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <prvCheckForValidListAndQueue+0x54>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4908      	ldr	r1, [pc, #32]	; (800acb4 <prvCheckForValidListAndQueue+0x68>)
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fe fd04 	bl	80096a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac98:	f000 f97c 	bl	800af94 <vPortExitCritical>
}
 800ac9c:	bf00      	nop
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	20003b44 	.word	0x20003b44
 800aca4:	20003b14 	.word	0x20003b14
 800aca8:	20003b28 	.word	0x20003b28
 800acac:	20003b3c 	.word	0x20003b3c
 800acb0:	20003b40 	.word	0x20003b40
 800acb4:	0800bb34 	.word	0x0800bb34

0800acb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3b04      	subs	r3, #4
 800acc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800acd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	3b04      	subs	r3, #4
 800acd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	f023 0201 	bic.w	r2, r3, #1
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3b04      	subs	r3, #4
 800ace6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ace8:	4a0c      	ldr	r2, [pc, #48]	; (800ad1c <pxPortInitialiseStack+0x64>)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	3b14      	subs	r3, #20
 800acf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3b04      	subs	r3, #4
 800acfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f06f 0202 	mvn.w	r2, #2
 800ad06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	3b20      	subs	r3, #32
 800ad0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	0800ad21 	.word	0x0800ad21

0800ad20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad2a:	4b12      	ldr	r3, [pc, #72]	; (800ad74 <prvTaskExitError+0x54>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d00a      	beq.n	800ad4a <prvTaskExitError+0x2a>
	__asm volatile
 800ad34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	60fb      	str	r3, [r7, #12]
}
 800ad46:	bf00      	nop
 800ad48:	e7fe      	b.n	800ad48 <prvTaskExitError+0x28>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	60bb      	str	r3, [r7, #8]
}
 800ad5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad5e:	bf00      	nop
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0fc      	beq.n	800ad60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad66:	bf00      	nop
 800ad68:	bf00      	nop
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr
 800ad74:	20000010 	.word	0x20000010
	...

0800ad80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad80:	4b07      	ldr	r3, [pc, #28]	; (800ada0 <pxCurrentTCBConst2>)
 800ad82:	6819      	ldr	r1, [r3, #0]
 800ad84:	6808      	ldr	r0, [r1, #0]
 800ad86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8a:	f380 8809 	msr	PSP, r0
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f04f 0000 	mov.w	r0, #0
 800ad96:	f380 8811 	msr	BASEPRI, r0
 800ad9a:	4770      	bx	lr
 800ad9c:	f3af 8000 	nop.w

0800ada0 <pxCurrentTCBConst2>:
 800ada0:	200039e8 	.word	0x200039e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop

0800ada8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ada8:	4808      	ldr	r0, [pc, #32]	; (800adcc <prvPortStartFirstTask+0x24>)
 800adaa:	6800      	ldr	r0, [r0, #0]
 800adac:	6800      	ldr	r0, [r0, #0]
 800adae:	f380 8808 	msr	MSP, r0
 800adb2:	f04f 0000 	mov.w	r0, #0
 800adb6:	f380 8814 	msr	CONTROL, r0
 800adba:	b662      	cpsie	i
 800adbc:	b661      	cpsie	f
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	df00      	svc	0
 800adc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adca:	bf00      	nop
 800adcc:	e000ed08 	.word	0xe000ed08

0800add0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800add6:	4b4e      	ldr	r3, [pc, #312]	; (800af10 <xPortStartScheduler+0x140>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a4e      	ldr	r2, [pc, #312]	; (800af14 <xPortStartScheduler+0x144>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d10a      	bne.n	800adf6 <xPortStartScheduler+0x26>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	61bb      	str	r3, [r7, #24]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800adf6:	4b46      	ldr	r3, [pc, #280]	; (800af10 <xPortStartScheduler+0x140>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a47      	ldr	r2, [pc, #284]	; (800af18 <xPortStartScheduler+0x148>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d10a      	bne.n	800ae16 <xPortStartScheduler+0x46>
	__asm volatile
 800ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	617b      	str	r3, [r7, #20]
}
 800ae12:	bf00      	nop
 800ae14:	e7fe      	b.n	800ae14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae16:	4b41      	ldr	r3, [pc, #260]	; (800af1c <xPortStartScheduler+0x14c>)
 800ae18:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	22ff      	movs	r2, #255	; 0xff
 800ae26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	4b39      	ldr	r3, [pc, #228]	; (800af20 <xPortStartScheduler+0x150>)
 800ae3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae3e:	4b39      	ldr	r3, [pc, #228]	; (800af24 <xPortStartScheduler+0x154>)
 800ae40:	2207      	movs	r2, #7
 800ae42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae44:	e009      	b.n	800ae5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae46:	4b37      	ldr	r3, [pc, #220]	; (800af24 <xPortStartScheduler+0x154>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	4a35      	ldr	r2, [pc, #212]	; (800af24 <xPortStartScheduler+0x154>)
 800ae4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae50:	79fb      	ldrb	r3, [r7, #7]
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae5a:	79fb      	ldrb	r3, [r7, #7]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae62:	2b80      	cmp	r3, #128	; 0x80
 800ae64:	d0ef      	beq.n	800ae46 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800ae66:	4b2f      	ldr	r3, [pc, #188]	; (800af24 <xPortStartScheduler+0x154>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f1c3 0307 	rsb	r3, r3, #7
 800ae6e:	2b04      	cmp	r3, #4
 800ae70:	d00a      	beq.n	800ae88 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae76:	f383 8811 	msr	BASEPRI, r3
 800ae7a:	f3bf 8f6f 	isb	sy
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	613b      	str	r3, [r7, #16]
}
 800ae84:	bf00      	nop
 800ae86:	e7fe      	b.n	800ae86 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae88:	4b26      	ldr	r3, [pc, #152]	; (800af24 <xPortStartScheduler+0x154>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f1c3 0307 	rsb	r3, r3, #7
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d00a      	beq.n	800aeaa <xPortStartScheduler+0xda>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	60fb      	str	r3, [r7, #12]
}
 800aea6:	bf00      	nop
 800aea8:	e7fe      	b.n	800aea8 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aeaa:	4b1e      	ldr	r3, [pc, #120]	; (800af24 <xPortStartScheduler+0x154>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	021b      	lsls	r3, r3, #8
 800aeb0:	4a1c      	ldr	r2, [pc, #112]	; (800af24 <xPortStartScheduler+0x154>)
 800aeb2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aeb4:	4b1b      	ldr	r3, [pc, #108]	; (800af24 <xPortStartScheduler+0x154>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aebc:	4a19      	ldr	r2, [pc, #100]	; (800af24 <xPortStartScheduler+0x154>)
 800aebe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aec8:	4b17      	ldr	r3, [pc, #92]	; (800af28 <xPortStartScheduler+0x158>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a16      	ldr	r2, [pc, #88]	; (800af28 <xPortStartScheduler+0x158>)
 800aece:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aed2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aed4:	4b14      	ldr	r3, [pc, #80]	; (800af28 <xPortStartScheduler+0x158>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a13      	ldr	r2, [pc, #76]	; (800af28 <xPortStartScheduler+0x158>)
 800aeda:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aede:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aee0:	f000 f8dc 	bl	800b09c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aee4:	4b11      	ldr	r3, [pc, #68]	; (800af2c <xPortStartScheduler+0x15c>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aeea:	f000 f8fb 	bl	800b0e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aeee:	4b10      	ldr	r3, [pc, #64]	; (800af30 <xPortStartScheduler+0x160>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a0f      	ldr	r2, [pc, #60]	; (800af30 <xPortStartScheduler+0x160>)
 800aef4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aef8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aefa:	f7ff ff55 	bl	800ada8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aefe:	f7ff f82b 	bl	8009f58 <vTaskSwitchContext>
	prvTaskExitError();
 800af02:	f7ff ff0d 	bl	800ad20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3720      	adds	r7, #32
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	e000ed00 	.word	0xe000ed00
 800af14:	410fc271 	.word	0x410fc271
 800af18:	410fc270 	.word	0x410fc270
 800af1c:	e000e400 	.word	0xe000e400
 800af20:	20003b50 	.word	0x20003b50
 800af24:	20003b54 	.word	0x20003b54
 800af28:	e000ed20 	.word	0xe000ed20
 800af2c:	20000010 	.word	0x20000010
 800af30:	e000ef34 	.word	0xe000ef34

0800af34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	607b      	str	r3, [r7, #4]
}
 800af4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af4e:	4b0f      	ldr	r3, [pc, #60]	; (800af8c <vPortEnterCritical+0x58>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3301      	adds	r3, #1
 800af54:	4a0d      	ldr	r2, [pc, #52]	; (800af8c <vPortEnterCritical+0x58>)
 800af56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af58:	4b0c      	ldr	r3, [pc, #48]	; (800af8c <vPortEnterCritical+0x58>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d10f      	bne.n	800af80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af60:	4b0b      	ldr	r3, [pc, #44]	; (800af90 <vPortEnterCritical+0x5c>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00a      	beq.n	800af80 <vPortEnterCritical+0x4c>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	603b      	str	r3, [r7, #0]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <vPortEnterCritical+0x4a>
	}
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr
 800af8c:	20000010 	.word	0x20000010
 800af90:	e000ed04 	.word	0xe000ed04

0800af94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af9a:	4b12      	ldr	r3, [pc, #72]	; (800afe4 <vPortExitCritical+0x50>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10a      	bne.n	800afb8 <vPortExitCritical+0x24>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	607b      	str	r3, [r7, #4]
}
 800afb4:	bf00      	nop
 800afb6:	e7fe      	b.n	800afb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800afb8:	4b0a      	ldr	r3, [pc, #40]	; (800afe4 <vPortExitCritical+0x50>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	4a09      	ldr	r2, [pc, #36]	; (800afe4 <vPortExitCritical+0x50>)
 800afc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800afc2:	4b08      	ldr	r3, [pc, #32]	; (800afe4 <vPortExitCritical+0x50>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d105      	bne.n	800afd6 <vPortExitCritical+0x42>
 800afca:	2300      	movs	r3, #0
 800afcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	f383 8811 	msr	BASEPRI, r3
}
 800afd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800afd6:	bf00      	nop
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	20000010 	.word	0x20000010
	...

0800aff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aff0:	f3ef 8009 	mrs	r0, PSP
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	4b15      	ldr	r3, [pc, #84]	; (800b050 <pxCurrentTCBConst>)
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	f01e 0f10 	tst.w	lr, #16
 800b000:	bf08      	it	eq
 800b002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00a:	6010      	str	r0, [r2, #0]
 800b00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b010:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b014:	f380 8811 	msr	BASEPRI, r0
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f7fe ff9a 	bl	8009f58 <vTaskSwitchContext>
 800b024:	f04f 0000 	mov.w	r0, #0
 800b028:	f380 8811 	msr	BASEPRI, r0
 800b02c:	bc09      	pop	{r0, r3}
 800b02e:	6819      	ldr	r1, [r3, #0]
 800b030:	6808      	ldr	r0, [r1, #0]
 800b032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b036:	f01e 0f10 	tst.w	lr, #16
 800b03a:	bf08      	it	eq
 800b03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b040:	f380 8809 	msr	PSP, r0
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	f3af 8000 	nop.w

0800b050 <pxCurrentTCBConst>:
 800b050:	200039e8 	.word	0x200039e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop

0800b058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	607b      	str	r3, [r7, #4]
}
 800b070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b072:	f7fe fe99 	bl	8009da8 <xTaskIncrementTick>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d003      	beq.n	800b084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b07c:	4b06      	ldr	r3, [pc, #24]	; (800b098 <SysTick_Handler+0x40>)
 800b07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b082:	601a      	str	r2, [r3, #0]
 800b084:	2300      	movs	r3, #0
 800b086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	f383 8811 	msr	BASEPRI, r3
}
 800b08e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b090:	bf00      	nop
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	e000ed04 	.word	0xe000ed04

0800b09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b09c:	b480      	push	{r7}
 800b09e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b0a0:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <vPortSetupTimerInterrupt+0x34>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0a6:	4b0b      	ldr	r3, [pc, #44]	; (800b0d4 <vPortSetupTimerInterrupt+0x38>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b0ac:	4b0a      	ldr	r3, [pc, #40]	; (800b0d8 <vPortSetupTimerInterrupt+0x3c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a0a      	ldr	r2, [pc, #40]	; (800b0dc <vPortSetupTimerInterrupt+0x40>)
 800b0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0b6:	099b      	lsrs	r3, r3, #6
 800b0b8:	4a09      	ldr	r2, [pc, #36]	; (800b0e0 <vPortSetupTimerInterrupt+0x44>)
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b0be:	4b04      	ldr	r3, [pc, #16]	; (800b0d0 <vPortSetupTimerInterrupt+0x34>)
 800b0c0:	2207      	movs	r2, #7
 800b0c2:	601a      	str	r2, [r3, #0]
}
 800b0c4:	bf00      	nop
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	e000e010 	.word	0xe000e010
 800b0d4:	e000e018 	.word	0xe000e018
 800b0d8:	20000004 	.word	0x20000004
 800b0dc:	10624dd3 	.word	0x10624dd3
 800b0e0:	e000e014 	.word	0xe000e014

0800b0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0f4 <vPortEnableVFP+0x10>
 800b0e8:	6801      	ldr	r1, [r0, #0]
 800b0ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0ee:	6001      	str	r1, [r0, #0]
 800b0f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0f2:	bf00      	nop
 800b0f4:	e000ed88 	.word	0xe000ed88

0800b0f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0fe:	f3ef 8305 	mrs	r3, IPSR
 800b102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b0f      	cmp	r3, #15
 800b108:	d914      	bls.n	800b134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b10a:	4a17      	ldr	r2, [pc, #92]	; (800b168 <vPortValidateInterruptPriority+0x70>)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	4413      	add	r3, r2
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b114:	4b15      	ldr	r3, [pc, #84]	; (800b16c <vPortValidateInterruptPriority+0x74>)
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	7afa      	ldrb	r2, [r7, #11]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d20a      	bcs.n	800b134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	607b      	str	r3, [r7, #4]
}
 800b130:	bf00      	nop
 800b132:	e7fe      	b.n	800b132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b134:	4b0e      	ldr	r3, [pc, #56]	; (800b170 <vPortValidateInterruptPriority+0x78>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b13c:	4b0d      	ldr	r3, [pc, #52]	; (800b174 <vPortValidateInterruptPriority+0x7c>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	429a      	cmp	r2, r3
 800b142:	d90a      	bls.n	800b15a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	603b      	str	r3, [r7, #0]
}
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <vPortValidateInterruptPriority+0x60>
	}
 800b15a:	bf00      	nop
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	e000e3f0 	.word	0xe000e3f0
 800b16c:	20003b50 	.word	0x20003b50
 800b170:	e000ed0c 	.word	0xe000ed0c
 800b174:	20003b54 	.word	0x20003b54

0800b178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b08a      	sub	sp, #40	; 0x28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b180:	2300      	movs	r3, #0
 800b182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b184:	f7fe fd50 	bl	8009c28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b188:	4b64      	ldr	r3, [pc, #400]	; (800b31c <pvPortMalloc+0x1a4>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b190:	f000 f94c 	bl	800b42c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b194:	4b62      	ldr	r3, [pc, #392]	; (800b320 <pvPortMalloc+0x1a8>)
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4013      	ands	r3, r2
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f040 8093 	bne.w	800b2c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d01d      	beq.n	800b1e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b1a8:	2208      	movs	r2, #8
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f003 0307 	and.w	r3, r3, #7
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d014      	beq.n	800b1e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f023 0307 	bic.w	r3, r3, #7
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f003 0307 	and.w	r3, r3, #7
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00a      	beq.n	800b1e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	617b      	str	r3, [r7, #20]
}
 800b1e0:	bf00      	nop
 800b1e2:	e7fe      	b.n	800b1e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d06e      	beq.n	800b2c8 <pvPortMalloc+0x150>
 800b1ea:	4b4e      	ldr	r3, [pc, #312]	; (800b324 <pvPortMalloc+0x1ac>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d869      	bhi.n	800b2c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1f4:	4b4c      	ldr	r3, [pc, #304]	; (800b328 <pvPortMalloc+0x1b0>)
 800b1f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1f8:	4b4b      	ldr	r3, [pc, #300]	; (800b328 <pvPortMalloc+0x1b0>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1fe:	e004      	b.n	800b20a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	429a      	cmp	r2, r3
 800b212:	d903      	bls.n	800b21c <pvPortMalloc+0xa4>
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1f1      	bne.n	800b200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b21c:	4b3f      	ldr	r3, [pc, #252]	; (800b31c <pvPortMalloc+0x1a4>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b222:	429a      	cmp	r2, r3
 800b224:	d050      	beq.n	800b2c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2208      	movs	r2, #8
 800b22c:	4413      	add	r3, r2
 800b22e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	1ad2      	subs	r2, r2, r3
 800b240:	2308      	movs	r3, #8
 800b242:	005b      	lsls	r3, r3, #1
 800b244:	429a      	cmp	r2, r3
 800b246:	d91f      	bls.n	800b288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4413      	add	r3, r2
 800b24e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	f003 0307 	and.w	r3, r3, #7
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00a      	beq.n	800b270 <pvPortMalloc+0xf8>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	613b      	str	r3, [r7, #16]
}
 800b26c:	bf00      	nop
 800b26e:	e7fe      	b.n	800b26e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	685a      	ldr	r2, [r3, #4]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	1ad2      	subs	r2, r2, r3
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b282:	69b8      	ldr	r0, [r7, #24]
 800b284:	f000 f934 	bl	800b4f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b288:	4b26      	ldr	r3, [pc, #152]	; (800b324 <pvPortMalloc+0x1ac>)
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	4a24      	ldr	r2, [pc, #144]	; (800b324 <pvPortMalloc+0x1ac>)
 800b294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b296:	4b23      	ldr	r3, [pc, #140]	; (800b324 <pvPortMalloc+0x1ac>)
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	4b24      	ldr	r3, [pc, #144]	; (800b32c <pvPortMalloc+0x1b4>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d203      	bcs.n	800b2aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2a2:	4b20      	ldr	r3, [pc, #128]	; (800b324 <pvPortMalloc+0x1ac>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a21      	ldr	r2, [pc, #132]	; (800b32c <pvPortMalloc+0x1b4>)
 800b2a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	685a      	ldr	r2, [r3, #4]
 800b2ae:	4b1c      	ldr	r3, [pc, #112]	; (800b320 <pvPortMalloc+0x1a8>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b2be:	4b1c      	ldr	r3, [pc, #112]	; (800b330 <pvPortMalloc+0x1b8>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	4a1a      	ldr	r2, [pc, #104]	; (800b330 <pvPortMalloc+0x1b8>)
 800b2c6:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800b2c8:	4b1a      	ldr	r3, [pc, #104]	; (800b334 <pvPortMalloc+0x1bc>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00c      	beq.n	800b2ee <pvPortMalloc+0x176>
 800b2d4:	4b18      	ldr	r3, [pc, #96]	; (800b338 <pvPortMalloc+0x1c0>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d007      	beq.n	800b2ee <pvPortMalloc+0x176>
 800b2de:	f7f7 fbe3 	bl	8002aa8 <xTraceKernelPortGetSystemHeapHandle>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	69f9      	ldr	r1, [r7, #28]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7f7 fa6f 	bl	80027cc <xTraceHeapAlloc>
	}
	( void ) xTaskResumeAll();
 800b2ee:	f7fe fca9 	bl	8009c44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	f003 0307 	and.w	r3, r3, #7
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00a      	beq.n	800b312 <pvPortMalloc+0x19a>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	60fb      	str	r3, [r7, #12]
}
 800b30e:	bf00      	nop
 800b310:	e7fe      	b.n	800b310 <pvPortMalloc+0x198>
	return pvReturn;
 800b312:	69fb      	ldr	r3, [r7, #28]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3728      	adds	r7, #40	; 0x28
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	20007760 	.word	0x20007760
 800b320:	20007774 	.word	0x20007774
 800b324:	20007764 	.word	0x20007764
 800b328:	20007758 	.word	0x20007758
 800b32c:	20007768 	.word	0x20007768
 800b330:	2000776c 	.word	0x2000776c
 800b334:	20003998 	.word	0x20003998
 800b338:	20003990 	.word	0x20003990

0800b33c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d060      	beq.n	800b410 <vPortFree+0xd4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b34e:	2308      	movs	r3, #8
 800b350:	425b      	negs	r3, r3
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	4413      	add	r3, r2
 800b356:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	4b2d      	ldr	r3, [pc, #180]	; (800b418 <vPortFree+0xdc>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4013      	ands	r3, r2
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <vPortFree+0x44>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	60fb      	str	r3, [r7, #12]
}
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00a      	beq.n	800b39e <vPortFree+0x62>
	__asm volatile
 800b388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	60bb      	str	r3, [r7, #8]
}
 800b39a:	bf00      	nop
 800b39c:	e7fe      	b.n	800b39c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	4b1d      	ldr	r3, [pc, #116]	; (800b418 <vPortFree+0xdc>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d031      	beq.n	800b410 <vPortFree+0xd4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d12d      	bne.n	800b410 <vPortFree+0xd4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	4b17      	ldr	r3, [pc, #92]	; (800b418 <vPortFree+0xdc>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	43db      	mvns	r3, r3
 800b3be:	401a      	ands	r2, r3
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3c4:	f7fe fc30 	bl	8009c28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	4b13      	ldr	r3, [pc, #76]	; (800b41c <vPortFree+0xe0>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	4a12      	ldr	r2, [pc, #72]	; (800b41c <vPortFree+0xe0>)
 800b3d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800b3d6:	4b12      	ldr	r3, [pc, #72]	; (800b420 <vPortFree+0xe4>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00c      	beq.n	800b3fc <vPortFree+0xc0>
 800b3e2:	4b10      	ldr	r3, [pc, #64]	; (800b424 <vPortFree+0xe8>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d007      	beq.n	800b3fc <vPortFree+0xc0>
 800b3ec:	f7f7 fb5c 	bl	8002aa8 <xTraceKernelPortGetSystemHeapHandle>
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	f7f7 fa1c 	bl	8002834 <xTraceHeapFree>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b3fc:	6938      	ldr	r0, [r7, #16]
 800b3fe:	f000 f877 	bl	800b4f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b402:	4b09      	ldr	r3, [pc, #36]	; (800b428 <vPortFree+0xec>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3301      	adds	r3, #1
 800b408:	4a07      	ldr	r2, [pc, #28]	; (800b428 <vPortFree+0xec>)
 800b40a:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b40c:	f7fe fc1a 	bl	8009c44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b410:	bf00      	nop
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20007774 	.word	0x20007774
 800b41c:	20007764 	.word	0x20007764
 800b420:	20003998 	.word	0x20003998
 800b424:	20003990 	.word	0x20003990
 800b428:	20007770 	.word	0x20007770

0800b42c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b432:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b436:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b438:	4b27      	ldr	r3, [pc, #156]	; (800b4d8 <prvHeapInit+0xac>)
 800b43a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f003 0307 	and.w	r3, r3, #7
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00c      	beq.n	800b460 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	3307      	adds	r3, #7
 800b44a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f023 0307 	bic.w	r3, r3, #7
 800b452:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	4a1f      	ldr	r2, [pc, #124]	; (800b4d8 <prvHeapInit+0xac>)
 800b45c:	4413      	add	r3, r2
 800b45e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b464:	4a1d      	ldr	r2, [pc, #116]	; (800b4dc <prvHeapInit+0xb0>)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b46a:	4b1c      	ldr	r3, [pc, #112]	; (800b4dc <prvHeapInit+0xb0>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	4413      	add	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b478:	2208      	movs	r2, #8
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	1a9b      	subs	r3, r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f023 0307 	bic.w	r3, r3, #7
 800b486:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4a15      	ldr	r2, [pc, #84]	; (800b4e0 <prvHeapInit+0xb4>)
 800b48c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b48e:	4b14      	ldr	r3, [pc, #80]	; (800b4e0 <prvHeapInit+0xb4>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2200      	movs	r2, #0
 800b494:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b496:	4b12      	ldr	r3, [pc, #72]	; (800b4e0 <prvHeapInit+0xb4>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	1ad2      	subs	r2, r2, r3
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4ac:	4b0c      	ldr	r3, [pc, #48]	; (800b4e0 <prvHeapInit+0xb4>)
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	4a0a      	ldr	r2, [pc, #40]	; (800b4e4 <prvHeapInit+0xb8>)
 800b4ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	4a09      	ldr	r2, [pc, #36]	; (800b4e8 <prvHeapInit+0xbc>)
 800b4c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4c4:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <prvHeapInit+0xc0>)
 800b4c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4ca:	601a      	str	r2, [r3, #0]
}
 800b4cc:	bf00      	nop
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr
 800b4d8:	20003b58 	.word	0x20003b58
 800b4dc:	20007758 	.word	0x20007758
 800b4e0:	20007760 	.word	0x20007760
 800b4e4:	20007768 	.word	0x20007768
 800b4e8:	20007764 	.word	0x20007764
 800b4ec:	20007774 	.word	0x20007774

0800b4f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4f8:	4b28      	ldr	r3, [pc, #160]	; (800b59c <prvInsertBlockIntoFreeList+0xac>)
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	e002      	b.n	800b504 <prvInsertBlockIntoFreeList+0x14>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d8f7      	bhi.n	800b4fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	4413      	add	r3, r2
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d108      	bne.n	800b532 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	685a      	ldr	r2, [r3, #4]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	441a      	add	r2, r3
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	441a      	add	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	429a      	cmp	r2, r3
 800b544:	d118      	bne.n	800b578 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <prvInsertBlockIntoFreeList+0xb0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d00d      	beq.n	800b56e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	441a      	add	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	601a      	str	r2, [r3, #0]
 800b56c:	e008      	b.n	800b580 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b56e:	4b0c      	ldr	r3, [pc, #48]	; (800b5a0 <prvInsertBlockIntoFreeList+0xb0>)
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	e003      	b.n	800b580 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	429a      	cmp	r2, r3
 800b586:	d002      	beq.n	800b58e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b58e:	bf00      	nop
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	20007758 	.word	0x20007758
 800b5a0:	20007760 	.word	0x20007760

0800b5a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fc fff2 	bl	800859c <USBH_LL_IncTimer>
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7fd f836 	bl	8008640 <USBH_LL_Connect>
}
 800b5d4:	bf00      	nop
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fd f84b 	bl	8008686 <USBH_LL_Disconnect>
}
 800b5f0:	bf00      	nop
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	460b      	mov	r3, r1
 800b602:	70fb      	strb	r3, [r7, #3]
 800b604:	4613      	mov	r3, r2
 800b606:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fd f86b 	bl	80086ea <USBH_LL_NotifyURBChange>
#endif
}
 800b614:	bf00      	nop
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fc ffe0 	bl	80085f0 <USBH_LL_PortEnabled>
}
 800b630:	bf00      	nop
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b646:	4618      	mov	r0, r3
 800b648:	f7fc ffec 	bl	8008624 <USBH_LL_PortDisabled>
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7f9 f8ed 	bl	800484a <HAL_HCD_Stop>
 800b670:	4603      	mov	r3, r0
 800b672:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b674:	7bfb      	ldrb	r3, [r7, #15]
 800b676:	4618      	mov	r0, r3
 800b678:	f000 f808 	bl	800b68c <USBH_Get_USB_Status>
 800b67c:	4603      	mov	r3, r0
 800b67e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b680:	7bbb      	ldrb	r3, [r7, #14]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b69a:	79fb      	ldrb	r3, [r7, #7]
 800b69c:	2b03      	cmp	r3, #3
 800b69e:	d817      	bhi.n	800b6d0 <USBH_Get_USB_Status+0x44>
 800b6a0:	a201      	add	r2, pc, #4	; (adr r2, 800b6a8 <USBH_Get_USB_Status+0x1c>)
 800b6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a6:	bf00      	nop
 800b6a8:	0800b6b9 	.word	0x0800b6b9
 800b6ac:	0800b6bf 	.word	0x0800b6bf
 800b6b0:	0800b6c5 	.word	0x0800b6c5
 800b6b4:	0800b6cb 	.word	0x0800b6cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b6bc:	e00b      	b.n	800b6d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b6be:	2302      	movs	r3, #2
 800b6c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b6c2:	e008      	b.n	800b6d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6c8:	e005      	b.n	800b6d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ce:	e002      	b.n	800b6d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d4:	bf00      	nop
  }
  return usb_status;
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <__malloc_lock>:
 800b6e4:	4801      	ldr	r0, [pc, #4]	; (800b6ec <__malloc_lock+0x8>)
 800b6e6:	f000 b88b 	b.w	800b800 <__retarget_lock_acquire_recursive>
 800b6ea:	bf00      	nop
 800b6ec:	20007c94 	.word	0x20007c94

0800b6f0 <__malloc_unlock>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	; (800b6f8 <__malloc_unlock+0x8>)
 800b6f2:	f000 b886 	b.w	800b802 <__retarget_lock_release_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	20007c94 	.word	0x20007c94

0800b6fc <memset>:
 800b6fc:	4402      	add	r2, r0
 800b6fe:	4603      	mov	r3, r0
 800b700:	4293      	cmp	r3, r2
 800b702:	d100      	bne.n	800b706 <memset+0xa>
 800b704:	4770      	bx	lr
 800b706:	f803 1b01 	strb.w	r1, [r3], #1
 800b70a:	e7f9      	b.n	800b700 <memset+0x4>

0800b70c <_reclaim_reent>:
 800b70c:	4b29      	ldr	r3, [pc, #164]	; (800b7b4 <_reclaim_reent+0xa8>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4283      	cmp	r3, r0
 800b712:	b570      	push	{r4, r5, r6, lr}
 800b714:	4604      	mov	r4, r0
 800b716:	d04b      	beq.n	800b7b0 <_reclaim_reent+0xa4>
 800b718:	69c3      	ldr	r3, [r0, #28]
 800b71a:	b143      	cbz	r3, 800b72e <_reclaim_reent+0x22>
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d144      	bne.n	800b7ac <_reclaim_reent+0xa0>
 800b722:	69e3      	ldr	r3, [r4, #28]
 800b724:	6819      	ldr	r1, [r3, #0]
 800b726:	b111      	cbz	r1, 800b72e <_reclaim_reent+0x22>
 800b728:	4620      	mov	r0, r4
 800b72a:	f000 f879 	bl	800b820 <_free_r>
 800b72e:	6961      	ldr	r1, [r4, #20]
 800b730:	b111      	cbz	r1, 800b738 <_reclaim_reent+0x2c>
 800b732:	4620      	mov	r0, r4
 800b734:	f000 f874 	bl	800b820 <_free_r>
 800b738:	69e1      	ldr	r1, [r4, #28]
 800b73a:	b111      	cbz	r1, 800b742 <_reclaim_reent+0x36>
 800b73c:	4620      	mov	r0, r4
 800b73e:	f000 f86f 	bl	800b820 <_free_r>
 800b742:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b744:	b111      	cbz	r1, 800b74c <_reclaim_reent+0x40>
 800b746:	4620      	mov	r0, r4
 800b748:	f000 f86a 	bl	800b820 <_free_r>
 800b74c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b74e:	b111      	cbz	r1, 800b756 <_reclaim_reent+0x4a>
 800b750:	4620      	mov	r0, r4
 800b752:	f000 f865 	bl	800b820 <_free_r>
 800b756:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b758:	b111      	cbz	r1, 800b760 <_reclaim_reent+0x54>
 800b75a:	4620      	mov	r0, r4
 800b75c:	f000 f860 	bl	800b820 <_free_r>
 800b760:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b762:	b111      	cbz	r1, 800b76a <_reclaim_reent+0x5e>
 800b764:	4620      	mov	r0, r4
 800b766:	f000 f85b 	bl	800b820 <_free_r>
 800b76a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b76c:	b111      	cbz	r1, 800b774 <_reclaim_reent+0x68>
 800b76e:	4620      	mov	r0, r4
 800b770:	f000 f856 	bl	800b820 <_free_r>
 800b774:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b776:	b111      	cbz	r1, 800b77e <_reclaim_reent+0x72>
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 f851 	bl	800b820 <_free_r>
 800b77e:	6a23      	ldr	r3, [r4, #32]
 800b780:	b1b3      	cbz	r3, 800b7b0 <_reclaim_reent+0xa4>
 800b782:	4620      	mov	r0, r4
 800b784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b788:	4718      	bx	r3
 800b78a:	5949      	ldr	r1, [r1, r5]
 800b78c:	b941      	cbnz	r1, 800b7a0 <_reclaim_reent+0x94>
 800b78e:	3504      	adds	r5, #4
 800b790:	69e3      	ldr	r3, [r4, #28]
 800b792:	2d80      	cmp	r5, #128	; 0x80
 800b794:	68d9      	ldr	r1, [r3, #12]
 800b796:	d1f8      	bne.n	800b78a <_reclaim_reent+0x7e>
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 f841 	bl	800b820 <_free_r>
 800b79e:	e7c0      	b.n	800b722 <_reclaim_reent+0x16>
 800b7a0:	680e      	ldr	r6, [r1, #0]
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 f83c 	bl	800b820 <_free_r>
 800b7a8:	4631      	mov	r1, r6
 800b7aa:	e7ef      	b.n	800b78c <_reclaim_reent+0x80>
 800b7ac:	2500      	movs	r5, #0
 800b7ae:	e7ef      	b.n	800b790 <_reclaim_reent+0x84>
 800b7b0:	bd70      	pop	{r4, r5, r6, pc}
 800b7b2:	bf00      	nop
 800b7b4:	20000060 	.word	0x20000060

0800b7b8 <__libc_init_array>:
 800b7b8:	b570      	push	{r4, r5, r6, lr}
 800b7ba:	4d0d      	ldr	r5, [pc, #52]	; (800b7f0 <__libc_init_array+0x38>)
 800b7bc:	4c0d      	ldr	r4, [pc, #52]	; (800b7f4 <__libc_init_array+0x3c>)
 800b7be:	1b64      	subs	r4, r4, r5
 800b7c0:	10a4      	asrs	r4, r4, #2
 800b7c2:	2600      	movs	r6, #0
 800b7c4:	42a6      	cmp	r6, r4
 800b7c6:	d109      	bne.n	800b7dc <__libc_init_array+0x24>
 800b7c8:	4d0b      	ldr	r5, [pc, #44]	; (800b7f8 <__libc_init_array+0x40>)
 800b7ca:	4c0c      	ldr	r4, [pc, #48]	; (800b7fc <__libc_init_array+0x44>)
 800b7cc:	f000 f874 	bl	800b8b8 <_init>
 800b7d0:	1b64      	subs	r4, r4, r5
 800b7d2:	10a4      	asrs	r4, r4, #2
 800b7d4:	2600      	movs	r6, #0
 800b7d6:	42a6      	cmp	r6, r4
 800b7d8:	d105      	bne.n	800b7e6 <__libc_init_array+0x2e>
 800b7da:	bd70      	pop	{r4, r5, r6, pc}
 800b7dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7e0:	4798      	blx	r3
 800b7e2:	3601      	adds	r6, #1
 800b7e4:	e7ee      	b.n	800b7c4 <__libc_init_array+0xc>
 800b7e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ea:	4798      	blx	r3
 800b7ec:	3601      	adds	r6, #1
 800b7ee:	e7f2      	b.n	800b7d6 <__libc_init_array+0x1e>
 800b7f0:	0800bb5c 	.word	0x0800bb5c
 800b7f4:	0800bb5c 	.word	0x0800bb5c
 800b7f8:	0800bb5c 	.word	0x0800bb5c
 800b7fc:	0800bb60 	.word	0x0800bb60

0800b800 <__retarget_lock_acquire_recursive>:
 800b800:	4770      	bx	lr

0800b802 <__retarget_lock_release_recursive>:
 800b802:	4770      	bx	lr

0800b804 <memcpy>:
 800b804:	440a      	add	r2, r1
 800b806:	4291      	cmp	r1, r2
 800b808:	f100 33ff 	add.w	r3, r0, #4294967295
 800b80c:	d100      	bne.n	800b810 <memcpy+0xc>
 800b80e:	4770      	bx	lr
 800b810:	b510      	push	{r4, lr}
 800b812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b81a:	4291      	cmp	r1, r2
 800b81c:	d1f9      	bne.n	800b812 <memcpy+0xe>
 800b81e:	bd10      	pop	{r4, pc}

0800b820 <_free_r>:
 800b820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b822:	2900      	cmp	r1, #0
 800b824:	d044      	beq.n	800b8b0 <_free_r+0x90>
 800b826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b82a:	9001      	str	r0, [sp, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f1a1 0404 	sub.w	r4, r1, #4
 800b832:	bfb8      	it	lt
 800b834:	18e4      	addlt	r4, r4, r3
 800b836:	f7ff ff55 	bl	800b6e4 <__malloc_lock>
 800b83a:	4a1e      	ldr	r2, [pc, #120]	; (800b8b4 <_free_r+0x94>)
 800b83c:	9801      	ldr	r0, [sp, #4]
 800b83e:	6813      	ldr	r3, [r2, #0]
 800b840:	b933      	cbnz	r3, 800b850 <_free_r+0x30>
 800b842:	6063      	str	r3, [r4, #4]
 800b844:	6014      	str	r4, [r2, #0]
 800b846:	b003      	add	sp, #12
 800b848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b84c:	f7ff bf50 	b.w	800b6f0 <__malloc_unlock>
 800b850:	42a3      	cmp	r3, r4
 800b852:	d908      	bls.n	800b866 <_free_r+0x46>
 800b854:	6825      	ldr	r5, [r4, #0]
 800b856:	1961      	adds	r1, r4, r5
 800b858:	428b      	cmp	r3, r1
 800b85a:	bf01      	itttt	eq
 800b85c:	6819      	ldreq	r1, [r3, #0]
 800b85e:	685b      	ldreq	r3, [r3, #4]
 800b860:	1949      	addeq	r1, r1, r5
 800b862:	6021      	streq	r1, [r4, #0]
 800b864:	e7ed      	b.n	800b842 <_free_r+0x22>
 800b866:	461a      	mov	r2, r3
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	b10b      	cbz	r3, 800b870 <_free_r+0x50>
 800b86c:	42a3      	cmp	r3, r4
 800b86e:	d9fa      	bls.n	800b866 <_free_r+0x46>
 800b870:	6811      	ldr	r1, [r2, #0]
 800b872:	1855      	adds	r5, r2, r1
 800b874:	42a5      	cmp	r5, r4
 800b876:	d10b      	bne.n	800b890 <_free_r+0x70>
 800b878:	6824      	ldr	r4, [r4, #0]
 800b87a:	4421      	add	r1, r4
 800b87c:	1854      	adds	r4, r2, r1
 800b87e:	42a3      	cmp	r3, r4
 800b880:	6011      	str	r1, [r2, #0]
 800b882:	d1e0      	bne.n	800b846 <_free_r+0x26>
 800b884:	681c      	ldr	r4, [r3, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	6053      	str	r3, [r2, #4]
 800b88a:	440c      	add	r4, r1
 800b88c:	6014      	str	r4, [r2, #0]
 800b88e:	e7da      	b.n	800b846 <_free_r+0x26>
 800b890:	d902      	bls.n	800b898 <_free_r+0x78>
 800b892:	230c      	movs	r3, #12
 800b894:	6003      	str	r3, [r0, #0]
 800b896:	e7d6      	b.n	800b846 <_free_r+0x26>
 800b898:	6825      	ldr	r5, [r4, #0]
 800b89a:	1961      	adds	r1, r4, r5
 800b89c:	428b      	cmp	r3, r1
 800b89e:	bf04      	itt	eq
 800b8a0:	6819      	ldreq	r1, [r3, #0]
 800b8a2:	685b      	ldreq	r3, [r3, #4]
 800b8a4:	6063      	str	r3, [r4, #4]
 800b8a6:	bf04      	itt	eq
 800b8a8:	1949      	addeq	r1, r1, r5
 800b8aa:	6021      	streq	r1, [r4, #0]
 800b8ac:	6054      	str	r4, [r2, #4]
 800b8ae:	e7ca      	b.n	800b846 <_free_r+0x26>
 800b8b0:	b003      	add	sp, #12
 800b8b2:	bd30      	pop	{r4, r5, pc}
 800b8b4:	20007b58 	.word	0x20007b58

0800b8b8 <_init>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	bf00      	nop
 800b8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8be:	bc08      	pop	{r3}
 800b8c0:	469e      	mov	lr, r3
 800b8c2:	4770      	bx	lr

0800b8c4 <_fini>:
 800b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c6:	bf00      	nop
 800b8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ca:	bc08      	pop	{r3}
 800b8cc:	469e      	mov	lr, r3
 800b8ce:	4770      	bx	lr
