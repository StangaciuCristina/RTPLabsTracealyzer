
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a378  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800a508  0800a508  0001a508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800accc  0800accc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800accc  0800accc  0001accc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acd4  0800acd4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acd4  0800acd4  0001acd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800acdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00005e80  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005eec  20005eec  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021a78  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000506d  00000000  00000000  00041b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ee8  00000000  00000000  00046bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017f8  00000000  00000000  00048ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027b92  00000000  00000000  0004a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000280e2  00000000  00000000  00071e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9b54  00000000  00000000  00099f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000086d8  00000000  00000000  00183a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0018c148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a4f0 	.word	0x0800a4f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a4f0 	.word	0x0800a4f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <prvTimerCallback>:
/* The timer handles are used inside the callback function so this time are
given file scope. */
static TimerHandle_t xAutoReloadTimer, xOneShotTimer;

static void prvTimerCallback( TimerHandle_t xTimer )
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	6078      	str	r0, [r7, #4]
uint32_t ulExecutionCount;

	/* The count of the number of times this software timer has expired is
	stored in the timer's ID.  Obtain the ID, increment it, then save it as the
	new ID value.  The ID is a void pointer, so is cast to a uint32_t. */
	ulExecutionCount = ( uint32_t ) pvTimerGetTimerID( xTimer );
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f009 f9df 	bl	8009898 <pvTimerGetTimerID>
 80004da:	4603      	mov	r3, r0
 80004dc:	60fb      	str	r3, [r7, #12]
	ulExecutionCount++;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	60fb      	str	r3, [r7, #12]
	vTimerSetTimerID( xTimer, ( void * ) ulExecutionCount );
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4619      	mov	r1, r3
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f009 f9f5 	bl	80098d8 <vTimerSetTimerID>

	/* Obtain the current tick count. */
	xTimeNow = xTaskGetTickCount();
 80004ee:	f008 f901 	bl	80086f4 <xTaskGetTickCount>
 80004f2:	60b8      	str	r0, [r7, #8]
    /* The handle of the one-shot timer was stored in xOneShotTimer when the
	timer was created.  Compare the handle passed into this function with
	xOneShotTimer to determine if it was the one-shot or auto-reload timer that
	expired, then output a string to show the time at which the callback was
	executed. */
	if( xTimer == xOneShotTimer )
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <prvTimerCallback+0x68>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d105      	bne.n	800050a <prvTimerCallback+0x3e>
	{
		//toggle led
		HAL_GPIO_TogglePin(GPIOD, RED_LED);
 80004fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000502:	480d      	ldr	r0, [pc, #52]	; (8000538 <prvTimerCallback+0x6c>)
 8000504:	f002 fb39 	bl	8002b7a <HAL_GPIO_TogglePin>
			must not call any functions that might place the daemon task into
			the Blocked state.  Therefore a block time of 0 is used. */
			xTimerStop( xTimer, 0 );
		}
	}
}
 8000508:	e00f      	b.n	800052a <prvTimerCallback+0x5e>
		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 800050a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050e:	480a      	ldr	r0, [pc, #40]	; (8000538 <prvTimerCallback+0x6c>)
 8000510:	f002 fb33 	bl	8002b7a <HAL_GPIO_TogglePin>
		if( ulExecutionCount == 10 )
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2b0a      	cmp	r3, #10
 8000518:	d107      	bne.n	800052a <prvTimerCallback+0x5e>
			xTimerStop( xTimer, 0 );
 800051a:	2300      	movs	r3, #0
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2300      	movs	r3, #0
 8000520:	2200      	movs	r2, #0
 8000522:	2103      	movs	r1, #3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f008 febb 	bl	80092a0 <xTimerGenericCommand>
}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000008c 	.word	0x2000008c
 8000538:	40020c00 	.word	0x40020c00

0800053c <application14>:




void application14(void)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b085      	sub	sp, #20
 8000540:	af02      	add	r7, sp, #8

	BaseType_t xTimer1Started, xTimer2Started;

		/* Create the one shot timer, storing the handle to the created timer in
		xOneShotTimer. */
		xOneShotTimer = xTimerCreate( "OneShot",					/* Text name for the timer - not used by FreeRTOS. */
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <application14+0x84>)
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2300      	movs	r3, #0
 8000548:	2200      	movs	r2, #0
 800054a:	f640 5105 	movw	r1, #3333	; 0xd05
 800054e:	481d      	ldr	r0, [pc, #116]	; (80005c4 <application14+0x88>)
 8000550:	f008 fe4a 	bl	80091e8 <xTimerCreate>
 8000554:	4603      	mov	r3, r0
 8000556:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <application14+0x8c>)
 8000558:	6013      	str	r3, [r2, #0]
									  0,							/* The timer ID is initialised to 0. */
									  prvTimerCallback );			/* The callback function to be used by the timer being created. */

		/* Create the auto-reload, storing the handle to the created timer in
		xAutoReloadTimer. */
		xAutoReloadTimer = xTimerCreate( "AutoReload",					/* Text name for the timer - not used by FreeRTOS. */
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <application14+0x84>)
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000566:	4819      	ldr	r0, [pc, #100]	; (80005cc <application14+0x90>)
 8000568:	f008 fe3e 	bl	80091e8 <xTimerCreate>
 800056c:	4603      	mov	r3, r0
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <application14+0x94>)
 8000570:	6013      	str	r3, [r2, #0]
										 pdTRUE,						/* Set uxAutoRealod to pdTRUE to create an auto-reload timer. */
										 0,								/* The timer ID is initialised to 0. */
										 prvTimerCallback );			/* The callback function to be used by the timer being created. */

		/* Check the timers were created. */
		if( ( xOneShotTimer != NULL ) && ( xAutoReloadTimer != NULL ) )
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <application14+0x8c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d01d      	beq.n	80005b6 <application14+0x7a>
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <application14+0x94>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d019      	beq.n	80005b6 <application14+0x7a>
		{
			/* Start the timers, using a block time of 0 (no block time).  The
			scheduler has not been started yet so any block time specified here
			would be ignored anyway. */
			xTimer1Started = xTimerStart( xOneShotTimer, 0 );
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <application14+0x8c>)
 8000584:	681c      	ldr	r4, [r3, #0]
 8000586:	f008 f8b5 	bl	80086f4 <xTaskGetTickCount>
 800058a:	4602      	mov	r2, r0
 800058c:	2300      	movs	r3, #0
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	2101      	movs	r1, #1
 8000594:	4620      	mov	r0, r4
 8000596:	f008 fe83 	bl	80092a0 <xTimerGenericCommand>
 800059a:	6078      	str	r0, [r7, #4]
			xTimer2Started = xTimerStart( xAutoReloadTimer, 0 );
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <application14+0x94>)
 800059e:	681c      	ldr	r4, [r3, #0]
 80005a0:	f008 f8a8 	bl	80086f4 <xTaskGetTickCount>
 80005a4:	4602      	mov	r2, r0
 80005a6:	2300      	movs	r3, #0
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2101      	movs	r1, #1
 80005ae:	4620      	mov	r0, r4
 80005b0:	f008 fe76 	bl	80092a0 <xTimerGenericCommand>
 80005b4:	6038      	str	r0, [r7, #0]
			commands sent to the command queue will stay in the queue until after
			the scheduler has been started.  Check both calls to xTimerStart()
			passed. */
		}

}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd90      	pop	{r4, r7, pc}
 80005be:	bf00      	nop
 80005c0:	080004cd 	.word	0x080004cd
 80005c4:	0800a508 	.word	0x0800a508
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	0800a510 	.word	0x0800a510
 80005d0:	20000088 	.word	0x20000088

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f001 fff6 	bl	80025c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f812 	bl	8000604 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  vTraceEnable(TRC_START);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 fee9 	bl	80013b8 <xTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f92f 	bl	8000848 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ea:	f000 f875 	bl	80006d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005ee:	f000 f8a1 	bl	8000734 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005f2:	f000 f8cf 	bl	8000794 <MX_SPI1_Init>
  MX_TIM11_Init();
 80005f6:	f000 f903 	bl	8000800 <MX_TIM11_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application14();
 80005fa:	f7ff ff9f 	bl	800053c <application14>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80005fe:	f007 ff3f 	bl	8008480 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x2e>

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f009 fe8e 	bl	800a334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fe00 	bl	8005290 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000696:	f000 f9ef 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2105      	movs	r1, #5
 80006b8:	4618      	mov	r0, r3
 80006ba:	f005 f861 	bl	8005780 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c4:	f000 f9d8 	bl	8000a78 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f003 ffd7 	bl	80046c8 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f9aa 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000090 	.word	0x20000090
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_I2S3_Init+0x54>)
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <MX_I2S3_Init+0x58>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2S3_Init+0x54>)
 8000740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000744:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_I2S3_Init+0x54>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_I2S3_Init+0x54>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_I2S3_Init+0x54>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_I2S3_Init+0x54>)
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <MX_I2S3_Init+0x5c>)
 800075e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2S3_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_I2S3_Init+0x54>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2S3_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_I2S3_Init+0x54>)
 8000774:	f004 f8ec 	bl	8004950 <HAL_I2S_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800077e:	f000 f97b 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000e4 	.word	0x200000e4
 800078c:	40003c00 	.word	0x40003c00
 8000790:	00017700 	.word	0x00017700

08000794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_SPI1_Init+0x64>)
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_SPI1_Init+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007e0:	220a      	movs	r2, #10
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007e6:	f005 fb5f 	bl	8005ea8 <HAL_SPI_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f0:	f000 f942 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000012c 	.word	0x2000012c
 80007fc:	40013000 	.word	0x40013000

08000800 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_TIM11_Init+0x40>)
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <MX_TIM11_Init+0x44>)
 8000808:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_TIM11_Init+0x40>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_TIM11_Init+0x40>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_TIM11_Init+0x40>)
 8000818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_TIM11_Init+0x40>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_TIM11_Init+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_TIM11_Init+0x40>)
 800082c:	f005 fbc5 	bl	8005fba <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000836:	f000 f91f 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000184 	.word	0x20000184
 8000844:	40014800 	.word	0x40014800

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	4b76      	ldr	r3, [pc, #472]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a75      	ldr	r2, [pc, #468]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b73      	ldr	r3, [pc, #460]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	4b6f      	ldr	r3, [pc, #444]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a6e      	ldr	r2, [pc, #440]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b6c      	ldr	r3, [pc, #432]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b68      	ldr	r3, [pc, #416]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a67      	ldr	r2, [pc, #412]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b65      	ldr	r3, [pc, #404]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b61      	ldr	r3, [pc, #388]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a60      	ldr	r2, [pc, #384]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b5a      	ldr	r3, [pc, #360]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a59      	ldr	r2, [pc, #356]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b53      	ldr	r3, [pc, #332]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a52      	ldr	r2, [pc, #328]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b50      	ldr	r3, [pc, #320]	; (8000a3c <MX_GPIO_Init+0x1f4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	484d      	ldr	r0, [pc, #308]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 800090c:	f002 f91c 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2101      	movs	r1, #1
 8000914:	484b      	ldr	r0, [pc, #300]	; (8000a44 <MX_GPIO_Init+0x1fc>)
 8000916:	f002 f917 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091a:	2200      	movs	r2, #0
 800091c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000920:	4849      	ldr	r0, [pc, #292]	; (8000a48 <MX_GPIO_Init+0x200>)
 8000922:	f002 f911 	bl	8002b48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000926:	2308      	movs	r3, #8
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4840      	ldr	r0, [pc, #256]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 800093e:	f001 ff67 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	483a      	ldr	r0, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x1fc>)
 800095a:	f001 ff59 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800095e:	2308      	movs	r3, #8
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096e:	2305      	movs	r3, #5
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4832      	ldr	r0, [pc, #200]	; (8000a44 <MX_GPIO_Init+0x1fc>)
 800097a:	f001 ff49 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800097e:	2301      	movs	r3, #1
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000982:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	482e      	ldr	r0, [pc, #184]	; (8000a4c <MX_GPIO_Init+0x204>)
 8000994:	f001 ff3c 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000998:	2304      	movs	r3, #4
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4829      	ldr	r0, [pc, #164]	; (8000a50 <MX_GPIO_Init+0x208>)
 80009ac:	f001 ff30 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c2:	2305      	movs	r3, #5
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4820      	ldr	r0, [pc, #128]	; (8000a50 <MX_GPIO_Init+0x208>)
 80009ce:	f001 ff1f 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009d2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009d6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4817      	ldr	r0, [pc, #92]	; (8000a48 <MX_GPIO_Init+0x200>)
 80009ec:	f001 ff10 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f0:	2320      	movs	r3, #32
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_GPIO_Init+0x200>)
 8000a04:	f001 ff04 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <MX_GPIO_Init+0x1f8>)
 8000a1e:	f001 fef7 	bl	8002810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2105      	movs	r1, #5
 8000a26:	2006      	movs	r0, #6
 8000a28:	f001 fec8 	bl	80027bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a2c:	2006      	movs	r0, #6
 8000a2e:	f001 fee1 	bl	80027f4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400

08000a54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a66:	f001 fdd1 	bl	800260c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40010000 	.word	0x40010000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_MspInit+0x54>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <HAL_MspInit+0x54>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x54>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_MspInit+0x54>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_MspInit+0x54>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_MspInit+0x54>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	f06f 0001 	mvn.w	r0, #1
 8000aca:	f001 fe77 	bl	80027bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_I2C_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12c      	bne.n	8000b58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <HAL_I2C_MspInit+0x8c>)
 8000b38:	f001 fe6a 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40005400 	.word	0x40005400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400

08000b6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a31      	ldr	r2, [pc, #196]	; (8000c5c <HAL_I2S_MspInit+0xf0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d15a      	bne.n	8000c52 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ba0:	23c0      	movs	r3, #192	; 0xc0
 8000ba2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4618      	mov	r0, r3
 8000bae:	f005 f839 	bl	8005c24 <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bb8:	f7ff ff5e 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <HAL_I2S_MspInit+0xf4>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	4a26      	ldr	r2, [pc, #152]	; (8000c60 <HAL_I2S_MspInit+0xf4>)
 8000bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bca:	6413      	str	r3, [r2, #64]	; 0x40
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <HAL_I2S_MspInit+0xf4>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <HAL_I2S_MspInit+0xf4>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <HAL_I2S_MspInit+0xf4>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <HAL_I2S_MspInit+0xf4>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <HAL_I2S_MspInit+0xf4>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <HAL_I2S_MspInit+0xf4>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_I2S_MspInit+0xf4>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c10:	2310      	movs	r3, #16
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c20:	2306      	movs	r3, #6
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480e      	ldr	r0, [pc, #56]	; (8000c64 <HAL_I2S_MspInit+0xf8>)
 8000c2c:	f001 fdf0 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c30:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c42:	2306      	movs	r3, #6
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <HAL_I2S_MspInit+0xfc>)
 8000c4e:	f001 fddf 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40003c00 	.word	0x40003c00
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020800 	.word	0x40020800

08000c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_SPI_MspInit+0x84>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12b      	bne.n	8000ce6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_SPI_MspInit+0x88>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_SPI_MspInit+0x88>)
 8000c98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_SPI_MspInit+0x88>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_SPI_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <HAL_SPI_MspInit+0x88>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_SPI_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cc6:	23e0      	movs	r3, #224	; 0xe0
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_SPI_MspInit+0x8c>)
 8000ce2:	f001 fd95 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	; 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40013000 	.word	0x40013000
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020000 	.word	0x40020000

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <HAL_TIM_Base_MspInit+0x3c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10d      	bne.n	8000d2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_TIM_Base_MspInit+0x40>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <HAL_TIM_Base_MspInit+0x40>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <HAL_TIM_Base_MspInit+0x40>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40014800 	.word	0x40014800
 8000d3c:	40023800 	.word	0x40023800

08000d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <HAL_InitTick+0xd4>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	4a2e      	ldr	r2, [pc, #184]	; (8000e14 <HAL_InitTick+0xd4>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d60:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <HAL_InitTick+0xd4>)
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d6c:	f107 020c 	add.w	r2, r7, #12
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 ff22 	bl	8005bc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d7c:	f004 ff0c 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 8000d80:	4603      	mov	r3, r0
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d88:	4a23      	ldr	r2, [pc, #140]	; (8000e18 <HAL_InitTick+0xd8>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0c9b      	lsrs	r3, r3, #18
 8000d90:	3b01      	subs	r3, #1
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <HAL_InitTick+0xdc>)
 8000d96:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <HAL_InitTick+0xe0>)
 8000d98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_InitTick+0xdc>)
 8000d9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000da2:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <HAL_InitTick+0xdc>)
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <HAL_InitTick+0xdc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_InitTick+0xdc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_InitTick+0xdc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000dba:	4818      	ldr	r0, [pc, #96]	; (8000e1c <HAL_InitTick+0xdc>)
 8000dbc:	f005 f8fd 	bl	8005fba <HAL_TIM_Base_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d11b      	bne.n	8000e06 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000dce:	4813      	ldr	r0, [pc, #76]	; (8000e1c <HAL_InitTick+0xdc>)
 8000dd0:	f005 f942 	bl	8006058 <HAL_TIM_Base_Start_IT>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d111      	bne.n	8000e06 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000de2:	2019      	movs	r0, #25
 8000de4:	f001 fd06 	bl	80027f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	d808      	bhi.n	8000e00 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000dee:	2200      	movs	r2, #0
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	2019      	movs	r0, #25
 8000df4:	f001 fce2 	bl	80027bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_InitTick+0xe4>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e002      	b.n	8000e06 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3730      	adds	r7, #48	; 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	431bde83 	.word	0x431bde83
 8000e1c:	200001cc 	.word	0x200001cc
 8000e20:	40010000 	.word	0x40010000
 8000e24:	20000010 	.word	0x20000010

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e5a:	f005 f96d 	bl	8006138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001cc 	.word	0x200001cc

08000e68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <OTG_FS_IRQHandler+0x10>)
 8000e6e:	f001 fe9e 	bl	8002bae <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200059cc 	.word	0x200059cc

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ea4:	f7ff ffea 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eaa:	490d      	ldr	r1, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	; (8000eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ece:	f009 fa8f 	bl	800a3f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fb7f 	bl	80005d4 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ee4:	0800acdc 	.word	0x0800acdc
  ldr r2, =_sbss
 8000ee8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000eec:	20005eec 	.word	0x20005eec

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>

08000ef2 <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f006 fe98 	bl	8007c30 <uxQueueGetQueueNumber>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(pvQueue);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f006 fea6 	bl	8007c64 <ucQueueGetQueueType>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(pvTask));
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f007 fee8 	bl	8008d00 <uxTaskGetTaskNumber>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29b      	uxth	r3, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(pvTask));
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f007 fedb 	bl	8008d00 <uxTaskGetTaskNumber>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	0c1b      	lsrs	r3, r3, #16
 8000f4e:	b29b      	uxth	r3, r3
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber(pvTask), uiValue));
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f007 fecb 	bl	8008d00 <uxTaskGetTaskNumber>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	0c1b      	lsrs	r3, r3, #16
 8000f6e:	041b      	lsls	r3, r3, #16
 8000f70:	887a      	ldrh	r2, [r7, #2]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f007 fed8 	bl	8008d2c <vTaskSetTaskNumber>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber(pvTask), uiValue));
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f007 feb5 	bl	8008d00 <uxTaskGetTaskNumber>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f007 fec2 	bl	8008d2c <vTaskSetTaskNumber>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff9a 	bl	8000ef2 <prvTraceGetQueueNumber>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29b      	uxth	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff8d 	bl	8000ef2 <prvTraceGetQueueNumber>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	0c1b      	lsrs	r3, r3, #16
 8000fdc:	b29b      	uxth	r3, r3
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff7d 	bl	8000ef2 <prvTraceGetQueueNumber>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	0c1b      	lsrs	r3, r3, #16
 8000ffc:	041b      	lsls	r3, r3, #16
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	4313      	orrs	r3, r2
 8001002:	4619      	mov	r1, r3
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f006 fe1f 	bl	8007c48 <vQueueSetQueueNumber>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	460b      	mov	r3, r1
 800101c:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff67 	bl	8000ef2 <prvTraceGetQueueNumber>
 8001024:	4603      	mov	r3, r0
 8001026:	b29a      	uxth	r2, r3
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	4313      	orrs	r3, r2
 800102e:	4619      	mov	r1, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f006 fe09 	bl	8007c48 <vQueueSetQueueNumber>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8001042:	f007 ff43 	bl	8008ecc <xTaskGetCurrentTaskHandle>
 8001046:	4603      	mov	r3, r0
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}

0800104c <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8001078:	4b64      	ldr	r3, [pc, #400]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2209      	movs	r2, #9
 800107e:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8001080:	4b62      	ldr	r3, [pc, #392]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	220a      	movs	r2, #10
 8001086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 800108a:	4b60      	ldr	r3, [pc, #384]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	220a      	movs	r2, #10
 8001090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8001094:	4b5d      	ldr	r3, [pc, #372]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	220a      	movs	r2, #10
 800109a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 800109e:	4b5b      	ldr	r3, [pc, #364]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	220f      	movs	r2, #15
 80010a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80010a8:	4b58      	ldr	r3, [pc, #352]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2205      	movs	r2, #5
 80010ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 80010b2:	4b56      	ldr	r3, [pc, #344]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2205      	movs	r2, #5
 80010b8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80010bc:	4b53      	ldr	r3, [pc, #332]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2205      	movs	r2, #5
 80010c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2205      	movs	r2, #5
 80010cc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 80010d0:	4b4e      	ldr	r3, [pc, #312]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2205      	movs	r2, #5
 80010d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 80010da:	4b4c      	ldr	r3, [pc, #304]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	220f      	movs	r2, #15
 80010e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	220f      	movs	r2, #15
 80010ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	220f      	movs	r2, #15
 80010f4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 80010f8:	4b44      	ldr	r3, [pc, #272]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	220f      	movs	r2, #15
 80010fe:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8001102:	4b42      	ldr	r3, [pc, #264]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	220f      	movs	r2, #15
 8001108:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 800110c:	4b3f      	ldr	r3, [pc, #252]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	220f      	movs	r2, #15
 8001112:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	220f      	movs	r2, #15
 800111c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	220f      	movs	r2, #15
 8001126:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	220f      	movs	r2, #15
 8001130:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8001134:	4b35      	ldr	r3, [pc, #212]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2210      	movs	r2, #16
 800113a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2210      	movs	r2, #16
 8001144:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2210      	movs	r2, #16
 800114e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2213      	movs	r2, #19
 8001158:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2211      	movs	r2, #17
 8001162:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2210      	movs	r2, #16
 800116c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2213      	movs	r2, #19
 8001176:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2213      	movs	r2, #19
 8001180:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2213      	movs	r2, #19
 800118a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	22a0      	movs	r2, #160	; 0xa0
 800119e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011aa:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011b6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f240 22fd 	movw	r2, #765	; 0x2fd
 80011c2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f240 3252 	movw	r2, #850	; 0x352
 80011ce:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f240 32a2 	movw	r2, #930	; 0x3a2
 80011da:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f240 4201 	movw	r2, #1025	; 0x401
 80011e6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80011f2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80011fe:	64da      	str	r2, [r3, #76]	; 0x4c

	return TRC_SUCCESS;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	20001bdc 	.word	0x20001bdc

08001210 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 800121a:	4b40      	ldr	r3, [pc, #256]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800121c:	2200      	movs	r2, #0
 800121e:	825a      	strh	r2, [r3, #18]
 8001220:	4b3e      	ldr	r3, [pc, #248]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001222:	8a5a      	ldrh	r2, [r3, #18]
 8001224:	4b3d      	ldr	r3, [pc, #244]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001226:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8001228:	4b3c      	ldr	r3, [pc, #240]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800122a:	220a      	movs	r2, #10
 800122c:	829a      	strh	r2, [r3, #20]
 800122e:	4b3b      	ldr	r3, [pc, #236]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001230:	8a9a      	ldrh	r2, [r3, #20]
 8001232:	4b3a      	ldr	r3, [pc, #232]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001234:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001238:	2214      	movs	r2, #20
 800123a:	82da      	strh	r2, [r3, #22]
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800123e:	8ada      	ldrh	r2, [r3, #22]
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001242:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8001244:	4b35      	ldr	r3, [pc, #212]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001246:	221e      	movs	r2, #30
 8001248:	831a      	strh	r2, [r3, #24]
 800124a:	4b34      	ldr	r3, [pc, #208]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800124c:	8b1a      	ldrh	r2, [r3, #24]
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001250:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001254:	222d      	movs	r2, #45	; 0x2d
 8001256:	835a      	strh	r2, [r3, #26]
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800125a:	8b5a      	ldrh	r2, [r3, #26]
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800125e:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001262:	2232      	movs	r2, #50	; 0x32
 8001264:	839a      	strh	r2, [r3, #28]
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001268:	8b9a      	ldrh	r2, [r3, #28]
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800126c:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001270:	2237      	movs	r2, #55	; 0x37
 8001272:	83da      	strh	r2, [r3, #30]
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001276:	8bda      	ldrh	r2, [r3, #30]
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800127a:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800127e:	223c      	movs	r2, #60	; 0x3c
 8001280:	841a      	strh	r2, [r3, #32]
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001284:	8c1a      	ldrh	r2, [r3, #32]
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001288:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800128c:	2241      	movs	r2, #65	; 0x41
 800128e:	845a      	strh	r2, [r3, #34]	; 0x22
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001292:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001296:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800129a:	2209      	movs	r2, #9
 800129c:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012a0:	2213      	movs	r2, #19
 80012a2:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012a6:	221d      	movs	r2, #29
 80012a8:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012ac:	222c      	movs	r2, #44	; 0x2c
 80012ae:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012b2:	2231      	movs	r2, #49	; 0x31
 80012b4:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012b8:	2236      	movs	r2, #54	; 0x36
 80012ba:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012be:	223b      	movs	r2, #59	; 0x3b
 80012c0:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012ca:	2245      	movs	r2, #69	; 0x45
 80012cc:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	e009      	b.n	80012e8 <xTraceKernelPortInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 80012d4:	4a11      	ldr	r2, [pc, #68]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3318      	adds	r3, #24
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	2200      	movs	r2, #0
 80012e0:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3301      	adds	r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d9f2      	bls.n	80012d4 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	e008      	b.n	8001306 <xTraceKernelPortInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 80012f4:	4a09      	ldr	r2, [pc, #36]	; (800131c <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	3348      	adds	r3, #72	; 0x48
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3301      	adds	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b45      	cmp	r3, #69	; 0x45
 800130a:	d9f3      	bls.n	80012f4 <xTraceKernelPortInitObjectHandleStack+0xe4>
	}

	return TRC_SUCCESS;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000244 	.word	0x20000244

08001320 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b08      	cmp	r3, #8
 800132e:	d827      	bhi.n	8001380 <pszTraceGetErrorNotEnoughHandles+0x60>
 8001330:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <pszTraceGetErrorNotEnoughHandles+0x18>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	0800136d 	.word	0x0800136d
 800133c:	08001365 	.word	0x08001365
 8001340:	08001369 	.word	0x08001369
 8001344:	0800135d 	.word	0x0800135d
 8001348:	08001361 	.word	0x08001361
 800134c:	08001371 	.word	0x08001371
 8001350:	08001375 	.word	0x08001375
 8001354:	08001379 	.word	0x08001379
 8001358:	0800137d 	.word	0x0800137d
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <pszTraceGetErrorNotEnoughHandles+0x70>)
 800135e:	e010      	b.n	8001382 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <pszTraceGetErrorNotEnoughHandles+0x74>)
 8001362:	e00e      	b.n	8001382 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <pszTraceGetErrorNotEnoughHandles+0x78>)
 8001366:	e00c      	b.n	8001382 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <pszTraceGetErrorNotEnoughHandles+0x7c>)
 800136a:	e00a      	b.n	8001382 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <pszTraceGetErrorNotEnoughHandles+0x80>)
 800136e:	e008      	b.n	8001382 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <pszTraceGetErrorNotEnoughHandles+0x84>)
 8001372:	e006      	b.n	8001382 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8001376:	e004      	b.n	8001382 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <pszTraceGetErrorNotEnoughHandles+0x8c>)
 800137a:	e002      	b.n	8001382 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <pszTraceGetErrorNotEnoughHandles+0x90>)
 800137e:	e000      	b.n	8001382 <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	0800a51c 	.word	0x0800a51c
 8001394:	0800a564 	.word	0x0800a564
 8001398:	0800a5ac 	.word	0x0800a5ac
 800139c:	0800a600 	.word	0x0800a600
 80013a0:	0800a64c 	.word	0x0800a64c
 80013a4:	0800a698 	.word	0x0800a698
 80013a8:	0800a6e4 	.word	0x0800a6e4
 80013ac:	0800a738 	.word	0x0800a738
 80013b0:	0800a790 	.word	0x0800a790
 80013b4:	0800a7ec 	.word	0x0800a7ec

080013b8 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 80013c0:	f000 f8be 	bl	8001540 <xTraceInitialize>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e01f      	b.n	800140e <xTraceEnable+0x56>
	}

	if (uiStartOption == TRC_START)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10b      	bne.n	80013ec <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 80013d4:	f7ff fe45 	bl	8001062 <xTraceKernelPortEnable>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 80013de:	2301      	movs	r3, #1
 80013e0:	e015      	b.n	800140e <xTraceEnable+0x56>
		}
		
		prvTraceInitTimestamps();
 80013e2:	f000 f89d 	bl	8001520 <prvTraceInitTimestamps>

		prvTraceStart();
 80013e6:	f000 f823 	bl	8001430 <prvTraceStart>
 80013ea:	e00f      	b.n	800140c <xTraceEnable+0x54>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d104      	bne.n	80013fc <xTraceEnable+0x44>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 80013f2:	4809      	ldr	r0, [pc, #36]	; (8001418 <xTraceEnable+0x60>)
 80013f4:	f000 fec0 	bl	8002178 <prvTraceError>

		return TRC_FAIL;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e008      	b.n	800140e <xTraceEnable+0x56>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <xTraceEnable+0x54>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <xTraceEnable+0x64>)
 8001404:	f000 feb8 	bl	8002178 <prvTraceError>

		return TRC_FAIL;
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <xTraceEnable+0x56>
	}

	return TRC_SUCCESS;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	0800a81c 	.word	0x0800a81c
 800141c:	0800a85c 	.word	0x0800a85c

08001420 <xTraceDisable>:


traceResult xTraceDisable(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	prvTraceStop();
 8001424:	f000 f864 	bl	80014f0 <prvTraceStop>

	return TRC_SUCCESS;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == (void*)0)
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <prvTraceStart+0xb0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d047      	beq.n	80014d2 <prvTraceStart+0xa2>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <prvTraceStart+0xb0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	2b01      	cmp	r3, #1
 800144a:	d044      	beq.n	80014d6 <prvTraceStart+0xa6>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <prvTraceStart+0xb4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d141      	bne.n	80014d8 <prvTraceStart+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001454:	f3ef 8310 	mrs	r3, PRIMASK
 8001458:	60bb      	str	r3, [r7, #8]
  return(result);
 800145a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	2301      	movs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f383 8810 	msr	PRIMASK, r3
}
 8001468:	bf00      	nop
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <prvTraceStart+0xb8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <prvTraceStart+0xb8>)
 8001472:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <prvTraceStart+0xb0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 800147c:	f7ff fddf 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8001480:	4603      	mov	r3, r0
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fd4d 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <prvTraceStart+0x84>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8001492:	2003      	movs	r0, #3
 8001494:	f000 fd3a 	bl	8001f0c <prvTraceGetObjectHandle>
 8001498:	4603      	mov	r3, r0
 800149a:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <prvTraceStart+0xbc>)
 80014a0:	4619      	mov	r1, r3
 80014a2:	2003      	movs	r0, #3
 80014a4:	f000 fe0e 	bl	80020c4 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	2003      	movs	r0, #3
 80014b0:	f000 fc1e 	bl	8001cf0 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fbb0 	bl	8001c1c <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <prvTraceStart+0xb8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <prvTraceStart+0xb8>)
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f383 8810 	msr	PRIMASK, r3
}
 80014d0:	e002      	b.n	80014d8 <prvTraceStart+0xa8>
		return;
 80014d2:	bf00      	nop
 80014d4:	e000      	b.n	80014d8 <prvTraceStart+0xa8>
		return; /* Already running */
 80014d6:	bf00      	nop
	}
}
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20001bdc 	.word	0x20001bdc
 80014e4:	200002d4 	.word	0x200002d4
 80014e8:	2000022c 	.word	0x2000022c
 80014ec:	0800a89c 	.word	0x0800a89c

080014f0 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <prvTraceStop+0x28>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <prvTraceStop+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2200      	movs	r2, #0
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <prvTraceStop+0x2c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <prvTraceStop+0x2c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4798      	blx	r3
	}
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20001bdc 	.word	0x20001bdc
 800151c:	20000238 	.word	0x20000238

08001520 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <prvTraceInitTimestamps+0x18>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <prvTraceInitTimestamps+0x1c>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e0001004 	.word	0xe0001004
 800153c:	2000023c 	.word	0x2000023c

08001540 <xTraceInitialize>:
	return trcStr;
}
#endif

traceResult xTraceInitialize(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8001544:	4b8a      	ldr	r3, [pc, #552]	; (8001770 <xTraceInitialize+0x230>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 800154c:	2300      	movs	r3, #0
 800154e:	e10d      	b.n	800176c <xTraceInitialize+0x22c>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 8001550:	4b88      	ldr	r3, [pc, #544]	; (8001774 <xTraceInitialize+0x234>)
 8001552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001556:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8001558:	4b87      	ldr	r3, [pc, #540]	; (8001778 <xTraceInitialize+0x238>)
 800155a:	2201      	movs	r2, #1
 800155c:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 800155e:	4b87      	ldr	r3, [pc, #540]	; (800177c <xTraceInitialize+0x23c>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8001564:	4b86      	ldr	r3, [pc, #536]	; (8001780 <xTraceInitialize+0x240>)
 8001566:	4a87      	ldr	r2, [pc, #540]	; (8001784 <xTraceInitialize+0x244>)
 8001568:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 800156a:	4b87      	ldr	r3, [pc, #540]	; (8001788 <xTraceInitialize+0x248>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a87      	ldr	r2, [pc, #540]	; (800178c <xTraceInitialize+0x24c>)
 8001570:	6013      	str	r3, [r2, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 8001572:	4887      	ldr	r0, [pc, #540]	; (8001790 <xTraceInitialize+0x250>)
 8001574:	f7ff fd6a 	bl	800104c <xTraceKernelPortInitialize>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <xTraceInitialize+0x42>
	{
		return TRC_FAIL;
 800157e:	2301      	movs	r3, #1
 8001580:	e0f4      	b.n	800176c <xTraceInitialize+0x22c>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8001582:	4b7f      	ldr	r3, [pc, #508]	; (8001780 <xTraceInitialize+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f641 1204 	movw	r2, #6404	; 0x1904
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f008 fed1 	bl	800a334 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8001592:	4b7b      	ldr	r3, [pc, #492]	; (8001780 <xTraceInitialize+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 800159a:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 800159c:	4b78      	ldr	r3, [pc, #480]	; (8001780 <xTraceInitialize+0x240>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2207      	movs	r2, #7
 80015a2:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 80015a4:	4b76      	ldr	r3, [pc, #472]	; (8001780 <xTraceInitialize+0x240>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 80015ac:	4b74      	ldr	r3, [pc, #464]	; (8001780 <xTraceInitialize+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f641 1204 	movw	r2, #6404	; 0x1904
 80015b4:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 80015b6:	4b72      	ldr	r3, [pc, #456]	; (8001780 <xTraceInitialize+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015be:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 80015c0:	4b6f      	ldr	r3, [pc, #444]	; (8001780 <xTraceInitialize+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80015ca:	4b6d      	ldr	r3, [pc, #436]	; (8001780 <xTraceInitialize+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2200      	movs	r2, #0
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80015d2:	4b6b      	ldr	r3, [pc, #428]	; (8001780 <xTraceInitialize+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 80015da:	f7ff fd4b 	bl	8001074 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80015de:	4b68      	ldr	r3, [pc, #416]	; (8001780 <xTraceInitialize+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 80015e6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80015ea:	4b65      	ldr	r3, [pc, #404]	; (8001780 <xTraceInitialize+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80015f2:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80015f6:	4b62      	ldr	r3, [pc, #392]	; (8001780 <xTraceInitialize+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8001600:	4b5f      	ldr	r3, [pc, #380]	; (8001780 <xTraceInitialize+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 8001608:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 800160c:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <xTraceInitialize+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001614:	2250      	movs	r2, #80	; 0x50
 8001616:	495f      	ldr	r1, [pc, #380]	; (8001794 <xTraceInitialize+0x254>)
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fd2d 	bl	8002078 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 800161e:	4b58      	ldr	r3, [pc, #352]	; (8001780 <xTraceInitialize+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 8001626:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 800162a:	4b55      	ldr	r3, [pc, #340]	; (8001780 <xTraceInitialize+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001632:	220a      	movs	r2, #10
 8001634:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
	RecorderDataPtr->endmarker1 = 0x0B;
 8001638:	4b51      	ldr	r3, [pc, #324]	; (8001780 <xTraceInitialize+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001640:	220b      	movs	r2, #11
 8001642:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
	RecorderDataPtr->endmarker2 = 0x0C;
 8001646:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <xTraceInitialize+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164e:	220c      	movs	r2, #12
 8001650:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
	RecorderDataPtr->endmarker3 = 0x0D;
 8001654:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <xTraceInitialize+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165c:	220d      	movs	r2, #13
 800165e:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
	RecorderDataPtr->endmarker4 = 0x71;
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <xTraceInitialize+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	2271      	movs	r2, #113	; 0x71
 800166c:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
	RecorderDataPtr->endmarker5 = 0x72;
 8001670:	4b43      	ldr	r3, [pc, #268]	; (8001780 <xTraceInitialize+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001678:	2272      	movs	r2, #114	; 0x72
 800167a:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
	RecorderDataPtr->endmarker6 = 0x73;
 800167e:	4b40      	ldr	r3, [pc, #256]	; (8001780 <xTraceInitialize+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001686:	2273      	movs	r2, #115	; 0x73
 8001688:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
	RecorderDataPtr->endmarker7 = 0x74;
 800168c:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <xTraceInitialize+0x240>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001694:	2274      	movs	r2, #116	; 0x74
 8001696:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
	RecorderDataPtr->endmarker8 = 0xF1;
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <xTraceInitialize+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a2:	22f1      	movs	r2, #241	; 0xf1
 80016a4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
	RecorderDataPtr->endmarker9 = 0xF2;
 80016a8:	4b35      	ldr	r3, [pc, #212]	; (8001780 <xTraceInitialize+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b0:	22f2      	movs	r2, #242	; 0xf2
 80016b2:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
	RecorderDataPtr->endmarker10 = 0xF3;
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <xTraceInitialize+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016be:	22f3      	movs	r2, #243	; 0xf3
 80016c0:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
	RecorderDataPtr->endmarker11 = 0xF4;
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <xTraceInitialize+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016cc:	22f4      	movs	r2, #244	; 0xf4
 80016ce:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 80016d2:	f7ff fd9d 	bl	8001210 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 80016d6:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <xTraceInitialize+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	22f4      	movs	r2, #244	; 0xf4
 80016dc:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 80016de:	4b28      	ldr	r3, [pc, #160]	; (8001780 <xTraceInitialize+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	22f3      	movs	r2, #243	; 0xf3
 80016e4:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <xTraceInitialize+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	22f2      	movs	r2, #242	; 0xf2
 80016ec:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <xTraceInitialize+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	22f1      	movs	r2, #241	; 0xf1
 80016f4:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <xTraceInitialize+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2274      	movs	r2, #116	; 0x74
 80016fc:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <xTraceInitialize+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2273      	movs	r2, #115	; 0x73
 8001704:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <xTraceInitialize+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2272      	movs	r2, #114	; 0x72
 800170c:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <xTraceInitialize+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2271      	movs	r2, #113	; 0x71
 8001714:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <xTraceInitialize+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2204      	movs	r2, #4
 800171c:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <xTraceInitialize+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2203      	movs	r2, #3
 8001724:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <xTraceInitialize+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2202      	movs	r2, #2
 800172c:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <xTraceInitialize+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <xTraceInitialize+0x23c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d010      	beq.n	8001760 <xTraceInitialize+0x220>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <xTraceInitialize+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001746:	4a0d      	ldr	r2, [pc, #52]	; (800177c <xTraceInitialize+0x23c>)
 8001748:	6811      	ldr	r1, [r2, #0]
 800174a:	2250      	movs	r2, #80	; 0x50
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fc93 	bl	8002078 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <xTraceInitialize+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2201      	movs	r2, #1
 8001758:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		prvTraceStop();
 800175c:	f7ff fec8 	bl	80014f0 <prvTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 8001760:	f000 feb0 	bl	80024c4 <xTraceHardwarePortInitCortexM>
#endif

	RecorderInitialized = 1;
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <xTraceInitialize+0x230>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20001be0 	.word	0x20001be0
 8001774:	20000240 	.word	0x20000240
 8001778:	20000242 	.word	0x20000242
 800177c:	200002d4 	.word	0x200002d4
 8001780:	20001bdc 	.word	0x20001bdc
 8001784:	200002d8 	.word	0x200002d8
 8001788:	e0001004 	.word	0xe0001004
 800178c:	2000023c 	.word	0x2000023c
 8001790:	20000214 	.word	0x20000214
 8001794:	0800a9e8 	.word	0x0800a9e8

08001798 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d044      	beq.n	8001832 <prvTraceStoreTaskReady+0x9a>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <prvTraceStoreTaskReady+0xa8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d042      	beq.n	8001836 <prvTraceStoreTaskReady+0x9e>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <prvTraceStoreTaskReady+0xac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <prvTraceStoreTaskReady+0x28>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80017b8:	4823      	ldr	r0, [pc, #140]	; (8001848 <prvTraceStoreTaskReady+0xb0>)
 80017ba:	f000 fcdd 	bl	8002178 <prvTraceError>
		return;
 80017be:	e03b      	b.n	8001838 <prvTraceStoreTaskReady+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80017c0:	f3ef 8310 	mrs	r3, PRIMASK
 80017c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80017c6:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	2301      	movs	r3, #1
 80017cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f383 8810 	msr	PRIMASK, r3
}
 80017d4:	bf00      	nop
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <prvTraceStoreTaskReady+0xac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	4a19      	ldr	r2, [pc, #100]	; (8001844 <prvTraceStoreTaskReady+0xac>)
 80017de:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <prvTraceStoreTaskReady+0xb4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d018      	beq.n	800181c <prvTraceStoreTaskReady+0x84>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80017ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017ee:	f000 fd9f 	bl	8002330 <prvTraceGetDTS>
 80017f2:	4603      	mov	r3, r0
 80017f4:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 80017fa:	f000 fb27 	bl	8001e4c <prvTraceNextFreeEventBufferSlot>
 80017fe:	6178      	str	r0, [r7, #20]
		if (tr != (void*)0)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00a      	beq.n	800181c <prvTraceStoreTaskReady+0x84>
		{
			tr->type = DIV_TASK_READY;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2202      	movs	r2, #2
 800180a:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	8b7a      	ldrh	r2, [r7, #26]
 8001810:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	7e7a      	ldrb	r2, [r7, #25]
 8001816:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8001818:	f000 fd62 	bl	80022e0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <prvTraceStoreTaskReady+0xac>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <prvTraceStoreTaskReady+0xac>)
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f383 8810 	msr	PRIMASK, r3
}
 8001830:	e002      	b.n	8001838 <prvTraceStoreTaskReady+0xa0>
		return;
 8001832:	bf00      	nop
 8001834:	e000      	b.n	8001838 <prvTraceStoreTaskReady+0xa0>
		return;
 8001836:	bf00      	nop
}
 8001838:	3720      	adds	r7, #32
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000000c 	.word	0x2000000c
 8001844:	2000022c 	.word	0x2000022c
 8001848:	0800a9fc 	.word	0x0800a9fc
 800184c:	20001bdc 	.word	0x20001bdc

08001850 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	; 0x38
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 800185c:	4b46      	ldr	r3, [pc, #280]	; (8001978 <vTraceStoreMemMangEvent+0x128>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8084 	beq.w	800196e <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	da03      	bge.n	8001874 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	425b      	negs	r3, r3
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
 8001872:	e001      	b.n	8001878 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001878:	f3ef 8310 	mrs	r3, PRIMASK
 800187c:	61bb      	str	r3, [r7, #24]
  return(result);
 800187e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
 8001882:	2301      	movs	r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f383 8810 	msr	PRIMASK, r3
}
 800188c:	bf00      	nop
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <vTraceStoreMemMangEvent+0x12c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	4a39      	ldr	r2, [pc, #228]	; (800197c <vTraceStoreMemMangEvent+0x12c>)
 8001896:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 800189e:	4b36      	ldr	r3, [pc, #216]	; (8001978 <vTraceStoreMemMangEvent+0x128>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4b34      	ldr	r3, [pc, #208]	; (8001978 <vTraceStoreMemMangEvent+0x128>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	440a      	add	r2, r1
 80018ac:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <vTraceStoreMemMangEvent+0x128>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <vTraceStoreMemMangEvent+0x128>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d905      	bls.n	80018ca <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <vTraceStoreMemMangEvent+0x128>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <vTraceStoreMemMangEvent+0x128>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <vTraceStoreMemMangEvent+0x128>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d041      	beq.n	8001958 <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 80018d4:	20ff      	movs	r0, #255	; 0xff
 80018d6:	f000 fd2b 	bl	8002330 <prvTraceGetDTS>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 80018e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018e6:	f000 f90f 	bl	8001b08 <prvTraceGetParam>
 80018ea:	4603      	mov	r3, r0
 80018ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 80018ee:	f000 faad 	bl	8001e4c <prvTraceNextFreeEventBufferSlot>
 80018f2:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != (void*)0)
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d02e      	beq.n	8001958 <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 80018fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001900:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8001902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8001908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800190c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800190e:	f000 fce7 	bl	80022e0 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001918:	f000 f8f6 	bl	8001b08 <prvTraceGetParam>
 800191c:	4603      	mov	r3, r0
 800191e:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8001926:	f000 fa91 	bl	8001e4c <prvTraceNextFreeEventBufferSlot>
 800192a:	6238      	str	r0, [r7, #32]
			if (ma != (void*)0)
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d012      	beq.n	8001958 <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001936:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800193e:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	b2da      	uxtb	r2, r3
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8001954:	f000 fcc4 	bl	80022e0 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <vTraceStoreMemMangEvent+0x12c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3b01      	subs	r3, #1
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <vTraceStoreMemMangEvent+0x12c>)
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f383 8810 	msr	PRIMASK, r3
}
 800196c:	e000      	b.n	8001970 <vTraceStoreMemMangEvent+0x120>
		return;
 800196e:	bf00      	nop
}
 8001970:	3738      	adds	r7, #56	; 0x38
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20001bdc 	.word	0x20001bdc
 800197c:	2000022c 	.word	0x2000022c

08001980 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	460b      	mov	r3, r1
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <prvTraceStoreKernelCall+0xa8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <prvTraceStoreKernelCall+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8001996:	4825      	ldr	r0, [pc, #148]	; (8001a2c <prvTraceStoreKernelCall+0xac>)
 8001998:	f000 fbee 	bl	8002178 <prvTraceError>
		return;
 800199c:	e040      	b.n	8001a20 <prvTraceStoreKernelCall+0xa0>
	}

	if (handle_of_last_logged_task == 0)
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <prvTraceStoreKernelCall+0xb0>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03b      	beq.n	8001a1e <prvTraceStoreKernelCall+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80019a6:	f3ef 8310 	mrs	r3, PRIMASK
 80019aa:	617b      	str	r3, [r7, #20]
  return(result);
 80019ac:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	2301      	movs	r3, #1
 80019b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	f383 8810 	msr	PRIMASK, r3
}
 80019ba:	bf00      	nop
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <prvTraceStoreKernelCall+0xa8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <prvTraceStoreKernelCall+0xa8>)
 80019c4:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <prvTraceStoreKernelCall+0xb4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01b      	beq.n	8001a08 <prvTraceStoreKernelCall+0x88>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80019d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019d4:	f000 fcac 	bl	8002330 <prvTraceGetDTS>
 80019d8:	4603      	mov	r3, r0
 80019da:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 80019e2:	f000 fa33 	bl	8001e4c <prvTraceNextFreeEventBufferSlot>
 80019e6:	61f8      	str	r0, [r7, #28]
		if (kse != (void*)0)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00c      	beq.n	8001a08 <prvTraceStoreKernelCall+0x88>
		{
			kse->dts = dts1;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80019f2:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001a02:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8001a04:	f000 fc6c 	bl	80022e0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <prvTraceStoreKernelCall+0xa8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <prvTraceStoreKernelCall+0xa8>)
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f383 8810 	msr	PRIMASK, r3
}
 8001a1c:	e000      	b.n	8001a20 <prvTraceStoreKernelCall+0xa0>
		return;
 8001a1e:	bf00      	nop
}
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000022c 	.word	0x2000022c
 8001a2c:	0800aa34 	.word	0x0800aa34
 8001a30:	20000234 	.word	0x20000234
 8001a34:	20001bdc 	.word	0x20001bdc

08001a38 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	460b      	mov	r3, r1
 8001a46:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <prvTraceStoreKernelCallWithParam+0x20>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8001a50:	482a      	ldr	r0, [pc, #168]	; (8001afc <prvTraceStoreKernelCallWithParam+0xc4>)
 8001a52:	f000 fb91 	bl	8002178 <prvTraceError>
		return;
 8001a56:	e04b      	b.n	8001af0 <prvTraceStoreKernelCallWithParam+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001a58:	f3ef 8310 	mrs	r3, PRIMASK
 8001a5c:	617b      	str	r3, [r7, #20]
  return(result);
 8001a5e:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	2301      	movs	r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f383 8810 	msr	PRIMASK, r3
}
 8001a6c:	bf00      	nop
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a20      	ldr	r2, [pc, #128]	; (8001af8 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a76:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <prvTraceStoreKernelCallWithParam+0xc8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d02b      	beq.n	8001ada <prvTraceStoreKernelCallWithParam+0xa2>
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <prvTraceStoreKernelCallWithParam+0xcc>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d027      	beq.n	8001ada <prvTraceStoreKernelCallWithParam+0xa2>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8001a8a:	20ff      	movs	r0, #255	; 0xff
 8001a8c:	f000 fc50 	bl	8002330 <prvTraceGetDTS>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	20ff      	movs	r0, #255	; 0xff
 8001a9a:	f000 f835 	bl	8001b08 <prvTraceGetParam>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8001aaa:	f000 f9cf 	bl	8001e4c <prvTraceNextFreeEventBufferSlot>
 8001aae:	61f8      	str	r0, [r7, #28]
		if (kse != (void*)0)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d011      	beq.n	8001ada <prvTraceStoreKernelCallWithParam+0xa2>
		{
			kse->dts = dts2;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001abc:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001acc:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001ad4:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001ad6:	f000 fc03 	bl	80022e0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	f383 8810 	msr	PRIMASK, r3
}
 8001aee:	bf00      	nop
}
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000022c 	.word	0x2000022c
 8001afc:	0800aa6c 	.word	0x0800aa6c
 8001b00:	20001bdc 	.word	0x20001bdc
 8001b04:	20000234 	.word	0x20000234

08001b08 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d801      	bhi.n	8001b1e <prvTraceGetParam+0x16>
	{
		return param;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	e01d      	b.n	8001b5a <prvTraceGetParam+0x52>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8001b1e:	f000 f995 	bl	8001e4c <prvTraceNextFreeEventBufferSlot>
 8001b22:	60f8      	str	r0, [r7, #12]
		if (xps != (void*)0)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d014      	beq.n	8001b54 <prvTraceGetParam+0x4c>
		{
			xps->type = DIV_XPS;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	43da      	mvns	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	4013      	ands	r3, r2
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	43da      	mvns	r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4013      	ands	r3, r2
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001b50:	f000 fbc6 	bl	80022e0 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4013      	ands	r3, r2
	}
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <prvTraceStoreKernelCallWithNumericParamOnly+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8001b7a:	4825      	ldr	r0, [pc, #148]	; (8001c10 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>)
 8001b7c:	f000 fafc 	bl	8002178 <prvTraceError>
		return;
 8001b80:	e041      	b.n	8001c06 <prvTraceStoreKernelCallWithNumericParamOnly+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001b82:	f3ef 8310 	mrs	r3, PRIMASK
 8001b86:	613b      	str	r3, [r7, #16]
  return(result);
 8001b88:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001b8a:	623b      	str	r3, [r7, #32]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f383 8810 	msr	PRIMASK, r3
}
 8001b96:	bf00      	nop
 8001b98:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001ba0:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d021      	beq.n	8001bf0 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01d      	beq.n	8001bf0 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8001bb4:	20ff      	movs	r0, #255	; 0xff
 8001bb6:	f000 fbbb 	bl	8002330 <prvTraceGetDTS>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8001bbe:	6839      	ldr	r1, [r7, #0]
 8001bc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bc4:	f7ff ffa0 	bl	8001b08 <prvTraceGetParam>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8001bcc:	f000 f93e 	bl	8001e4c <prvTraceNextFreeEventBufferSlot>
 8001bd0:	61b8      	str	r0, [r7, #24]
		if (kse != (void*)0)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00b      	beq.n	8001bf0 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
		{
			kse->dts = dts6;
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	7ffa      	ldrb	r2, [r7, #31]
 8001bdc:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001bea:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001bec:	f000 fb78 	bl	80022e0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f383 8810 	msr	PRIMASK, r3
}
 8001c04:	bf00      	nop
}
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000022c 	.word	0x2000022c
 8001c10:	0800aaa4 	.word	0x0800aaa4
 8001c14:	20001bdc 	.word	0x20001bdc
 8001c18:	20000234 	.word	0x20000234

08001c1c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c26:	f3ef 8310 	mrs	r3, PRIMASK
 8001c2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	2301      	movs	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f383 8810 	msr	PRIMASK, r3
}
 8001c3a:	bf00      	nop
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <prvTraceStoreTaskswitch+0xc4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <prvTraceStoreTaskswitch+0xc4>)
 8001c44:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8001c46:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <prvTraceStoreTaskswitch+0xc8>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	79fa      	ldrb	r2, [r7, #7]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d038      	beq.n	8001cc2 <prvTraceStoreTaskswitch+0xa6>
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <prvTraceStoreTaskswitch+0xcc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d033      	beq.n	8001cc2 <prvTraceStoreTaskswitch+0xa6>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <prvTraceStoreTaskswitch+0xd0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001c60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c64:	f000 fb64 	bl	8002330 <prvTraceGetDTS>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <prvTraceStoreTaskswitch+0xc8>)
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <prvTraceStoreTaskswitch+0xc8>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8001c78:	f000 f8e8 	bl	8001e4c <prvTraceNextFreeEventBufferSlot>
 8001c7c:	6178      	str	r0, [r7, #20]

		if (ts != (void*)0)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01e      	beq.n	8001cc2 <prvTraceStoreTaskswitch+0xa6>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <prvTraceStoreTaskswitch+0xc8>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f000 f89e 	bl	8001dcc <prvTraceGetObjectState>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d103      	bne.n	8001c9e <prvTraceStoreTaskswitch+0x82>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2207      	movs	r2, #7
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e002      	b.n	8001ca4 <prvTraceStoreTaskswitch+0x88>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2206      	movs	r2, #6
 8001ca2:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	8b7a      	ldrh	r2, [r7, #26]
 8001ca8:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	7e7a      	ldrb	r2, [r7, #25]
 8001cae:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <prvTraceStoreTaskswitch+0xc8>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 f863 	bl	8001d84 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8001cbe:	f000 fb0f 	bl	80022e0 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <prvTraceStoreTaskswitch+0xc4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <prvTraceStoreTaskswitch+0xc4>)
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f383 8810 	msr	PRIMASK, r3
}
 8001cd6:	bf00      	nop
}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000022c 	.word	0x2000022c
 8001ce4:	20000234 	.word	0x20000234
 8001ce8:	20001bdc 	.word	0x20001bdc
 8001cec:	20000218 	.word	0x20000218

08001cf0 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	71bb      	strb	r3, [r7, #6]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <prvTraceSetPriorityProperty+0x48>)
 8001d04:	681c      	ldr	r4, [r3, #0]
 8001d06:	79fa      	ldrb	r2, [r7, #7]
 8001d08:	79bb      	ldrb	r3, [r7, #6]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f8c1 	bl	8001e94 <uiIndexOfObject>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4619      	mov	r1, r3
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <prvTraceSetPriorityProperty+0x48>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d22:	440b      	add	r3, r1
 8001d24:	3301      	adds	r3, #1
 8001d26:	4423      	add	r3, r4
 8001d28:	797a      	ldrb	r2, [r7, #5]
 8001d2a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd90      	pop	{r4, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20001bdc 	.word	0x20001bdc

08001d3c <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	460a      	mov	r2, r1
 8001d46:	71fb      	strb	r3, [r7, #7]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <prvTraceGetPriorityProperty+0x44>)
 8001d4e:	681c      	ldr	r4, [r3, #0]
 8001d50:	79fa      	ldrb	r2, [r7, #7]
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f89c 	bl	8001e94 <uiIndexOfObject>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <prvTraceGetPriorityProperty+0x44>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	4413      	add	r3, r2
 8001d68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3301      	adds	r3, #1
 8001d70:	4423      	add	r3, r4
 8001d72:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd90      	pop	{r4, r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20001bdc 	.word	0x20001bdc

08001d84 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	71bb      	strb	r3, [r7, #6]
 8001d92:	4613      	mov	r3, r2
 8001d94:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <prvTraceSetObjectState+0x44>)
 8001d98:	681c      	ldr	r4, [r3, #0]
 8001d9a:	79fa      	ldrb	r2, [r7, #7]
 8001d9c:	79bb      	ldrb	r3, [r7, #6]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f877 	bl	8001e94 <uiIndexOfObject>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <prvTraceSetObjectState+0x44>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	4413      	add	r3, r2
 8001db2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001db6:	440b      	add	r3, r1
 8001db8:	4423      	add	r3, r4
 8001dba:	797a      	ldrb	r2, [r7, #5]
 8001dbc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd90      	pop	{r4, r7, pc}
 8001dc8:	20001bdc 	.word	0x20001bdc

08001dcc <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	71fb      	strb	r3, [r7, #7]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <prvTraceGetObjectState+0x40>)
 8001dde:	681c      	ldr	r4, [r3, #0]
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f854 	bl	8001e94 <uiIndexOfObject>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4619      	mov	r1, r3
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <prvTraceGetObjectState+0x40>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4413      	add	r3, r2
 8001df8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001dfc:	440b      	add	r3, r1
 8001dfe:	4423      	add	r3, r4
 8001e00:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}
 8001e0c:	20001bdc 	.word	0x20001bdc

08001e10 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <prvTraceSetTaskInstanceFinished+0x38>)
 8001e1c:	681c      	ldr	r4, [r3, #0]
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2103      	movs	r1, #3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f836 	bl	8001e94 <uiIndexOfObject>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <prvTraceSetTaskInstanceFinished+0x38>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001e34:	4413      	add	r3, r2
 8001e36:	4423      	add	r3, r4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20001bdc 	.word	0x20001bdc

08001e4c <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e014      	b.n	8001e88 <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e68:	d304      	bcc.n	8001e74 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8001e6a:	4809      	ldr	r0, [pc, #36]	; (8001e90 <prvTraceNextFreeEventBufferSlot+0x44>)
 8001e6c:	f000 f984 	bl	8002178 <prvTraceError>
		return (void*)0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e009      	b.n	8001e88 <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8001e84:	4413      	add	r3, r2
 8001e86:	3304      	adds	r3, #4
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20001bdc 	.word	0x20001bdc
 8001e90:	0800aadc 	.word	0x0800aadc

08001e94 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	71fb      	strb	r3, [r7, #7]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8001ea4:	79bb      	ldrb	r3, [r7, #6]
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d823      	bhi.n	8001ef2 <uiIndexOfObject+0x5e>
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <uiIndexOfObject+0x5e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <uiIndexOfObject+0x70>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8001ebc:	79fa      	ldrb	r2, [r7, #7]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d817      	bhi.n	8001ef2 <uiIndexOfObject+0x5e>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <uiIndexOfObject+0x70>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	3338      	adds	r3, #56	; 0x38
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <uiIndexOfObject+0x70>)
 8001ed2:	6819      	ldr	r1, [r3, #0]
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001edc:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	fb11 f303 	smulbb	r3, r1, r3
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	81fb      	strh	r3, [r7, #14]
		return index;
 8001eee:	89fb      	ldrh	r3, [r7, #14]
 8001ef0:	e003      	b.n	8001efa <uiIndexOfObject+0x66>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <uiIndexOfObject+0x74>)
 8001ef4:	f000 f940 	bl	8002178 <prvTraceError>
	return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20001bdc 	.word	0x20001bdc
 8001f08:	0800ab04 	.word	0x0800ab04

08001f0c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f16:	f3ef 8310 	mrs	r3, PRIMASK
 8001f1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	2301      	movs	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f383 8810 	msr	PRIMASK, r3
}
 8001f2a:	bf00      	nop
 8001f2c:	4b40      	ldr	r3, [pc, #256]	; (8002030 <prvTraceGetObjectHandle+0x124>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a3f      	ldr	r2, [pc, #252]	; (8002030 <prvTraceGetObjectHandle+0x124>)
 8001f34:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4a3e      	ldr	r2, [pc, #248]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <prvTraceGetObjectHandle+0x12c>)
 8001f42:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8001f44:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <prvTraceGetObjectHandle+0x12c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a3a      	ldr	r2, [pc, #232]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d114      	bne.n	8001f7e <prvTraceGetObjectHandle+0x72>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8001f54:	4b38      	ldr	r3, [pc, #224]	; (8002038 <prvTraceGetObjectHandle+0x12c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4935      	ldr	r1, [pc, #212]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001f5e:	3308      	adds	r3, #8
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	440b      	add	r3, r1
 8001f64:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8001f6c:	4b32      	ldr	r3, [pc, #200]	; (8002038 <prvTraceGetObjectHandle+0x12c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8001f70:	3201      	adds	r2, #1
 8001f72:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8001f74:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001f76:	4413      	add	r3, r2
 8001f78:	460a      	mov	r2, r1
 8001f7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8001f7e:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <prvTraceGetObjectHandle+0x12c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001f84:	4413      	add	r3, r2
 8001f86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f8a:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	4a29      	ldr	r2, [pc, #164]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001f90:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	4927      	ldr	r1, [pc, #156]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001f98:	3310      	adds	r3, #16
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	440b      	add	r3, r1
 8001f9e:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d90a      	bls.n	8001fba <prvTraceGetObjectHandle+0xae>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f9ba 	bl	8001320 <pszTraceGetErrorNotEnoughHandles>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f8e2 	bl	8002178 <prvTraceError>
		handle = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	77fb      	strb	r3, [r7, #31]
 8001fb8:	e029      	b.n	800200e <prvTraceGetObjectHandle+0x102>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001fbe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fc2:	3201      	adds	r2, #1
 8001fc4:	b291      	uxth	r1, r2
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001fc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	4a19      	ldr	r2, [pc, #100]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fd4:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4a16      	ldr	r2, [pc, #88]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001fda:	3308      	adds	r3, #8
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001fe2:	1acb      	subs	r3, r1, r3
 8001fe4:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	4a12      	ldr	r2, [pc, #72]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8001fea:	3318      	adds	r3, #24
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	88db      	ldrh	r3, [r3, #6]
 8001ff2:	461a      	mov	r2, r3
		if (hndCount >
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	dd09      	ble.n	800200e <prvTraceGetObjectHandle+0x102>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8002000:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <prvTraceGetObjectHandle+0x128>)
 8002004:	3318      	adds	r3, #24
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	460a      	mov	r2, r1
 800200c:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <prvTraceGetObjectHandle+0x124>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3b01      	subs	r3, #1
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <prvTraceGetObjectHandle+0x124>)
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f383 8810 	msr	PRIMASK, r3
}
 8002022:	bf00      	nop

	return handle;
 8002024:	7ffb      	ldrb	r3, [r7, #31]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000022c 	.word	0x2000022c
 8002034:	20000244 	.word	0x20000244
 8002038:	20001be4 	.word	0x20001be4

0800203c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	460a      	mov	r2, r1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	4613      	mov	r3, r2
 800204a:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 800204c:	79fa      	ldrb	r2, [r7, #7]
 800204e:	79bb      	ldrb	r3, [r7, #6]
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff1e 	bl	8001e94 <uiIndexOfObject>
 8002058:	4603      	mov	r3, r0
 800205a:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <prvMarkObjectAsUsed+0x38>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	89fb      	ldrh	r3, [r7, #14]
 8002062:	4413      	add	r3, r2
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20001bdc 	.word	0x20001bdc

08002078 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e010      	b.n	80020ac <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	441a      	add	r2, r3
 8002090:	68f9      	ldr	r1, [r7, #12]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	440b      	add	r3, r1
 8002096:	7812      	ldrb	r2, [r2, #0]
 8002098:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	4413      	add	r3, r2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3301      	adds	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3ea      	bcc.n	800208a <prvStrncpy+0x12>
			break;
	}
}
 80020b4:	e000      	b.n	80020b8 <prvStrncpy+0x40>
			break;
 80020b6:	bf00      	nop
}
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	603a      	str	r2, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
 80020d0:	460b      	mov	r3, r1
 80020d2:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == (void*)0)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <prvTraceSetObjectName+0x1a>
	{
		name = "";
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <prvTraceSetObjectName+0x9c>)
 80020dc:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d903      	bls.n	80020ec <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 80020e4:	481f      	ldr	r0, [pc, #124]	; (8002164 <prvTraceSetObjectName+0xa0>)
 80020e6:	f000 f847 	bl	8002178 <prvTraceError>
		return;
 80020ea:	e036      	b.n	800215a <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 80020ec:	79bb      	ldrb	r3, [r7, #6]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d103      	bne.n	80020fa <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 80020f2:	481d      	ldr	r0, [pc, #116]	; (8002168 <prvTraceSetObjectName+0xa4>)
 80020f4:	f000 f840 	bl	8002178 <prvTraceError>
		return;
 80020f8:	e02f      	b.n	800215a <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <prvTraceSetObjectName+0xa8>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	4413      	add	r3, r2
 8002102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002106:	79ba      	ldrb	r2, [r7, #6]
 8002108:	429a      	cmp	r2, r3
 800210a:	d908      	bls.n	800211e <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f906 	bl	8001320 <pszTraceGetErrorNotEnoughHandles>
 8002114:	4603      	mov	r3, r0
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f82e 	bl	8002178 <prvTraceError>
 800211c:	e01d      	b.n	800215a <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 800211e:	79fa      	ldrb	r2, [r7, #7]
 8002120:	79bb      	ldrb	r3, [r7, #6]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff feb5 	bl	8001e94 <uiIndexOfObject>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <prvTraceSetObjectName+0xac>)
 8002130:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <prvTraceSetObjectName+0xb0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10f      	bne.n	800215a <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <prvTraceSetObjectName+0xa8>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <prvTraceSetObjectName+0xac>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	3388      	adds	r3, #136	; 0x88
 8002144:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <prvTraceSetObjectName+0xa8>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	4413      	add	r3, r2
 800214e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8002152:	461a      	mov	r2, r3
 8002154:	6839      	ldr	r1, [r7, #0]
 8002156:	f7ff ff8f 	bl	8002078 <prvStrncpy>
		}
	}
}
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	0800ab74 	.word	0x0800ab74
 8002164:	0800ab78 	.word	0x0800ab78
 8002168:	0800aba8 	.word	0x0800aba8
 800216c:	20001bdc 	.word	0x20001bdc
 8002170:	20001be8 	.word	0x20001be8
 8002174:	200002d4 	.word	0x200002d4

08002178 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <prvTraceError+0x50>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <prvTraceError+0x14>
	{
		xTraceDisable();
 8002188:	f7ff f94a 	bl	8001420 <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <prvTraceError+0x54>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d115      	bne.n	80021c0 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <prvTraceError+0x54>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != (void*)0)
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <prvTraceError+0x50>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00e      	beq.n	80021c0 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <prvTraceError+0x50>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021aa:	4a08      	ldr	r2, [pc, #32]	; (80021cc <prvTraceError+0x54>)
 80021ac:	6811      	ldr	r1, [r2, #0]
 80021ae:	2250      	movs	r2, #80	; 0x50
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff61 	bl	8002078 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <prvTraceError+0x50>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20001bdc 	.word	0x20001bdc
 80021cc:	200002d4 	.word	0x200002d4

080021d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 80021e2:	e071      	b.n	80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80021e4:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4413      	add	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80021f0:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 80021fe:	2b98      	cmp	r3, #152	; 0x98
 8002200:	d929      	bls.n	8002256 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8002210:	2ba7      	cmp	r3, #167	; 0xa7
 8002212:	d820      	bhi.n	8002256 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8002214:	4b31      	ldr	r3, [pc, #196]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8002222:	3368      	adds	r3, #104	; 0x68
 8002224:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	441a      	add	r2, r3
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	429a      	cmp	r2, r3
 8002234:	d244      	bcs.n	80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002242:	4413      	add	r3, r2
 8002244:	1d18      	adds	r0, r3, #4
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	3301      	adds	r3, #1
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	461a      	mov	r2, r3
 800224e:	2100      	movs	r1, #0
 8002250:	f008 f870 	bl	800a334 <memset>
		{
 8002254:	e034      	b.n	80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8002256:	4b21      	ldr	r3, [pc, #132]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8002264:	2b01      	cmp	r3, #1
 8002266:	d12c      	bne.n	80022c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	429a      	cmp	r2, r3
 8002274:	d20d      	bcs.n	8002292 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002282:	4413      	add	r3, r2
 8002284:	3304      	adds	r3, #4
 8002286:	2208      	movs	r2, #8
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f008 f852 	bl	800a334 <memset>
 8002290:	e017      	b.n	80022c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f603 1354 	addw	r3, r3, #2388	; 0x954
 800229a:	2204      	movs	r2, #4
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f008 f848 	bl	800a334 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80022b0:	4413      	add	r3, r2
 80022b2:	3304      	adds	r3, #4
 80022b4:	2204      	movs	r2, #4
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f008 f83b 	bl	800a334 <memset>
 80022be:	e000      	b.n	80022c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
 80022c0:	bf00      	nop
			}
		}
		i++;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d389      	bcc.n	80021e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14>
	}
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20001bdc 	.word	0x20001bdc

080022e0 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <prvTraceUpdateCounters+0x4c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d01b      	beq.n	8002326 <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <prvTraceUpdateCounters+0x4c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	3201      	adds	r2, #1
 80022f6:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <prvTraceUpdateCounters+0x4c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	3201      	adds	r2, #1
 8002300:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <prvTraceUpdateCounters+0x4c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800230c:	d307      	bcc.n	800231e <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <prvTraceUpdateCounters+0x4c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2201      	movs	r2, #1
 8002314:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <prvTraceUpdateCounters+0x4c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 800231e:	2001      	movs	r0, #1
 8002320:	f7ff ff56 	bl	80021d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8002324:	e000      	b.n	8002328 <prvTraceUpdateCounters+0x48>
		return;
 8002326:	bf00      	nop
#endif
}
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20001bdc 	.word	0x20001bdc

08002330 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 8002346:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <prvTraceGetDTS+0x178>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2b00      	cmp	r3, #0
 800234e:	d116      	bne.n	800237e <prvTraceGetDTS+0x4e>
	{	
		if (timestampFrequency != 0)
 8002350:	4b56      	ldr	r3, [pc, #344]	; (80024ac <prvTraceGetDTS+0x17c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <prvTraceGetDTS+0x36>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8002358:	4b54      	ldr	r3, [pc, #336]	; (80024ac <prvTraceGetDTS+0x17c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b52      	ldr	r3, [pc, #328]	; (80024a8 <prvTraceGetDTS+0x178>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0892      	lsrs	r2, r2, #2
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
 8002364:	e00b      	b.n	800237e <prvTraceGetDTS+0x4e>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8002366:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <prvTraceGetDTS+0x180>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b52      	ldr	r3, [pc, #328]	; (80024b4 <prvTraceGetDTS+0x184>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d005      	beq.n	800237e <prvTraceGetDTS+0x4e>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8002372:	4b51      	ldr	r3, [pc, #324]	; (80024b8 <prvTraceGetDTS+0x188>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4b4c      	ldr	r3, [pc, #304]	; (80024a8 <prvTraceGetDTS+0x178>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0892      	lsrs	r2, r2, #2
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f8d6 	bl	8002534 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <prvTraceGetDTS+0x18c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a49      	ldr	r2, [pc, #292]	; (80024bc <prvTraceGetDTS+0x18c>)
 8002396:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8002398:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <prvTraceGetDTS+0x178>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d043      	beq.n	800242a <prvTraceGetDTS+0xfa>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <prvTraceGetDTS+0x178>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d91d      	bls.n	80023ea <prvTraceGetDTS+0xba>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 80023ae:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <prvTraceGetDTS+0x178>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b4:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <prvTraceGetDTS+0x178>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <prvTraceGetDTS+0x178>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	440a      	add	r2, r1
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 80023c8:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <prvTraceGetDTS+0x178>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023ce:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <prvTraceGetDTS+0x178>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80023da:	fb00 f202 	mul.w	r2, r0, r2
 80023de:	1a9a      	subs	r2, r3, r2
 80023e0:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <prvTraceGetDTS+0x178>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	440a      	add	r2, r1
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
 80023e8:	e007      	b.n	80023fa <prvTraceGetDTS+0xca>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <prvTraceGetDTS+0x178>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023f0:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <prvTraceGetDTS+0x178>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	440a      	add	r2, r1
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <prvTraceGetDTS+0x178>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002400:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <prvTraceGetDTS+0x178>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	429a      	cmp	r2, r3
 8002408:	d313      	bcc.n	8002432 <prvTraceGetDTS+0x102>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 800240a:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <prvTraceGetDTS+0x178>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	3201      	adds	r2, #1
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8002414:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <prvTraceGetDTS+0x178>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800241a:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <prvTraceGetDTS+0x178>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002420:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <prvTraceGetDTS+0x178>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	1a8a      	subs	r2, r1, r2
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
 8002428:	e003      	b.n	8002432 <prvTraceGetDTS+0x102>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <prvTraceGetDTS+0x178>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	429a      	cmp	r2, r3
 8002438:	d92c      	bls.n	8002494 <prvTraceGetDTS+0x164>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 800243a:	f7ff fd07 	bl	8001e4c <prvTraceNextFreeEventBufferSlot>
 800243e:	6178      	str	r0, [r7, #20]

		if (xts != (void*)0)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d026      	beq.n	8002494 <prvTraceGetDTS+0x164>
		{
			if (param_maxDTS == 0xFFFF)
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800244c:	4293      	cmp	r3, r2
 800244e:	d10b      	bne.n	8002468 <prvTraceGetDTS+0x138>
			{
				xts->type = (uint8_t)XTS16;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	22a9      	movs	r2, #169	; 0xa9
 8002454:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	b29a      	uxth	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2200      	movs	r2, #0
 8002464:	705a      	strb	r2, [r3, #1]
 8002466:	e013      	b.n	8002490 <prvTraceGetDTS+0x160>
			}
			else if (param_maxDTS == 0xFF)
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2bff      	cmp	r3, #255	; 0xff
 800246c:	d10d      	bne.n	800248a <prvTraceGetDTS+0x15a>
			{
				xts->type = (uint8_t)XTS8;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	22a8      	movs	r2, #168	; 0xa8
 8002472:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	b29a      	uxth	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	0e1b      	lsrs	r3, r3, #24
 8002482:	b2da      	uxtb	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	705a      	strb	r2, [r3, #1]
 8002488:	e002      	b.n	8002490 <prvTraceGetDTS+0x160>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 800248a:	480d      	ldr	r0, [pc, #52]	; (80024c0 <prvTraceGetDTS+0x190>)
 800248c:	f7ff fe74 	bl	8002178 <prvTraceError>
			}
			prvTraceUpdateCounters();
 8002490:	f7ff ff26 	bl	80022e0 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	b29a      	uxth	r2, r3
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	4013      	ands	r3, r2
 800249c:	b29b      	uxth	r3, r3
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20001bdc 	.word	0x20001bdc
 80024ac:	20000230 	.word	0x20000230
 80024b0:	e0001004 	.word	0xe0001004
 80024b4:	2000023c 	.word	0x2000023c
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20001bec 	.word	0x20001bec
 80024c0:	0800abd8 	.word	0x0800abd8

080024c4 <xTraceHardwarePortInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if (((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) || (TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M_NRF_SD)) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void xTraceHardwarePortInitCortexM(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <xTraceHardwarePortInitCortexM+0x54>)
 80024ca:	4a14      	ldr	r2, [pc, #80]	; (800251c <xTraceHardwarePortInitCortexM+0x58>)
 80024cc:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <xTraceHardwarePortInitCortexM+0x5c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <xTraceHardwarePortInitCortexM+0x5c>)
 80024d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d8:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <xTraceHardwarePortInitCortexM+0x5c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 80024e2:	4810      	ldr	r0, [pc, #64]	; (8002524 <xTraceHardwarePortInitCortexM+0x60>)
 80024e4:	f7ff fe48 	bl	8002178 <prvTraceError>
			break;
 80024e8:	e013      	b.n	8002512 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <xTraceHardwarePortInitCortexM+0x64>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 80024f6:	480d      	ldr	r0, [pc, #52]	; (800252c <xTraceHardwarePortInitCortexM+0x68>)
 80024f8:	f7ff fe3e 	bl	8002178 <prvTraceError>
			break;
 80024fc:	e009      	b.n	8002512 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <xTraceHardwarePortInitCortexM+0x6c>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <xTraceHardwarePortInitCortexM+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a07      	ldr	r2, [pc, #28]	; (8002528 <xTraceHardwarePortInitCortexM+0x64>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e0001fb0 	.word	0xe0001fb0
 800251c:	c5acce55 	.word	0xc5acce55
 8002520:	e000edfc 	.word	0xe000edfc
 8002524:	0800ac44 	.word	0x0800ac44
 8002528:	e0001000 	.word	0xe0001000
 800252c:	0800ac70 	.word	0x0800ac70
 8002530:	e0001004 	.word	0xe0001004

08002534 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <prvTracePortGetTimeStamp+0x80>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d107      	bne.n	8002560 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d028      	beq.n	80025a8 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <prvTracePortGetTimeStamp+0x84>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	601a      	str	r2, [r3, #0]
		return;
 800255e:	e023      	b.n	80025a8 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8002560:	4b16      	ldr	r3, [pc, #88]	; (80025bc <prvTracePortGetTimeStamp+0x88>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <prvTracePortGetTimeStamp+0x8c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	1ad2      	subs	r2, r2, r3
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <prvTracePortGetTimeStamp+0x90>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <prvTracePortGetTimeStamp+0x90>)
 8002584:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <prvTracePortGetTimeStamp+0x84>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <prvTracePortGetTimeStamp+0x84>)
 8002590:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <prvTracePortGetTimeStamp+0x84>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 80025a0:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <prvTracePortGetTimeStamp+0x8c>)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e000      	b.n	80025aa <prvTracePortGetTimeStamp+0x76>
		return;
 80025a8:	bf00      	nop
}
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	20000220 	.word	0x20000220
 80025b8:	20000224 	.word	0x20000224
 80025bc:	e0001004 	.word	0xe0001004
 80025c0:	20001bf0 	.word	0x20001bf0
 80025c4:	20001bf4 	.word	0x20001bf4

080025c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <HAL_Init+0x40>)
 80025d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_Init+0x40>)
 80025de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <HAL_Init+0x40>)
 80025ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f0:	2003      	movs	r0, #3
 80025f2:	f000 f8d8 	bl	80027a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f6:	200f      	movs	r0, #15
 80025f8:	f7fe fba2 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025fc:	f7fe fa42 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00

0800260c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_IncTick+0x20>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_IncTick+0x24>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4413      	add	r3, r2
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_IncTick+0x24>)
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000014 	.word	0x20000014
 8002630:	20001bf8 	.word	0x20001bf8

08002634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return uwTick;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_GetTick+0x14>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20001bf8 	.word	0x20001bf8

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267e:	4a04      	ldr	r2, [pc, #16]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60d3      	str	r3, [r2, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0b      	blt.n	80026da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <__NVIC_EnableIRQ+0x38>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff4c 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ce:	f7ff ff61 	bl	8002694 <__NVIC_GetPriorityGrouping>
 80027d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f7ff ffb1 	bl	8002740 <NVIC_EncodePriority>
 80027de:	4602      	mov	r2, r0
 80027e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff80 	bl	80026ec <__NVIC_SetPriority>
}
 80027ec:	bf00      	nop
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff54 	bl	80026b0 <__NVIC_EnableIRQ>
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e16b      	b.n	8002b04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	f040 815a 	bne.w	8002afe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285e:	2b02      	cmp	r3, #2
 8002860:	d130      	bne.n	80028c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d017      	beq.n	8002900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d123      	bne.n	8002954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0203 	and.w	r2, r3, #3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80b4 	beq.w	8002afe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b60      	ldr	r3, [pc, #384]	; (8002b1c <HAL_GPIO_Init+0x30c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a5f      	ldr	r2, [pc, #380]	; (8002b1c <HAL_GPIO_Init+0x30c>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <HAL_GPIO_Init+0x30c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b2:	4a5b      	ldr	r2, [pc, #364]	; (8002b20 <HAL_GPIO_Init+0x310>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a52      	ldr	r2, [pc, #328]	; (8002b24 <HAL_GPIO_Init+0x314>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02b      	beq.n	8002a36 <HAL_GPIO_Init+0x226>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a51      	ldr	r2, [pc, #324]	; (8002b28 <HAL_GPIO_Init+0x318>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d025      	beq.n	8002a32 <HAL_GPIO_Init+0x222>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a50      	ldr	r2, [pc, #320]	; (8002b2c <HAL_GPIO_Init+0x31c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <HAL_GPIO_Init+0x21e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4f      	ldr	r2, [pc, #316]	; (8002b30 <HAL_GPIO_Init+0x320>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x21a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4e      	ldr	r2, [pc, #312]	; (8002b34 <HAL_GPIO_Init+0x324>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x216>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4d      	ldr	r2, [pc, #308]	; (8002b38 <HAL_GPIO_Init+0x328>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x212>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4c      	ldr	r2, [pc, #304]	; (8002b3c <HAL_GPIO_Init+0x32c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x20e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4b      	ldr	r2, [pc, #300]	; (8002b40 <HAL_GPIO_Init+0x330>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x20a>
 8002a16:	2307      	movs	r3, #7
 8002a18:	e00e      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	e00c      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a1e:	2306      	movs	r3, #6
 8002a20:	e00a      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a22:	2305      	movs	r3, #5
 8002a24:	e008      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a26:	2304      	movs	r3, #4
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e004      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e002      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_GPIO_Init+0x228>
 8002a36:	2300      	movs	r3, #0
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	f002 0203 	and.w	r2, r2, #3
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	4093      	lsls	r3, r2
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a48:	4935      	ldr	r1, [pc, #212]	; (8002b20 <HAL_GPIO_Init+0x310>)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a56:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_GPIO_Init+0x334>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7a:	4a32      	ldr	r2, [pc, #200]	; (8002b44 <HAL_GPIO_Init+0x334>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a80:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_GPIO_Init+0x334>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <HAL_GPIO_Init+0x334>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_GPIO_Init+0x334>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ace:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <HAL_GPIO_Init+0x334>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_GPIO_Init+0x334>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af8:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <HAL_GPIO_Init+0x334>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3301      	adds	r3, #1
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b0f      	cmp	r3, #15
 8002b08:	f67f ae90 	bls.w	800282c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40021400 	.word	0x40021400
 8002b3c:	40021800 	.word	0x40021800
 8002b40:	40021c00 	.word	0x40021c00
 8002b44:	40013c00 	.word	0x40013c00

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b64:	e003      	b.n	8002b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	041a      	lsls	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	619a      	str	r2, [r3, #24]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b8c:	887a      	ldrh	r2, [r7, #2]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4013      	ands	r3, r2
 8002b92:	041a      	lsls	r2, r3, #16
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	400b      	ands	r3, r1
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 fd9d 	bl	8006704 <USB_GetMode>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	f040 80fb 	bne.w	8002dc8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 fd60 	bl	800669c <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 80f1 	beq.w	8002dc6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 fd57 	bl	800669c <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bf8:	d104      	bne.n	8002c04 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c02:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 fd47 	bl	800669c <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c18:	d104      	bne.n	8002c24 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c22:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 fd37 	bl	800669c <USB_ReadInterrupts>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c38:	d104      	bne.n	8002c44 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c42:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f003 fd27 	bl	800669c <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d103      	bne.n	8002c60 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 fd19 	bl	800669c <USB_ReadInterrupts>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c74:	d120      	bne.n	8002cb8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c7e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d113      	bne.n	8002cb8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c90:	2110      	movs	r1, #16
 8002c92:	6938      	ldr	r0, [r7, #16]
 8002c94:	f003 fc4a 	bl	800652c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c98:	6938      	ldr	r0, [r7, #16]
 8002c9a:	f003 fc79 	bl	8006590 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7a5b      	ldrb	r3, [r3, #9]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d105      	bne.n	8002cb2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2101      	movs	r1, #1
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 fd37 	bl	8006720 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f007 faae 	bl	800a214 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 fced 	bl	800669c <USB_ReadInterrupts>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ccc:	d102      	bne.n	8002cd4 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f001 fc87 	bl	80045e2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 fcdf 	bl	800669c <USB_ReadInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d106      	bne.n	8002cf6 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f007 fa77 	bl	800a1dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fcce 	bl	800669c <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d0a:	d139      	bne.n	8002d80 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 fd42 	bl	800679a <USB_HC_ReadInterrupt>
 8002d16:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	e025      	b.n	8002d6a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d018      	beq.n	8002d64 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d48:	d106      	bne.n	8002d58 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f859 	bl	8002e08 <HCD_HC_IN_IRQHandler>
 8002d56:	e005      	b.n	8002d64 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 febb 	bl	8003ada <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	3301      	adds	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	795b      	ldrb	r3, [r3, #5]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d3d3      	bcc.n	8002d1e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 fc89 	bl	800669c <USB_ReadInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d101      	bne.n	8002d98 <HAL_HCD_IRQHandler+0x1ea>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_HCD_IRQHandler+0x1ec>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d014      	beq.n	8002dc8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0210 	bic.w	r2, r2, #16
 8002dac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f001 fb38 	bl	8004424 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0210 	orr.w	r2, r2, #16
 8002dc2:	619a      	str	r2, [r3, #24]
 8002dc4:	e000      	b.n	8002dc8 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002dc6:	bf00      	nop
    }
  }
}
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_HCD_Stop+0x16>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e00d      	b.n	8002e00 <HAL_HCD_Stop+0x32>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 fe03 	bl	80069fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fc4b 	bl	80066c2 <USB_ReadChInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d11a      	bne.n	8002e6c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	461a      	mov	r2, r3
 8002e44:	2304      	movs	r3, #4
 8002e46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	334d      	adds	r3, #77	; 0x4d
 8002e58:	2207      	movs	r2, #7
 8002e5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 fca9 	bl	80067bc <USB_HC_Halt>
 8002e6a:	e09e      	b.n	8002faa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 fc24 	bl	80066c2 <USB_ReadChInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e84:	d11b      	bne.n	8002ebe <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e92:	461a      	mov	r2, r3
 8002e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	334d      	adds	r3, #77	; 0x4d
 8002eaa:	2208      	movs	r2, #8
 8002eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 fc80 	bl	80067bc <USB_HC_Halt>
 8002ebc:	e075      	b.n	8002faa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fbfb 	bl	80066c2 <USB_ReadChInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d11a      	bne.n	8002f0c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	334d      	adds	r3, #77	; 0x4d
 8002ef8:	2206      	movs	r2, #6
 8002efa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fc59 	bl	80067bc <USB_HC_Halt>
 8002f0a:	e04e      	b.n	8002faa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 fbd4 	bl	80066c2 <USB_ReadChInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f24:	d11b      	bne.n	8002f5e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	334d      	adds	r3, #77	; 0x4d
 8002f4a:	2209      	movs	r2, #9
 8002f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 fc30 	bl	80067bc <USB_HC_Halt>
 8002f5c:	e025      	b.n	8002faa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 fbab 	bl	80066c2 <USB_ReadChInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b80      	cmp	r3, #128	; 0x80
 8002f74:	d119      	bne.n	8002faa <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f82:	461a      	mov	r2, r3
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	334d      	adds	r3, #77	; 0x4d
 8002f98:	2207      	movs	r2, #7
 8002f9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fc09 	bl	80067bc <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fb85 	bl	80066c2 <USB_ReadChInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc2:	d112      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fbf5 	bl	80067bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe4:	6093      	str	r3, [r2, #8]
 8002fe6:	f000 bd75 	b.w	8003ad4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 fb65 	bl	80066c2 <USB_ReadChInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	f040 8128 	bne.w	8003254 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	2320      	movs	r3, #32
 8003014:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	331b      	adds	r3, #27
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d119      	bne.n	8003060 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	331b      	adds	r3, #27
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	0151      	lsls	r1, r2, #5
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	440a      	add	r2, r1
 8003056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	799b      	ldrb	r3, [r3, #6]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01b      	beq.n	80030a0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	3330      	adds	r3, #48	; 0x30
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4413      	add	r3, r2
 8003082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	1ac9      	subs	r1, r1, r3
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4403      	add	r3, r0
 800309c:	3338      	adds	r3, #56	; 0x38
 800309e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	334d      	adds	r3, #77	; 0x4d
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	3344      	adds	r3, #68	; 0x44
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	461a      	mov	r2, r3
 80030d6:	2301      	movs	r3, #1
 80030d8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3326      	adds	r3, #38	; 0x26
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3326      	adds	r3, #38	; 0x26
 8003100:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003102:	2b02      	cmp	r3, #2
 8003104:	d110      	bne.n	8003128 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f003 fb54 	bl	80067bc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	461a      	mov	r2, r3
 8003122:	2310      	movs	r3, #16
 8003124:	6093      	str	r3, [r2, #8]
 8003126:	e03d      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3326      	adds	r3, #38	; 0x26
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d00a      	beq.n	8003154 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	3326      	adds	r3, #38	; 0x26
 800314e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003150:	2b01      	cmp	r3, #1
 8003152:	d127      	bne.n	80031a4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	0151      	lsls	r1, r2, #5
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	440a      	add	r2, r1
 800316a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800316e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003172:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	334c      	adds	r3, #76	; 0x4c
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	334c      	adds	r3, #76	; 0x4c
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f007 f846 	bl	800a230 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	799b      	ldrb	r3, [r3, #6]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d13b      	bne.n	8003224 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3338      	adds	r3, #56	; 0x38
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4403      	add	r3, r0
 80031cc:	3328      	adds	r3, #40	; 0x28
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	440b      	add	r3, r1
 80031d2:	1e59      	subs	r1, r3, #1
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4403      	add	r3, r0
 80031e2:	3328      	adds	r3, #40	; 0x28
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8470 	beq.w	8003ad4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	333c      	adds	r3, #60	; 0x3c
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	f083 0301 	eor.w	r3, r3, #1
 800320c:	b2d8      	uxtb	r0, r3
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	333c      	adds	r3, #60	; 0x3c
 800321c:	4602      	mov	r2, r0
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	f000 bc58 	b.w	8003ad4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	333c      	adds	r3, #60	; 0x3c
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	f083 0301 	eor.w	r3, r3, #1
 800323c:	b2d8      	uxtb	r0, r3
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	333c      	adds	r3, #60	; 0x3c
 800324c:	4602      	mov	r2, r0
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	f000 bc40 	b.w	8003ad4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f003 fa30 	bl	80066c2 <USB_ReadChInterrupts>
 8003262:	4603      	mov	r3, r0
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b20      	cmp	r3, #32
 800326a:	d131      	bne.n	80032d0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	461a      	mov	r2, r3
 800327a:	2320      	movs	r3, #32
 800327c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	331a      	adds	r3, #26
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 841f 	bne.w	8003ad4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	331b      	adds	r3, #27
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	334d      	adds	r3, #77	; 0x4d
 80032ba:	2203      	movs	r2, #3
 80032bc:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 fa78 	bl	80067bc <USB_HC_Halt>
 80032cc:	f000 bc02 	b.w	8003ad4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 f9f2 	bl	80066c2 <USB_ReadChInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	f040 8305 	bne.w	80038f4 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	461a      	mov	r2, r3
 80032f8:	2302      	movs	r3, #2
 80032fa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	; 0x4d
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d114      	bne.n	800333c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	334d      	adds	r3, #77	; 0x4d
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334c      	adds	r3, #76	; 0x4c
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e2cc      	b.n	80038d6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334d      	adds	r3, #77	; 0x4d
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b06      	cmp	r3, #6
 8003350:	d114      	bne.n	800337c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334d      	adds	r3, #77	; 0x4d
 8003362:	2202      	movs	r2, #2
 8003364:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	334c      	adds	r3, #76	; 0x4c
 8003376:	2205      	movs	r2, #5
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e2ac      	b.n	80038d6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	334d      	adds	r3, #77	; 0x4d
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b07      	cmp	r3, #7
 8003390:	d00b      	beq.n	80033aa <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	334d      	adds	r3, #77	; 0x4d
 80033a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033a4:	2b09      	cmp	r3, #9
 80033a6:	f040 80a6 	bne.w	80034f6 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	334d      	adds	r3, #77	; 0x4d
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	3344      	adds	r3, #68	; 0x44
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	1c59      	adds	r1, r3, #1
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4403      	add	r3, r0
 80033de:	3344      	adds	r3, #68	; 0x44
 80033e0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	3344      	adds	r3, #68	; 0x44
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d943      	bls.n	8003480 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	3344      	adds	r3, #68	; 0x44
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	331a      	adds	r3, #26
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d123      	bne.n	800346a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	331b      	adds	r3, #27
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	331c      	adds	r3, #28
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4413      	add	r3, r2
 8003452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	0151      	lsls	r1, r2, #5
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	440a      	add	r2, r1
 8003460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003468:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	334c      	adds	r3, #76	; 0x4c
 800347a:	2204      	movs	r2, #4
 800347c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800347e:	e229      	b.n	80038d4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	334c      	adds	r3, #76	; 0x4c
 8003490:	2202      	movs	r2, #2
 8003492:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	3326      	adds	r3, #38	; 0x26
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3326      	adds	r3, #38	; 0x26
 80034ba:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034bc:	2b02      	cmp	r3, #2
 80034be:	f040 8209 	bne.w	80038d4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034d8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034e0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034f4:	e1ee      	b.n	80038d4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	334d      	adds	r3, #77	; 0x4d
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b05      	cmp	r3, #5
 800350a:	f040 80c8 	bne.w	800369e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	334d      	adds	r3, #77	; 0x4d
 800351e:	2202      	movs	r2, #2
 8003520:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	331b      	adds	r3, #27
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	f040 81ce 	bne.w	80038d6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3326      	adds	r3, #38	; 0x26
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d16b      	bne.n	8003628 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	3348      	adds	r3, #72	; 0x48
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1c59      	adds	r1, r3, #1
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4403      	add	r3, r0
 8003570:	3348      	adds	r3, #72	; 0x48
 8003572:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	3348      	adds	r3, #72	; 0x48
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d943      	bls.n	8003612 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3348      	adds	r3, #72	; 0x48
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	331b      	adds	r3, #27
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	3344      	adds	r3, #68	; 0x44
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d809      	bhi.n	80035dc <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	331c      	adds	r3, #28
 80035d8:	2201      	movs	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fa:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	334c      	adds	r3, #76	; 0x4c
 800360c:	2204      	movs	r2, #4
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	e014      	b.n	800363c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	334c      	adds	r3, #76	; 0x4c
 8003622:	2202      	movs	r2, #2
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e009      	b.n	800363c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	334c      	adds	r3, #76	; 0x4c
 8003638:	2202      	movs	r2, #2
 800363a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3326      	adds	r3, #38	; 0x26
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3326      	adds	r3, #38	; 0x26
 8003662:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003664:	2b02      	cmp	r3, #2
 8003666:	f040 8136 	bne.w	80038d6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003680:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003688:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4413      	add	r3, r2
 8003692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	e11b      	b.n	80038d6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	334d      	adds	r3, #77	; 0x4d
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	f040 8081 	bne.w	80037b8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	334d      	adds	r3, #77	; 0x4d
 80036c6:	2202      	movs	r2, #2
 80036c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	331b      	adds	r3, #27
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	f040 80fa 	bne.w	80038d6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	334c      	adds	r3, #76	; 0x4c
 80036f2:	2202      	movs	r2, #2
 80036f4:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	0151      	lsls	r1, r2, #5
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	440a      	add	r2, r1
 800370c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	0151      	lsls	r1, r2, #5
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	440a      	add	r2, r1
 800372c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003734:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	0151      	lsls	r1, r2, #5
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	440a      	add	r2, r1
 800374c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003750:	f023 0320 	bic.w	r3, r3, #32
 8003754:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	3326      	adds	r3, #38	; 0x26
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00b      	beq.n	8003784 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	3326      	adds	r3, #38	; 0x26
 800377c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800377e:	2b02      	cmp	r3, #2
 8003780:	f040 80a9 	bne.w	80038d6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800379a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	461a      	mov	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e08e      	b.n	80038d6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	334d      	adds	r3, #77	; 0x4d
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d143      	bne.n	8003856 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	334d      	adds	r3, #77	; 0x4d
 80037de:	2202      	movs	r2, #2
 80037e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	334c      	adds	r3, #76	; 0x4c
 80037f2:	2202      	movs	r2, #2
 80037f4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3326      	adds	r3, #38	; 0x26
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	3326      	adds	r3, #38	; 0x26
 800381c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800381e:	2b02      	cmp	r3, #2
 8003820:	d159      	bne.n	80038d6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4413      	add	r3, r2
 800382a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003838:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003840:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e03f      	b.n	80038d6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	334d      	adds	r3, #77	; 0x4d
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d126      	bne.n	80038ba <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	334d      	adds	r3, #77	; 0x4d
 800387c:	2202      	movs	r2, #2
 800387e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	3344      	adds	r3, #68	; 0x44
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	1c59      	adds	r1, r3, #1
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4403      	add	r3, r0
 80038a0:	3344      	adds	r3, #68	; 0x44
 80038a2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	334c      	adds	r3, #76	; 0x4c
 80038b4:	2204      	movs	r2, #4
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e00d      	b.n	80038d6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	334d      	adds	r3, #77	; 0x4d
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	f000 8100 	beq.w	8003ad2 <HCD_HC_IN_IRQHandler+0xcca>
 80038d2:	e000      	b.n	80038d6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038d4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	334c      	adds	r3, #76	; 0x4c
 80038e6:	781a      	ldrb	r2, [r3, #0]
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f006 fc9f 	bl	800a230 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038f2:	e0ef      	b.n	8003ad4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f002 fee0 	bl	80066c2 <USB_ReadChInterrupts>
 8003902:	4603      	mov	r3, r0
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d12f      	bne.n	800396c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4413      	add	r3, r2
 8003914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003918:	461a      	mov	r2, r3
 800391a:	2340      	movs	r3, #64	; 0x40
 800391c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	334d      	adds	r3, #77	; 0x4d
 800392e:	2205      	movs	r2, #5
 8003930:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	331a      	adds	r3, #26
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	3344      	adds	r3, #68	; 0x44
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f002 ff29 	bl	80067bc <USB_HC_Halt>
 800396a:	e0b3      	b.n	8003ad4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f002 fea4 	bl	80066c2 <USB_ReadChInterrupts>
 800397a:	4603      	mov	r3, r0
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b10      	cmp	r3, #16
 8003982:	f040 80a7 	bne.w	8003ad4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3326      	adds	r3, #38	; 0x26
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d11b      	bne.n	80039d4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3344      	adds	r3, #68	; 0x44
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	334d      	adds	r3, #77	; 0x4d
 80039c0:	2204      	movs	r2, #4
 80039c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 fef5 	bl	80067bc <USB_HC_Halt>
 80039d2:	e03f      	b.n	8003a54 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3326      	adds	r3, #38	; 0x26
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	3326      	adds	r3, #38	; 0x26
 80039fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d129      	bne.n	8003a54 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3344      	adds	r3, #68	; 0x44
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	799b      	ldrb	r3, [r3, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HCD_HC_IN_IRQHandler+0xc2a>
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	331b      	adds	r3, #27
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d110      	bne.n	8003a54 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	334d      	adds	r3, #77	; 0x4d
 8003a42:	2204      	movs	r2, #4
 8003a44:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f002 feb4 	bl	80067bc <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	331b      	adds	r3, #27
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d129      	bne.n	8003abe <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	331b      	adds	r3, #27
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	0151      	lsls	r1, r2, #5
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	440a      	add	r2, r1
 8003a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003a9e:	78fb      	ldrb	r3, [r7, #3]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	0151      	lsls	r1, r2, #5
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	440a      	add	r2, r1
 8003ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ab8:	f043 0320 	orr.w	r3, r3, #32
 8003abc:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aca:	461a      	mov	r2, r3
 8003acc:	2310      	movs	r3, #16
 8003ace:	6093      	str	r3, [r2, #8]
 8003ad0:	e000      	b.n	8003ad4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ad2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	4611      	mov	r1, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f002 fde2 	bl	80066c2 <USB_ReadChInterrupts>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d11b      	bne.n	8003b40 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2304      	movs	r3, #4
 8003b18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	334d      	adds	r3, #77	; 0x4d
 8003b2a:	2207      	movs	r2, #7
 8003b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f002 fe40 	bl	80067bc <USB_HC_Halt>
 8003b3c:	f000 bc6f 	b.w	800441e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f002 fdba 	bl	80066c2 <USB_ReadChInterrupts>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	f040 8082 	bne.w	8003c5e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b66:	461a      	mov	r2, r3
 8003b68:	2320      	movs	r3, #32
 8003b6a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	3319      	adds	r3, #25
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d124      	bne.n	8003bcc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	3319      	adds	r3, #25
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	334c      	adds	r3, #76	; 0x4c
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	334d      	adds	r3, #77	; 0x4d
 8003bba:	2203      	movs	r2, #3
 8003bbc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 fdf8 	bl	80067bc <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	331a      	adds	r3, #26
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	f040 841d 	bne.w	800441e <HCD_HC_OUT_IRQHandler+0x944>
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	331b      	adds	r3, #27
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f040 8411 	bne.w	800441e <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3326      	adds	r3, #38	; 0x26
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d009      	beq.n	8003c26 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	331b      	adds	r3, #27
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	334d      	adds	r3, #77	; 0x4d
 8003c36:	2203      	movs	r2, #3
 8003c38:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f002 fdba 	bl	80067bc <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	3344      	adds	r3, #68	; 0x44
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e3df      	b.n	800441e <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	4611      	mov	r1, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f002 fd2b 	bl	80066c2 <USB_ReadChInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c76:	d111      	bne.n	8003c9c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	461a      	mov	r2, r3
 8003c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c8a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f002 fd91 	bl	80067bc <USB_HC_Halt>
 8003c9a:	e3c0      	b.n	800441e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 fd0c 	bl	80066c2 <USB_ReadChInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d168      	bne.n	8003d86 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3344      	adds	r3, #68	; 0x44
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f002 fcf6 	bl	80066c2 <USB_ReadChInterrupts>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b40      	cmp	r3, #64	; 0x40
 8003cde:	d112      	bne.n	8003d06 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3319      	adds	r3, #25
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d00:	461a      	mov	r2, r3
 8003d02:	2340      	movs	r3, #64	; 0x40
 8003d04:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	331b      	adds	r3, #27
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d019      	beq.n	8003d50 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	331b      	adds	r3, #27
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2301      	movs	r3, #1
 8003d60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	334d      	adds	r3, #77	; 0x4d
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 fd1c 	bl	80067bc <USB_HC_Halt>
 8003d84:	e34b      	b.n	800441e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f002 fc97 	bl	80066c2 <USB_ReadChInterrupts>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d139      	bne.n	8003e12 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	334d      	adds	r3, #77	; 0x4d
 8003dae:	2205      	movs	r2, #5
 8003db0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	331a      	adds	r3, #26
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3319      	adds	r3, #25
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	3344      	adds	r3, #68	; 0x44
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f002 fcdf 	bl	80067bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2340      	movs	r3, #64	; 0x40
 8003e0e:	6093      	str	r3, [r2, #8]
 8003e10:	e305      	b.n	800441e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 fc51 	bl	80066c2 <USB_ReadChInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d11a      	bne.n	8003e60 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	461a      	mov	r2, r3
 8003e38:	2308      	movs	r3, #8
 8003e3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	334d      	adds	r3, #77	; 0x4d
 8003e4c:	2206      	movs	r2, #6
 8003e4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f002 fcaf 	bl	80067bc <USB_HC_Halt>
 8003e5e:	e2de      	b.n	800441e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 fc2a 	bl	80066c2 <USB_ReadChInterrupts>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d144      	bne.n	8003f02 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3344      	adds	r3, #68	; 0x44
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003e8c:	78fa      	ldrb	r2, [r7, #3]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	334d      	adds	r3, #77	; 0x4d
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	3319      	adds	r3, #25
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d114      	bne.n	8003ee0 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003eb6:	78fa      	ldrb	r2, [r7, #3]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	3318      	adds	r3, #24
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	3319      	adds	r3, #25
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f002 fc67 	bl	80067bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efa:	461a      	mov	r2, r3
 8003efc:	2310      	movs	r3, #16
 8003efe:	6093      	str	r3, [r2, #8]
 8003f00:	e28d      	b.n	800441e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	4611      	mov	r1, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f002 fbd9 	bl	80066c2 <USB_ReadChInterrupts>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b80      	cmp	r3, #128	; 0x80
 8003f18:	d169      	bne.n	8003fee <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	799b      	ldrb	r3, [r3, #6]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d111      	bne.n	8003f46 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	334d      	adds	r3, #77	; 0x4d
 8003f32:	2207      	movs	r2, #7
 8003f34:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f002 fc3c 	bl	80067bc <USB_HC_Halt>
 8003f44:	e049      	b.n	8003fda <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	3344      	adds	r3, #68	; 0x44
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1c59      	adds	r1, r3, #1
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4403      	add	r3, r0
 8003f66:	3344      	adds	r3, #68	; 0x44
 8003f68:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	3344      	adds	r3, #68	; 0x44
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d922      	bls.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f80:	78fa      	ldrb	r2, [r7, #3]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3344      	adds	r3, #68	; 0x44
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	334c      	adds	r3, #76	; 0x4c
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	334c      	adds	r3, #76	; 0x4c
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f006 f936 	bl	800a230 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003fc4:	e009      	b.n	8003fda <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	334c      	adds	r3, #76	; 0x4c
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	6093      	str	r3, [r2, #8]
 8003fec:	e217      	b.n	800441e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f002 fb63 	bl	80066c2 <USB_ReadChInterrupts>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004006:	d11b      	bne.n	8004040 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	334d      	adds	r3, #77	; 0x4d
 8004018:	2209      	movs	r2, #9
 800401a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f002 fbc9 	bl	80067bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004036:	461a      	mov	r2, r3
 8004038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403c:	6093      	str	r3, [r2, #8]
 800403e:	e1ee      	b.n	800441e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	4611      	mov	r1, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f002 fb3a 	bl	80066c2 <USB_ReadChInterrupts>
 800404e:	4603      	mov	r3, r0
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b02      	cmp	r3, #2
 8004056:	f040 81df 	bne.w	8004418 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4413      	add	r3, r2
 8004062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004066:	461a      	mov	r2, r3
 8004068:	2302      	movs	r3, #2
 800406a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	334d      	adds	r3, #77	; 0x4d
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	f040 8093 	bne.w	80041aa <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	334d      	adds	r3, #77	; 0x4d
 8004094:	2202      	movs	r2, #2
 8004096:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	334c      	adds	r3, #76	; 0x4c
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	3326      	adds	r3, #38	; 0x26
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d00b      	beq.n	80040da <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	3326      	adds	r3, #38	; 0x26
 80040d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	f040 8190 	bne.w	80043fa <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	799b      	ldrb	r3, [r3, #6]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d115      	bne.n	800410e <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	333d      	adds	r3, #61	; 0x3d
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	f083 0301 	eor.w	r3, r3, #1
 80040fa:	b2d8      	uxtb	r0, r3
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	333d      	adds	r3, #61	; 0x3d
 800410a:	4602      	mov	r2, r0
 800410c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	799b      	ldrb	r3, [r3, #6]
 8004112:	2b01      	cmp	r3, #1
 8004114:	f040 8171 	bne.w	80043fa <HCD_HC_OUT_IRQHandler+0x920>
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3334      	adds	r3, #52	; 0x34
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8165 	beq.w	80043fa <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3334      	adds	r3, #52	; 0x34
 8004140:	6819      	ldr	r1, [r3, #0]
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4403      	add	r3, r0
 8004150:	3328      	adds	r3, #40	; 0x28
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	440b      	add	r3, r1
 8004156:	1e59      	subs	r1, r3, #1
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4403      	add	r3, r0
 8004166:	3328      	adds	r3, #40	; 0x28
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	fbb1 f3f3 	udiv	r3, r1, r3
 800416e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 813f 	beq.w	80043fa <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	333d      	adds	r3, #61	; 0x3d
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	f083 0301 	eor.w	r3, r3, #1
 8004194:	b2d8      	uxtb	r0, r3
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	333d      	adds	r3, #61	; 0x3d
 80041a4:	4602      	mov	r2, r0
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e127      	b.n	80043fa <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	334d      	adds	r3, #77	; 0x4d
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d120      	bne.n	8004202 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	334d      	adds	r3, #77	; 0x4d
 80041d0:	2202      	movs	r2, #2
 80041d2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	331b      	adds	r3, #27
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	f040 8107 	bne.w	80043fa <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	334c      	adds	r3, #76	; 0x4c
 80041fc:	2202      	movs	r2, #2
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e0fb      	b.n	80043fa <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004202:	78fa      	ldrb	r2, [r7, #3]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	334d      	adds	r3, #77	; 0x4d
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b04      	cmp	r3, #4
 8004216:	d13a      	bne.n	800428e <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	334d      	adds	r3, #77	; 0x4d
 8004228:	2202      	movs	r2, #2
 800422a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	334c      	adds	r3, #76	; 0x4c
 800423c:	2202      	movs	r2, #2
 800423e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	331b      	adds	r3, #27
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	f040 80d1 	bne.w	80043fa <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	331b      	adds	r3, #27
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	440a      	add	r2, r1
 8004282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428a:	6053      	str	r3, [r2, #4]
 800428c:	e0b5      	b.n	80043fa <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	334d      	adds	r3, #77	; 0x4d
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b05      	cmp	r3, #5
 80042a2:	d114      	bne.n	80042ce <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	334d      	adds	r3, #77	; 0x4d
 80042b4:	2202      	movs	r2, #2
 80042b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	334c      	adds	r3, #76	; 0x4c
 80042c8:	2202      	movs	r2, #2
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	e095      	b.n	80043fa <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	334d      	adds	r3, #77	; 0x4d
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d114      	bne.n	800430e <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	334d      	adds	r3, #77	; 0x4d
 80042f4:	2202      	movs	r2, #2
 80042f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	334c      	adds	r3, #76	; 0x4c
 8004308:	2205      	movs	r2, #5
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e075      	b.n	80043fa <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	334d      	adds	r3, #77	; 0x4d
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b07      	cmp	r3, #7
 8004322:	d00a      	beq.n	800433a <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	334d      	adds	r3, #77	; 0x4d
 8004334:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004336:	2b09      	cmp	r3, #9
 8004338:	d170      	bne.n	800441c <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	334d      	adds	r3, #77	; 0x4d
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	3344      	adds	r3, #68	; 0x44
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	1c59      	adds	r1, r3, #1
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4403      	add	r3, r0
 800436e:	3344      	adds	r3, #68	; 0x44
 8004370:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	3344      	adds	r3, #68	; 0x44
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d914      	bls.n	80043b2 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004388:	78fa      	ldrb	r2, [r7, #3]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	3344      	adds	r3, #68	; 0x44
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800439c:	78fa      	ldrb	r2, [r7, #3]
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	334c      	adds	r3, #76	; 0x4c
 80043ac:	2204      	movs	r2, #4
 80043ae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043b0:	e022      	b.n	80043f8 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	334c      	adds	r3, #76	; 0x4c
 80043c2:	2202      	movs	r2, #2
 80043c4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043dc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043e4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f2:	461a      	mov	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043f8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	334c      	adds	r3, #76	; 0x4c
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f005 ff0d 	bl	800a230 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004416:	e002      	b.n	800441e <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004418:	bf00      	nop
 800441a:	e000      	b.n	800441e <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800441c:	bf00      	nop
  }
}
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	0c5b      	lsrs	r3, r3, #17
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004458:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d004      	beq.n	800446a <HCD_RXQLVL_IRQHandler+0x46>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b05      	cmp	r3, #5
 8004464:	f000 80b6 	beq.w	80045d4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004468:	e0b7      	b.n	80045da <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80b3 	beq.w	80045d8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	332c      	adds	r3, #44	; 0x2c
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a7 	beq.w	80045d8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	3338      	adds	r3, #56	; 0x38
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	18d1      	adds	r1, r2, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4613      	mov	r3, r2
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4403      	add	r3, r0
 80044ae:	3334      	adds	r3, #52	; 0x34
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4299      	cmp	r1, r3
 80044b4:	f200 8083 	bhi.w	80045be <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	332c      	adds	r3, #44	; 0x2c
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	b292      	uxth	r2, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	f002 f88a 	bl	80065ec <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	332c      	adds	r3, #44	; 0x2c
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	18d1      	adds	r1, r2, r3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4403      	add	r3, r0
 80044fc:	332c      	adds	r3, #44	; 0x2c
 80044fe:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	3338      	adds	r3, #56	; 0x38
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	18d1      	adds	r1, r2, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4403      	add	r3, r0
 8004524:	3338      	adds	r3, #56	; 0x38
 8004526:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	0cdb      	lsrs	r3, r3, #19
 8004538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800453c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	3328      	adds	r3, #40	; 0x28
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4293      	cmp	r3, r2
 8004556:	d13f      	bne.n	80045d8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d03c      	beq.n	80045d8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	4413      	add	r3, r2
 8004566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004574:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800457c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4613      	mov	r3, r2
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	333c      	adds	r3, #60	; 0x3c
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	f083 0301 	eor.w	r3, r3, #1
 80045a6:	b2d8      	uxtb	r0, r3
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	333c      	adds	r3, #60	; 0x3c
 80045b8:	4602      	mov	r2, r0
 80045ba:	701a      	strb	r2, [r3, #0]
      break;
 80045bc:	e00c      	b.n	80045d8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4613      	mov	r3, r2
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	334c      	adds	r3, #76	; 0x4c
 80045ce:	2204      	movs	r2, #4
 80045d0:	701a      	strb	r2, [r3, #0]
      break;
 80045d2:	e001      	b.n	80045d8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80045d4:	bf00      	nop
 80045d6:	e000      	b.n	80045da <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80045d8:	bf00      	nop
  }
}
 80045da:	bf00      	nop
 80045dc:	3728      	adds	r7, #40	; 0x28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800460e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b02      	cmp	r3, #2
 8004618:	d10b      	bne.n	8004632 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b01      	cmp	r3, #1
 8004622:	d102      	bne.n	800462a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f005 fde7 	bl	800a1f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f043 0302 	orr.w	r3, r3, #2
 8004630:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b08      	cmp	r3, #8
 800463a:	d132      	bne.n	80046a2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f043 0308 	orr.w	r3, r3, #8
 8004642:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b04      	cmp	r3, #4
 800464c:	d126      	bne.n	800469c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	7a5b      	ldrb	r3, [r3, #9]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d113      	bne.n	800467e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800465c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004660:	d106      	bne.n	8004670 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2102      	movs	r1, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f002 f859 	bl	8006720 <USB_InitFSLSPClkSel>
 800466e:	e011      	b.n	8004694 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f002 f852 	bl	8006720 <USB_InitFSLSPClkSel>
 800467c:	e00a      	b.n	8004694 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	79db      	ldrb	r3, [r3, #7]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d106      	bne.n	8004694 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800468c:	461a      	mov	r2, r3
 800468e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004692:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f005 fddd 	bl	800a254 <HAL_HCD_PortEnabled_Callback>
 800469a:	e002      	b.n	80046a2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f005 fde7 	bl	800a270 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d103      	bne.n	80046b4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f043 0320 	orr.w	r3, r3, #32
 80046b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046ba:	461a      	mov	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6013      	str	r3, [r2, #0]
}
 80046c0:	bf00      	nop
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e12b      	b.n	8004932 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fc f9f4 	bl	8000adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800471a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800472a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800472c:	f001 fa20 	bl	8005b70 <HAL_RCC_GetPCLK1Freq>
 8004730:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4a81      	ldr	r2, [pc, #516]	; (800493c <HAL_I2C_Init+0x274>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d807      	bhi.n	800474c <HAL_I2C_Init+0x84>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4a80      	ldr	r2, [pc, #512]	; (8004940 <HAL_I2C_Init+0x278>)
 8004740:	4293      	cmp	r3, r2
 8004742:	bf94      	ite	ls
 8004744:	2301      	movls	r3, #1
 8004746:	2300      	movhi	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e006      	b.n	800475a <HAL_I2C_Init+0x92>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a7d      	ldr	r2, [pc, #500]	; (8004944 <HAL_I2C_Init+0x27c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	bf94      	ite	ls
 8004754:	2301      	movls	r3, #1
 8004756:	2300      	movhi	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e0e7      	b.n	8004932 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a78      	ldr	r2, [pc, #480]	; (8004948 <HAL_I2C_Init+0x280>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	0c9b      	lsrs	r3, r3, #18
 800476c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a6a      	ldr	r2, [pc, #424]	; (800493c <HAL_I2C_Init+0x274>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d802      	bhi.n	800479c <HAL_I2C_Init+0xd4>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	3301      	adds	r3, #1
 800479a:	e009      	b.n	80047b0 <HAL_I2C_Init+0xe8>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	4a69      	ldr	r2, [pc, #420]	; (800494c <HAL_I2C_Init+0x284>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	099b      	lsrs	r3, r3, #6
 80047ae:	3301      	adds	r3, #1
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	495c      	ldr	r1, [pc, #368]	; (800493c <HAL_I2C_Init+0x274>)
 80047cc:	428b      	cmp	r3, r1
 80047ce:	d819      	bhi.n	8004804 <HAL_I2C_Init+0x13c>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1e59      	subs	r1, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	fbb1 f3f3 	udiv	r3, r1, r3
 80047de:	1c59      	adds	r1, r3, #1
 80047e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047e4:	400b      	ands	r3, r1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_I2C_Init+0x138>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1e59      	subs	r1, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fe:	e051      	b.n	80048a4 <HAL_I2C_Init+0x1dc>
 8004800:	2304      	movs	r3, #4
 8004802:	e04f      	b.n	80048a4 <HAL_I2C_Init+0x1dc>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d111      	bne.n	8004830 <HAL_I2C_Init+0x168>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1e58      	subs	r0, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	440b      	add	r3, r1
 800481a:	fbb0 f3f3 	udiv	r3, r0, r3
 800481e:	3301      	adds	r3, #1
 8004820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e012      	b.n	8004856 <HAL_I2C_Init+0x18e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1e58      	subs	r0, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	0099      	lsls	r1, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	fbb0 f3f3 	udiv	r3, r0, r3
 8004846:	3301      	adds	r3, #1
 8004848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_Init+0x196>
 800485a:	2301      	movs	r3, #1
 800485c:	e022      	b.n	80048a4 <HAL_I2C_Init+0x1dc>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10e      	bne.n	8004884 <HAL_I2C_Init+0x1bc>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1e58      	subs	r0, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6859      	ldr	r1, [r3, #4]
 800486e:	460b      	mov	r3, r1
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	440b      	add	r3, r1
 8004874:	fbb0 f3f3 	udiv	r3, r0, r3
 8004878:	3301      	adds	r3, #1
 800487a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004882:	e00f      	b.n	80048a4 <HAL_I2C_Init+0x1dc>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1e58      	subs	r0, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	0099      	lsls	r1, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	fbb0 f3f3 	udiv	r3, r0, r3
 800489a:	3301      	adds	r3, #1
 800489c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	6809      	ldr	r1, [r1, #0]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6911      	ldr	r1, [r2, #16]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68d2      	ldr	r2, [r2, #12]
 80048de:	4311      	orrs	r1, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695a      	ldr	r2, [r3, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	000186a0 	.word	0x000186a0
 8004940:	001e847f 	.word	0x001e847f
 8004944:	003d08ff 	.word	0x003d08ff
 8004948:	431bde83 	.word	0x431bde83
 800494c:	10624dd3 	.word	0x10624dd3

08004950 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e128      	b.n	8004bb4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a90      	ldr	r2, [pc, #576]	; (8004bbc <HAL_I2S_Init+0x26c>)
 800497a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7fc f8f5 	bl	8000b6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004998:	f023 030f 	bic.w	r3, r3, #15
 800499c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2202      	movs	r2, #2
 80049a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d060      	beq.n	8004a70 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80049b6:	2310      	movs	r3, #16
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e001      	b.n	80049c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80049bc:	2320      	movs	r3, #32
 80049be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d802      	bhi.n	80049ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80049ce:	2001      	movs	r0, #1
 80049d0:	f001 fa0a 	bl	8005de8 <HAL_RCCEx_GetPeriphCLKFreq>
 80049d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049de:	d125      	bne.n	8004a2c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d010      	beq.n	8004a0a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a04:	3305      	adds	r3, #5
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	e01f      	b.n	8004a4a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	3305      	adds	r3, #5
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	e00e      	b.n	8004a4a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	3305      	adds	r3, #5
 8004a48:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4a5c      	ldr	r2, [pc, #368]	; (8004bc0 <HAL_I2S_Init+0x270>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	08db      	lsrs	r3, r3, #3
 8004a54:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e003      	b.n	8004a78 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004a70:	2302      	movs	r3, #2
 8004a72:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d902      	bls.n	8004a84 <HAL_I2S_Init+0x134>
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2bff      	cmp	r3, #255	; 0xff
 8004a82:	d907      	bls.n	8004a94 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	f043 0210 	orr.w	r2, r3, #16
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e08f      	b.n	8004bb4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	ea42 0103 	orr.w	r1, r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ab2:	f023 030f 	bic.w	r3, r3, #15
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6851      	ldr	r1, [r2, #4]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6892      	ldr	r2, [r2, #8]
 8004abe:	4311      	orrs	r1, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	68d2      	ldr	r2, [r2, #12]
 8004ac4:	4311      	orrs	r1, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6992      	ldr	r2, [r2, #24]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d161      	bne.n	8004ba4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <HAL_I2S_Init+0x274>)
 8004ae4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a37      	ldr	r2, [pc, #220]	; (8004bc8 <HAL_I2S_Init+0x278>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d101      	bne.n	8004af4 <HAL_I2S_Init+0x1a4>
 8004af0:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <HAL_I2S_Init+0x27c>)
 8004af2:	e001      	b.n	8004af8 <HAL_I2S_Init+0x1a8>
 8004af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	4932      	ldr	r1, [pc, #200]	; (8004bc8 <HAL_I2S_Init+0x278>)
 8004b00:	428a      	cmp	r2, r1
 8004b02:	d101      	bne.n	8004b08 <HAL_I2S_Init+0x1b8>
 8004b04:	4a31      	ldr	r2, [pc, #196]	; (8004bcc <HAL_I2S_Init+0x27c>)
 8004b06:	e001      	b.n	8004b0c <HAL_I2S_Init+0x1bc>
 8004b08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004b0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b10:	f023 030f 	bic.w	r3, r3, #15
 8004b14:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2b      	ldr	r2, [pc, #172]	; (8004bc8 <HAL_I2S_Init+0x278>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d101      	bne.n	8004b24 <HAL_I2S_Init+0x1d4>
 8004b20:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <HAL_I2S_Init+0x27c>)
 8004b22:	e001      	b.n	8004b28 <HAL_I2S_Init+0x1d8>
 8004b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b28:	2202      	movs	r2, #2
 8004b2a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <HAL_I2S_Init+0x278>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <HAL_I2S_Init+0x1ea>
 8004b36:	4b25      	ldr	r3, [pc, #148]	; (8004bcc <HAL_I2S_Init+0x27c>)
 8004b38:	e001      	b.n	8004b3e <HAL_I2S_Init+0x1ee>
 8004b3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b4a:	d003      	beq.n	8004b54 <HAL_I2S_Init+0x204>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d103      	bne.n	8004b5c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	e001      	b.n	8004b60 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b74:	4313      	orrs	r3, r2
 8004b76:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	897b      	ldrh	r3, [r7, #10]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b8c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a0d      	ldr	r2, [pc, #52]	; (8004bc8 <HAL_I2S_Init+0x278>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_I2S_Init+0x24c>
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_I2S_Init+0x27c>)
 8004b9a:	e001      	b.n	8004ba0 <HAL_I2S_Init+0x250>
 8004b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ba0:	897a      	ldrh	r2, [r7, #10]
 8004ba2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	08004cc7 	.word	0x08004cc7
 8004bc0:	cccccccd 	.word	0xcccccccd
 8004bc4:	08004ddd 	.word	0x08004ddd
 8004bc8:	40003800 	.word	0x40003800
 8004bcc:	40003400 	.word	0x40003400

08004bd0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	881a      	ldrh	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	1c9a      	adds	r2, r3, #2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10e      	bne.n	8004c60 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c50:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ffb8 	bl	8004bd0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	1c9a      	adds	r2, r3, #2
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10e      	bne.n	8004cbe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ff93 	bl	8004be4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d13a      	bne.n	8004d58 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d109      	bne.n	8004d00 <I2S_IRQHandler+0x3a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d102      	bne.n	8004d00 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ffb4 	bl	8004c68 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d126      	bne.n	8004d58 <I2S_IRQHandler+0x92>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d11f      	bne.n	8004d58 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	f043 0202 	orr.w	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff ff50 	bl	8004bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d136      	bne.n	8004dd2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d109      	bne.n	8004d82 <I2S_IRQHandler+0xbc>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d78:	2b80      	cmp	r3, #128	; 0x80
 8004d7a:	d102      	bne.n	8004d82 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff45 	bl	8004c0c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d122      	bne.n	8004dd2 <I2S_IRQHandler+0x10c>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d11b      	bne.n	8004dd2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004da8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc4:	f043 0204 	orr.w	r2, r3, #4
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff13 	bl	8004bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dd2:	bf00      	nop
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a92      	ldr	r2, [pc, #584]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d101      	bne.n	8004dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004df6:	4b92      	ldr	r3, [pc, #584]	; (8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004df8:	e001      	b.n	8004dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a8b      	ldr	r2, [pc, #556]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004e14:	4b8a      	ldr	r3, [pc, #552]	; (8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e16:	e001      	b.n	8004e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e28:	d004      	beq.n	8004e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f040 8099 	bne.w	8004f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d107      	bne.n	8004e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f925 	bl	8005098 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d107      	bne.n	8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f9c8 	bl	80051f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d13a      	bne.n	8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d035      	beq.n	8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a6e      	ldr	r2, [pc, #440]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d101      	bne.n	8004e8a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004e86:	4b6e      	ldr	r3, [pc, #440]	; (8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e88:	e001      	b.n	8004e8e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4969      	ldr	r1, [pc, #420]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e96:	428b      	cmp	r3, r1
 8004e98:	d101      	bne.n	8004e9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004e9a:	4b69      	ldr	r3, [pc, #420]	; (8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e9c:	e001      	b.n	8004ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ea2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ea6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eb6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	f043 0202 	orr.w	r2, r3, #2
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff fe88 	bl	8004bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	f040 80c3 	bne.w	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80bd 	beq.w	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a49      	ldr	r2, [pc, #292]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004f1a:	4b49      	ldr	r3, [pc, #292]	; (8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f1c:	e001      	b.n	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004f1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4944      	ldr	r1, [pc, #272]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f2a:	428b      	cmp	r3, r1
 8004f2c:	d101      	bne.n	8004f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f2e:	4b44      	ldr	r3, [pc, #272]	; (8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f30:	e001      	b.n	8004f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f3a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f043 0204 	orr.w	r2, r3, #4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fe4a 	bl	8004bf8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f64:	e089      	b.n	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d107      	bne.n	8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8be 	bl	80050fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d107      	bne.n	8004f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f8fd 	bl	8005194 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d12f      	bne.n	8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d02a      	beq.n	8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fbc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fca:	e001      	b.n	8004fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4919      	ldr	r1, [pc, #100]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	d101      	bne.n	8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004fdc:	4b18      	ldr	r3, [pc, #96]	; (8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fde:	e001      	b.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fe8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	f043 0202 	orr.w	r2, r3, #2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fdfa 	bl	8004bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b08      	cmp	r3, #8
 800500c:	d136      	bne.n	800507c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d031      	beq.n	800507c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a07      	ldr	r2, [pc, #28]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d101      	bne.n	8005026 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005022:	4b07      	ldr	r3, [pc, #28]	; (8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005024:	e001      	b.n	800502a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4902      	ldr	r1, [pc, #8]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005032:	428b      	cmp	r3, r1
 8005034:	d106      	bne.n	8005044 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005036:	4b02      	ldr	r3, [pc, #8]	; (8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005038:	e006      	b.n	8005048 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800503a:	bf00      	nop
 800503c:	40003800 	.word	0x40003800
 8005040:	40003400 	.word	0x40003400
 8005044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005048:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800504c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800505c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	f043 0204 	orr.w	r2, r3, #4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff fdc0 	bl	8004bf8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005078:	e000      	b.n	800507c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800507a:	bf00      	nop
}
 800507c:	bf00      	nop
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	1c99      	adds	r1, r3, #2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6251      	str	r1, [r2, #36]	; 0x24
 80050aa:	881a      	ldrh	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d113      	bne.n	80050f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ffc9 	bl	8005084 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	1c99      	adds	r1, r3, #2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6251      	str	r1, [r2, #36]	; 0x24
 800510e:	8819      	ldrh	r1, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1d      	ldr	r2, [pc, #116]	; (800518c <I2SEx_TxISR_I2SExt+0x90>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d101      	bne.n	800511e <I2SEx_TxISR_I2SExt+0x22>
 800511a:	4b1d      	ldr	r3, [pc, #116]	; (8005190 <I2SEx_TxISR_I2SExt+0x94>)
 800511c:	e001      	b.n	8005122 <I2SEx_TxISR_I2SExt+0x26>
 800511e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005122:	460a      	mov	r2, r1
 8005124:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d121      	bne.n	8005182 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <I2SEx_TxISR_I2SExt+0x90>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d101      	bne.n	800514c <I2SEx_TxISR_I2SExt+0x50>
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <I2SEx_TxISR_I2SExt+0x94>)
 800514a:	e001      	b.n	8005150 <I2SEx_TxISR_I2SExt+0x54>
 800514c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	490d      	ldr	r1, [pc, #52]	; (800518c <I2SEx_TxISR_I2SExt+0x90>)
 8005158:	428b      	cmp	r3, r1
 800515a:	d101      	bne.n	8005160 <I2SEx_TxISR_I2SExt+0x64>
 800515c:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <I2SEx_TxISR_I2SExt+0x94>)
 800515e:	e001      	b.n	8005164 <I2SEx_TxISR_I2SExt+0x68>
 8005160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005164:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005168:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff ff81 	bl	8005084 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40003800 	.word	0x40003800
 8005190:	40003400 	.word	0x40003400

08005194 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68d8      	ldr	r0, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	1c99      	adds	r1, r3, #2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051ac:	b282      	uxth	r2, r0
 80051ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d113      	bne.n	80051f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff ff4a 	bl	8005084 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a20      	ldr	r2, [pc, #128]	; (8005288 <I2SEx_RxISR_I2SExt+0x90>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d101      	bne.n	800520e <I2SEx_RxISR_I2SExt+0x16>
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <I2SEx_RxISR_I2SExt+0x94>)
 800520c:	e001      	b.n	8005212 <I2SEx_RxISR_I2SExt+0x1a>
 800520e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005212:	68d8      	ldr	r0, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	1c99      	adds	r1, r3, #2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800521e:	b282      	uxth	r2, r0
 8005220:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d121      	bne.n	800527e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a12      	ldr	r2, [pc, #72]	; (8005288 <I2SEx_RxISR_I2SExt+0x90>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d101      	bne.n	8005248 <I2SEx_RxISR_I2SExt+0x50>
 8005244:	4b11      	ldr	r3, [pc, #68]	; (800528c <I2SEx_RxISR_I2SExt+0x94>)
 8005246:	e001      	b.n	800524c <I2SEx_RxISR_I2SExt+0x54>
 8005248:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	490d      	ldr	r1, [pc, #52]	; (8005288 <I2SEx_RxISR_I2SExt+0x90>)
 8005254:	428b      	cmp	r3, r1
 8005256:	d101      	bne.n	800525c <I2SEx_RxISR_I2SExt+0x64>
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <I2SEx_RxISR_I2SExt+0x94>)
 800525a:	e001      	b.n	8005260 <I2SEx_RxISR_I2SExt+0x68>
 800525c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005260:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005264:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff ff03 	bl	8005084 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40003800 	.word	0x40003800
 800528c:	40003400 	.word	0x40003400

08005290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e267      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d075      	beq.n	800539a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ae:	4b88      	ldr	r3, [pc, #544]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d00c      	beq.n	80052d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ba:	4b85      	ldr	r3, [pc, #532]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d112      	bne.n	80052ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c6:	4b82      	ldr	r3, [pc, #520]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052d2:	d10b      	bne.n	80052ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d4:	4b7e      	ldr	r3, [pc, #504]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d05b      	beq.n	8005398 <HAL_RCC_OscConfig+0x108>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d157      	bne.n	8005398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e242      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f4:	d106      	bne.n	8005304 <HAL_RCC_OscConfig+0x74>
 80052f6:	4b76      	ldr	r3, [pc, #472]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a75      	ldr	r2, [pc, #468]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e01d      	b.n	8005340 <HAL_RCC_OscConfig+0xb0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x98>
 800530e:	4b70      	ldr	r3, [pc, #448]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a6f      	ldr	r2, [pc, #444]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	4b6d      	ldr	r3, [pc, #436]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a6c      	ldr	r2, [pc, #432]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0xb0>
 8005328:	4b69      	ldr	r3, [pc, #420]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a68      	ldr	r2, [pc, #416]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800532e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	4b66      	ldr	r3, [pc, #408]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a65      	ldr	r2, [pc, #404]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800533a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d013      	beq.n	8005370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fd f974 	bl	8002634 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005350:	f7fd f970 	bl	8002634 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e207      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b5b      	ldr	r3, [pc, #364]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0xc0>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005370:	f7fd f960 	bl	8002634 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005378:	f7fd f95c 	bl	8002634 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e1f3      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800538a:	4b51      	ldr	r3, [pc, #324]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0xe8>
 8005396:	e000      	b.n	800539a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d063      	beq.n	800546e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a6:	4b4a      	ldr	r3, [pc, #296]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053b2:	4b47      	ldr	r3, [pc, #284]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d11c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053be:	4b44      	ldr	r3, [pc, #272]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d116      	bne.n	80053f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ca:	4b41      	ldr	r3, [pc, #260]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <HAL_RCC_OscConfig+0x152>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d001      	beq.n	80053e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e1c7      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e2:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4937      	ldr	r1, [pc, #220]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f6:	e03a      	b.n	800546e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d020      	beq.n	8005442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005400:	4b34      	ldr	r3, [pc, #208]	; (80054d4 <HAL_RCC_OscConfig+0x244>)
 8005402:	2201      	movs	r2, #1
 8005404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005406:	f7fd f915 	bl	8002634 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800540e:	f7fd f911 	bl	8002634 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e1a8      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005420:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542c:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4925      	ldr	r1, [pc, #148]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800543c:	4313      	orrs	r3, r2
 800543e:	600b      	str	r3, [r1, #0]
 8005440:	e015      	b.n	800546e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005442:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <HAL_RCC_OscConfig+0x244>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fd f8f4 	bl	8002634 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005450:	f7fd f8f0 	bl	8002634 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e187      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005462:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d036      	beq.n	80054e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005482:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <HAL_RCC_OscConfig+0x248>)
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005488:	f7fd f8d4 	bl	8002634 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005490:	f7fd f8d0 	bl	8002634 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e167      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80054a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f0      	beq.n	8005490 <HAL_RCC_OscConfig+0x200>
 80054ae:	e01b      	b.n	80054e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <HAL_RCC_OscConfig+0x248>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b6:	f7fd f8bd 	bl	8002634 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054bc:	e00e      	b.n	80054dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054be:	f7fd f8b9 	bl	8002634 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d907      	bls.n	80054dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e150      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
 80054d0:	40023800 	.word	0x40023800
 80054d4:	42470000 	.word	0x42470000
 80054d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054dc:	4b88      	ldr	r3, [pc, #544]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80054de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ea      	bne.n	80054be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8097 	beq.w	8005624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054fa:	4b81      	ldr	r3, [pc, #516]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10f      	bne.n	8005526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005506:	2300      	movs	r3, #0
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	4b7d      	ldr	r3, [pc, #500]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	4a7c      	ldr	r2, [pc, #496]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005514:	6413      	str	r3, [r2, #64]	; 0x40
 8005516:	4b7a      	ldr	r3, [pc, #488]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005522:	2301      	movs	r3, #1
 8005524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005526:	4b77      	ldr	r3, [pc, #476]	; (8005704 <HAL_RCC_OscConfig+0x474>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d118      	bne.n	8005564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005532:	4b74      	ldr	r3, [pc, #464]	; (8005704 <HAL_RCC_OscConfig+0x474>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a73      	ldr	r2, [pc, #460]	; (8005704 <HAL_RCC_OscConfig+0x474>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553e:	f7fd f879 	bl	8002634 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7fd f875 	bl	8002634 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e10c      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005558:	4b6a      	ldr	r3, [pc, #424]	; (8005704 <HAL_RCC_OscConfig+0x474>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d106      	bne.n	800557a <HAL_RCC_OscConfig+0x2ea>
 800556c:	4b64      	ldr	r3, [pc, #400]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 800556e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005570:	4a63      	ldr	r2, [pc, #396]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005572:	f043 0301 	orr.w	r3, r3, #1
 8005576:	6713      	str	r3, [r2, #112]	; 0x70
 8005578:	e01c      	b.n	80055b4 <HAL_RCC_OscConfig+0x324>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b05      	cmp	r3, #5
 8005580:	d10c      	bne.n	800559c <HAL_RCC_OscConfig+0x30c>
 8005582:	4b5f      	ldr	r3, [pc, #380]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	4a5e      	ldr	r2, [pc, #376]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005588:	f043 0304 	orr.w	r3, r3, #4
 800558c:	6713      	str	r3, [r2, #112]	; 0x70
 800558e:	4b5c      	ldr	r3, [pc, #368]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	4a5b      	ldr	r2, [pc, #364]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6713      	str	r3, [r2, #112]	; 0x70
 800559a:	e00b      	b.n	80055b4 <HAL_RCC_OscConfig+0x324>
 800559c:	4b58      	ldr	r3, [pc, #352]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	4a57      	ldr	r2, [pc, #348]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	6713      	str	r3, [r2, #112]	; 0x70
 80055a8:	4b55      	ldr	r3, [pc, #340]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	4a54      	ldr	r2, [pc, #336]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80055ae:	f023 0304 	bic.w	r3, r3, #4
 80055b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d015      	beq.n	80055e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7fd f83a 	bl	8002634 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c2:	e00a      	b.n	80055da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c4:	f7fd f836 	bl	8002634 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e0cb      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055da:	4b49      	ldr	r3, [pc, #292]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ee      	beq.n	80055c4 <HAL_RCC_OscConfig+0x334>
 80055e6:	e014      	b.n	8005612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e8:	f7fd f824 	bl	8002634 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7fd f820 	bl	8002634 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e0b5      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005606:	4b3e      	ldr	r3, [pc, #248]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1ee      	bne.n	80055f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005612:	7dfb      	ldrb	r3, [r7, #23]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d105      	bne.n	8005624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005618:	4b39      	ldr	r3, [pc, #228]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	4a38      	ldr	r2, [pc, #224]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 800561e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005622:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 80a1 	beq.w	8005770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800562e:	4b34      	ldr	r3, [pc, #208]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b08      	cmp	r3, #8
 8005638:	d05c      	beq.n	80056f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d141      	bne.n	80056c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005642:	4b31      	ldr	r3, [pc, #196]	; (8005708 <HAL_RCC_OscConfig+0x478>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7fc fff4 	bl	8002634 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005650:	f7fc fff0 	bl	8002634 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e087      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005662:	4b27      	ldr	r3, [pc, #156]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	3b01      	subs	r3, #1
 8005688:	041b      	lsls	r3, r3, #16
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	061b      	lsls	r3, r3, #24
 8005692:	491b      	ldr	r1, [pc, #108]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005694:	4313      	orrs	r3, r2
 8005696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005698:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <HAL_RCC_OscConfig+0x478>)
 800569a:	2201      	movs	r2, #1
 800569c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569e:	f7fc ffc9 	bl	8002634 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a6:	f7fc ffc5 	bl	8002634 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e05c      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b8:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x416>
 80056c4:	e054      	b.n	8005770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c6:	4b10      	ldr	r3, [pc, #64]	; (8005708 <HAL_RCC_OscConfig+0x478>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056cc:	f7fc ffb2 	bl	8002634 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d4:	f7fc ffae 	bl	8002634 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e045      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0x444>
 80056f2:	e03d      	b.n	8005770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d107      	bne.n	800570c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e038      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
 8005700:	40023800 	.word	0x40023800
 8005704:	40007000 	.word	0x40007000
 8005708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800570c:	4b1b      	ldr	r3, [pc, #108]	; (800577c <HAL_RCC_OscConfig+0x4ec>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d028      	beq.n	800576c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d121      	bne.n	800576c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d11a      	bne.n	800576c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800573c:	4013      	ands	r3, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005744:	4293      	cmp	r3, r2
 8005746:	d111      	bne.n	800576c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	3b01      	subs	r3, #1
 8005756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d107      	bne.n	800576c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40023800 	.word	0x40023800

08005780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e0cc      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005794:	4b68      	ldr	r3, [pc, #416]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d90c      	bls.n	80057bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a2:	4b65      	ldr	r3, [pc, #404]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b63      	ldr	r3, [pc, #396]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0b8      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d020      	beq.n	800580a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057d4:	4b59      	ldr	r3, [pc, #356]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4a58      	ldr	r2, [pc, #352]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057ec:	4b53      	ldr	r3, [pc, #332]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4a52      	ldr	r2, [pc, #328]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057f8:	4b50      	ldr	r3, [pc, #320]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	494d      	ldr	r1, [pc, #308]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	4313      	orrs	r3, r2
 8005808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d044      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d107      	bne.n	800582e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581e:	4b47      	ldr	r3, [pc, #284]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d119      	bne.n	800585e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e07f      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d003      	beq.n	800583e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800583a:	2b03      	cmp	r3, #3
 800583c:	d107      	bne.n	800584e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583e:	4b3f      	ldr	r3, [pc, #252]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e06f      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584e:	4b3b      	ldr	r3, [pc, #236]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e067      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800585e:	4b37      	ldr	r3, [pc, #220]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f023 0203 	bic.w	r2, r3, #3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	4934      	ldr	r1, [pc, #208]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	4313      	orrs	r3, r2
 800586e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005870:	f7fc fee0 	bl	8002634 <HAL_GetTick>
 8005874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005876:	e00a      	b.n	800588e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005878:	f7fc fedc 	bl	8002634 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f241 3288 	movw	r2, #5000	; 0x1388
 8005886:	4293      	cmp	r3, r2
 8005888:	d901      	bls.n	800588e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e04f      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588e:	4b2b      	ldr	r3, [pc, #172]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 020c 	and.w	r2, r3, #12
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	429a      	cmp	r2, r3
 800589e:	d1eb      	bne.n	8005878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058a0:	4b25      	ldr	r3, [pc, #148]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d20c      	bcs.n	80058c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ae:	4b22      	ldr	r3, [pc, #136]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b6:	4b20      	ldr	r3, [pc, #128]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d001      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e032      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d4:	4b19      	ldr	r3, [pc, #100]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	4916      	ldr	r1, [pc, #88]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	490e      	ldr	r1, [pc, #56]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	4313      	orrs	r3, r2
 8005904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005906:	f000 f821 	bl	800594c <HAL_RCC_GetSysClockFreq>
 800590a:	4602      	mov	r2, r0
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	490a      	ldr	r1, [pc, #40]	; (8005940 <HAL_RCC_ClockConfig+0x1c0>)
 8005918:	5ccb      	ldrb	r3, [r1, r3]
 800591a:	fa22 f303 	lsr.w	r3, r2, r3
 800591e:	4a09      	ldr	r2, [pc, #36]	; (8005944 <HAL_RCC_ClockConfig+0x1c4>)
 8005920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005922:	4b09      	ldr	r3, [pc, #36]	; (8005948 <HAL_RCC_ClockConfig+0x1c8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7fb fa0a 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40023c00 	.word	0x40023c00
 800593c:	40023800 	.word	0x40023800
 8005940:	0800acb4 	.word	0x0800acb4
 8005944:	20000000 	.word	0x20000000
 8005948:	20000010 	.word	0x20000010

0800594c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800594c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005950:	b094      	sub	sp, #80	; 0x50
 8005952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	647b      	str	r3, [r7, #68]	; 0x44
 8005958:	2300      	movs	r3, #0
 800595a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800595c:	2300      	movs	r3, #0
 800595e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005964:	4b79      	ldr	r3, [pc, #484]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 030c 	and.w	r3, r3, #12
 800596c:	2b08      	cmp	r3, #8
 800596e:	d00d      	beq.n	800598c <HAL_RCC_GetSysClockFreq+0x40>
 8005970:	2b08      	cmp	r3, #8
 8005972:	f200 80e1 	bhi.w	8005b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_RCC_GetSysClockFreq+0x34>
 800597a:	2b04      	cmp	r3, #4
 800597c:	d003      	beq.n	8005986 <HAL_RCC_GetSysClockFreq+0x3a>
 800597e:	e0db      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005980:	4b73      	ldr	r3, [pc, #460]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005982:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005984:	e0db      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005986:	4b73      	ldr	r3, [pc, #460]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8005988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800598a:	e0d8      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800598c:	4b6f      	ldr	r3, [pc, #444]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005994:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005996:	4b6d      	ldr	r3, [pc, #436]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d063      	beq.n	8005a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059a2:	4b6a      	ldr	r3, [pc, #424]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	099b      	lsrs	r3, r3, #6
 80059a8:	2200      	movs	r2, #0
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30
 80059b6:	2300      	movs	r3, #0
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059be:	4622      	mov	r2, r4
 80059c0:	462b      	mov	r3, r5
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	0159      	lsls	r1, r3, #5
 80059cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059d0:	0150      	lsls	r0, r2, #5
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4621      	mov	r1, r4
 80059d8:	1a51      	subs	r1, r2, r1
 80059da:	6139      	str	r1, [r7, #16]
 80059dc:	4629      	mov	r1, r5
 80059de:	eb63 0301 	sbc.w	r3, r3, r1
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059f0:	4659      	mov	r1, fp
 80059f2:	018b      	lsls	r3, r1, #6
 80059f4:	4651      	mov	r1, sl
 80059f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059fa:	4651      	mov	r1, sl
 80059fc:	018a      	lsls	r2, r1, #6
 80059fe:	4651      	mov	r1, sl
 8005a00:	ebb2 0801 	subs.w	r8, r2, r1
 8005a04:	4659      	mov	r1, fp
 8005a06:	eb63 0901 	sbc.w	r9, r3, r1
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a1e:	4690      	mov	r8, r2
 8005a20:	4699      	mov	r9, r3
 8005a22:	4623      	mov	r3, r4
 8005a24:	eb18 0303 	adds.w	r3, r8, r3
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	eb49 0303 	adc.w	r3, r9, r3
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a3e:	4629      	mov	r1, r5
 8005a40:	024b      	lsls	r3, r1, #9
 8005a42:	4621      	mov	r1, r4
 8005a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a48:	4621      	mov	r1, r4
 8005a4a:	024a      	lsls	r2, r1, #9
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a52:	2200      	movs	r2, #0
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a5c:	f7fa fbb8 	bl	80001d0 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4613      	mov	r3, r2
 8005a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a68:	e058      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a6a:	4b38      	ldr	r3, [pc, #224]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	099b      	lsrs	r3, r3, #6
 8005a70:	2200      	movs	r2, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	4611      	mov	r1, r2
 8005a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a7a:	623b      	str	r3, [r7, #32]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a84:	4642      	mov	r2, r8
 8005a86:	464b      	mov	r3, r9
 8005a88:	f04f 0000 	mov.w	r0, #0
 8005a8c:	f04f 0100 	mov.w	r1, #0
 8005a90:	0159      	lsls	r1, r3, #5
 8005a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a96:	0150      	lsls	r0, r2, #5
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005abc:	ebb2 040a 	subs.w	r4, r2, sl
 8005ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	00eb      	lsls	r3, r5, #3
 8005ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ad2:	00e2      	lsls	r2, r4, #3
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	461d      	mov	r5, r3
 8005ad8:	4643      	mov	r3, r8
 8005ada:	18e3      	adds	r3, r4, r3
 8005adc:	603b      	str	r3, [r7, #0]
 8005ade:	464b      	mov	r3, r9
 8005ae0:	eb45 0303 	adc.w	r3, r5, r3
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005af2:	4629      	mov	r1, r5
 8005af4:	028b      	lsls	r3, r1, #10
 8005af6:	4621      	mov	r1, r4
 8005af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005afc:	4621      	mov	r1, r4
 8005afe:	028a      	lsls	r2, r1, #10
 8005b00:	4610      	mov	r0, r2
 8005b02:	4619      	mov	r1, r3
 8005b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b06:	2200      	movs	r2, #0
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	61fa      	str	r2, [r7, #28]
 8005b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b10:	f7fa fb5e 	bl	80001d0 <__aeabi_uldivmod>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4613      	mov	r3, r2
 8005b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	3301      	adds	r3, #1
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b36:	e002      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3750      	adds	r7, #80	; 0x50
 8005b44:	46bd      	mov	sp, r7
 8005b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	00f42400 	.word	0x00f42400
 8005b54:	007a1200 	.word	0x007a1200

08005b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b5c:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000000 	.word	0x20000000

08005b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b74:	f7ff fff0 	bl	8005b58 <HAL_RCC_GetHCLKFreq>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	0a9b      	lsrs	r3, r3, #10
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	4903      	ldr	r1, [pc, #12]	; (8005b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b86:	5ccb      	ldrb	r3, [r1, r3]
 8005b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40023800 	.word	0x40023800
 8005b94:	0800acc4 	.word	0x0800acc4

08005b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b9c:	f7ff ffdc 	bl	8005b58 <HAL_RCC_GetHCLKFreq>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	0b5b      	lsrs	r3, r3, #13
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	4903      	ldr	r1, [pc, #12]	; (8005bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bae:	5ccb      	ldrb	r3, [r1, r3]
 8005bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	0800acc4 	.word	0x0800acc4

08005bc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	220f      	movs	r2, #15
 8005bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005bd0:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0203 	and.w	r2, r3, #3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	08db      	lsrs	r3, r3, #3
 8005bfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <HAL_RCC_GetClockConfig+0x60>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0207 	and.w	r2, r3, #7
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	601a      	str	r2, [r3, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40023c00 	.word	0x40023c00

08005c24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d105      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d035      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c4c:	4b62      	ldr	r3, [pc, #392]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c52:	f7fc fcef 	bl	8002634 <HAL_GetTick>
 8005c56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c58:	e008      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c5a:	f7fc fceb 	bl	8002634 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e0b0      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c6c:	4b5b      	ldr	r3, [pc, #364]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f0      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	019a      	lsls	r2, r3, #6
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	071b      	lsls	r3, r3, #28
 8005c84:	4955      	ldr	r1, [pc, #340]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c8c:	4b52      	ldr	r3, [pc, #328]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c92:	f7fc fccf 	bl	8002634 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c98:	e008      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c9a:	f7fc fccb 	bl	8002634 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e090      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cac:	4b4b      	ldr	r3, [pc, #300]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0f0      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8083 	beq.w	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	4b44      	ldr	r3, [pc, #272]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	4a43      	ldr	r2, [pc, #268]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd6:	4b41      	ldr	r3, [pc, #260]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ce2:	4b3f      	ldr	r3, [pc, #252]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a3e      	ldr	r2, [pc, #248]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cee:	f7fc fca1 	bl	8002634 <HAL_GetTick>
 8005cf2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cf6:	f7fc fc9d 	bl	8002634 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e062      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d08:	4b35      	ldr	r3, [pc, #212]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0f0      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d14:	4b31      	ldr	r3, [pc, #196]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d02f      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d028      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d32:	4b2a      	ldr	r3, [pc, #168]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d3c:	4b29      	ldr	r3, [pc, #164]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d42:	4b28      	ldr	r3, [pc, #160]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d48:	4a24      	ldr	r2, [pc, #144]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d4e:	4b23      	ldr	r3, [pc, #140]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d114      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d5a:	f7fc fc6b 	bl	8002634 <HAL_GetTick>
 8005d5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d60:	e00a      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d62:	f7fc fc67 	bl	8002634 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e02a      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d78:	4b18      	ldr	r3, [pc, #96]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0ee      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d90:	d10d      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d92:	4b12      	ldr	r3, [pc, #72]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da6:	490d      	ldr	r1, [pc, #52]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	608b      	str	r3, [r1, #8]
 8005dac:	e005      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	4a0a      	ldr	r2, [pc, #40]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005db8:	6093      	str	r3, [r2, #8]
 8005dba:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc6:	4905      	ldr	r1, [pc, #20]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	42470068 	.word	0x42470068
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	40007000 	.word	0x40007000
 8005de4:	42470e40 	.word	0x42470e40

08005de8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d13f      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e06:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d006      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e1c:	d12f      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e1e:	4b1f      	ldr	r3, [pc, #124]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e20:	617b      	str	r3, [r7, #20]
          break;
 8005e22:	e02f      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e24:	4b1c      	ldr	r3, [pc, #112]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e30:	d108      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e32:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e3a:	4a19      	ldr	r2, [pc, #100]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	e007      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e44:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e4c:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e52:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e54:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5a:	099b      	lsrs	r3, r3, #6
 8005e5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e6e:	0f1b      	lsrs	r3, r3, #28
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7a:	617b      	str	r3, [r7, #20]
          break;
 8005e7c:	e002      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
          break;
 8005e82:	bf00      	nop
        }
      }
      break;
 8005e84:	e000      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005e86:	bf00      	nop
    }
  }
  return frequency;
 8005e88:	697b      	ldr	r3, [r7, #20]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	00bb8000 	.word	0x00bb8000
 8005ea0:	007a1200 	.word	0x007a1200
 8005ea4:	00f42400 	.word	0x00f42400

08005ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e07b      	b.n	8005fb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d108      	bne.n	8005ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eca:	d009      	beq.n	8005ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	61da      	str	r2, [r3, #28]
 8005ed2:	e005      	b.n	8005ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fa feb6 	bl	8000c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	ea42 0103 	orr.w	r1, r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	f003 0104 	and.w	r1, r3, #4
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	f003 0210 	and.w	r2, r3, #16
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e041      	b.n	8006050 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7fa fe8b 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f000 f9b5 	bl	8006368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d001      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e04e      	b.n	800610e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a23      	ldr	r2, [pc, #140]	; (800611c <HAL_TIM_Base_Start_IT+0xc4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d022      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d01d      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <HAL_TIM_Base_Start_IT+0xc8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d018      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <HAL_TIM_Base_Start_IT+0xcc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d013      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1c      	ldr	r2, [pc, #112]	; (8006128 <HAL_TIM_Base_Start_IT+0xd0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00e      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_TIM_Base_Start_IT+0xd4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d009      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a19      	ldr	r2, [pc, #100]	; (8006130 <HAL_TIM_Base_Start_IT+0xd8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a18      	ldr	r2, [pc, #96]	; (8006134 <HAL_TIM_Base_Start_IT+0xdc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d111      	bne.n	80060fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b06      	cmp	r3, #6
 80060e8:	d010      	beq.n	800610c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fa:	e007      	b.n	800610c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40010000 	.word	0x40010000
 8006120:	40000400 	.word	0x40000400
 8006124:	40000800 	.word	0x40000800
 8006128:	40000c00 	.word	0x40000c00
 800612c:	40010400 	.word	0x40010400
 8006130:	40014000 	.word	0x40014000
 8006134:	40001800 	.word	0x40001800

08006138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d020      	beq.n	800619c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01b      	beq.n	800619c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0202 	mvn.w	r2, #2
 800616c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8d2 	bl	800632c <HAL_TIM_IC_CaptureCallback>
 8006188:	e005      	b.n	8006196 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f8c4 	bl	8006318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f8d5 	bl	8006340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d020      	beq.n	80061e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0204 	mvn.w	r2, #4
 80061b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2202      	movs	r2, #2
 80061be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f8ac 	bl	800632c <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f89e 	bl	8006318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f8af 	bl	8006340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d020      	beq.n	8006234 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01b      	beq.n	8006234 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0208 	mvn.w	r2, #8
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2204      	movs	r2, #4
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f886 	bl	800632c <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f878 	bl	8006318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f889 	bl	8006340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b00      	cmp	r3, #0
 800623c:	d020      	beq.n	8006280 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01b      	beq.n	8006280 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0210 	mvn.w	r2, #16
 8006250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2208      	movs	r2, #8
 8006256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f860 	bl	800632c <HAL_TIM_IC_CaptureCallback>
 800626c:	e005      	b.n	800627a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f852 	bl	8006318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f863 	bl	8006340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00c      	beq.n	80062a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0201 	mvn.w	r2, #1
 800629c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fa fbd8 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00c      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d007      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f906 	bl	80064d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00c      	beq.n	80062ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f834 	bl	8006354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00c      	beq.n	8006310 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0220 	mvn.w	r2, #32
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f8d8 	bl	80064c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a46      	ldr	r2, [pc, #280]	; (8006494 <TIM_Base_SetConfig+0x12c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <TIM_Base_SetConfig+0x40>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006386:	d00f      	beq.n	80063a8 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a43      	ldr	r2, [pc, #268]	; (8006498 <TIM_Base_SetConfig+0x130>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00b      	beq.n	80063a8 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a42      	ldr	r2, [pc, #264]	; (800649c <TIM_Base_SetConfig+0x134>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d007      	beq.n	80063a8 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a41      	ldr	r2, [pc, #260]	; (80064a0 <TIM_Base_SetConfig+0x138>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a40      	ldr	r2, [pc, #256]	; (80064a4 <TIM_Base_SetConfig+0x13c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d108      	bne.n	80063ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a35      	ldr	r2, [pc, #212]	; (8006494 <TIM_Base_SetConfig+0x12c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d02b      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c8:	d027      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a32      	ldr	r2, [pc, #200]	; (8006498 <TIM_Base_SetConfig+0x130>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d023      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a31      	ldr	r2, [pc, #196]	; (800649c <TIM_Base_SetConfig+0x134>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d01f      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a30      	ldr	r2, [pc, #192]	; (80064a0 <TIM_Base_SetConfig+0x138>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01b      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2f      	ldr	r2, [pc, #188]	; (80064a4 <TIM_Base_SetConfig+0x13c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d017      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2e      	ldr	r2, [pc, #184]	; (80064a8 <TIM_Base_SetConfig+0x140>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2d      	ldr	r2, [pc, #180]	; (80064ac <TIM_Base_SetConfig+0x144>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00f      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <TIM_Base_SetConfig+0x148>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00b      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a2b      	ldr	r2, [pc, #172]	; (80064b4 <TIM_Base_SetConfig+0x14c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d007      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2a      	ldr	r2, [pc, #168]	; (80064b8 <TIM_Base_SetConfig+0x150>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d003      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a29      	ldr	r2, [pc, #164]	; (80064bc <TIM_Base_SetConfig+0x154>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d108      	bne.n	800642c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a10      	ldr	r2, [pc, #64]	; (8006494 <TIM_Base_SetConfig+0x12c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d003      	beq.n	8006460 <TIM_Base_SetConfig+0xf8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a12      	ldr	r2, [pc, #72]	; (80064a4 <TIM_Base_SetConfig+0x13c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d103      	bne.n	8006468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b01      	cmp	r3, #1
 8006478:	d105      	bne.n	8006486 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f023 0201 	bic.w	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	611a      	str	r2, [r3, #16]
  }
}
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40010000 	.word	0x40010000
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40010400 	.word	0x40010400
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40014400 	.word	0x40014400
 80064b0:	40014800 	.word	0x40014800
 80064b4:	40001800 	.word	0x40001800
 80064b8:	40001c00 	.word	0x40001c00
 80064bc:	40002000 	.word	0x40002000

080064c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f043 0201 	orr.w	r2, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f023 0201 	bic.w	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3301      	adds	r3, #1
 800653e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006546:	d901      	bls.n	800654c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e01b      	b.n	8006584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	daf2      	bge.n	800653a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	019b      	lsls	r3, r3, #6
 800655c:	f043 0220 	orr.w	r2, r3, #32
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006570:	d901      	bls.n	8006576 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e006      	b.n	8006584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d0f0      	beq.n	8006564 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065a8:	d901      	bls.n	80065ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e018      	b.n	80065e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	daf2      	bge.n	800659c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2210      	movs	r2, #16
 80065be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065cc:	d901      	bls.n	80065d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e006      	b.n	80065e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0310 	and.w	r3, r3, #16
 80065da:	2b10      	cmp	r3, #16
 80065dc:	d0f0      	beq.n	80065c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b08b      	sub	sp, #44	; 0x2c
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	089b      	lsrs	r3, r3, #2
 8006606:	b29b      	uxth	r3, r3
 8006608:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006612:	2300      	movs	r3, #0
 8006614:	623b      	str	r3, [r7, #32]
 8006616:	e014      	b.n	8006642 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	601a      	str	r2, [r3, #0]
    pDest++;
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	3301      	adds	r3, #1
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	3301      	adds	r3, #1
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	3301      	adds	r3, #1
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	3301      	adds	r3, #1
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	3301      	adds	r3, #1
 8006640:	623b      	str	r3, [r7, #32]
 8006642:	6a3a      	ldr	r2, [r7, #32]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	429a      	cmp	r2, r3
 8006648:	d3e6      	bcc.n	8006618 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800664a:	8bfb      	ldrh	r3, [r7, #30]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01e      	beq.n	800668e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665a:	461a      	mov	r2, r3
 800665c:	f107 0310 	add.w	r3, r7, #16
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	b2da      	uxtb	r2, r3
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	701a      	strb	r2, [r3, #0]
      i++;
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	3301      	adds	r3, #1
 800667a:	623b      	str	r3, [r7, #32]
      pDest++;
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	3301      	adds	r3, #1
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006682:	8bfb      	ldrh	r3, [r7, #30]
 8006684:	3b01      	subs	r3, #1
 8006686:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006688:	8bfb      	ldrh	r3, [r7, #30]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1ea      	bne.n	8006664 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006690:	4618      	mov	r0, r3
 8006692:	372c      	adds	r7, #44	; 0x2c
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4013      	ands	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066b4:	68fb      	ldr	r3, [r7, #12]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066f6:	68bb      	ldr	r3, [r7, #8]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	f003 0301 	and.w	r3, r3, #1
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	68f9      	ldr	r1, [r7, #12]
 8006754:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006758:	4313      	orrs	r3, r2
 800675a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d107      	bne.n	8006772 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006768:	461a      	mov	r2, r3
 800676a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800676e:	6053      	str	r3, [r2, #4]
 8006770:	e00c      	b.n	800678c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d107      	bne.n	8006788 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677e:	461a      	mov	r2, r3
 8006780:	f241 7370 	movw	r3, #6000	; 0x1770
 8006784:	6053      	str	r3, [r2, #4]
 8006786:	e001      	b.n	800678c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	b29b      	uxth	r3, r3
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067bc:	b480      	push	{r7}
 80067be:	b089      	sub	sp, #36	; 0x24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	0c9b      	lsrs	r3, r3, #18
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	0fdb      	lsrs	r3, r3, #31
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	0fdb      	lsrs	r3, r3, #31
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b20      	cmp	r3, #32
 8006820:	d10d      	bne.n	800683e <USB_HC_Halt+0x82>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <USB_HC_Halt+0x82>
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d002      	beq.n	800683a <USB_HC_Halt+0x7e>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d101      	bne.n	800683e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	e0d8      	b.n	80069f0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <USB_HC_Halt+0x8e>
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d173      	bne.n	8006932 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	440a      	add	r2, r1
 8006860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006868:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	d14a      	bne.n	800690c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d133      	bne.n	80068ea <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	0151      	lsls	r1, r2, #5
 8006894:	69fa      	ldr	r2, [r7, #28]
 8006896:	440a      	add	r2, r1
 8006898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800689c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	0151      	lsls	r1, r2, #5
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	440a      	add	r2, r1
 80068b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068c0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	3301      	adds	r3, #1
 80068c6:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ce:	d82e      	bhi.n	800692e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068e6:	d0ec      	beq.n	80068c2 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068e8:	e081      	b.n	80069ee <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	0151      	lsls	r1, r2, #5
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	440a      	add	r2, r1
 8006900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006908:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800690a:	e070      	b.n	80069ee <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	440a      	add	r2, r1
 8006922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800692a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800692c:	e05f      	b.n	80069ee <USB_HC_Halt+0x232>
            break;
 800692e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006930:	e05d      	b.n	80069ee <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	440a      	add	r2, r1
 8006948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006950:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d133      	bne.n	80069ca <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	440a      	add	r2, r1
 8006978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800697c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006980:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	4413      	add	r3, r2
 800698a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	440a      	add	r2, r1
 8006998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069a0:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	3301      	adds	r3, #1
 80069a6:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ae:	d81d      	bhi.n	80069ec <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c6:	d0ec      	beq.n	80069a2 <USB_HC_Halt+0x1e6>
 80069c8:	e011      	b.n	80069ee <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	0151      	lsls	r1, r2, #5
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	440a      	add	r2, r1
 80069e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	e000      	b.n	80069ee <USB_HC_Halt+0x232>
          break;
 80069ec:	bf00      	nop
    }
  }

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3724      	adds	r7, #36	; 0x24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fd7a 	bl	800650a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a16:	2110      	movs	r1, #16
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff fd87 	bl	800652c <USB_FlushTxFifo>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fdb1 	bl	8006590 <USB_FlushRxFifo>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	e01f      	b.n	8006a7e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a64:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a72:	461a      	mov	r2, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b0f      	cmp	r3, #15
 8006a82:	d9dc      	bls.n	8006a3e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a84:	2300      	movs	r3, #0
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	e034      	b.n	8006af4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aa8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ab0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	461a      	mov	r2, r3
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ad0:	d80c      	bhi.n	8006aec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ae8:	d0ec      	beq.n	8006ac4 <USB_StopHost+0xc8>
 8006aea:	e000      	b.n	8006aee <USB_StopHost+0xf2>
        break;
 8006aec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	3301      	adds	r3, #1
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d9c7      	bls.n	8006a8a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b00:	461a      	mov	r2, r3
 8006b02:	f04f 33ff 	mov.w	r3, #4294967295
 8006b06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fce9 	bl	80064e8 <USB_EnableGlobalInt>

  return ret;
 8006b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f804 	bl	8006b44 <USBH_HandleSof>
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b0b      	cmp	r3, #11
 8006b54:	d10a      	bne.n	8006b6c <USBH_HandleSof+0x28>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	4798      	blx	r3
  }
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	f000 f8ae 	bl	8006cfc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006ba0:	bf00      	nop
}
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006bb8:	bf00      	nop
}
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f000 f87e 	bl	8006cfc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f003 fb2e 	bl	800a28c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	791b      	ldrb	r3, [r3, #4]
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f830 	bl	8006c9c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	795b      	ldrb	r3, [r3, #5]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f82a 	bl	8006c9c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4619      	mov	r1, r3
 8006c60:	f000 f84c 	bl	8006cfc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	f000 f835 	bl	8006cfc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	2b0f      	cmp	r3, #15
 8006cac:	d80d      	bhi.n	8006cca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	33e0      	adds	r3, #224	; 0xe0
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	33e0      	adds	r3, #224	; 0xe0
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cde:	f3ef 8305 	mrs	r3, IPSR
 8006ce2:	607b      	str	r3, [r7, #4]
  return(result);
 8006ce4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bf14      	ite	ne
 8006cea:	2301      	movne	r3, #1
 8006cec:	2300      	moveq	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <osMessagePut+0x1e>
    ticks = 1;
 8006d16:	2301      	movs	r3, #1
 8006d18:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006d1a:	f7ff ffdd 	bl	8006cd8 <inHandlerMode>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d018      	beq.n	8006d56 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006d24:	f107 0210 	add.w	r2, r7, #16
 8006d28:	f107 0108 	add.w	r1, r7, #8
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fc58 	bl	80075e4 <xQueueGenericSendFromISR>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d001      	beq.n	8006d3e <osMessagePut+0x42>
      return osErrorOS;
 8006d3a:	23ff      	movs	r3, #255	; 0xff
 8006d3c:	e018      	b.n	8006d70 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d014      	beq.n	8006d6e <osMessagePut+0x72>
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <osMessagePut+0x7c>)
 8006d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	e00b      	b.n	8006d6e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006d56:	f107 0108 	add.w	r1, r7, #8
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fa16 	bl	8007190 <xQueueGenericSend>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d001      	beq.n	8006d6e <osMessagePut+0x72>
      return osErrorOS;
 8006d6a:	23ff      	movs	r3, #255	; 0xff
 8006d6c:	e000      	b.n	8006d70 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f103 0208 	add.w	r2, r3, #8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f04f 32ff 	mov.w	r2, #4294967295
 8006d94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f103 0208 	add.w	r2, r3, #8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f103 0208 	add.w	r2, r3, #8
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
}
 8006e12:	bf00      	nop
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b085      	sub	sp, #20
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e34:	d103      	bne.n	8006e3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	e00c      	b.n	8006e58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3308      	adds	r3, #8
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e002      	b.n	8006e4c <vListInsert+0x2e>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d2f6      	bcs.n	8006e46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
}
 8006e84:	bf00      	nop
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6892      	ldr	r2, [r2, #8]
 8006ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6852      	ldr	r2, [r2, #4]
 8006eb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d103      	bne.n	8006ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	1e5a      	subs	r2, r3, #1
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f0e:	f002 fe41 	bl	8009b94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f1e:	fb01 f303 	mul.w	r3, r1, r3
 8006f22:	441a      	add	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	68f9      	ldr	r1, [r7, #12]
 8006f42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f44:	fb01 f303 	mul.w	r3, r1, r3
 8006f48:	441a      	add	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	22ff      	movs	r2, #255	; 0xff
 8006f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	22ff      	movs	r2, #255	; 0xff
 8006f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d114      	bne.n	8006f8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01a      	beq.n	8006fa2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3310      	adds	r3, #16
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 fdc9 	bl	8008b08 <xTaskRemoveFromEventList>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d012      	beq.n	8006fa2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <xQueueGenericReset+0xcc>)
 8006f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	e009      	b.n	8006fa2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3310      	adds	r3, #16
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff fef2 	bl	8006d7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3324      	adds	r3, #36	; 0x24
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff feed 	bl	8006d7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fa2:	f002 fe27 	bl	8009bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fa6:	2301      	movs	r3, #1
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	; 0x28
 8006fb8:	af02      	add	r7, sp, #8
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <xQueueGenericCreate+0x2a>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	613b      	str	r3, [r7, #16]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	fb02 f303 	mul.w	r3, r2, r3
 8006fe6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	3354      	adds	r3, #84	; 0x54
 8006fec:	4618      	mov	r0, r3
 8006fee:	f002 fef3 	bl	8009dd8 <pvPortMalloc>
 8006ff2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00e      	beq.n	8007018 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	3354      	adds	r3, #84	; 0x54
 8007002:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007004:	79fa      	ldrb	r2, [r7, #7]
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	4613      	mov	r3, r2
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 f825 	bl	8007060 <prvInitialiseNewQueue>
 8007016:	e01a      	b.n	800704e <xQueueGenericCreate+0x9a>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8007018:	f7fa f811 	bl	800103e <prvTraceGetCurrentTaskHandle>
 800701c:	4603      	mov	r3, r0
 800701e:	4618      	mov	r0, r3
 8007020:	f7f9 ff8c 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8007024:	4603      	mov	r3, r0
 8007026:	461a      	mov	r2, r3
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <xQueueGenericCreate+0xa4>)
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	4013      	ands	r3, r2
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00c      	beq.n	800704e <xQueueGenericCreate+0x9a>
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	4a09      	ldr	r2, [pc, #36]	; (800705c <xQueueGenericCreate+0xa8>)
 8007038:	5cd3      	ldrb	r3, [r2, r3]
 800703a:	3340      	adds	r3, #64	; 0x40
 800703c:	b2db      	uxtb	r3, r3
 800703e:	4618      	mov	r0, r3
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	4a06      	ldr	r2, [pc, #24]	; (800705c <xQueueGenericCreate+0xa8>)
 8007044:	5cd3      	ldrb	r3, [r2, r3]
 8007046:	2200      	movs	r2, #0
 8007048:	4619      	mov	r1, r3
 800704a:	f7fa fc99 	bl	8001980 <prvTraceStoreKernelCall>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800704e:	69bb      	ldr	r3, [r7, #24]
	}
 8007050:	4618      	mov	r0, r3
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000240 	.word	0x20000240
 800705c:	20000004 	.word	0x20000004

08007060 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007060:	b5b0      	push	{r4, r5, r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d103      	bne.n	800707c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e002      	b.n	8007082 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800708e:	2101      	movs	r1, #1
 8007090:	6a38      	ldr	r0, [r7, #32]
 8007092:	f7ff ff27 	bl	8006ee4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	78fa      	ldrb	r2, [r7, #3]
 800709a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	2200      	movs	r2, #0
 80070a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80070a4:	6a38      	ldr	r0, [r7, #32]
 80070a6:	f7f9 ff30 	bl	8000f0a <prvTraceGetQueueType>
 80070aa:	4603      	mov	r3, r0
 80070ac:	461a      	mov	r2, r3
 80070ae:	4b35      	ldr	r3, [pc, #212]	; (8007184 <prvInitialiseNewQueue+0x124>)
 80070b0:	5c9b      	ldrb	r3, [r3, r2]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fa ff2a 	bl	8001f0c <prvTraceGetObjectHandle>
 80070b8:	4603      	mov	r3, r0
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4619      	mov	r1, r3
 80070be:	6a38      	ldr	r0, [r7, #32]
 80070c0:	f7f9 ff91 	bl	8000fe6 <prvTraceSetQueueNumberLow16>
 80070c4:	4b30      	ldr	r3, [pc, #192]	; (8007188 <prvInitialiseNewQueue+0x128>)
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	4619      	mov	r1, r3
 80070ca:	6a38      	ldr	r0, [r7, #32]
 80070cc:	f7f9 ffa1 	bl	8001012 <prvTraceSetQueueNumberHigh16>
 80070d0:	6a38      	ldr	r0, [r7, #32]
 80070d2:	f7f9 ff1a 	bl	8000f0a <prvTraceGetQueueType>
 80070d6:	4603      	mov	r3, r0
 80070d8:	461a      	mov	r2, r3
 80070da:	4b2a      	ldr	r3, [pc, #168]	; (8007184 <prvInitialiseNewQueue+0x124>)
 80070dc:	5c9c      	ldrb	r4, [r3, r2]
 80070de:	6a38      	ldr	r0, [r7, #32]
 80070e0:	f7f9 ff66 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 80070e4:	4603      	mov	r3, r0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	4619      	mov	r1, r3
 80070ea:	4620      	mov	r0, r4
 80070ec:	f7fa ffa6 	bl	800203c <prvMarkObjectAsUsed>
 80070f0:	f7f9 ffa5 	bl	800103e <prvTraceGetCurrentTaskHandle>
 80070f4:	4603      	mov	r3, r0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7f9 ff20 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461a      	mov	r2, r3
 8007100:	4b22      	ldr	r3, [pc, #136]	; (800718c <prvInitialiseNewQueue+0x12c>)
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	4013      	ands	r3, r2
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d025      	beq.n	8007158 <prvInitialiseNewQueue+0xf8>
 800710c:	6a38      	ldr	r0, [r7, #32]
 800710e:	f7f9 ff5c 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 8007112:	4603      	mov	r3, r0
 8007114:	461a      	mov	r2, r3
 8007116:	4b1d      	ldr	r3, [pc, #116]	; (800718c <prvInitialiseNewQueue+0x12c>)
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	4013      	ands	r3, r2
 800711c:	b29b      	uxth	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01a      	beq.n	8007158 <prvInitialiseNewQueue+0xf8>
 8007122:	6a38      	ldr	r0, [r7, #32]
 8007124:	f7f9 fef1 	bl	8000f0a <prvTraceGetQueueType>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	4b15      	ldr	r3, [pc, #84]	; (8007184 <prvInitialiseNewQueue+0x124>)
 800712e:	5c9b      	ldrb	r3, [r3, r2]
 8007130:	3318      	adds	r3, #24
 8007132:	b2db      	uxtb	r3, r3
 8007134:	461d      	mov	r5, r3
 8007136:	6a38      	ldr	r0, [r7, #32]
 8007138:	f7f9 fee7 	bl	8000f0a <prvTraceGetQueueType>
 800713c:	4603      	mov	r3, r0
 800713e:	461a      	mov	r2, r3
 8007140:	4b10      	ldr	r3, [pc, #64]	; (8007184 <prvInitialiseNewQueue+0x124>)
 8007142:	5c9c      	ldrb	r4, [r3, r2]
 8007144:	6a38      	ldr	r0, [r7, #32]
 8007146:	f7f9 ff33 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 800714a:	4603      	mov	r3, r0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f7fa fc14 	bl	8001980 <prvTraceStoreKernelCall>
 8007158:	6a38      	ldr	r0, [r7, #32]
 800715a:	f7f9 fed6 	bl	8000f0a <prvTraceGetQueueType>
 800715e:	4603      	mov	r3, r0
 8007160:	461a      	mov	r2, r3
 8007162:	4b08      	ldr	r3, [pc, #32]	; (8007184 <prvInitialiseNewQueue+0x124>)
 8007164:	5c9c      	ldrb	r4, [r3, r2]
 8007166:	6a38      	ldr	r0, [r7, #32]
 8007168:	f7f9 ff22 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 800716c:	4603      	mov	r3, r0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2200      	movs	r2, #0
 8007172:	4619      	mov	r1, r3
 8007174:	4620      	mov	r0, r4
 8007176:	f7fa fe05 	bl	8001d84 <prvTraceSetObjectState>
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bdb0      	pop	{r4, r5, r7, pc}
 8007182:	bf00      	nop
 8007184:	20000004 	.word	0x20000004
 8007188:	20000242 	.word	0x20000242
 800718c:	20000240 	.word	0x20000240

08007190 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007190:	b5b0      	push	{r4, r5, r7, lr}
 8007192:	b08e      	sub	sp, #56	; 0x38
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800719e:	2300      	movs	r3, #0
 80071a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xQueueGenericSend+0x32>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d103      	bne.n	80071d0 <xQueueGenericSend+0x40>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <xQueueGenericSend+0x44>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <xQueueGenericSend+0x46>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <xQueueGenericSend+0x60>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	623b      	str	r3, [r7, #32]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d103      	bne.n	80071fe <xQueueGenericSend+0x6e>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <xQueueGenericSend+0x72>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <xQueueGenericSend+0x74>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <xQueueGenericSend+0x8e>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	61fb      	str	r3, [r7, #28]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800721e:	f001 fe65 	bl	8008eec <xTaskGetSchedulerState>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <xQueueGenericSend+0x9e>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <xQueueGenericSend+0xa2>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <xQueueGenericSend+0xa4>
 8007232:	2300      	movs	r3, #0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <xQueueGenericSend+0xbe>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	61bb      	str	r3, [r7, #24]
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800724e:	f002 fca1 	bl	8009b94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	429a      	cmp	r2, r3
 800725c:	d303      	bcc.n	8007266 <xQueueGenericSend+0xd6>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b02      	cmp	r3, #2
 8007262:	f040 80a0 	bne.w	80073a6 <xQueueGenericSend+0x216>
			{
				traceQUEUE_SEND( pxQueue );
 8007266:	f7f9 feea 	bl	800103e <prvTraceGetCurrentTaskHandle>
 800726a:	4603      	mov	r3, r0
 800726c:	4618      	mov	r0, r3
 800726e:	f7f9 fe65 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8007272:	4603      	mov	r3, r0
 8007274:	461a      	mov	r2, r3
 8007276:	4b9b      	ldr	r3, [pc, #620]	; (80074e4 <xQueueGenericSend+0x354>)
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	4013      	ands	r3, r2
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d02a      	beq.n	80072d8 <xQueueGenericSend+0x148>
 8007282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007284:	f7f9 fea1 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 8007288:	4603      	mov	r3, r0
 800728a:	461a      	mov	r2, r3
 800728c:	4b95      	ldr	r3, [pc, #596]	; (80074e4 <xQueueGenericSend+0x354>)
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	4013      	ands	r3, r2
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01f      	beq.n	80072d8 <xQueueGenericSend+0x148>
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <xQueueGenericSend+0x124>
 800729e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072a0:	f7f9 fe33 	bl	8000f0a <prvTraceGetQueueType>
 80072a4:	4603      	mov	r3, r0
 80072a6:	461a      	mov	r2, r3
 80072a8:	4b8f      	ldr	r3, [pc, #572]	; (80074e8 <xQueueGenericSend+0x358>)
 80072aa:	5c9b      	ldrb	r3, [r3, r2]
 80072ac:	3320      	adds	r3, #32
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	461d      	mov	r5, r3
 80072b2:	e000      	b.n	80072b6 <xQueueGenericSend+0x126>
 80072b4:	2525      	movs	r5, #37	; 0x25
 80072b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b8:	f7f9 fe27 	bl	8000f0a <prvTraceGetQueueType>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	4b89      	ldr	r3, [pc, #548]	; (80074e8 <xQueueGenericSend+0x358>)
 80072c2:	5c9c      	ldrb	r4, [r3, r2]
 80072c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072c6:	f7f9 fe73 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 80072ca:	4603      	mov	r3, r0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	4621      	mov	r1, r4
 80072d2:	4628      	mov	r0, r5
 80072d4:	f7fa fb54 	bl	8001980 <prvTraceStoreKernelCall>
 80072d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072da:	f7f9 fe16 	bl	8000f0a <prvTraceGetQueueType>
 80072de:	4603      	mov	r3, r0
 80072e0:	461a      	mov	r2, r3
 80072e2:	4b81      	ldr	r3, [pc, #516]	; (80074e8 <xQueueGenericSend+0x358>)
 80072e4:	5c9c      	ldrb	r4, [r3, r2]
 80072e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072e8:	f7f9 fe62 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 80072ec:	4603      	mov	r3, r0
 80072ee:	b2dd      	uxtb	r5, r3
 80072f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072f2:	f7f9 fe0a 	bl	8000f0a <prvTraceGetQueueType>
 80072f6:	4603      	mov	r3, r0
 80072f8:	461a      	mov	r2, r3
 80072fa:	4b7b      	ldr	r3, [pc, #492]	; (80074e8 <xQueueGenericSend+0x358>)
 80072fc:	5c9b      	ldrb	r3, [r3, r2]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d005      	beq.n	800730e <xQueueGenericSend+0x17e>
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007306:	b2db      	uxtb	r3, r3
 8007308:	3301      	adds	r3, #1
 800730a:	b2db      	uxtb	r3, r3
 800730c:	e000      	b.n	8007310 <xQueueGenericSend+0x180>
 800730e:	2300      	movs	r3, #0
 8007310:	461a      	mov	r2, r3
 8007312:	4629      	mov	r1, r5
 8007314:	4620      	mov	r0, r4
 8007316:	f7fa fd35 	bl	8001d84 <prvTraceSetObjectState>

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007326:	f000 fcaa 	bl	8007c7e <prvCopyDataToQueue>
 800732a:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007330:	2b00      	cmp	r3, #0
 8007332:	d014      	beq.n	800735e <xQueueGenericSend+0x1ce>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d102      	bne.n	8007340 <xQueueGenericSend+0x1b0>
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d12e      	bne.n	800739e <xQueueGenericSend+0x20e>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8007340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007342:	f000 fe27 	bl	8007f94 <prvNotifyQueueSetContainer>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d028      	beq.n	800739e <xQueueGenericSend+0x20e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800734c:	4b67      	ldr	r3, [pc, #412]	; (80074ec <xQueueGenericSend+0x35c>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	e01f      	b.n	800739e <xQueueGenericSend+0x20e>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d010      	beq.n	8007388 <xQueueGenericSend+0x1f8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	3324      	adds	r3, #36	; 0x24
 800736a:	4618      	mov	r0, r3
 800736c:	f001 fbcc 	bl	8008b08 <xTaskRemoveFromEventList>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d013      	beq.n	800739e <xQueueGenericSend+0x20e>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8007376:	4b5d      	ldr	r3, [pc, #372]	; (80074ec <xQueueGenericSend+0x35c>)
 8007378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	e00a      	b.n	800739e <xQueueGenericSend+0x20e>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <xQueueGenericSend+0x20e>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 800738e:	4b57      	ldr	r3, [pc, #348]	; (80074ec <xQueueGenericSend+0x35c>)
 8007390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800739e:	f002 fc29 	bl	8009bf4 <vPortExitCritical>
				return pdPASS;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e114      	b.n	80075d0 <xQueueGenericSend+0x440>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d13c      	bne.n	8007426 <xQueueGenericSend+0x296>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073ac:	f002 fc22 	bl	8009bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80073b0:	f7f9 fe45 	bl	800103e <prvTraceGetCurrentTaskHandle>
 80073b4:	4603      	mov	r3, r0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7f9 fdc0 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	4b48      	ldr	r3, [pc, #288]	; (80074e4 <xQueueGenericSend+0x354>)
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	4013      	ands	r3, r2
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d02a      	beq.n	8007422 <xQueueGenericSend+0x292>
 80073cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ce:	f7f9 fdfc 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 80073d2:	4603      	mov	r3, r0
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <xQueueGenericSend+0x354>)
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	4013      	ands	r3, r2
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d01f      	beq.n	8007422 <xQueueGenericSend+0x292>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <xQueueGenericSend+0x26e>
 80073e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ea:	f7f9 fd8e 	bl	8000f0a <prvTraceGetQueueType>
 80073ee:	4603      	mov	r3, r0
 80073f0:	461a      	mov	r2, r3
 80073f2:	4b3d      	ldr	r3, [pc, #244]	; (80074e8 <xQueueGenericSend+0x358>)
 80073f4:	5c9b      	ldrb	r3, [r3, r2]
 80073f6:	3348      	adds	r3, #72	; 0x48
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	461d      	mov	r5, r3
 80073fc:	e000      	b.n	8007400 <xQueueGenericSend+0x270>
 80073fe:	254d      	movs	r5, #77	; 0x4d
 8007400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007402:	f7f9 fd82 	bl	8000f0a <prvTraceGetQueueType>
 8007406:	4603      	mov	r3, r0
 8007408:	461a      	mov	r2, r3
 800740a:	4b37      	ldr	r3, [pc, #220]	; (80074e8 <xQueueGenericSend+0x358>)
 800740c:	5c9c      	ldrb	r4, [r3, r2]
 800740e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007410:	f7f9 fdce 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 8007414:	4603      	mov	r3, r0
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	4621      	mov	r1, r4
 800741c:	4628      	mov	r0, r5
 800741e:	f7fa faaf 	bl	8001980 <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 8007422:	2300      	movs	r3, #0
 8007424:	e0d4      	b.n	80075d0 <xQueueGenericSend+0x440>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <xQueueGenericSend+0x2aa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800742c:	f107 0310 	add.w	r3, r7, #16
 8007430:	4618      	mov	r0, r3
 8007432:	f001 fbe1 	bl	8008bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007436:	2301      	movs	r3, #1
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800743a:	f002 fbdb 	bl	8009bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800743e:	f001 f899 	bl	8008574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007442:	f002 fba7 	bl	8009b94 <vPortEnterCritical>
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800744c:	b25b      	sxtb	r3, r3
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d103      	bne.n	800745c <xQueueGenericSend+0x2cc>
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007462:	b25b      	sxtb	r3, r3
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d103      	bne.n	8007472 <xQueueGenericSend+0x2e2>
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007472:	f002 fbbf 	bl	8009bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007476:	1d3a      	adds	r2, r7, #4
 8007478:	f107 0310 	add.w	r3, r7, #16
 800747c:	4611      	mov	r1, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f001 fbd0 	bl	8008c24 <xTaskCheckForTimeOut>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d163      	bne.n	8007552 <xQueueGenericSend+0x3c2>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800748a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800748c:	f000 fcfc 	bl	8007e88 <prvIsQueueFull>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d057      	beq.n	8007546 <xQueueGenericSend+0x3b6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8007496:	f7f9 fdd2 	bl	800103e <prvTraceGetCurrentTaskHandle>
 800749a:	4603      	mov	r3, r0
 800749c:	4618      	mov	r0, r3
 800749e:	f7f9 fd4d 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 80074a2:	4603      	mov	r3, r0
 80074a4:	461a      	mov	r2, r3
 80074a6:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <xQueueGenericSend+0x354>)
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	4013      	ands	r3, r2
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d030      	beq.n	8007514 <xQueueGenericSend+0x384>
 80074b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074b4:	f7f9 fd89 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <xQueueGenericSend+0x354>)
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	4013      	ands	r3, r2
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d025      	beq.n	8007514 <xQueueGenericSend+0x384>
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d110      	bne.n	80074f0 <xQueueGenericSend+0x360>
 80074ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074d0:	f7f9 fd1b 	bl	8000f0a <prvTraceGetQueueType>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	4b03      	ldr	r3, [pc, #12]	; (80074e8 <xQueueGenericSend+0x358>)
 80074da:	5c9b      	ldrb	r3, [r3, r2]
 80074dc:	3370      	adds	r3, #112	; 0x70
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	461d      	mov	r5, r3
 80074e2:	e006      	b.n	80074f2 <xQueueGenericSend+0x362>
 80074e4:	20000240 	.word	0x20000240
 80074e8:	20000004 	.word	0x20000004
 80074ec:	e000ed04 	.word	0xe000ed04
 80074f0:	2575      	movs	r5, #117	; 0x75
 80074f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f4:	f7f9 fd09 	bl	8000f0a <prvTraceGetQueueType>
 80074f8:	4603      	mov	r3, r0
 80074fa:	461a      	mov	r2, r3
 80074fc:	4b36      	ldr	r3, [pc, #216]	; (80075d8 <xQueueGenericSend+0x448>)
 80074fe:	5c9c      	ldrb	r4, [r3, r2]
 8007500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007502:	f7f9 fd55 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 8007506:	4603      	mov	r3, r0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	461a      	mov	r2, r3
 800750c:	4621      	mov	r1, r4
 800750e:	4628      	mov	r0, r5
 8007510:	f7fa fa36 	bl	8001980 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	3310      	adds	r3, #16
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	4611      	mov	r1, r2
 800751c:	4618      	mov	r0, r3
 800751e:	f001 fa67 	bl	80089f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007524:	f000 fc3b 	bl	8007d9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007528:	f001 f832 	bl	8008590 <xTaskResumeAll>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	f47f ae8d 	bne.w	800724e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007534:	4b29      	ldr	r3, [pc, #164]	; (80075dc <xQueueGenericSend+0x44c>)
 8007536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	e683      	b.n	800724e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007548:	f000 fc29 	bl	8007d9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800754c:	f001 f820 	bl	8008590 <xTaskResumeAll>
 8007550:	e67d      	b.n	800724e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007554:	f000 fc23 	bl	8007d9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007558:	f001 f81a 	bl	8008590 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800755c:	f7f9 fd6f 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8007560:	4603      	mov	r3, r0
 8007562:	4618      	mov	r0, r3
 8007564:	f7f9 fcea 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8007568:	4603      	mov	r3, r0
 800756a:	461a      	mov	r2, r3
 800756c:	4b1c      	ldr	r3, [pc, #112]	; (80075e0 <xQueueGenericSend+0x450>)
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	4013      	ands	r3, r2
 8007572:	b29b      	uxth	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d02a      	beq.n	80075ce <xQueueGenericSend+0x43e>
 8007578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800757a:	f7f9 fd26 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 800757e:	4603      	mov	r3, r0
 8007580:	461a      	mov	r2, r3
 8007582:	4b17      	ldr	r3, [pc, #92]	; (80075e0 <xQueueGenericSend+0x450>)
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	4013      	ands	r3, r2
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01f      	beq.n	80075ce <xQueueGenericSend+0x43e>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <xQueueGenericSend+0x41a>
 8007594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007596:	f7f9 fcb8 	bl	8000f0a <prvTraceGetQueueType>
 800759a:	4603      	mov	r3, r0
 800759c:	461a      	mov	r2, r3
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <xQueueGenericSend+0x448>)
 80075a0:	5c9b      	ldrb	r3, [r3, r2]
 80075a2:	3348      	adds	r3, #72	; 0x48
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	461d      	mov	r5, r3
 80075a8:	e000      	b.n	80075ac <xQueueGenericSend+0x41c>
 80075aa:	254d      	movs	r5, #77	; 0x4d
 80075ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ae:	f7f9 fcac 	bl	8000f0a <prvTraceGetQueueType>
 80075b2:	4603      	mov	r3, r0
 80075b4:	461a      	mov	r2, r3
 80075b6:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <xQueueGenericSend+0x448>)
 80075b8:	5c9c      	ldrb	r4, [r3, r2]
 80075ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075bc:	f7f9 fcf8 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 80075c0:	4603      	mov	r3, r0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	4621      	mov	r1, r4
 80075c8:	4628      	mov	r0, r5
 80075ca:	f7fa f9d9 	bl	8001980 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 80075ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3738      	adds	r7, #56	; 0x38
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bdb0      	pop	{r4, r5, r7, pc}
 80075d8:	20000004 	.word	0x20000004
 80075dc:	e000ed04 	.word	0xe000ed04
 80075e0:	20000240 	.word	0x20000240

080075e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075e4:	b5b0      	push	{r4, r5, r7, lr}
 80075e6:	b090      	sub	sp, #64	; 0x40
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d103      	bne.n	8007620 <xQueueGenericSendFromISR+0x3c>
 8007618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <xQueueGenericSendFromISR+0x40>
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <xQueueGenericSendFromISR+0x42>
 8007624:	2300      	movs	r3, #0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10a      	bne.n	8007640 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d103      	bne.n	800764e <xQueueGenericSendFromISR+0x6a>
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	2b01      	cmp	r3, #1
 800764c:	d101      	bne.n	8007652 <xQueueGenericSendFromISR+0x6e>
 800764e:	2301      	movs	r3, #1
 8007650:	e000      	b.n	8007654 <xQueueGenericSendFromISR+0x70>
 8007652:	2300      	movs	r3, #0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	623b      	str	r3, [r7, #32]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800766e:	f002 fb73 	bl	8009d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007672:	f3ef 8211 	mrs	r2, BASEPRI
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	61fa      	str	r2, [r7, #28]
 8007688:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800768a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007696:	429a      	cmp	r2, r3
 8007698:	d303      	bcc.n	80076a2 <xQueueGenericSendFromISR+0xbe>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b02      	cmp	r3, #2
 800769e:	f040 8087 	bne.w	80077b0 <xQueueGenericSendFromISR+0x1cc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80076b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076b4:	f7f9 fc89 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 80076b8:	4603      	mov	r3, r0
 80076ba:	461a      	mov	r2, r3
 80076bc:	4b58      	ldr	r3, [pc, #352]	; (8007820 <xQueueGenericSendFromISR+0x23c>)
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	4013      	ands	r3, r2
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d01f      	beq.n	8007708 <xQueueGenericSendFromISR+0x124>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <xQueueGenericSendFromISR+0x100>
 80076ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076d0:	f7f9 fc1b 	bl	8000f0a <prvTraceGetQueueType>
 80076d4:	4603      	mov	r3, r0
 80076d6:	461a      	mov	r2, r3
 80076d8:	4b52      	ldr	r3, [pc, #328]	; (8007824 <xQueueGenericSendFromISR+0x240>)
 80076da:	5c9b      	ldrb	r3, [r3, r2]
 80076dc:	3330      	adds	r3, #48	; 0x30
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	461d      	mov	r5, r3
 80076e2:	e000      	b.n	80076e6 <xQueueGenericSendFromISR+0x102>
 80076e4:	2535      	movs	r5, #53	; 0x35
 80076e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076e8:	f7f9 fc0f 	bl	8000f0a <prvTraceGetQueueType>
 80076ec:	4603      	mov	r3, r0
 80076ee:	461a      	mov	r2, r3
 80076f0:	4b4c      	ldr	r3, [pc, #304]	; (8007824 <xQueueGenericSendFromISR+0x240>)
 80076f2:	5c9c      	ldrb	r4, [r3, r2]
 80076f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076f6:	f7f9 fc5b 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 80076fa:	4603      	mov	r3, r0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	461a      	mov	r2, r3
 8007700:	4621      	mov	r1, r4
 8007702:	4628      	mov	r0, r5
 8007704:	f7fa f93c 	bl	8001980 <prvTraceStoreKernelCall>
 8007708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800770a:	f7f9 fbfe 	bl	8000f0a <prvTraceGetQueueType>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	4b44      	ldr	r3, [pc, #272]	; (8007824 <xQueueGenericSendFromISR+0x240>)
 8007714:	5c9c      	ldrb	r4, [r3, r2]
 8007716:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007718:	f7f9 fc4a 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 800771c:	4603      	mov	r3, r0
 800771e:	b2d9      	uxtb	r1, r3
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	b2db      	uxtb	r3, r3
 8007726:	3301      	adds	r3, #1
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	4620      	mov	r0, r4
 800772e:	f7fa fb29 	bl	8001d84 <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007738:	f000 faa1 	bl	8007c7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800773c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d129      	bne.n	800779a <xQueueGenericSendFromISR+0x1b6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800774a:	2b00      	cmp	r3, #0
 800774c:	d012      	beq.n	8007774 <xQueueGenericSendFromISR+0x190>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b02      	cmp	r3, #2
 8007752:	d102      	bne.n	800775a <xQueueGenericSendFromISR+0x176>
 8007754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d127      	bne.n	80077aa <xQueueGenericSendFromISR+0x1c6>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800775a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800775c:	f000 fc1a 	bl	8007f94 <prvNotifyQueueSetContainer>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d021      	beq.n	80077aa <xQueueGenericSendFromISR+0x1c6>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01e      	beq.n	80077aa <xQueueGenericSendFromISR+0x1c6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	e01a      	b.n	80077aa <xQueueGenericSendFromISR+0x1c6>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	d016      	beq.n	80077aa <xQueueGenericSendFromISR+0x1c6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	3324      	adds	r3, #36	; 0x24
 8007780:	4618      	mov	r0, r3
 8007782:	f001 f9c1 	bl	8008b08 <xTaskRemoveFromEventList>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00e      	beq.n	80077aa <xQueueGenericSendFromISR+0x1c6>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <xQueueGenericSendFromISR+0x1c6>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	e007      	b.n	80077aa <xQueueGenericSendFromISR+0x1c6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800779a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800779e:	3301      	adds	r3, #1
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	b25a      	sxtb	r2, r3
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077aa:	2301      	movs	r3, #1
 80077ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80077ae:	e02c      	b.n	800780a <xQueueGenericSendFromISR+0x226>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80077b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077b2:	f7f9 fc0a 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 80077b6:	4603      	mov	r3, r0
 80077b8:	461a      	mov	r2, r3
 80077ba:	4b19      	ldr	r3, [pc, #100]	; (8007820 <xQueueGenericSendFromISR+0x23c>)
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	4013      	ands	r3, r2
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d01f      	beq.n	8007806 <xQueueGenericSendFromISR+0x222>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <xQueueGenericSendFromISR+0x1fe>
 80077cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077ce:	f7f9 fb9c 	bl	8000f0a <prvTraceGetQueueType>
 80077d2:	4603      	mov	r3, r0
 80077d4:	461a      	mov	r2, r3
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <xQueueGenericSendFromISR+0x240>)
 80077d8:	5c9b      	ldrb	r3, [r3, r2]
 80077da:	3358      	adds	r3, #88	; 0x58
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	461d      	mov	r5, r3
 80077e0:	e000      	b.n	80077e4 <xQueueGenericSendFromISR+0x200>
 80077e2:	255d      	movs	r5, #93	; 0x5d
 80077e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077e6:	f7f9 fb90 	bl	8000f0a <prvTraceGetQueueType>
 80077ea:	4603      	mov	r3, r0
 80077ec:	461a      	mov	r2, r3
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <xQueueGenericSendFromISR+0x240>)
 80077f0:	5c9c      	ldrb	r4, [r3, r2]
 80077f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077f4:	f7f9 fbdc 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 80077f8:	4603      	mov	r3, r0
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	4621      	mov	r1, r4
 8007800:	4628      	mov	r0, r5
 8007802:	f7fa f8bd 	bl	8001980 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 8007806:	2300      	movs	r3, #0
 8007808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800780a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007814:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007818:	4618      	mov	r0, r3
 800781a:	3740      	adds	r7, #64	; 0x40
 800781c:	46bd      	mov	sp, r7
 800781e:	bdb0      	pop	{r4, r5, r7, pc}
 8007820:	20000240 	.word	0x20000240
 8007824:	20000004 	.word	0x20000004

08007828 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007828:	b5b0      	push	{r4, r5, r7, lr}
 800782a:	b08c      	sub	sp, #48	; 0x30
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007834:	2300      	movs	r3, #0
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <xQueueReceive+0x30>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	623b      	str	r3, [r7, #32]
}
 8007854:	bf00      	nop
 8007856:	e7fe      	b.n	8007856 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d103      	bne.n	8007866 <xQueueReceive+0x3e>
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <xQueueReceive+0x42>
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <xQueueReceive+0x44>
 800786a:	2300      	movs	r3, #0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10a      	bne.n	8007886 <xQueueReceive+0x5e>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	61fb      	str	r3, [r7, #28]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007886:	f001 fb31 	bl	8008eec <xTaskGetSchedulerState>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <xQueueReceive+0x6e>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <xQueueReceive+0x72>
 8007896:	2301      	movs	r3, #1
 8007898:	e000      	b.n	800789c <xQueueReceive+0x74>
 800789a:	2300      	movs	r3, #0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10a      	bne.n	80078b6 <xQueueReceive+0x8e>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	61bb      	str	r3, [r7, #24]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078b6:	f002 f96d 	bl	8009b94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d07b      	beq.n	80079be <xQueueReceive+0x196>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078c6:	68b9      	ldr	r1, [r7, #8]
 80078c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ca:	f000 fa42 	bl	8007d52 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80078ce:	f7f9 fbb6 	bl	800103e <prvTraceGetCurrentTaskHandle>
 80078d2:	4603      	mov	r3, r0
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7f9 fb31 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 80078da:	4603      	mov	r3, r0
 80078dc:	461a      	mov	r2, r3
 80078de:	4bac      	ldr	r3, [pc, #688]	; (8007b90 <xQueueReceive+0x368>)
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	4013      	ands	r3, r2
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d025      	beq.n	8007936 <xQueueReceive+0x10e>
 80078ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ec:	f7f9 fb6d 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 80078f0:	4603      	mov	r3, r0
 80078f2:	461a      	mov	r2, r3
 80078f4:	4ba6      	ldr	r3, [pc, #664]	; (8007b90 <xQueueReceive+0x368>)
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	4013      	ands	r3, r2
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01a      	beq.n	8007936 <xQueueReceive+0x10e>
 8007900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007902:	f7f9 fb02 	bl	8000f0a <prvTraceGetQueueType>
 8007906:	4603      	mov	r3, r0
 8007908:	461a      	mov	r2, r3
 800790a:	4ba2      	ldr	r3, [pc, #648]	; (8007b94 <xQueueReceive+0x36c>)
 800790c:	5c9b      	ldrb	r3, [r3, r2]
 800790e:	3328      	adds	r3, #40	; 0x28
 8007910:	b2db      	uxtb	r3, r3
 8007912:	461d      	mov	r5, r3
 8007914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007916:	f7f9 faf8 	bl	8000f0a <prvTraceGetQueueType>
 800791a:	4603      	mov	r3, r0
 800791c:	461a      	mov	r2, r3
 800791e:	4b9d      	ldr	r3, [pc, #628]	; (8007b94 <xQueueReceive+0x36c>)
 8007920:	5c9c      	ldrb	r4, [r3, r2]
 8007922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007924:	f7f9 fb44 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 8007928:	4603      	mov	r3, r0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	4621      	mov	r1, r4
 8007930:	4628      	mov	r0, r5
 8007932:	f7fa f825 	bl	8001980 <prvTraceStoreKernelCall>
 8007936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007938:	f7f9 fae7 	bl	8000f0a <prvTraceGetQueueType>
 800793c:	4603      	mov	r3, r0
 800793e:	461a      	mov	r2, r3
 8007940:	4b94      	ldr	r3, [pc, #592]	; (8007b94 <xQueueReceive+0x36c>)
 8007942:	5c9c      	ldrb	r4, [r3, r2]
 8007944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007946:	f7f9 fb33 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 800794a:	4603      	mov	r3, r0
 800794c:	b2dd      	uxtb	r5, r3
 800794e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007950:	f7f9 fadb 	bl	8000f0a <prvTraceGetQueueType>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	4b8e      	ldr	r3, [pc, #568]	; (8007b94 <xQueueReceive+0x36c>)
 800795a:	5c9b      	ldrb	r3, [r3, r2]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d108      	bne.n	8007972 <xQueueReceive+0x14a>
 8007960:	f7f9 fb6d 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8007964:	4603      	mov	r3, r0
 8007966:	4618      	mov	r0, r3
 8007968:	f7f9 fadb 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 800796c:	4603      	mov	r3, r0
 800796e:	b2db      	uxtb	r3, r3
 8007970:	e004      	b.n	800797c <xQueueReceive+0x154>
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007976:	b2db      	uxtb	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b2db      	uxtb	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	4629      	mov	r1, r5
 8007980:	4620      	mov	r0, r4
 8007982:	f7fa f9ff 	bl	8001d84 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007988:	1e5a      	subs	r2, r3, #1
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00f      	beq.n	80079b6 <xQueueReceive+0x18e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	3310      	adds	r3, #16
 800799a:	4618      	mov	r0, r3
 800799c:	f001 f8b4 	bl	8008b08 <xTaskRemoveFromEventList>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d007      	beq.n	80079b6 <xQueueReceive+0x18e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079a6:	4b7c      	ldr	r3, [pc, #496]	; (8007b98 <xQueueReceive+0x370>)
 80079a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079b6:	f002 f91d 	bl	8009bf4 <vPortExitCritical>
				return pdPASS;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e12f      	b.n	8007c1e <xQueueReceive+0x3f6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d137      	bne.n	8007a34 <xQueueReceive+0x20c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079c4:	f002 f916 	bl	8009bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80079c8:	f7f9 fb39 	bl	800103e <prvTraceGetCurrentTaskHandle>
 80079cc:	4603      	mov	r3, r0
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7f9 fab4 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 80079d4:	4603      	mov	r3, r0
 80079d6:	461a      	mov	r2, r3
 80079d8:	4b6d      	ldr	r3, [pc, #436]	; (8007b90 <xQueueReceive+0x368>)
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	4013      	ands	r3, r2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d025      	beq.n	8007a30 <xQueueReceive+0x208>
 80079e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079e6:	f7f9 faf0 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 80079ea:	4603      	mov	r3, r0
 80079ec:	461a      	mov	r2, r3
 80079ee:	4b68      	ldr	r3, [pc, #416]	; (8007b90 <xQueueReceive+0x368>)
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	4013      	ands	r3, r2
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01a      	beq.n	8007a30 <xQueueReceive+0x208>
 80079fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079fc:	f7f9 fa85 	bl	8000f0a <prvTraceGetQueueType>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	4b63      	ldr	r3, [pc, #396]	; (8007b94 <xQueueReceive+0x36c>)
 8007a06:	5c9b      	ldrb	r3, [r3, r2]
 8007a08:	3350      	adds	r3, #80	; 0x50
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461d      	mov	r5, r3
 8007a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a10:	f7f9 fa7b 	bl	8000f0a <prvTraceGetQueueType>
 8007a14:	4603      	mov	r3, r0
 8007a16:	461a      	mov	r2, r3
 8007a18:	4b5e      	ldr	r3, [pc, #376]	; (8007b94 <xQueueReceive+0x36c>)
 8007a1a:	5c9c      	ldrb	r4, [r3, r2]
 8007a1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a1e:	f7f9 fac7 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 8007a22:	4603      	mov	r3, r0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f7f9 ffa8 	bl	8001980 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e0f4      	b.n	8007c1e <xQueueReceive+0x3f6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <xQueueReceive+0x220>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a3a:	f107 0310 	add.w	r3, r7, #16
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f001 f8da 	bl	8008bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a44:	2301      	movs	r3, #1
 8007a46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a48:	f002 f8d4 	bl	8009bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a4c:	f000 fd92 	bl	8008574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a50:	f002 f8a0 	bl	8009b94 <vPortEnterCritical>
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a5a:	b25b      	sxtb	r3, r3
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a60:	d103      	bne.n	8007a6a <xQueueReceive+0x242>
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a70:	b25b      	sxtb	r3, r3
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d103      	bne.n	8007a80 <xQueueReceive+0x258>
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a80:	f002 f8b8 	bl	8009bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a84:	1d3a      	adds	r2, r7, #4
 8007a86:	f107 0310 	add.w	r3, r7, #16
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f001 f8c9 	bl	8008c24 <xTaskCheckForTimeOut>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f040 8081 	bne.w	8007b9c <xQueueReceive+0x374>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a9c:	f000 f9de 	bl	8007e5c <prvIsQueueEmpty>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d06e      	beq.n	8007b84 <xQueueReceive+0x35c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8007aa6:	f7f9 faca 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f9 fa45 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4b36      	ldr	r3, [pc, #216]	; (8007b90 <xQueueReceive+0x368>)
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	4013      	ands	r3, r2
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d025      	beq.n	8007b0e <xQueueReceive+0x2e6>
 8007ac2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ac4:	f7f9 fa81 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	461a      	mov	r2, r3
 8007acc:	4b30      	ldr	r3, [pc, #192]	; (8007b90 <xQueueReceive+0x368>)
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01a      	beq.n	8007b0e <xQueueReceive+0x2e6>
 8007ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ada:	f7f9 fa16 	bl	8000f0a <prvTraceGetQueueType>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4b2c      	ldr	r3, [pc, #176]	; (8007b94 <xQueueReceive+0x36c>)
 8007ae4:	5c9b      	ldrb	r3, [r3, r2]
 8007ae6:	3368      	adds	r3, #104	; 0x68
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	461d      	mov	r5, r3
 8007aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007aee:	f7f9 fa0c 	bl	8000f0a <prvTraceGetQueueType>
 8007af2:	4603      	mov	r3, r0
 8007af4:	461a      	mov	r2, r3
 8007af6:	4b27      	ldr	r3, [pc, #156]	; (8007b94 <xQueueReceive+0x36c>)
 8007af8:	5c9c      	ldrb	r4, [r3, r2]
 8007afa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007afc:	f7f9 fa58 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 8007b00:	4603      	mov	r3, r0
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	461a      	mov	r2, r3
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f7f9 ff39 	bl	8001980 <prvTraceStoreKernelCall>
 8007b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b10:	f7f9 f9fb 	bl	8000f0a <prvTraceGetQueueType>
 8007b14:	4603      	mov	r3, r0
 8007b16:	461a      	mov	r2, r3
 8007b18:	4b1e      	ldr	r3, [pc, #120]	; (8007b94 <xQueueReceive+0x36c>)
 8007b1a:	5c9b      	ldrb	r3, [r3, r2]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d018      	beq.n	8007b52 <xQueueReceive+0x32a>
 8007b20:	f7f9 fa8d 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8007b24:	4603      	mov	r3, r0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7f9 fa08 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	461a      	mov	r2, r3
 8007b30:	4b17      	ldr	r3, [pc, #92]	; (8007b90 <xQueueReceive+0x368>)
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	4013      	ands	r3, r2
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <xQueueReceive+0x32a>
 8007b3c:	f7f9 fa7f 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8007b40:	4603      	mov	r3, r0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7f9 f9ed 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fa f95f 	bl	8001e10 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	3324      	adds	r3, #36	; 0x24
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 ff48 	bl	80089f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b62:	f000 f91c 	bl	8007d9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b66:	f000 fd13 	bl	8008590 <xTaskResumeAll>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f47f aea2 	bne.w	80078b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <xQueueReceive+0x370>)
 8007b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	e698      	b.n	80078b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b86:	f000 f90a 	bl	8007d9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b8a:	f000 fd01 	bl	8008590 <xTaskResumeAll>
 8007b8e:	e692      	b.n	80078b6 <xQueueReceive+0x8e>
 8007b90:	20000240 	.word	0x20000240
 8007b94:	20000004 	.word	0x20000004
 8007b98:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b9e:	f000 f8fe 	bl	8007d9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ba2:	f000 fcf5 	bl	8008590 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ba8:	f000 f958 	bl	8007e5c <prvIsQueueEmpty>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f43f ae81 	beq.w	80078b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007bb4:	f7f9 fa43 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7f9 f9be 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4b18      	ldr	r3, [pc, #96]	; (8007c28 <xQueueReceive+0x400>)
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d025      	beq.n	8007c1c <xQueueReceive+0x3f4>
 8007bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bd2:	f7f9 f9fa 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	461a      	mov	r2, r3
 8007bda:	4b13      	ldr	r3, [pc, #76]	; (8007c28 <xQueueReceive+0x400>)
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	4013      	ands	r3, r2
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01a      	beq.n	8007c1c <xQueueReceive+0x3f4>
 8007be6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007be8:	f7f9 f98f 	bl	8000f0a <prvTraceGetQueueType>
 8007bec:	4603      	mov	r3, r0
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4b0e      	ldr	r3, [pc, #56]	; (8007c2c <xQueueReceive+0x404>)
 8007bf2:	5c9b      	ldrb	r3, [r3, r2]
 8007bf4:	3350      	adds	r3, #80	; 0x50
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	461d      	mov	r5, r3
 8007bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bfc:	f7f9 f985 	bl	8000f0a <prvTraceGetQueueType>
 8007c00:	4603      	mov	r3, r0
 8007c02:	461a      	mov	r2, r3
 8007c04:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <xQueueReceive+0x404>)
 8007c06:	5c9c      	ldrb	r4, [r3, r2]
 8007c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c0a:	f7f9 f9d1 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	4621      	mov	r1, r4
 8007c16:	4628      	mov	r0, r5
 8007c18:	f7f9 feb2 	bl	8001980 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8007c1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3730      	adds	r7, #48	; 0x30
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bdb0      	pop	{r4, r5, r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20000240 	.word	0x20000240
 8007c2c:	20000004 	.word	0x20000004

08007c30 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	64da      	str	r2, [r3, #76]	; 0x4c
	}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	}
 8007c72:	4618      	mov	r0, r3
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b086      	sub	sp, #24
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10d      	bne.n	8007cb8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d14d      	bne.n	8007d40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 f93d 	bl	8008f28 <xTaskPriorityDisinherit>
 8007cae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	609a      	str	r2, [r3, #8]
 8007cb6:	e043      	b.n	8007d40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d119      	bne.n	8007cf2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6858      	ldr	r0, [r3, #4]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	f002 fbb7 	bl	800a43c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	441a      	add	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d32b      	bcc.n	8007d40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	605a      	str	r2, [r3, #4]
 8007cf0:	e026      	b.n	8007d40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	68d8      	ldr	r0, [r3, #12]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	68b9      	ldr	r1, [r7, #8]
 8007cfe:	f002 fb9d 	bl	800a43c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	425b      	negs	r3, r3
 8007d0c:	441a      	add	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d207      	bcs.n	8007d2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	425b      	negs	r3, r3
 8007d28:	441a      	add	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d105      	bne.n	8007d40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d48:	697b      	ldr	r3, [r7, #20]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d018      	beq.n	8007d96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	441a      	add	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d303      	bcc.n	8007d86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68d9      	ldr	r1, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	461a      	mov	r2, r3
 8007d90:	6838      	ldr	r0, [r7, #0]
 8007d92:	f002 fb53 	bl	800a43c <memcpy>
	}
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007da6:	f001 fef5 	bl	8009b94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007db0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007db2:	e01e      	b.n	8007df2 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d008      	beq.n	8007dce <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f8e9 	bl	8007f94 <prvNotifyQueueSetContainer>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d010      	beq.n	8007dea <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8007dc8:	f000 ff8e 	bl	8008ce8 <vTaskMissedYield>
 8007dcc:	e00d      	b.n	8007dea <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d012      	beq.n	8007dfc <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3324      	adds	r3, #36	; 0x24
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fe94 	bl	8008b08 <xTaskRemoveFromEventList>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8007de6:	f000 ff7f 	bl	8008ce8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dcdc      	bgt.n	8007db4 <prvUnlockQueue+0x16>
 8007dfa:	e000      	b.n	8007dfe <prvUnlockQueue+0x60>
						break;
 8007dfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	22ff      	movs	r2, #255	; 0xff
 8007e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e06:	f001 fef5 	bl	8009bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e0a:	f001 fec3 	bl	8009b94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e16:	e011      	b.n	8007e3c <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d012      	beq.n	8007e46 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3310      	adds	r3, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fe6f 	bl	8008b08 <xTaskRemoveFromEventList>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 8007e30:	f000 ff5a 	bl	8008ce8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dce9      	bgt.n	8007e18 <prvUnlockQueue+0x7a>
 8007e44:	e000      	b.n	8007e48 <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 8007e46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	22ff      	movs	r2, #255	; 0xff
 8007e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e50:	f001 fed0 	bl	8009bf4 <vPortExitCritical>
}
 8007e54:	bf00      	nop
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e64:	f001 fe96 	bl	8009b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e001      	b.n	8007e7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e7a:	f001 febb 	bl	8009bf4 <vPortExitCritical>

	return xReturn;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e90:	f001 fe80 	bl	8009b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d102      	bne.n	8007ea6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e001      	b.n	8007eaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eaa:	f001 fea3 	bl	8009bf4 <vPortExitCritical>

	return xReturn;
 8007eae:	68fb      	ldr	r3, [r7, #12]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	e025      	b.n	8007f14 <vQueueAddToRegistry+0x5c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ec8:	4a16      	ldr	r2, [pc, #88]	; (8007f24 <vQueueAddToRegistry+0x6c>)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d11c      	bne.n	8007f0e <vQueueAddToRegistry+0x56>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ed4:	4913      	ldr	r1, [pc, #76]	; (8007f24 <vQueueAddToRegistry+0x6c>)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ede:	4a11      	ldr	r2, [pc, #68]	; (8007f24 <vQueueAddToRegistry+0x6c>)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7f9 f80d 	bl	8000f0a <prvTraceGetQueueType>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <vQueueAddToRegistry+0x70>)
 8007ef6:	5c9c      	ldrb	r4, [r3, r2]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7f9 f859 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 8007efe:	4603      	mov	r3, r0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	4619      	mov	r1, r3
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7fa f8dc 	bl	80020c4 <prvTraceSetObjectName>
				break;
 8007f0c:	e006      	b.n	8007f1c <vQueueAddToRegistry+0x64>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3301      	adds	r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b07      	cmp	r3, #7
 8007f18:	d9d6      	bls.n	8007ec8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd90      	pop	{r4, r7, pc}
 8007f24:	20001bfc 	.word	0x20001bfc
 8007f28:	20000004 	.word	0x20000004

08007f2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f3c:	f001 fe2a 	bl	8009b94 <vPortEnterCritical>
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f46:	b25b      	sxtb	r3, r3
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4c:	d103      	bne.n	8007f56 <vQueueWaitForMessageRestricted+0x2a>
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f5c:	b25b      	sxtb	r3, r3
 8007f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f62:	d103      	bne.n	8007f6c <vQueueWaitForMessageRestricted+0x40>
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f6c:	f001 fe42 	bl	8009bf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	3324      	adds	r3, #36	; 0x24
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fd59 	bl	8008a38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f86:	6978      	ldr	r0, [r7, #20]
 8007f88:	f7ff ff09 	bl	8007d9e <prvUnlockQueue>
	}
 8007f8c:	bf00      	nop
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8007f94:	b5b0      	push	{r4, r5, r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa0:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	613b      	str	r3, [r7, #16]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d30a      	bcc.n	8007fe4 <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60fb      	str	r3, [r7, #12]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d26e      	bcs.n	80080ce <prvNotifyQueueSetContainer+0x13a>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ff6:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SET_SEND( pxQueueSetContainer );
 8007ff8:	f7f9 f821 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7f8 ff9c 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8008004:	4603      	mov	r3, r0
 8008006:	461a      	mov	r2, r3
 8008008:	4b33      	ldr	r3, [pc, #204]	; (80080d8 <prvNotifyQueueSetContainer+0x144>)
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	4013      	ands	r3, r2
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d025      	beq.n	8008060 <prvNotifyQueueSetContainer+0xcc>
 8008014:	69b8      	ldr	r0, [r7, #24]
 8008016:	f7f8 ffd8 	bl	8000fca <prvTraceGetQueueNumberHigh16>
 800801a:	4603      	mov	r3, r0
 800801c:	461a      	mov	r2, r3
 800801e:	4b2e      	ldr	r3, [pc, #184]	; (80080d8 <prvNotifyQueueSetContainer+0x144>)
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	4013      	ands	r3, r2
 8008024:	b29b      	uxth	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d01a      	beq.n	8008060 <prvNotifyQueueSetContainer+0xcc>
 800802a:	69b8      	ldr	r0, [r7, #24]
 800802c:	f7f8 ff6d 	bl	8000f0a <prvTraceGetQueueType>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	4b29      	ldr	r3, [pc, #164]	; (80080dc <prvNotifyQueueSetContainer+0x148>)
 8008036:	5c9b      	ldrb	r3, [r3, r2]
 8008038:	3320      	adds	r3, #32
 800803a:	b2db      	uxtb	r3, r3
 800803c:	461d      	mov	r5, r3
 800803e:	69b8      	ldr	r0, [r7, #24]
 8008040:	f7f8 ff63 	bl	8000f0a <prvTraceGetQueueType>
 8008044:	4603      	mov	r3, r0
 8008046:	461a      	mov	r2, r3
 8008048:	4b24      	ldr	r3, [pc, #144]	; (80080dc <prvNotifyQueueSetContainer+0x148>)
 800804a:	5c9c      	ldrb	r4, [r3, r2]
 800804c:	69b8      	ldr	r0, [r7, #24]
 800804e:	f7f8 ffaf 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 8008052:	4603      	mov	r3, r0
 8008054:	b2db      	uxtb	r3, r3
 8008056:	461a      	mov	r2, r3
 8008058:	4621      	mov	r1, r4
 800805a:	4628      	mov	r0, r5
 800805c:	f7f9 fc90 	bl	8001980 <prvTraceStoreKernelCall>
 8008060:	69b8      	ldr	r0, [r7, #24]
 8008062:	f7f8 ff52 	bl	8000f0a <prvTraceGetQueueType>
 8008066:	4603      	mov	r3, r0
 8008068:	461a      	mov	r2, r3
 800806a:	4b1c      	ldr	r3, [pc, #112]	; (80080dc <prvNotifyQueueSetContainer+0x148>)
 800806c:	5c9c      	ldrb	r4, [r3, r2]
 800806e:	69b8      	ldr	r0, [r7, #24]
 8008070:	f7f8 ff9e 	bl	8000fb0 <prvTraceGetQueueNumberLow16>
 8008074:	4603      	mov	r3, r0
 8008076:	b2d9      	uxtb	r1, r3
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	b2db      	uxtb	r3, r3
 800807e:	3301      	adds	r3, #1
 8008080:	b2db      	uxtb	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	4620      	mov	r0, r4
 8008086:	f7f9 fe7d 	bl	8001d84 <prvTraceSetObjectState>

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 800808a:	1d3b      	adds	r3, r7, #4
 800808c:	2200      	movs	r2, #0
 800808e:	4619      	mov	r1, r3
 8008090:	69b8      	ldr	r0, [r7, #24]
 8008092:	f7ff fdf4 	bl	8007c7e <prvCopyDataToQueue>
 8008096:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8008098:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800809c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a0:	d10e      	bne.n	80080c0 <prvNotifyQueueSetContainer+0x12c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d011      	beq.n	80080ce <prvNotifyQueueSetContainer+0x13a>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	3324      	adds	r3, #36	; 0x24
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fd2a 	bl	8008b08 <xTaskRemoveFromEventList>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d009      	beq.n	80080ce <prvNotifyQueueSetContainer+0x13a>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80080ba:	2301      	movs	r3, #1
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	e006      	b.n	80080ce <prvNotifyQueueSetContainer+0x13a>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
 80080c2:	3301      	adds	r3, #1
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	b25a      	sxtb	r2, r3
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080ce:	69fb      	ldr	r3, [r7, #28]
	}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bdb0      	pop	{r4, r5, r7, pc}
 80080d8:	20000240 	.word	0x20000240
 80080dc:	20000004 	.word	0x20000004

080080e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08c      	sub	sp, #48	; 0x30
 80080e4:	af04      	add	r7, sp, #16
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	4613      	mov	r3, r2
 80080ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 fe6f 	bl	8009dd8 <pvPortMalloc>
 80080fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00e      	beq.n	8008120 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008102:	20a8      	movs	r0, #168	; 0xa8
 8008104:	f001 fe68 	bl	8009dd8 <pvPortMalloc>
 8008108:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	631a      	str	r2, [r3, #48]	; 0x30
 8008116:	e005      	b.n	8008124 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008118:	6978      	ldr	r0, [r7, #20]
 800811a:	f001 ff39 	bl	8009f90 <vPortFree>
 800811e:	e001      	b.n	8008124 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008120:	2300      	movs	r3, #0
 8008122:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d013      	beq.n	8008152 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	2300      	movs	r3, #0
 800812e:	9303      	str	r3, [sp, #12]
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 f80f 	bl	8008164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008146:	69f8      	ldr	r0, [r7, #28]
 8008148:	f000 f8b2 	bl	80082b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800814c:	2301      	movs	r3, #1
 800814e:	61bb      	str	r3, [r7, #24]
 8008150:	e002      	b.n	8008158 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008152:	f04f 33ff 	mov.w	r3, #4294967295
 8008156:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008158:	69bb      	ldr	r3, [r7, #24]
	}
 800815a:	4618      	mov	r0, r3
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	461a      	mov	r2, r3
 800817c:	21a5      	movs	r1, #165	; 0xa5
 800817e:	f002 f8d9 	bl	800a334 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800818c:	3b01      	subs	r3, #1
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	f023 0307 	bic.w	r3, r3, #7
 800819a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	f003 0307 	and.w	r3, r3, #7
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	617b      	str	r3, [r7, #20]
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d01f      	beq.n	8008202 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081c2:	2300      	movs	r3, #0
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	e012      	b.n	80081ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	7819      	ldrb	r1, [r3, #0]
 80081d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	4413      	add	r3, r2
 80081d6:	3334      	adds	r3, #52	; 0x34
 80081d8:	460a      	mov	r2, r1
 80081da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d006      	beq.n	80081f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	3301      	adds	r3, #1
 80081ec:	61fb      	str	r3, [r7, #28]
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	2b0f      	cmp	r3, #15
 80081f2:	d9e9      	bls.n	80081c8 <prvInitialiseNewTask+0x64>
 80081f4:	e000      	b.n	80081f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80081f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008200:	e003      	b.n	800820a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	2b06      	cmp	r3, #6
 800820e:	d901      	bls.n	8008214 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008210:	2306      	movs	r3, #6
 8008212:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008218:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800821e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	2200      	movs	r2, #0
 8008224:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	3304      	adds	r3, #4
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe fdc6 	bl	8006dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	3318      	adds	r3, #24
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe fdc1 	bl	8006dbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	f1c3 0207 	rsb	r2, r3, #7
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	2200      	movs	r2, #0
 800825c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	3354      	adds	r3, #84	; 0x54
 8008264:	224c      	movs	r2, #76	; 0x4c
 8008266:	2100      	movs	r1, #0
 8008268:	4618      	mov	r0, r3
 800826a:	f002 f863 	bl	800a334 <memset>
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	4a0c      	ldr	r2, [pc, #48]	; (80082a4 <prvInitialiseNewTask+0x140>)
 8008272:	659a      	str	r2, [r3, #88]	; 0x58
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	4a0c      	ldr	r2, [pc, #48]	; (80082a8 <prvInitialiseNewTask+0x144>)
 8008278:	65da      	str	r2, [r3, #92]	; 0x5c
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	4a0b      	ldr	r2, [pc, #44]	; (80082ac <prvInitialiseNewTask+0x148>)
 800827e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	68f9      	ldr	r1, [r7, #12]
 8008284:	69b8      	ldr	r0, [r7, #24]
 8008286:	f001 fb47 	bl	8009918 <pxPortInitialiseStack>
 800828a:	4602      	mov	r2, r0
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800829a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800829c:	bf00      	nop
 800829e:	3720      	adds	r7, #32
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20005db0 	.word	0x20005db0
 80082a8:	20005e18 	.word	0x20005e18
 80082ac:	20005e80 	.word	0x20005e80

080082b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082b8:	f001 fc6c 	bl	8009b94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082bc:	4b67      	ldr	r3, [pc, #412]	; (800845c <prvAddNewTaskToReadyList+0x1ac>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	4a66      	ldr	r2, [pc, #408]	; (800845c <prvAddNewTaskToReadyList+0x1ac>)
 80082c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082c6:	4b66      	ldr	r3, [pc, #408]	; (8008460 <prvAddNewTaskToReadyList+0x1b0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d109      	bne.n	80082e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082ce:	4a64      	ldr	r2, [pc, #400]	; (8008460 <prvAddNewTaskToReadyList+0x1b0>)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082d4:	4b61      	ldr	r3, [pc, #388]	; (800845c <prvAddNewTaskToReadyList+0x1ac>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d110      	bne.n	80082fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082dc:	f000 fd52 	bl	8008d84 <prvInitialiseTaskLists>
 80082e0:	e00d      	b.n	80082fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082e2:	4b60      	ldr	r3, [pc, #384]	; (8008464 <prvAddNewTaskToReadyList+0x1b4>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d109      	bne.n	80082fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082ea:	4b5d      	ldr	r3, [pc, #372]	; (8008460 <prvAddNewTaskToReadyList+0x1b0>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d802      	bhi.n	80082fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082f8:	4a59      	ldr	r2, [pc, #356]	; (8008460 <prvAddNewTaskToReadyList+0x1b0>)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082fe:	4b5a      	ldr	r3, [pc, #360]	; (8008468 <prvAddNewTaskToReadyList+0x1b8>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3301      	adds	r3, #1
 8008304:	4a58      	ldr	r2, [pc, #352]	; (8008468 <prvAddNewTaskToReadyList+0x1b8>)
 8008306:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008308:	4b57      	ldr	r3, [pc, #348]	; (8008468 <prvAddNewTaskToReadyList+0x1b8>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d05f      	beq.n	80083d6 <prvAddNewTaskToReadyList+0x126>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d049      	beq.n	80083b0 <prvAddNewTaskToReadyList+0x100>
 800831c:	2003      	movs	r0, #3
 800831e:	f7f9 fdf5 	bl	8001f0c <prvTraceGetObjectHandle>
 8008322:	4603      	mov	r3, r0
 8008324:	b29b      	uxth	r3, r3
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7f8 fe15 	bl	8000f58 <prvTraceSetTaskNumberLow16>
 800832e:	4b4f      	ldr	r3, [pc, #316]	; (800846c <prvAddNewTaskToReadyList+0x1bc>)
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7f8 fe25 	bl	8000f84 <prvTraceSetTaskNumberHigh16>
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7f8 fdf1 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8008340:	4603      	mov	r3, r0
 8008342:	b2d9      	uxtb	r1, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3334      	adds	r3, #52	; 0x34
 8008348:	461a      	mov	r2, r3
 800834a:	2003      	movs	r0, #3
 800834c:	f7f9 feba 	bl	80020c4 <prvTraceSetObjectName>
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7f8 fde6 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8008356:	4603      	mov	r3, r0
 8008358:	b2d9      	uxtb	r1, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835e:	b2db      	uxtb	r3, r3
 8008360:	461a      	mov	r2, r3
 8008362:	2003      	movs	r0, #3
 8008364:	f7f9 fcc4 	bl	8001cf0 <prvTraceSetPriorityProperty>
 8008368:	f7f8 fe69 	bl	800103e <prvTraceGetCurrentTaskHandle>
 800836c:	4603      	mov	r3, r0
 800836e:	4618      	mov	r0, r3
 8008370:	f7f8 fde4 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8008374:	4603      	mov	r3, r0
 8008376:	461a      	mov	r2, r3
 8008378:	4b3d      	ldr	r3, [pc, #244]	; (8008470 <prvAddNewTaskToReadyList+0x1c0>)
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	4013      	ands	r3, r2
 800837e:	b29b      	uxth	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d028      	beq.n	80083d6 <prvAddNewTaskToReadyList+0x126>
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7f8 fdd9 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 800838a:	4603      	mov	r3, r0
 800838c:	461a      	mov	r2, r3
 800838e:	4b38      	ldr	r3, [pc, #224]	; (8008470 <prvAddNewTaskToReadyList+0x1c0>)
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	4013      	ands	r3, r2
 8008394:	b29b      	uxth	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d01d      	beq.n	80083d6 <prvAddNewTaskToReadyList+0x126>
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7f8 fdc1 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 80083a0:	4603      	mov	r3, r0
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	2103      	movs	r1, #3
 80083a8:	201b      	movs	r0, #27
 80083aa:	f7f9 fae9 	bl	8001980 <prvTraceStoreKernelCall>
 80083ae:	e012      	b.n	80083d6 <prvAddNewTaskToReadyList+0x126>
 80083b0:	f7f8 fe45 	bl	800103e <prvTraceGetCurrentTaskHandle>
 80083b4:	4603      	mov	r3, r0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7f8 fdc0 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 80083bc:	4603      	mov	r3, r0
 80083be:	461a      	mov	r2, r3
 80083c0:	4b2b      	ldr	r3, [pc, #172]	; (8008470 <prvAddNewTaskToReadyList+0x1c0>)
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	4013      	ands	r3, r2
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d004      	beq.n	80083d6 <prvAddNewTaskToReadyList+0x126>
 80083cc:	2200      	movs	r2, #0
 80083ce:	2103      	movs	r1, #3
 80083d0:	201b      	movs	r0, #27
 80083d2:	f7f9 fad5 	bl	8001980 <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7f8 fdb0 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 80083dc:	4603      	mov	r3, r0
 80083de:	461a      	mov	r2, r3
 80083e0:	4b23      	ldr	r3, [pc, #140]	; (8008470 <prvAddNewTaskToReadyList+0x1c0>)
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	4013      	ands	r3, r2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d007      	beq.n	80083fc <prvAddNewTaskToReadyList+0x14c>
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7f8 fd98 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 80083f2:	4603      	mov	r3, r0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7f9 f9ce 	bl	8001798 <prvTraceStoreTaskReady>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	2201      	movs	r2, #1
 8008402:	409a      	lsls	r2, r3
 8008404:	4b1b      	ldr	r3, [pc, #108]	; (8008474 <prvAddNewTaskToReadyList+0x1c4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4313      	orrs	r3, r2
 800840a:	4a1a      	ldr	r2, [pc, #104]	; (8008474 <prvAddNewTaskToReadyList+0x1c4>)
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4a17      	ldr	r2, [pc, #92]	; (8008478 <prvAddNewTaskToReadyList+0x1c8>)
 800841c:	441a      	add	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3304      	adds	r3, #4
 8008422:	4619      	mov	r1, r3
 8008424:	4610      	mov	r0, r2
 8008426:	f7fe fcd6 	bl	8006dd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800842a:	f001 fbe3 	bl	8009bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800842e:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <prvAddNewTaskToReadyList+0x1b4>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00e      	beq.n	8008454 <prvAddNewTaskToReadyList+0x1a4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008436:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <prvAddNewTaskToReadyList+0x1b0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	429a      	cmp	r2, r3
 8008442:	d207      	bcs.n	8008454 <prvAddNewTaskToReadyList+0x1a4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008444:	4b0d      	ldr	r3, [pc, #52]	; (800847c <prvAddNewTaskToReadyList+0x1cc>)
 8008446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20001d3c 	.word	0x20001d3c
 8008460:	20001c3c 	.word	0x20001c3c
 8008464:	20001d48 	.word	0x20001d48
 8008468:	20001d58 	.word	0x20001d58
 800846c:	20000242 	.word	0x20000242
 8008470:	20000240 	.word	0x20000240
 8008474:	20001d44 	.word	0x20001d44
 8008478:	20001c40 	.word	0x20001c40
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008486:	4b31      	ldr	r3, [pc, #196]	; (800854c <vTaskStartScheduler+0xcc>)
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	2300      	movs	r3, #0
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	2300      	movs	r3, #0
 8008490:	2280      	movs	r2, #128	; 0x80
 8008492:	492f      	ldr	r1, [pc, #188]	; (8008550 <vTaskStartScheduler+0xd0>)
 8008494:	482f      	ldr	r0, [pc, #188]	; (8008554 <vTaskStartScheduler+0xd4>)
 8008496:	f7ff fe23 	bl	80080e0 <xTaskCreate>
 800849a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d102      	bne.n	80084a8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80084a2:	f000 fe6f 	bl	8009184 <xTimerCreateTimerTask>
 80084a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d13a      	bne.n	8008524 <vTaskStartScheduler+0xa4>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	60bb      	str	r3, [r7, #8]
}
 80084c0:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084c2:	4b25      	ldr	r3, [pc, #148]	; (8008558 <vTaskStartScheduler+0xd8>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3354      	adds	r3, #84	; 0x54
 80084c8:	4a24      	ldr	r2, [pc, #144]	; (800855c <vTaskStartScheduler+0xdc>)
 80084ca:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084cc:	4b24      	ldr	r3, [pc, #144]	; (8008560 <vTaskStartScheduler+0xe0>)
 80084ce:	f04f 32ff 	mov.w	r2, #4294967295
 80084d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084d4:	4b23      	ldr	r3, [pc, #140]	; (8008564 <vTaskStartScheduler+0xe4>)
 80084d6:	2201      	movs	r2, #1
 80084d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084da:	4b23      	ldr	r3, [pc, #140]	; (8008568 <vTaskStartScheduler+0xe8>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80084e0:	4b22      	ldr	r3, [pc, #136]	; (800856c <vTaskStartScheduler+0xec>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	f7f8 fdaa 	bl	800103e <prvTraceGetCurrentTaskHandle>
 80084ea:	4603      	mov	r3, r0
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7f8 fd25 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 80084f2:	4603      	mov	r3, r0
 80084f4:	461a      	mov	r2, r3
 80084f6:	4b1e      	ldr	r3, [pc, #120]	; (8008570 <vTaskStartScheduler+0xf0>)
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	4013      	ands	r3, r2
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <vTaskStartScheduler+0x98>
 8008502:	f7f8 fd9c 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8008506:	4603      	mov	r3, r0
 8008508:	4618      	mov	r0, r3
 800850a:	f7f8 fd0a 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 800850e:	4603      	mov	r3, r0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	4618      	mov	r0, r3
 8008514:	f7f9 fb82 	bl	8001c1c <prvTraceStoreTaskswitch>
 8008518:	4b14      	ldr	r3, [pc, #80]	; (800856c <vTaskStartScheduler+0xec>)
 800851a:	2202      	movs	r2, #2
 800851c:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800851e:	f001 fa87 	bl	8009a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008522:	e00e      	b.n	8008542 <vTaskStartScheduler+0xc2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852a:	d10a      	bne.n	8008542 <vTaskStartScheduler+0xc2>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	607b      	str	r3, [r7, #4]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <vTaskStartScheduler+0xc0>
}
 8008542:	bf00      	nop
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20001d60 	.word	0x20001d60
 8008550:	0800ac9c 	.word	0x0800ac9c
 8008554:	08008d55 	.word	0x08008d55
 8008558:	20001c3c 	.word	0x20001c3c
 800855c:	20000068 	.word	0x20000068
 8008560:	20001d5c 	.word	0x20001d5c
 8008564:	20001d48 	.word	0x20001d48
 8008568:	20001d40 	.word	0x20001d40
 800856c:	20000228 	.word	0x20000228
 8008570:	20000240 	.word	0x20000240

08008574 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008578:	4b04      	ldr	r3, [pc, #16]	; (800858c <vTaskSuspendAll+0x18>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3301      	adds	r3, #1
 800857e:	4a03      	ldr	r2, [pc, #12]	; (800858c <vTaskSuspendAll+0x18>)
 8008580:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008582:	bf00      	nop
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	20001d64 	.word	0x20001d64

08008590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800859a:	2300      	movs	r3, #0
 800859c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800859e:	4b4b      	ldr	r3, [pc, #300]	; (80086cc <xTaskResumeAll+0x13c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10a      	bne.n	80085bc <xTaskResumeAll+0x2c>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	603b      	str	r3, [r7, #0]
}
 80085b8:	bf00      	nop
 80085ba:	e7fe      	b.n	80085ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085bc:	f001 faea 	bl	8009b94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085c0:	4b42      	ldr	r3, [pc, #264]	; (80086cc <xTaskResumeAll+0x13c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	4a41      	ldr	r2, [pc, #260]	; (80086cc <xTaskResumeAll+0x13c>)
 80085c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ca:	4b40      	ldr	r3, [pc, #256]	; (80086cc <xTaskResumeAll+0x13c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d174      	bne.n	80086bc <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085d2:	4b3f      	ldr	r3, [pc, #252]	; (80086d0 <xTaskResumeAll+0x140>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d070      	beq.n	80086bc <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085da:	e041      	b.n	8008660 <xTaskResumeAll+0xd0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085dc:	4b3d      	ldr	r3, [pc, #244]	; (80086d4 <xTaskResumeAll+0x144>)
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3318      	adds	r3, #24
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fe fc51 	bl	8006e90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3304      	adds	r3, #4
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fc4c 	bl	8006e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7f8 fc9f 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 80085fe:	4603      	mov	r3, r0
 8008600:	461a      	mov	r2, r3
 8008602:	4b35      	ldr	r3, [pc, #212]	; (80086d8 <xTaskResumeAll+0x148>)
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	4013      	ands	r3, r2
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <xTaskResumeAll+0x8e>
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7f8 fc87 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8008614:	4603      	mov	r3, r0
 8008616:	b2db      	uxtb	r3, r3
 8008618:	4618      	mov	r0, r3
 800861a:	f7f9 f8bd 	bl	8001798 <prvTraceStoreTaskReady>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	2201      	movs	r2, #1
 8008624:	409a      	lsls	r2, r3
 8008626:	4b2d      	ldr	r3, [pc, #180]	; (80086dc <xTaskResumeAll+0x14c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4313      	orrs	r3, r2
 800862c:	4a2b      	ldr	r2, [pc, #172]	; (80086dc <xTaskResumeAll+0x14c>)
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008634:	4613      	mov	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4a28      	ldr	r2, [pc, #160]	; (80086e0 <xTaskResumeAll+0x150>)
 800863e:	441a      	add	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3304      	adds	r3, #4
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f7fe fbc5 	bl	8006dd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008650:	4b24      	ldr	r3, [pc, #144]	; (80086e4 <xTaskResumeAll+0x154>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	429a      	cmp	r2, r3
 8008658:	d302      	bcc.n	8008660 <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 800865a:	4b23      	ldr	r3, [pc, #140]	; (80086e8 <xTaskResumeAll+0x158>)
 800865c:	2201      	movs	r2, #1
 800865e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008660:	4b1c      	ldr	r3, [pc, #112]	; (80086d4 <xTaskResumeAll+0x144>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1b9      	bne.n	80085dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800866e:	f000 fc0d 	bl	8008e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008672:	4b1e      	ldr	r3, [pc, #120]	; (80086ec <xTaskResumeAll+0x15c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d010      	beq.n	80086a0 <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800867e:	f000 f849 	bl	8008714 <xTaskIncrementTick>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 8008688:	4b17      	ldr	r3, [pc, #92]	; (80086e8 <xTaskResumeAll+0x158>)
 800868a:	2201      	movs	r2, #1
 800868c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3b01      	subs	r3, #1
 8008692:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1f1      	bne.n	800867e <xTaskResumeAll+0xee>

						xPendedTicks = 0;
 800869a:	4b14      	ldr	r3, [pc, #80]	; (80086ec <xTaskResumeAll+0x15c>)
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086a0:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <xTaskResumeAll+0x158>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086a8:	2301      	movs	r3, #1
 80086aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086ac:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <xTaskResumeAll+0x160>)
 80086ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086bc:	f001 fa9a 	bl	8009bf4 <vPortExitCritical>

	return xAlreadyYielded;
 80086c0:	68bb      	ldr	r3, [r7, #8]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20001d64 	.word	0x20001d64
 80086d0:	20001d3c 	.word	0x20001d3c
 80086d4:	20001cfc 	.word	0x20001cfc
 80086d8:	20000240 	.word	0x20000240
 80086dc:	20001d44 	.word	0x20001d44
 80086e0:	20001c40 	.word	0x20001c40
 80086e4:	20001c3c 	.word	0x20001c3c
 80086e8:	20001d50 	.word	0x20001d50
 80086ec:	20001d4c 	.word	0x20001d4c
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086fa:	4b05      	ldr	r3, [pc, #20]	; (8008710 <xTaskGetTickCount+0x1c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008700:	687b      	ldr	r3, [r7, #4]
}
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	20001d40 	.word	0x20001d40

08008714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800871a:	2300      	movs	r3, #0
 800871c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800871e:	4b65      	ldr	r3, [pc, #404]	; (80088b4 <xTaskIncrementTick+0x1a0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d003      	beq.n	800872e <xTaskIncrementTick+0x1a>
 8008726:	4b64      	ldr	r3, [pc, #400]	; (80088b8 <xTaskIncrementTick+0x1a4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d107      	bne.n	800873e <xTaskIncrementTick+0x2a>
 800872e:	4b63      	ldr	r3, [pc, #396]	; (80088bc <xTaskIncrementTick+0x1a8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3301      	adds	r3, #1
 8008734:	4a61      	ldr	r2, [pc, #388]	; (80088bc <xTaskIncrementTick+0x1a8>)
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	2000      	movs	r0, #0
 800873a:	f7f9 fefb 	bl	8002534 <prvTracePortGetTimeStamp>
 800873e:	4b5d      	ldr	r3, [pc, #372]	; (80088b4 <xTaskIncrementTick+0x1a0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <xTaskIncrementTick+0x40>
 8008746:	4b5e      	ldr	r3, [pc, #376]	; (80088c0 <xTaskIncrementTick+0x1ac>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3301      	adds	r3, #1
 800874c:	4619      	mov	r1, r3
 800874e:	2003      	movs	r0, #3
 8008750:	f7f9 fa08 	bl	8001b64 <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008754:	4b57      	ldr	r3, [pc, #348]	; (80088b4 <xTaskIncrementTick+0x1a0>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	f040 80a1 	bne.w	80088a0 <xTaskIncrementTick+0x18c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800875e:	4b58      	ldr	r3, [pc, #352]	; (80088c0 <xTaskIncrementTick+0x1ac>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3301      	adds	r3, #1
 8008764:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008766:	4a56      	ldr	r2, [pc, #344]	; (80088c0 <xTaskIncrementTick+0x1ac>)
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d120      	bne.n	80087b4 <xTaskIncrementTick+0xa0>
		{
			taskSWITCH_DELAYED_LISTS();
 8008772:	4b54      	ldr	r3, [pc, #336]	; (80088c4 <xTaskIncrementTick+0x1b0>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00a      	beq.n	8008792 <xTaskIncrementTick+0x7e>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	603b      	str	r3, [r7, #0]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <xTaskIncrementTick+0x7c>
 8008792:	4b4c      	ldr	r3, [pc, #304]	; (80088c4 <xTaskIncrementTick+0x1b0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	4b4b      	ldr	r3, [pc, #300]	; (80088c8 <xTaskIncrementTick+0x1b4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a49      	ldr	r2, [pc, #292]	; (80088c4 <xTaskIncrementTick+0x1b0>)
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	4a49      	ldr	r2, [pc, #292]	; (80088c8 <xTaskIncrementTick+0x1b4>)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	4b49      	ldr	r3, [pc, #292]	; (80088cc <xTaskIncrementTick+0x1b8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3301      	adds	r3, #1
 80087ac:	4a47      	ldr	r2, [pc, #284]	; (80088cc <xTaskIncrementTick+0x1b8>)
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	f000 fb6c 	bl	8008e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087b4:	4b46      	ldr	r3, [pc, #280]	; (80088d0 <xTaskIncrementTick+0x1bc>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d35b      	bcc.n	8008876 <xTaskIncrementTick+0x162>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087be:	4b41      	ldr	r3, [pc, #260]	; (80088c4 <xTaskIncrementTick+0x1b0>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <xTaskIncrementTick+0xbe>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087c8:	4b41      	ldr	r3, [pc, #260]	; (80088d0 <xTaskIncrementTick+0x1bc>)
 80087ca:	f04f 32ff 	mov.w	r2, #4294967295
 80087ce:	601a      	str	r2, [r3, #0]
					break;
 80087d0:	e051      	b.n	8008876 <xTaskIncrementTick+0x162>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d2:	4b3c      	ldr	r3, [pc, #240]	; (80088c4 <xTaskIncrementTick+0x1b0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d203      	bcs.n	80087f2 <xTaskIncrementTick+0xde>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087ea:	4a39      	ldr	r2, [pc, #228]	; (80088d0 <xTaskIncrementTick+0x1bc>)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087f0:	e041      	b.n	8008876 <xTaskIncrementTick+0x162>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	3304      	adds	r3, #4
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fb4a 	bl	8006e90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <xTaskIncrementTick+0xfa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	3318      	adds	r3, #24
 8008808:	4618      	mov	r0, r3
 800880a:	f7fe fb41 	bl	8006e90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800880e:	68b8      	ldr	r0, [r7, #8]
 8008810:	f7f8 fb94 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8008814:	4603      	mov	r3, r0
 8008816:	461a      	mov	r2, r3
 8008818:	4b2e      	ldr	r3, [pc, #184]	; (80088d4 <xTaskIncrementTick+0x1c0>)
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	4013      	ands	r3, r2
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d007      	beq.n	8008834 <xTaskIncrementTick+0x120>
 8008824:	68b8      	ldr	r0, [r7, #8]
 8008826:	f7f8 fb7c 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 800882a:	4603      	mov	r3, r0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	4618      	mov	r0, r3
 8008830:	f7f8 ffb2 	bl	8001798 <prvTraceStoreTaskReady>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	2201      	movs	r2, #1
 800883a:	409a      	lsls	r2, r3
 800883c:	4b26      	ldr	r3, [pc, #152]	; (80088d8 <xTaskIncrementTick+0x1c4>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4313      	orrs	r3, r2
 8008842:	4a25      	ldr	r2, [pc, #148]	; (80088d8 <xTaskIncrementTick+0x1c4>)
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4a22      	ldr	r2, [pc, #136]	; (80088dc <xTaskIncrementTick+0x1c8>)
 8008854:	441a      	add	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f7fe faba 	bl	8006dd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008866:	4b1e      	ldr	r3, [pc, #120]	; (80088e0 <xTaskIncrementTick+0x1cc>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886c:	429a      	cmp	r2, r3
 800886e:	d3a6      	bcc.n	80087be <xTaskIncrementTick+0xaa>
						{
							xSwitchRequired = pdTRUE;
 8008870:	2301      	movs	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008874:	e7a3      	b.n	80087be <xTaskIncrementTick+0xaa>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008876:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <xTaskIncrementTick+0x1cc>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887c:	4917      	ldr	r1, [pc, #92]	; (80088dc <xTaskIncrementTick+0x1c8>)
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d901      	bls.n	8008892 <xTaskIncrementTick+0x17e>
			{
				xSwitchRequired = pdTRUE;
 800888e:	2301      	movs	r3, #1
 8008890:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008892:	4b14      	ldr	r3, [pc, #80]	; (80088e4 <xTaskIncrementTick+0x1d0>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <xTaskIncrementTick+0x196>
			{
				xSwitchRequired = pdTRUE;
 800889a:	2301      	movs	r3, #1
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e004      	b.n	80088aa <xTaskIncrementTick+0x196>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088a0:	4b05      	ldr	r3, [pc, #20]	; (80088b8 <xTaskIncrementTick+0x1a4>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	4a04      	ldr	r2, [pc, #16]	; (80088b8 <xTaskIncrementTick+0x1a4>)
 80088a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088aa:	697b      	ldr	r3, [r7, #20]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	20001d64 	.word	0x20001d64
 80088b8:	20001d4c 	.word	0x20001d4c
 80088bc:	2000021c 	.word	0x2000021c
 80088c0:	20001d40 	.word	0x20001d40
 80088c4:	20001cf4 	.word	0x20001cf4
 80088c8:	20001cf8 	.word	0x20001cf8
 80088cc:	20001d54 	.word	0x20001d54
 80088d0:	20001d5c 	.word	0x20001d5c
 80088d4:	20000240 	.word	0x20000240
 80088d8:	20001d44 	.word	0x20001d44
 80088dc:	20001c40 	.word	0x20001c40
 80088e0:	20001c3c 	.word	0x20001c3c
 80088e4:	20001d50 	.word	0x20001d50

080088e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088ee:	4b38      	ldr	r3, [pc, #224]	; (80089d0 <vTaskSwitchContext+0xe8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088f6:	4b37      	ldr	r3, [pc, #220]	; (80089d4 <vTaskSwitchContext+0xec>)
 80088f8:	2201      	movs	r2, #1
 80088fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088fc:	e063      	b.n	80089c6 <vTaskSwitchContext+0xde>
		xYieldPending = pdFALSE;
 80088fe:	4b35      	ldr	r3, [pc, #212]	; (80089d4 <vTaskSwitchContext+0xec>)
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008904:	4b34      	ldr	r3, [pc, #208]	; (80089d8 <vTaskSwitchContext+0xf0>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	fab3 f383 	clz	r3, r3
 8008910:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008912:	7afb      	ldrb	r3, [r7, #11]
 8008914:	f1c3 031f 	rsb	r3, r3, #31
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	4930      	ldr	r1, [pc, #192]	; (80089dc <vTaskSwitchContext+0xf4>)
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <vTaskSwitchContext+0x5c>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	607b      	str	r3, [r7, #4]
}
 8008940:	bf00      	nop
 8008942:	e7fe      	b.n	8008942 <vTaskSwitchContext+0x5a>
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4a23      	ldr	r2, [pc, #140]	; (80089dc <vTaskSwitchContext+0xf4>)
 8008950:	4413      	add	r3, r2
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	605a      	str	r2, [r3, #4]
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	3308      	adds	r3, #8
 8008966:	429a      	cmp	r2, r3
 8008968:	d104      	bne.n	8008974 <vTaskSwitchContext+0x8c>
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	605a      	str	r2, [r3, #4]
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	4a19      	ldr	r2, [pc, #100]	; (80089e0 <vTaskSwitchContext+0xf8>)
 800897c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800897e:	4b19      	ldr	r3, [pc, #100]	; (80089e4 <vTaskSwitchContext+0xfc>)
 8008980:	2201      	movs	r2, #1
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	f7f8 fb5b 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8008988:	4603      	mov	r3, r0
 800898a:	4618      	mov	r0, r3
 800898c:	f7f8 fad6 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8008990:	4603      	mov	r3, r0
 8008992:	461a      	mov	r2, r3
 8008994:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <vTaskSwitchContext+0x100>)
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	4013      	ands	r3, r2
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00a      	beq.n	80089b6 <vTaskSwitchContext+0xce>
 80089a0:	f7f8 fb4d 	bl	800103e <prvTraceGetCurrentTaskHandle>
 80089a4:	4603      	mov	r3, r0
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7f8 fabb 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 80089ac:	4603      	mov	r3, r0
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7f9 f933 	bl	8001c1c <prvTraceStoreTaskswitch>
 80089b6:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <vTaskSwitchContext+0xfc>)
 80089b8:	2202      	movs	r2, #2
 80089ba:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089bc:	4b08      	ldr	r3, [pc, #32]	; (80089e0 <vTaskSwitchContext+0xf8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3354      	adds	r3, #84	; 0x54
 80089c2:	4a0a      	ldr	r2, [pc, #40]	; (80089ec <vTaskSwitchContext+0x104>)
 80089c4:	6013      	str	r3, [r2, #0]
}
 80089c6:	bf00      	nop
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20001d64 	.word	0x20001d64
 80089d4:	20001d50 	.word	0x20001d50
 80089d8:	20001d44 	.word	0x20001d44
 80089dc:	20001c40 	.word	0x20001c40
 80089e0:	20001c3c 	.word	0x20001c3c
 80089e4:	20000228 	.word	0x20000228
 80089e8:	20000240 	.word	0x20000240
 80089ec:	20000068 	.word	0x20000068

080089f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	60fb      	str	r3, [r7, #12]
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a16:	4b07      	ldr	r3, [pc, #28]	; (8008a34 <vTaskPlaceOnEventList+0x44>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3318      	adds	r3, #24
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7fe f9fd 	bl	8006e1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a24:	2101      	movs	r1, #1
 8008a26:	6838      	ldr	r0, [r7, #0]
 8008a28:	f000 fb46 	bl	80090b8 <prvAddCurrentTaskToDelayedList>
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20001c3c 	.word	0x20001c3c

08008a38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10a      	bne.n	8008a60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	617b      	str	r3, [r7, #20]
}
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a60:	4b26      	ldr	r3, [pc, #152]	; (8008afc <vTaskPlaceOnEventListRestricted+0xc4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3318      	adds	r3, #24
 8008a66:	4619      	mov	r1, r3
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7fe f9b4 	bl	8006dd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a74:	f04f 33ff 	mov.w	r3, #4294967295
 8008a78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8008a7a:	4b20      	ldr	r3, [pc, #128]	; (8008afc <vTaskPlaceOnEventListRestricted+0xc4>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f8 fa5c 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	4b1d      	ldr	r3, [pc, #116]	; (8008b00 <vTaskPlaceOnEventListRestricted+0xc8>)
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d011      	beq.n	8008ab8 <vTaskPlaceOnEventListRestricted+0x80>
 8008a94:	4b1b      	ldr	r3, [pc, #108]	; (8008b04 <vTaskPlaceOnEventListRestricted+0xcc>)
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	2088      	movs	r0, #136	; 0x88
 8008aa0:	f7f9 f860 	bl	8001b64 <prvTraceStoreKernelCallWithNumericParamOnly>
 8008aa4:	4b15      	ldr	r3, [pc, #84]	; (8008afc <vTaskPlaceOnEventListRestricted+0xc4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7f8 fa3a 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7f9 f9ac 	bl	8001e10 <prvTraceSetTaskInstanceFinished>
 8008ab8:	f7f8 fac1 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8008abc:	4603      	mov	r3, r0
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7f8 fa3c 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <vTaskPlaceOnEventListRestricted+0xc8>)
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	4013      	ands	r3, r2
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00a      	beq.n	8008aea <vTaskPlaceOnEventListRestricted+0xb2>
 8008ad4:	f7f8 fab3 	bl	800103e <prvTraceGetCurrentTaskHandle>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7f8 fa21 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7f9 f993 	bl	8001e10 <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	68b8      	ldr	r0, [r7, #8]
 8008aee:	f000 fae3 	bl	80090b8 <prvAddCurrentTaskToDelayedList>
	}
 8008af2:	bf00      	nop
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	20001c3c 	.word	0x20001c3c
 8008b00:	20000240 	.word	0x20000240
 8008b04:	20001d40 	.word	0x20001d40

08008b08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10a      	bne.n	8008b34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	60fb      	str	r3, [r7, #12]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	3318      	adds	r3, #24
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe f9a9 	bl	8006e90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b3e:	4b27      	ldr	r3, [pc, #156]	; (8008bdc <xTaskRemoveFromEventList+0xd4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d12f      	bne.n	8008ba6 <xTaskRemoveFromEventList+0x9e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe f9a0 	bl	8006e90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b50:	6938      	ldr	r0, [r7, #16]
 8008b52:	f7f8 f9f3 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8008b56:	4603      	mov	r3, r0
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4b21      	ldr	r3, [pc, #132]	; (8008be0 <xTaskRemoveFromEventList+0xd8>)
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	4013      	ands	r3, r2
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d007      	beq.n	8008b76 <xTaskRemoveFromEventList+0x6e>
 8008b66:	6938      	ldr	r0, [r7, #16]
 8008b68:	f7f8 f9db 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7f8 fe11 	bl	8001798 <prvTraceStoreTaskReady>
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	409a      	lsls	r2, r3
 8008b7e:	4b19      	ldr	r3, [pc, #100]	; (8008be4 <xTaskRemoveFromEventList+0xdc>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	4a17      	ldr	r2, [pc, #92]	; (8008be4 <xTaskRemoveFromEventList+0xdc>)
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4a14      	ldr	r2, [pc, #80]	; (8008be8 <xTaskRemoveFromEventList+0xe0>)
 8008b96:	441a      	add	r2, r3
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	f7fe f919 	bl	8006dd6 <vListInsertEnd>
 8008ba4:	e005      	b.n	8008bb2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	3318      	adds	r3, #24
 8008baa:	4619      	mov	r1, r3
 8008bac:	480f      	ldr	r0, [pc, #60]	; (8008bec <xTaskRemoveFromEventList+0xe4>)
 8008bae:	f7fe f912 	bl	8006dd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb6:	4b0e      	ldr	r3, [pc, #56]	; (8008bf0 <xTaskRemoveFromEventList+0xe8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d905      	bls.n	8008bcc <xTaskRemoveFromEventList+0xc4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <xTaskRemoveFromEventList+0xec>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e001      	b.n	8008bd0 <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		xReturn = pdFALSE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008bd0:	697b      	ldr	r3, [r7, #20]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20001d64 	.word	0x20001d64
 8008be0:	20000240 	.word	0x20000240
 8008be4:	20001d44 	.word	0x20001d44
 8008be8:	20001c40 	.word	0x20001c40
 8008bec:	20001cfc 	.word	0x20001cfc
 8008bf0:	20001c3c 	.word	0x20001c3c
 8008bf4:	20001d50 	.word	0x20001d50

08008bf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <vTaskInternalSetTimeOutState+0x24>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c08:	4b05      	ldr	r3, [pc, #20]	; (8008c20 <vTaskInternalSetTimeOutState+0x28>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	605a      	str	r2, [r3, #4]
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	20001d54 	.word	0x20001d54
 8008c20:	20001d40 	.word	0x20001d40

08008c24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b088      	sub	sp, #32
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	613b      	str	r3, [r7, #16]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10a      	bne.n	8008c66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	60fb      	str	r3, [r7, #12]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008c66:	f000 ff95 	bl	8009b94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <xTaskCheckForTimeOut+0xbc>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c82:	d102      	bne.n	8008c8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c84:	2300      	movs	r3, #0
 8008c86:	61fb      	str	r3, [r7, #28]
 8008c88:	e023      	b.n	8008cd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	4b15      	ldr	r3, [pc, #84]	; (8008ce4 <xTaskCheckForTimeOut+0xc0>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d007      	beq.n	8008ca6 <xTaskCheckForTimeOut+0x82>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d302      	bcc.n	8008ca6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	61fb      	str	r3, [r7, #28]
 8008ca4:	e015      	b.n	8008cd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d20b      	bcs.n	8008cc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	1ad2      	subs	r2, r2, r3
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ff9b 	bl	8008bf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61fb      	str	r3, [r7, #28]
 8008cc6:	e004      	b.n	8008cd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cd2:	f000 ff8f 	bl	8009bf4 <vPortExitCritical>

	return xReturn;
 8008cd6:	69fb      	ldr	r3, [r7, #28]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3720      	adds	r7, #32
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20001d40 	.word	0x20001d40
 8008ce4:	20001d54 	.word	0x20001d54

08008ce8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008cec:	4b03      	ldr	r3, [pc, #12]	; (8008cfc <vTaskMissedYield+0x14>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]
}
 8008cf2:	bf00      	nop
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	20001d50 	.word	0x20001d50

08008d00 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d005      	beq.n	8008d1a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	e001      	b.n	8008d1e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
	}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d004      	beq.n	8008d46 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
	...

08008d54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d5c:	f000 f852 	bl	8008e04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d60:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <prvIdleTask+0x28>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d9f9      	bls.n	8008d5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <prvIdleTask+0x2c>)
 8008d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d78:	e7f0      	b.n	8008d5c <prvIdleTask+0x8>
 8008d7a:	bf00      	nop
 8008d7c:	20001c40 	.word	0x20001c40
 8008d80:	e000ed04 	.word	0xe000ed04

08008d84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	607b      	str	r3, [r7, #4]
 8008d8e:	e00c      	b.n	8008daa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	4613      	mov	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4a12      	ldr	r2, [pc, #72]	; (8008de4 <prvInitialiseTaskLists+0x60>)
 8008d9c:	4413      	add	r3, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fd ffec 	bl	8006d7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3301      	adds	r3, #1
 8008da8:	607b      	str	r3, [r7, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b06      	cmp	r3, #6
 8008dae:	d9ef      	bls.n	8008d90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008db0:	480d      	ldr	r0, [pc, #52]	; (8008de8 <prvInitialiseTaskLists+0x64>)
 8008db2:	f7fd ffe3 	bl	8006d7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008db6:	480d      	ldr	r0, [pc, #52]	; (8008dec <prvInitialiseTaskLists+0x68>)
 8008db8:	f7fd ffe0 	bl	8006d7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dbc:	480c      	ldr	r0, [pc, #48]	; (8008df0 <prvInitialiseTaskLists+0x6c>)
 8008dbe:	f7fd ffdd 	bl	8006d7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dc2:	480c      	ldr	r0, [pc, #48]	; (8008df4 <prvInitialiseTaskLists+0x70>)
 8008dc4:	f7fd ffda 	bl	8006d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008dc8:	480b      	ldr	r0, [pc, #44]	; (8008df8 <prvInitialiseTaskLists+0x74>)
 8008dca:	f7fd ffd7 	bl	8006d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dce:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <prvInitialiseTaskLists+0x78>)
 8008dd0:	4a05      	ldr	r2, [pc, #20]	; (8008de8 <prvInitialiseTaskLists+0x64>)
 8008dd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008dd4:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <prvInitialiseTaskLists+0x7c>)
 8008dd6:	4a05      	ldr	r2, [pc, #20]	; (8008dec <prvInitialiseTaskLists+0x68>)
 8008dd8:	601a      	str	r2, [r3, #0]
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	20001c40 	.word	0x20001c40
 8008de8:	20001ccc 	.word	0x20001ccc
 8008dec:	20001ce0 	.word	0x20001ce0
 8008df0:	20001cfc 	.word	0x20001cfc
 8008df4:	20001d10 	.word	0x20001d10
 8008df8:	20001d28 	.word	0x20001d28
 8008dfc:	20001cf4 	.word	0x20001cf4
 8008e00:	20001cf8 	.word	0x20001cf8

08008e04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e0a:	e019      	b.n	8008e40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e0c:	f000 fec2 	bl	8009b94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e10:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <prvCheckTasksWaitingTermination+0x50>)
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe f837 	bl	8006e90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e22:	4b0d      	ldr	r3, [pc, #52]	; (8008e58 <prvCheckTasksWaitingTermination+0x54>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	4a0b      	ldr	r2, [pc, #44]	; (8008e58 <prvCheckTasksWaitingTermination+0x54>)
 8008e2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <prvCheckTasksWaitingTermination+0x58>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	4a0a      	ldr	r2, [pc, #40]	; (8008e5c <prvCheckTasksWaitingTermination+0x58>)
 8008e34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e36:	f000 fedd 	bl	8009bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f810 	bl	8008e60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e40:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <prvCheckTasksWaitingTermination+0x58>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e1      	bne.n	8008e0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e48:	bf00      	nop
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20001d10 	.word	0x20001d10
 8008e58:	20001d3c 	.word	0x20001d3c
 8008e5c:	20001d24 	.word	0x20001d24

08008e60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3354      	adds	r3, #84	; 0x54
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f001 fa69 	bl	800a344 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e76:	4618      	mov	r0, r3
 8008e78:	f001 f88a 	bl	8009f90 <vPortFree>
			vPortFree( pxTCB );
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 f887 	bl	8009f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e82:	bf00      	nop
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e92:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <prvResetNextTaskUnblockTime+0x38>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8008e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ea4:	e008      	b.n	8008eb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea6:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <prvResetNextTaskUnblockTime+0x38>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	4a04      	ldr	r2, [pc, #16]	; (8008ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8008eb6:	6013      	str	r3, [r2, #0]
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	20001cf4 	.word	0x20001cf4
 8008ec8:	20001d5c 	.word	0x20001d5c

08008ecc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008ed2:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <xTaskGetCurrentTaskHandle+0x1c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008ed8:	687b      	ldr	r3, [r7, #4]
	}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20001c3c 	.word	0x20001c3c

08008eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <xTaskGetSchedulerState+0x34>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d102      	bne.n	8008f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008efa:	2301      	movs	r3, #1
 8008efc:	607b      	str	r3, [r7, #4]
 8008efe:	e008      	b.n	8008f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f00:	4b08      	ldr	r3, [pc, #32]	; (8008f24 <xTaskGetSchedulerState+0x38>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d102      	bne.n	8008f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	607b      	str	r3, [r7, #4]
 8008f0c:	e001      	b.n	8008f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f12:	687b      	ldr	r3, [r7, #4]
	}
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	20001d48 	.word	0x20001d48
 8008f24:	20001d64 	.word	0x20001d64

08008f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f28:	b590      	push	{r4, r7, lr}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f34:	2300      	movs	r3, #0
 8008f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 80af 	beq.w	800909e <xTaskPriorityDisinherit+0x176>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f40:	4b59      	ldr	r3, [pc, #356]	; (80090a8 <xTaskPriorityDisinherit+0x180>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d00a      	beq.n	8008f60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	60fb      	str	r3, [r7, #12]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <xTaskPriorityDisinherit+0x56>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	60bb      	str	r3, [r7, #8]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f82:	1e5a      	subs	r2, r3, #1
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f90:	429a      	cmp	r2, r3
 8008f92:	f000 8084 	beq.w	800909e <xTaskPriorityDisinherit+0x176>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d17f      	bne.n	800909e <xTaskPriorityDisinherit+0x176>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fd ff74 	bl	8006e90 <uxListRemove>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d115      	bne.n	8008fda <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb2:	493e      	ldr	r1, [pc, #248]	; (80090ac <xTaskPriorityDisinherit+0x184>)
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	440b      	add	r3, r1
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <xTaskPriorityDisinherit+0xb2>
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	2201      	movs	r2, #1
 8008fca:	fa02 f303 	lsl.w	r3, r2, r3
 8008fce:	43da      	mvns	r2, r3
 8008fd0:	4b37      	ldr	r3, [pc, #220]	; (80090b0 <xTaskPriorityDisinherit+0x188>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	4a36      	ldr	r2, [pc, #216]	; (80090b0 <xTaskPriorityDisinherit+0x188>)
 8008fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8008fda:	6938      	ldr	r0, [r7, #16]
 8008fdc:	f7f7 ffae 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	4b33      	ldr	r3, [pc, #204]	; (80090b4 <xTaskPriorityDisinherit+0x18c>)
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d020      	beq.n	8009032 <xTaskPriorityDisinherit+0x10a>
 8008ff0:	6938      	ldr	r0, [r7, #16]
 8008ff2:	f7f7 ff96 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	461c      	mov	r4, r3
 8008ffc:	6938      	ldr	r0, [r7, #16]
 8008ffe:	f7f7 ff90 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8009002:	4603      	mov	r3, r0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	4619      	mov	r1, r3
 8009008:	2003      	movs	r0, #3
 800900a:	f7f8 fe97 	bl	8001d3c <prvTraceGetPriorityProperty>
 800900e:	4603      	mov	r3, r0
 8009010:	4622      	mov	r2, r4
 8009012:	2103      	movs	r1, #3
 8009014:	208f      	movs	r0, #143	; 0x8f
 8009016:	f7f8 fd0f 	bl	8001a38 <prvTraceStoreKernelCallWithParam>
 800901a:	6938      	ldr	r0, [r7, #16]
 800901c:	f7f7 ff81 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8009020:	4603      	mov	r3, r0
 8009022:	b2d9      	uxtb	r1, r3
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009028:	b2db      	uxtb	r3, r3
 800902a:	461a      	mov	r2, r3
 800902c:	2003      	movs	r0, #3
 800902e:	f7f8 fe5f 	bl	8001cf0 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903e:	f1c3 0207 	rsb	r2, r3, #7
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009046:	6938      	ldr	r0, [r7, #16]
 8009048:	f7f7 ff78 	bl	8000f3c <prvTraceGetTaskNumberHigh16>
 800904c:	4603      	mov	r3, r0
 800904e:	461a      	mov	r2, r3
 8009050:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <xTaskPriorityDisinherit+0x18c>)
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	4013      	ands	r3, r2
 8009056:	b29b      	uxth	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d007      	beq.n	800906c <xTaskPriorityDisinherit+0x144>
 800905c:	6938      	ldr	r0, [r7, #16]
 800905e:	f7f7 ff60 	bl	8000f22 <prvTraceGetTaskNumberLow16>
 8009062:	4603      	mov	r3, r0
 8009064:	b2db      	uxtb	r3, r3
 8009066:	4618      	mov	r0, r3
 8009068:	f7f8 fb96 	bl	8001798 <prvTraceStoreTaskReady>
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	2201      	movs	r2, #1
 8009072:	409a      	lsls	r2, r3
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <xTaskPriorityDisinherit+0x188>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4313      	orrs	r3, r2
 800907a:	4a0d      	ldr	r2, [pc, #52]	; (80090b0 <xTaskPriorityDisinherit+0x188>)
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4a08      	ldr	r2, [pc, #32]	; (80090ac <xTaskPriorityDisinherit+0x184>)
 800908c:	441a      	add	r2, r3
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	3304      	adds	r3, #4
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f7fd fe9e 	bl	8006dd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800909a:	2301      	movs	r3, #1
 800909c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800909e:	697b      	ldr	r3, [r7, #20]
	}
 80090a0:	4618      	mov	r0, r3
 80090a2:	371c      	adds	r7, #28
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd90      	pop	{r4, r7, pc}
 80090a8:	20001c3c 	.word	0x20001c3c
 80090ac:	20001c40 	.word	0x20001c40
 80090b0:	20001d44 	.word	0x20001d44
 80090b4:	20000240 	.word	0x20000240

080090b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090c2:	4b29      	ldr	r3, [pc, #164]	; (8009168 <prvAddCurrentTaskToDelayedList+0xb0>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090c8:	4b28      	ldr	r3, [pc, #160]	; (800916c <prvAddCurrentTaskToDelayedList+0xb4>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fd fede 	bl	8006e90 <uxListRemove>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10b      	bne.n	80090f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80090da:	4b24      	ldr	r3, [pc, #144]	; (800916c <prvAddCurrentTaskToDelayedList+0xb4>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e0:	2201      	movs	r2, #1
 80090e2:	fa02 f303 	lsl.w	r3, r2, r3
 80090e6:	43da      	mvns	r2, r3
 80090e8:	4b21      	ldr	r3, [pc, #132]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4013      	ands	r3, r2
 80090ee:	4a20      	ldr	r2, [pc, #128]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f8:	d10a      	bne.n	8009110 <prvAddCurrentTaskToDelayedList+0x58>
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d007      	beq.n	8009110 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009100:	4b1a      	ldr	r3, [pc, #104]	; (800916c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3304      	adds	r3, #4
 8009106:	4619      	mov	r1, r3
 8009108:	481a      	ldr	r0, [pc, #104]	; (8009174 <prvAddCurrentTaskToDelayedList+0xbc>)
 800910a:	f7fd fe64 	bl	8006dd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800910e:	e026      	b.n	800915e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4413      	add	r3, r2
 8009116:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009118:	4b14      	ldr	r3, [pc, #80]	; (800916c <prvAddCurrentTaskToDelayedList+0xb4>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	429a      	cmp	r2, r3
 8009126:	d209      	bcs.n	800913c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009128:	4b13      	ldr	r3, [pc, #76]	; (8009178 <prvAddCurrentTaskToDelayedList+0xc0>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	4b0f      	ldr	r3, [pc, #60]	; (800916c <prvAddCurrentTaskToDelayedList+0xb4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3304      	adds	r3, #4
 8009132:	4619      	mov	r1, r3
 8009134:	4610      	mov	r0, r2
 8009136:	f7fd fe72 	bl	8006e1e <vListInsert>
}
 800913a:	e010      	b.n	800915e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800913c:	4b0f      	ldr	r3, [pc, #60]	; (800917c <prvAddCurrentTaskToDelayedList+0xc4>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3304      	adds	r3, #4
 8009146:	4619      	mov	r1, r3
 8009148:	4610      	mov	r0, r2
 800914a:	f7fd fe68 	bl	8006e1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	429a      	cmp	r2, r3
 8009156:	d202      	bcs.n	800915e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009158:	4a09      	ldr	r2, [pc, #36]	; (8009180 <prvAddCurrentTaskToDelayedList+0xc8>)
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6013      	str	r3, [r2, #0]
}
 800915e:	bf00      	nop
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20001d40 	.word	0x20001d40
 800916c:	20001c3c 	.word	0x20001c3c
 8009170:	20001d44 	.word	0x20001d44
 8009174:	20001d28 	.word	0x20001d28
 8009178:	20001cf8 	.word	0x20001cf8
 800917c:	20001cf4 	.word	0x20001cf4
 8009180:	20001d5c 	.word	0x20001d5c

08009184 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800918a:	2300      	movs	r3, #0
 800918c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800918e:	f000 fb4d 	bl	800982c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009192:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <xTimerCreateTimerTask+0x54>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800919a:	4b10      	ldr	r3, [pc, #64]	; (80091dc <xTimerCreateTimerTask+0x58>)
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	2305      	movs	r3, #5
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091a8:	490d      	ldr	r1, [pc, #52]	; (80091e0 <xTimerCreateTimerTask+0x5c>)
 80091aa:	480e      	ldr	r0, [pc, #56]	; (80091e4 <xTimerCreateTimerTask+0x60>)
 80091ac:	f7fe ff98 	bl	80080e0 <xTaskCreate>
 80091b0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10a      	bne.n	80091ce <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	603b      	str	r3, [r7, #0]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <xTimerCreateTimerTask+0x48>
	return xReturn;
 80091ce:	687b      	ldr	r3, [r7, #4]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	20001d98 	.word	0x20001d98
 80091dc:	20001d9c 	.word	0x20001d9c
 80091e0:	0800aca4 	.word	0x0800aca4
 80091e4:	080093d5 	.word	0x080093d5

080091e8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b088      	sub	sp, #32
 80091ec:	af02      	add	r7, sp, #8
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80091f6:	202c      	movs	r0, #44	; 0x2c
 80091f8:	f000 fdee 	bl	8009dd8 <pvPortMalloc>
 80091fc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00d      	beq.n	8009220 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	9301      	str	r3, [sp, #4]
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	68b9      	ldr	r1, [r7, #8]
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f000 f805 	bl	800922a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009220:	697b      	ldr	r3, [r7, #20]
	}
 8009222:	4618      	mov	r0, r3
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b086      	sub	sp, #24
 800922e:	af00      	add	r7, sp, #0
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	607a      	str	r2, [r7, #4]
 8009236:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	617b      	str	r3, [r7, #20]
}
 8009250:	bf00      	nop
 8009252:	e7fe      	b.n	8009252 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01e      	beq.n	8009298 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800925a:	f000 fae7 	bl	800982c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	6a3a      	ldr	r2, [r7, #32]
 8009274:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	3304      	adds	r3, #4
 800927a:	4618      	mov	r0, r3
 800927c:	f7fd fd9e 	bl	8006dbc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800928c:	f043 0304 	orr.w	r3, r3, #4
 8009290:	b2da      	uxtb	r2, r3
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009298:	bf00      	nop
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08a      	sub	sp, #40	; 0x28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10a      	bne.n	80092ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	623b      	str	r3, [r7, #32]
}
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092ce:	4b1a      	ldr	r3, [pc, #104]	; (8009338 <xTimerGenericCommand+0x98>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d02a      	beq.n	800932c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b05      	cmp	r3, #5
 80092e6:	dc18      	bgt.n	800931a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092e8:	f7ff fe00 	bl	8008eec <xTaskGetSchedulerState>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d109      	bne.n	8009306 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092f2:	4b11      	ldr	r3, [pc, #68]	; (8009338 <xTimerGenericCommand+0x98>)
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	f107 0110 	add.w	r1, r7, #16
 80092fa:	2300      	movs	r3, #0
 80092fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092fe:	f7fd ff47 	bl	8007190 <xQueueGenericSend>
 8009302:	6278      	str	r0, [r7, #36]	; 0x24
 8009304:	e012      	b.n	800932c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009306:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <xTimerGenericCommand+0x98>)
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	f107 0110 	add.w	r1, r7, #16
 800930e:	2300      	movs	r3, #0
 8009310:	2200      	movs	r2, #0
 8009312:	f7fd ff3d 	bl	8007190 <xQueueGenericSend>
 8009316:	6278      	str	r0, [r7, #36]	; 0x24
 8009318:	e008      	b.n	800932c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800931a:	4b07      	ldr	r3, [pc, #28]	; (8009338 <xTimerGenericCommand+0x98>)
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	f107 0110 	add.w	r1, r7, #16
 8009322:	2300      	movs	r3, #0
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	f7fe f95d 	bl	80075e4 <xQueueGenericSendFromISR>
 800932a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800932e:	4618      	mov	r0, r3
 8009330:	3728      	adds	r7, #40	; 0x28
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20001d98 	.word	0x20001d98

0800933c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af02      	add	r7, sp, #8
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009346:	4b22      	ldr	r3, [pc, #136]	; (80093d0 <prvProcessExpiredTimer+0x94>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	3304      	adds	r3, #4
 8009354:	4618      	mov	r0, r3
 8009356:	f7fd fd9b 	bl	8006e90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009360:	f003 0304 	and.w	r3, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	d022      	beq.n	80093ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	18d1      	adds	r1, r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	6978      	ldr	r0, [r7, #20]
 8009376:	f000 f8d1 	bl	800951c <prvInsertTimerInActiveList>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d01f      	beq.n	80093c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009380:	2300      	movs	r3, #0
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	2300      	movs	r3, #0
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	2100      	movs	r1, #0
 800938a:	6978      	ldr	r0, [r7, #20]
 800938c:	f7ff ff88 	bl	80092a0 <xTimerGenericCommand>
 8009390:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d113      	bne.n	80093c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	60fb      	str	r3, [r7, #12]
}
 80093aa:	bf00      	nop
 80093ac:	e7fe      	b.n	80093ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093b4:	f023 0301 	bic.w	r3, r3, #1
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	6978      	ldr	r0, [r7, #20]
 80093c6:	4798      	blx	r3
}
 80093c8:	bf00      	nop
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20001d90 	.word	0x20001d90

080093d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093dc:	f107 0308 	add.w	r3, r7, #8
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 f857 	bl	8009494 <prvGetNextExpireTime>
 80093e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	4619      	mov	r1, r3
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 f803 	bl	80093f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093f2:	f000 f8d5 	bl	80095a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093f6:	e7f1      	b.n	80093dc <prvTimerTask+0x8>

080093f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009402:	f7ff f8b7 	bl	8008574 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009406:	f107 0308 	add.w	r3, r7, #8
 800940a:	4618      	mov	r0, r3
 800940c:	f000 f866 	bl	80094dc <prvSampleTimeNow>
 8009410:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d130      	bne.n	800947a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <prvProcessTimerOrBlockTask+0x3c>
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	429a      	cmp	r2, r3
 8009424:	d806      	bhi.n	8009434 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009426:	f7ff f8b3 	bl	8008590 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800942a:	68f9      	ldr	r1, [r7, #12]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff ff85 	bl	800933c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009432:	e024      	b.n	800947e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d008      	beq.n	800944c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800943a:	4b13      	ldr	r3, [pc, #76]	; (8009488 <prvProcessTimerOrBlockTask+0x90>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <prvProcessTimerOrBlockTask+0x50>
 8009444:	2301      	movs	r3, #1
 8009446:	e000      	b.n	800944a <prvProcessTimerOrBlockTask+0x52>
 8009448:	2300      	movs	r3, #0
 800944a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800944c:	4b0f      	ldr	r3, [pc, #60]	; (800948c <prvProcessTimerOrBlockTask+0x94>)
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	4619      	mov	r1, r3
 800945a:	f7fe fd67 	bl	8007f2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800945e:	f7ff f897 	bl	8008590 <xTaskResumeAll>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10a      	bne.n	800947e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009468:	4b09      	ldr	r3, [pc, #36]	; (8009490 <prvProcessTimerOrBlockTask+0x98>)
 800946a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	f3bf 8f6f 	isb	sy
}
 8009478:	e001      	b.n	800947e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800947a:	f7ff f889 	bl	8008590 <xTaskResumeAll>
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20001d94 	.word	0x20001d94
 800948c:	20001d98 	.word	0x20001d98
 8009490:	e000ed04 	.word	0xe000ed04

08009494 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800949c:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <prvGetNextExpireTime+0x44>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <prvGetNextExpireTime+0x16>
 80094a6:	2201      	movs	r2, #1
 80094a8:	e000      	b.n	80094ac <prvGetNextExpireTime+0x18>
 80094aa:	2200      	movs	r2, #0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d105      	bne.n	80094c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094b8:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <prvGetNextExpireTime+0x44>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	e001      	b.n	80094c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094c8:	68fb      	ldr	r3, [r7, #12]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	20001d90 	.word	0x20001d90

080094dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094e4:	f7ff f906 	bl	80086f4 <xTaskGetTickCount>
 80094e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <prvSampleTimeNow+0x3c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d205      	bcs.n	8009500 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094f4:	f000 f936 	bl	8009764 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	e002      	b.n	8009506 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009506:	4a04      	ldr	r2, [pc, #16]	; (8009518 <prvSampleTimeNow+0x3c>)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800950c:	68fb      	ldr	r3, [r7, #12]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20001da0 	.word	0x20001da0

0800951c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800952a:	2300      	movs	r3, #0
 800952c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	429a      	cmp	r2, r3
 8009540:	d812      	bhi.n	8009568 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	1ad2      	subs	r2, r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	429a      	cmp	r2, r3
 800954e:	d302      	bcc.n	8009556 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009550:	2301      	movs	r3, #1
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	e01b      	b.n	800958e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009556:	4b10      	ldr	r3, [pc, #64]	; (8009598 <prvInsertTimerInActiveList+0x7c>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3304      	adds	r3, #4
 800955e:	4619      	mov	r1, r3
 8009560:	4610      	mov	r0, r2
 8009562:	f7fd fc5c 	bl	8006e1e <vListInsert>
 8009566:	e012      	b.n	800958e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d206      	bcs.n	800957e <prvInsertTimerInActiveList+0x62>
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	429a      	cmp	r2, r3
 8009576:	d302      	bcc.n	800957e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009578:	2301      	movs	r3, #1
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	e007      	b.n	800958e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800957e:	4b07      	ldr	r3, [pc, #28]	; (800959c <prvInsertTimerInActiveList+0x80>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3304      	adds	r3, #4
 8009586:	4619      	mov	r1, r3
 8009588:	4610      	mov	r0, r2
 800958a:	f7fd fc48 	bl	8006e1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800958e:	697b      	ldr	r3, [r7, #20]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	20001d94 	.word	0x20001d94
 800959c:	20001d90 	.word	0x20001d90

080095a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08e      	sub	sp, #56	; 0x38
 80095a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095a6:	e0ca      	b.n	800973e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	da18      	bge.n	80095e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095ae:	1d3b      	adds	r3, r7, #4
 80095b0:	3304      	adds	r3, #4
 80095b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	61fb      	str	r3, [r7, #28]
}
 80095cc:	bf00      	nop
 80095ce:	e7fe      	b.n	80095ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095d6:	6850      	ldr	r0, [r2, #4]
 80095d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095da:	6892      	ldr	r2, [r2, #8]
 80095dc:	4611      	mov	r1, r2
 80095de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f2c0 80ab 	blt.w	800973e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	3304      	adds	r3, #4
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fd fc49 	bl	8006e90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095fe:	463b      	mov	r3, r7
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff ff6b 	bl	80094dc <prvSampleTimeNow>
 8009606:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b09      	cmp	r3, #9
 800960c:	f200 8096 	bhi.w	800973c <prvProcessReceivedCommands+0x19c>
 8009610:	a201      	add	r2, pc, #4	; (adr r2, 8009618 <prvProcessReceivedCommands+0x78>)
 8009612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009616:	bf00      	nop
 8009618:	08009641 	.word	0x08009641
 800961c:	08009641 	.word	0x08009641
 8009620:	08009641 	.word	0x08009641
 8009624:	080096b5 	.word	0x080096b5
 8009628:	080096c9 	.word	0x080096c9
 800962c:	08009713 	.word	0x08009713
 8009630:	08009641 	.word	0x08009641
 8009634:	08009641 	.word	0x08009641
 8009638:	080096b5 	.word	0x080096b5
 800963c:	080096c9 	.word	0x080096c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	18d1      	adds	r1, r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009660:	f7ff ff5c 	bl	800951c <prvInsertTimerInActiveList>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d069      	beq.n	800973e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009670:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009678:	f003 0304 	and.w	r3, r3, #4
 800967c:	2b00      	cmp	r3, #0
 800967e:	d05e      	beq.n	800973e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	441a      	add	r2, r3
 8009688:	2300      	movs	r3, #0
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	2300      	movs	r3, #0
 800968e:	2100      	movs	r1, #0
 8009690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009692:	f7ff fe05 	bl	80092a0 <xTimerGenericCommand>
 8009696:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d14f      	bne.n	800973e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	61bb      	str	r3, [r7, #24]
}
 80096b0:	bf00      	nop
 80096b2:	e7fe      	b.n	80096b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ba:	f023 0301 	bic.w	r3, r3, #1
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096c6:	e03a      	b.n	800973e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ce:	f043 0301 	orr.w	r3, r3, #1
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	617b      	str	r3, [r7, #20]
}
 80096fa:	bf00      	nop
 80096fc:	e7fe      	b.n	80096fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	699a      	ldr	r2, [r3, #24]
 8009702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009704:	18d1      	adds	r1, r2, r3
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800970a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800970c:	f7ff ff06 	bl	800951c <prvInsertTimerInActiveList>
					break;
 8009710:	e015      	b.n	800973e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009718:	f003 0302 	and.w	r3, r3, #2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d103      	bne.n	8009728 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009722:	f000 fc35 	bl	8009f90 <vPortFree>
 8009726:	e00a      	b.n	800973e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800972e:	f023 0301 	bic.w	r3, r3, #1
 8009732:	b2da      	uxtb	r2, r3
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800973a:	e000      	b.n	800973e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800973c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800973e:	4b08      	ldr	r3, [pc, #32]	; (8009760 <prvProcessReceivedCommands+0x1c0>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	1d39      	adds	r1, r7, #4
 8009744:	2200      	movs	r2, #0
 8009746:	4618      	mov	r0, r3
 8009748:	f7fe f86e 	bl	8007828 <xQueueReceive>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	f47f af2a 	bne.w	80095a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop
 8009758:	3730      	adds	r7, #48	; 0x30
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20001d98 	.word	0x20001d98

08009764 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800976a:	e048      	b.n	80097fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800976c:	4b2d      	ldr	r3, [pc, #180]	; (8009824 <prvSwitchTimerLists+0xc0>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009776:	4b2b      	ldr	r3, [pc, #172]	; (8009824 <prvSwitchTimerLists+0xc0>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3304      	adds	r3, #4
 8009784:	4618      	mov	r0, r3
 8009786:	f7fd fb83 	bl	8006e90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	2b00      	cmp	r3, #0
 800979e:	d02e      	beq.n	80097fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4413      	add	r3, r2
 80097a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d90e      	bls.n	80097d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097be:	4b19      	ldr	r3, [pc, #100]	; (8009824 <prvSwitchTimerLists+0xc0>)
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3304      	adds	r3, #4
 80097c6:	4619      	mov	r1, r3
 80097c8:	4610      	mov	r0, r2
 80097ca:	f7fd fb28 	bl	8006e1e <vListInsert>
 80097ce:	e016      	b.n	80097fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097d0:	2300      	movs	r3, #0
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	2300      	movs	r3, #0
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	2100      	movs	r1, #0
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f7ff fd60 	bl	80092a0 <xTimerGenericCommand>
 80097e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	603b      	str	r3, [r7, #0]
}
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097fe:	4b09      	ldr	r3, [pc, #36]	; (8009824 <prvSwitchTimerLists+0xc0>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1b1      	bne.n	800976c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <prvSwitchTimerLists+0xc0>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800980e:	4b06      	ldr	r3, [pc, #24]	; (8009828 <prvSwitchTimerLists+0xc4>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a04      	ldr	r2, [pc, #16]	; (8009824 <prvSwitchTimerLists+0xc0>)
 8009814:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009816:	4a04      	ldr	r2, [pc, #16]	; (8009828 <prvSwitchTimerLists+0xc4>)
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	6013      	str	r3, [r2, #0]
}
 800981c:	bf00      	nop
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20001d90 	.word	0x20001d90
 8009828:	20001d94 	.word	0x20001d94

0800982c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009830:	f000 f9b0 	bl	8009b94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009834:	4b12      	ldr	r3, [pc, #72]	; (8009880 <prvCheckForValidListAndQueue+0x54>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d11d      	bne.n	8009878 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800983c:	4811      	ldr	r0, [pc, #68]	; (8009884 <prvCheckForValidListAndQueue+0x58>)
 800983e:	f7fd fa9d 	bl	8006d7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009842:	4811      	ldr	r0, [pc, #68]	; (8009888 <prvCheckForValidListAndQueue+0x5c>)
 8009844:	f7fd fa9a 	bl	8006d7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009848:	4b10      	ldr	r3, [pc, #64]	; (800988c <prvCheckForValidListAndQueue+0x60>)
 800984a:	4a0e      	ldr	r2, [pc, #56]	; (8009884 <prvCheckForValidListAndQueue+0x58>)
 800984c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800984e:	4b10      	ldr	r3, [pc, #64]	; (8009890 <prvCheckForValidListAndQueue+0x64>)
 8009850:	4a0d      	ldr	r2, [pc, #52]	; (8009888 <prvCheckForValidListAndQueue+0x5c>)
 8009852:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009854:	2200      	movs	r2, #0
 8009856:	2110      	movs	r1, #16
 8009858:	2014      	movs	r0, #20
 800985a:	f7fd fbab 	bl	8006fb4 <xQueueGenericCreate>
 800985e:	4603      	mov	r3, r0
 8009860:	4a07      	ldr	r2, [pc, #28]	; (8009880 <prvCheckForValidListAndQueue+0x54>)
 8009862:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009864:	4b06      	ldr	r3, [pc, #24]	; (8009880 <prvCheckForValidListAndQueue+0x54>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d005      	beq.n	8009878 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800986c:	4b04      	ldr	r3, [pc, #16]	; (8009880 <prvCheckForValidListAndQueue+0x54>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4908      	ldr	r1, [pc, #32]	; (8009894 <prvCheckForValidListAndQueue+0x68>)
 8009872:	4618      	mov	r0, r3
 8009874:	f7fe fb20 	bl	8007eb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009878:	f000 f9bc 	bl	8009bf4 <vPortExitCritical>
}
 800987c:	bf00      	nop
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20001d98 	.word	0x20001d98
 8009884:	20001d68 	.word	0x20001d68
 8009888:	20001d7c 	.word	0x20001d7c
 800988c:	20001d90 	.word	0x20001d90
 8009890:	20001d94 	.word	0x20001d94
 8009894:	0800acac 	.word	0x0800acac

08009898 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10a      	bne.n	80098c0 <pvTimerGetTimerID+0x28>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	60fb      	str	r3, [r7, #12]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80098c0:	f000 f968 	bl	8009b94 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80098ca:	f000 f993 	bl	8009bf4 <vPortExitCritical>

	return pvReturn;
 80098ce:	693b      	ldr	r3, [r7, #16]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10a      	bne.n	8009902 <vTimerSetTimerID+0x2a>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	60bb      	str	r3, [r7, #8]
}
 80098fe:	bf00      	nop
 8009900:	e7fe      	b.n	8009900 <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 8009902:	f000 f947 	bl	8009b94 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 800990c:	f000 f972 	bl	8009bf4 <vPortExitCritical>
}
 8009910:	bf00      	nop
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3b04      	subs	r3, #4
 8009928:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3b04      	subs	r3, #4
 8009936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f023 0201 	bic.w	r2, r3, #1
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3b04      	subs	r3, #4
 8009946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009948:	4a0c      	ldr	r2, [pc, #48]	; (800997c <pxPortInitialiseStack+0x64>)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3b14      	subs	r3, #20
 8009952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3b04      	subs	r3, #4
 800995e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f06f 0202 	mvn.w	r2, #2
 8009966:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3b20      	subs	r3, #32
 800996c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800996e:	68fb      	ldr	r3, [r7, #12]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	08009981 	.word	0x08009981

08009980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800998a:	4b12      	ldr	r3, [pc, #72]	; (80099d4 <prvTaskExitError+0x54>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009992:	d00a      	beq.n	80099aa <prvTaskExitError+0x2a>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	60fb      	str	r3, [r7, #12]
}
 80099a6:	bf00      	nop
 80099a8:	e7fe      	b.n	80099a8 <prvTaskExitError+0x28>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	60bb      	str	r3, [r7, #8]
}
 80099bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099be:	bf00      	nop
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0fc      	beq.n	80099c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	20000018 	.word	0x20000018
	...

080099e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <pxCurrentTCBConst2>)
 80099e2:	6819      	ldr	r1, [r3, #0]
 80099e4:	6808      	ldr	r0, [r1, #0]
 80099e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ea:	f380 8809 	msr	PSP, r0
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f04f 0000 	mov.w	r0, #0
 80099f6:	f380 8811 	msr	BASEPRI, r0
 80099fa:	4770      	bx	lr
 80099fc:	f3af 8000 	nop.w

08009a00 <pxCurrentTCBConst2>:
 8009a00:	20001c3c 	.word	0x20001c3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop

08009a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a08:	4808      	ldr	r0, [pc, #32]	; (8009a2c <prvPortStartFirstTask+0x24>)
 8009a0a:	6800      	ldr	r0, [r0, #0]
 8009a0c:	6800      	ldr	r0, [r0, #0]
 8009a0e:	f380 8808 	msr	MSP, r0
 8009a12:	f04f 0000 	mov.w	r0, #0
 8009a16:	f380 8814 	msr	CONTROL, r0
 8009a1a:	b662      	cpsie	i
 8009a1c:	b661      	cpsie	f
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	df00      	svc	0
 8009a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a2a:	bf00      	nop
 8009a2c:	e000ed08 	.word	0xe000ed08

08009a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a36:	4b4e      	ldr	r3, [pc, #312]	; (8009b70 <xPortStartScheduler+0x140>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a4e      	ldr	r2, [pc, #312]	; (8009b74 <xPortStartScheduler+0x144>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d10a      	bne.n	8009a56 <xPortStartScheduler+0x26>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	61bb      	str	r3, [r7, #24]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a56:	4b46      	ldr	r3, [pc, #280]	; (8009b70 <xPortStartScheduler+0x140>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a47      	ldr	r2, [pc, #284]	; (8009b78 <xPortStartScheduler+0x148>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d10a      	bne.n	8009a76 <xPortStartScheduler+0x46>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	617b      	str	r3, [r7, #20]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a76:	4b41      	ldr	r3, [pc, #260]	; (8009b7c <xPortStartScheduler+0x14c>)
 8009a78:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	22ff      	movs	r2, #255	; 0xff
 8009a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a90:	79fb      	ldrb	r3, [r7, #7]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	4b39      	ldr	r3, [pc, #228]	; (8009b80 <xPortStartScheduler+0x150>)
 8009a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a9e:	4b39      	ldr	r3, [pc, #228]	; (8009b84 <xPortStartScheduler+0x154>)
 8009aa0:	2207      	movs	r2, #7
 8009aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aa4:	e009      	b.n	8009aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009aa6:	4b37      	ldr	r3, [pc, #220]	; (8009b84 <xPortStartScheduler+0x154>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	4a35      	ldr	r2, [pc, #212]	; (8009b84 <xPortStartScheduler+0x154>)
 8009aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac2:	2b80      	cmp	r3, #128	; 0x80
 8009ac4:	d0ef      	beq.n	8009aa6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8009ac6:	4b2f      	ldr	r3, [pc, #188]	; (8009b84 <xPortStartScheduler+0x154>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f1c3 0307 	rsb	r3, r3, #7
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	d00a      	beq.n	8009ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	613b      	str	r3, [r7, #16]
}
 8009ae4:	bf00      	nop
 8009ae6:	e7fe      	b.n	8009ae6 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ae8:	4b26      	ldr	r3, [pc, #152]	; (8009b84 <xPortStartScheduler+0x154>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f1c3 0307 	rsb	r3, r3, #7
 8009af0:	2b04      	cmp	r3, #4
 8009af2:	d00a      	beq.n	8009b0a <xPortStartScheduler+0xda>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	60fb      	str	r3, [r7, #12]
}
 8009b06:	bf00      	nop
 8009b08:	e7fe      	b.n	8009b08 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b0a:	4b1e      	ldr	r3, [pc, #120]	; (8009b84 <xPortStartScheduler+0x154>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	4a1c      	ldr	r2, [pc, #112]	; (8009b84 <xPortStartScheduler+0x154>)
 8009b12:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b14:	4b1b      	ldr	r3, [pc, #108]	; (8009b84 <xPortStartScheduler+0x154>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b1c:	4a19      	ldr	r2, [pc, #100]	; (8009b84 <xPortStartScheduler+0x154>)
 8009b1e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b28:	4b17      	ldr	r3, [pc, #92]	; (8009b88 <xPortStartScheduler+0x158>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a16      	ldr	r2, [pc, #88]	; (8009b88 <xPortStartScheduler+0x158>)
 8009b2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b32:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b34:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <xPortStartScheduler+0x158>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a13      	ldr	r2, [pc, #76]	; (8009b88 <xPortStartScheduler+0x158>)
 8009b3a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b3e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b40:	f000 f8dc 	bl	8009cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b44:	4b11      	ldr	r3, [pc, #68]	; (8009b8c <xPortStartScheduler+0x15c>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b4a:	f000 f8fb 	bl	8009d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b4e:	4b10      	ldr	r3, [pc, #64]	; (8009b90 <xPortStartScheduler+0x160>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a0f      	ldr	r2, [pc, #60]	; (8009b90 <xPortStartScheduler+0x160>)
 8009b54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b58:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b5a:	f7ff ff55 	bl	8009a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b5e:	f7fe fec3 	bl	80088e8 <vTaskSwitchContext>
	prvTaskExitError();
 8009b62:	f7ff ff0d 	bl	8009980 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3720      	adds	r7, #32
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	e000ed00 	.word	0xe000ed00
 8009b74:	410fc271 	.word	0x410fc271
 8009b78:	410fc270 	.word	0x410fc270
 8009b7c:	e000e400 	.word	0xe000e400
 8009b80:	20001da4 	.word	0x20001da4
 8009b84:	20001da8 	.word	0x20001da8
 8009b88:	e000ed20 	.word	0xe000ed20
 8009b8c:	20000018 	.word	0x20000018
 8009b90:	e000ef34 	.word	0xe000ef34

08009b94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	607b      	str	r3, [r7, #4]
}
 8009bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bae:	4b0f      	ldr	r3, [pc, #60]	; (8009bec <vPortEnterCritical+0x58>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	4a0d      	ldr	r2, [pc, #52]	; (8009bec <vPortEnterCritical+0x58>)
 8009bb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <vPortEnterCritical+0x58>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d10f      	bne.n	8009be0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009bc0:	4b0b      	ldr	r3, [pc, #44]	; (8009bf0 <vPortEnterCritical+0x5c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00a      	beq.n	8009be0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	603b      	str	r3, [r7, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <vPortEnterCritical+0x4a>
	}
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	20000018 	.word	0x20000018
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bfa:	4b12      	ldr	r3, [pc, #72]	; (8009c44 <vPortExitCritical+0x50>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10a      	bne.n	8009c18 <vPortExitCritical+0x24>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	607b      	str	r3, [r7, #4]
}
 8009c14:	bf00      	nop
 8009c16:	e7fe      	b.n	8009c16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c18:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <vPortExitCritical+0x50>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	4a09      	ldr	r2, [pc, #36]	; (8009c44 <vPortExitCritical+0x50>)
 8009c20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c22:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <vPortExitCritical+0x50>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d105      	bne.n	8009c36 <vPortExitCritical+0x42>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	f383 8811 	msr	BASEPRI, r3
}
 8009c34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000018 	.word	0x20000018
	...

08009c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c50:	f3ef 8009 	mrs	r0, PSP
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <pxCurrentTCBConst>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	f01e 0f10 	tst.w	lr, #16
 8009c60:	bf08      	it	eq
 8009c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6a:	6010      	str	r0, [r2, #0]
 8009c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c74:	f380 8811 	msr	BASEPRI, r0
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f7fe fe32 	bl	80088e8 <vTaskSwitchContext>
 8009c84:	f04f 0000 	mov.w	r0, #0
 8009c88:	f380 8811 	msr	BASEPRI, r0
 8009c8c:	bc09      	pop	{r0, r3}
 8009c8e:	6819      	ldr	r1, [r3, #0]
 8009c90:	6808      	ldr	r0, [r1, #0]
 8009c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c96:	f01e 0f10 	tst.w	lr, #16
 8009c9a:	bf08      	it	eq
 8009c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ca0:	f380 8809 	msr	PSP, r0
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	f3af 8000 	nop.w

08009cb0 <pxCurrentTCBConst>:
 8009cb0:	20001c3c 	.word	0x20001c3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop

08009cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	607b      	str	r3, [r7, #4]
}
 8009cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cd2:	f7fe fd1f 	bl	8008714 <xTaskIncrementTick>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cdc:	4b06      	ldr	r3, [pc, #24]	; (8009cf8 <SysTick_Handler+0x40>)
 8009cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	f383 8811 	msr	BASEPRI, r3
}
 8009cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d00:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <vPortSetupTimerInterrupt+0x34>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d06:	4b0b      	ldr	r3, [pc, #44]	; (8009d34 <vPortSetupTimerInterrupt+0x38>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d0c:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <vPortSetupTimerInterrupt+0x3c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <vPortSetupTimerInterrupt+0x40>)
 8009d12:	fba2 2303 	umull	r2, r3, r2, r3
 8009d16:	099b      	lsrs	r3, r3, #6
 8009d18:	4a09      	ldr	r2, [pc, #36]	; (8009d40 <vPortSetupTimerInterrupt+0x44>)
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d1e:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <vPortSetupTimerInterrupt+0x34>)
 8009d20:	2207      	movs	r2, #7
 8009d22:	601a      	str	r2, [r3, #0]
}
 8009d24:	bf00      	nop
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	e000e010 	.word	0xe000e010
 8009d34:	e000e018 	.word	0xe000e018
 8009d38:	20000000 	.word	0x20000000
 8009d3c:	10624dd3 	.word	0x10624dd3
 8009d40:	e000e014 	.word	0xe000e014

08009d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d54 <vPortEnableVFP+0x10>
 8009d48:	6801      	ldr	r1, [r0, #0]
 8009d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d4e:	6001      	str	r1, [r0, #0]
 8009d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d52:	bf00      	nop
 8009d54:	e000ed88 	.word	0xe000ed88

08009d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d5e:	f3ef 8305 	mrs	r3, IPSR
 8009d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b0f      	cmp	r3, #15
 8009d68:	d914      	bls.n	8009d94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d6a:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <vPortValidateInterruptPriority+0x70>)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d74:	4b15      	ldr	r3, [pc, #84]	; (8009dcc <vPortValidateInterruptPriority+0x74>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	7afa      	ldrb	r2, [r7, #11]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d20a      	bcs.n	8009d94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	607b      	str	r3, [r7, #4]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d94:	4b0e      	ldr	r3, [pc, #56]	; (8009dd0 <vPortValidateInterruptPriority+0x78>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <vPortValidateInterruptPriority+0x7c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d90a      	bls.n	8009dba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	603b      	str	r3, [r7, #0]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <vPortValidateInterruptPriority+0x60>
	}
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	e000e3f0 	.word	0xe000e3f0
 8009dcc:	20001da4 	.word	0x20001da4
 8009dd0:	e000ed0c 	.word	0xe000ed0c
 8009dd4:	20001da8 	.word	0x20001da8

08009dd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08a      	sub	sp, #40	; 0x28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009de4:	f7fe fbc6 	bl	8008574 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009de8:	4b63      	ldr	r3, [pc, #396]	; (8009f78 <pvPortMalloc+0x1a0>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009df0:	f000 f938 	bl	800a064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009df4:	4b61      	ldr	r3, [pc, #388]	; (8009f7c <pvPortMalloc+0x1a4>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 8093 	bne.w	8009f28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d01d      	beq.n	8009e44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009e08:	2208      	movs	r2, #8
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d014      	beq.n	8009e44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f023 0307 	bic.w	r3, r3, #7
 8009e20:	3308      	adds	r3, #8
 8009e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f003 0307 	and.w	r3, r3, #7
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00a      	beq.n	8009e44 <pvPortMalloc+0x6c>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	617b      	str	r3, [r7, #20]
}
 8009e40:	bf00      	nop
 8009e42:	e7fe      	b.n	8009e42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d06e      	beq.n	8009f28 <pvPortMalloc+0x150>
 8009e4a:	4b4d      	ldr	r3, [pc, #308]	; (8009f80 <pvPortMalloc+0x1a8>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d869      	bhi.n	8009f28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e54:	4b4b      	ldr	r3, [pc, #300]	; (8009f84 <pvPortMalloc+0x1ac>)
 8009e56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e58:	4b4a      	ldr	r3, [pc, #296]	; (8009f84 <pvPortMalloc+0x1ac>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e5e:	e004      	b.n	8009e6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d903      	bls.n	8009e7c <pvPortMalloc+0xa4>
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1f1      	bne.n	8009e60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e7c:	4b3e      	ldr	r3, [pc, #248]	; (8009f78 <pvPortMalloc+0x1a0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d050      	beq.n	8009f28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	4413      	add	r3, r2
 8009e8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	1ad2      	subs	r2, r2, r3
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d91f      	bls.n	8009ee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4413      	add	r3, r2
 8009eae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00a      	beq.n	8009ed0 <pvPortMalloc+0xf8>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	613b      	str	r3, [r7, #16]
}
 8009ecc:	bf00      	nop
 8009ece:	e7fe      	b.n	8009ece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	1ad2      	subs	r2, r2, r3
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ee2:	69b8      	ldr	r0, [r7, #24]
 8009ee4:	f000 f920 	bl	800a128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ee8:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <pvPortMalloc+0x1a8>)
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	4a23      	ldr	r2, [pc, #140]	; (8009f80 <pvPortMalloc+0x1a8>)
 8009ef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ef6:	4b22      	ldr	r3, [pc, #136]	; (8009f80 <pvPortMalloc+0x1a8>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	4b23      	ldr	r3, [pc, #140]	; (8009f88 <pvPortMalloc+0x1b0>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d203      	bcs.n	8009f0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f02:	4b1f      	ldr	r3, [pc, #124]	; (8009f80 <pvPortMalloc+0x1a8>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a20      	ldr	r2, [pc, #128]	; (8009f88 <pvPortMalloc+0x1b0>)
 8009f08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	4b1b      	ldr	r3, [pc, #108]	; (8009f7c <pvPortMalloc+0x1a4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	431a      	orrs	r2, r3
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f1e:	4b1b      	ldr	r3, [pc, #108]	; (8009f8c <pvPortMalloc+0x1b4>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3301      	adds	r3, #1
 8009f24:	4a19      	ldr	r2, [pc, #100]	; (8009f8c <pvPortMalloc+0x1b4>)
 8009f26:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d006      	beq.n	8009f3c <pvPortMalloc+0x164>
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	4619      	mov	r1, r3
 8009f34:	2094      	movs	r0, #148	; 0x94
 8009f36:	f7f7 fc8b 	bl	8001850 <vTraceStoreMemMangEvent>
 8009f3a:	e005      	b.n	8009f48 <pvPortMalloc+0x170>
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	4619      	mov	r1, r3
 8009f42:	20e8      	movs	r0, #232	; 0xe8
 8009f44:	f7f7 fc84 	bl	8001850 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 8009f48:	f7fe fb22 	bl	8008590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <pvPortMalloc+0x194>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	60fb      	str	r3, [r7, #12]
}
 8009f68:	bf00      	nop
 8009f6a:	e7fe      	b.n	8009f6a <pvPortMalloc+0x192>
	return pvReturn;
 8009f6c:	69fb      	ldr	r3, [r7, #28]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3728      	adds	r7, #40	; 0x28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	200059b4 	.word	0x200059b4
 8009f7c:	200059c8 	.word	0x200059c8
 8009f80:	200059b8 	.word	0x200059b8
 8009f84:	200059ac 	.word	0x200059ac
 8009f88:	200059bc 	.word	0x200059bc
 8009f8c:	200059c0 	.word	0x200059c0

08009f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d055      	beq.n	800a04e <vPortFree+0xbe>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fa2:	2308      	movs	r3, #8
 8009fa4:	425b      	negs	r3, r3
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	4413      	add	r3, r2
 8009faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	4b28      	ldr	r3, [pc, #160]	; (800a058 <vPortFree+0xc8>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <vPortFree+0x44>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	60fb      	str	r3, [r7, #12]
}
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00a      	beq.n	8009ff2 <vPortFree+0x62>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	60bb      	str	r3, [r7, #8]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	4b18      	ldr	r3, [pc, #96]	; (800a058 <vPortFree+0xc8>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d026      	beq.n	800a04e <vPortFree+0xbe>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d122      	bne.n	800a04e <vPortFree+0xbe>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	4b12      	ldr	r3, [pc, #72]	; (800a058 <vPortFree+0xc8>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	43db      	mvns	r3, r3
 800a012:	401a      	ands	r2, r3
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a018:	f7fe faac 	bl	8008574 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	4b0e      	ldr	r3, [pc, #56]	; (800a05c <vPortFree+0xcc>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4413      	add	r3, r2
 800a026:	4a0d      	ldr	r2, [pc, #52]	; (800a05c <vPortFree+0xcc>)
 800a028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	425b      	negs	r3, r3
 800a032:	461a      	mov	r2, r3
 800a034:	2096      	movs	r0, #150	; 0x96
 800a036:	f7f7 fc0b 	bl	8001850 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a03a:	6938      	ldr	r0, [r7, #16]
 800a03c:	f000 f874 	bl	800a128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a040:	4b07      	ldr	r3, [pc, #28]	; (800a060 <vPortFree+0xd0>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3301      	adds	r3, #1
 800a046:	4a06      	ldr	r2, [pc, #24]	; (800a060 <vPortFree+0xd0>)
 800a048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a04a:	f7fe faa1 	bl	8008590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a04e:	bf00      	nop
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	200059c8 	.word	0x200059c8
 800a05c:	200059b8 	.word	0x200059b8
 800a060:	200059c4 	.word	0x200059c4

0800a064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a06a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a070:	4b27      	ldr	r3, [pc, #156]	; (800a110 <prvHeapInit+0xac>)
 800a072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f003 0307 	and.w	r3, r3, #7
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00c      	beq.n	800a098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3307      	adds	r3, #7
 800a082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f023 0307 	bic.w	r3, r3, #7
 800a08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	4a1f      	ldr	r2, [pc, #124]	; (800a110 <prvHeapInit+0xac>)
 800a094:	4413      	add	r3, r2
 800a096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a09c:	4a1d      	ldr	r2, [pc, #116]	; (800a114 <prvHeapInit+0xb0>)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a0a2:	4b1c      	ldr	r3, [pc, #112]	; (800a114 <prvHeapInit+0xb0>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0b0:	2208      	movs	r2, #8
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	1a9b      	subs	r3, r3, r2
 800a0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f023 0307 	bic.w	r3, r3, #7
 800a0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4a15      	ldr	r2, [pc, #84]	; (800a118 <prvHeapInit+0xb4>)
 800a0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <prvHeapInit+0xb4>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0ce:	4b12      	ldr	r3, [pc, #72]	; (800a118 <prvHeapInit+0xb4>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	1ad2      	subs	r2, r2, r3
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0e4:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <prvHeapInit+0xb4>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	4a0a      	ldr	r2, [pc, #40]	; (800a11c <prvHeapInit+0xb8>)
 800a0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	4a09      	ldr	r2, [pc, #36]	; (800a120 <prvHeapInit+0xbc>)
 800a0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0fc:	4b09      	ldr	r3, [pc, #36]	; (800a124 <prvHeapInit+0xc0>)
 800a0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a102:	601a      	str	r2, [r3, #0]
}
 800a104:	bf00      	nop
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	20001dac 	.word	0x20001dac
 800a114:	200059ac 	.word	0x200059ac
 800a118:	200059b4 	.word	0x200059b4
 800a11c:	200059bc 	.word	0x200059bc
 800a120:	200059b8 	.word	0x200059b8
 800a124:	200059c8 	.word	0x200059c8

0800a128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a130:	4b28      	ldr	r3, [pc, #160]	; (800a1d4 <prvInsertBlockIntoFreeList+0xac>)
 800a132:	60fb      	str	r3, [r7, #12]
 800a134:	e002      	b.n	800a13c <prvInsertBlockIntoFreeList+0x14>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	429a      	cmp	r2, r3
 800a144:	d8f7      	bhi.n	800a136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	4413      	add	r3, r2
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	429a      	cmp	r2, r3
 800a156:	d108      	bne.n	800a16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	441a      	add	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	441a      	add	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d118      	bne.n	800a1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4b15      	ldr	r3, [pc, #84]	; (800a1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d00d      	beq.n	800a1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	441a      	add	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	e008      	b.n	800a1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	; (800a1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	e003      	b.n	800a1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d002      	beq.n	800a1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1c6:	bf00      	nop
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	200059ac 	.word	0x200059ac
 800a1d8:	200059b4 	.word	0x200059b4

0800a1dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fc fc98 	bl	8006b20 <USBH_LL_IncTimer>
}
 800a1f0:	bf00      	nop
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a206:	4618      	mov	r0, r3
 800a208:	f7fc fcdc 	bl	8006bc4 <USBH_LL_Connect>
}
 800a20c:	bf00      	nop
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a222:	4618      	mov	r0, r3
 800a224:	f7fc fcf1 	bl	8006c0a <USBH_LL_Disconnect>
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
 800a23c:	4613      	mov	r3, r2
 800a23e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a246:	4618      	mov	r0, r3
 800a248:	f7fc fd11 	bl	8006c6e <USBH_LL_NotifyURBChange>
#endif
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a262:	4618      	mov	r0, r3
 800a264:	f7fc fc86 	bl	8006b74 <USBH_LL_PortEnabled>
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fc fc92 	bl	8006ba8 <USBH_LL_PortDisabled>
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7f8 fd93 	bl	8002dce <HAL_HCD_Stop>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 f808 	bl	800a2c4 <USBH_Get_USB_Status>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
	...

0800a2c4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2d2:	79fb      	ldrb	r3, [r7, #7]
 800a2d4:	2b03      	cmp	r3, #3
 800a2d6:	d817      	bhi.n	800a308 <USBH_Get_USB_Status+0x44>
 800a2d8:	a201      	add	r2, pc, #4	; (adr r2, 800a2e0 <USBH_Get_USB_Status+0x1c>)
 800a2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2de:	bf00      	nop
 800a2e0:	0800a2f1 	.word	0x0800a2f1
 800a2e4:	0800a2f7 	.word	0x0800a2f7
 800a2e8:	0800a2fd 	.word	0x0800a2fd
 800a2ec:	0800a303 	.word	0x0800a303
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f4:	e00b      	b.n	800a30e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2fa:	e008      	b.n	800a30e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a300:	e005      	b.n	800a30e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a302:	2302      	movs	r3, #2
 800a304:	73fb      	strb	r3, [r7, #15]
    break;
 800a306:	e002      	b.n	800a30e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a308:	2302      	movs	r3, #2
 800a30a:	73fb      	strb	r3, [r7, #15]
    break;
 800a30c:	bf00      	nop
  }
  return usb_status;
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <__malloc_lock>:
 800a31c:	4801      	ldr	r0, [pc, #4]	; (800a324 <__malloc_lock+0x8>)
 800a31e:	f000 b88b 	b.w	800a438 <__retarget_lock_acquire_recursive>
 800a322:	bf00      	nop
 800a324:	20005ee8 	.word	0x20005ee8

0800a328 <__malloc_unlock>:
 800a328:	4801      	ldr	r0, [pc, #4]	; (800a330 <__malloc_unlock+0x8>)
 800a32a:	f000 b886 	b.w	800a43a <__retarget_lock_release_recursive>
 800a32e:	bf00      	nop
 800a330:	20005ee8 	.word	0x20005ee8

0800a334 <memset>:
 800a334:	4402      	add	r2, r0
 800a336:	4603      	mov	r3, r0
 800a338:	4293      	cmp	r3, r2
 800a33a:	d100      	bne.n	800a33e <memset+0xa>
 800a33c:	4770      	bx	lr
 800a33e:	f803 1b01 	strb.w	r1, [r3], #1
 800a342:	e7f9      	b.n	800a338 <memset+0x4>

0800a344 <_reclaim_reent>:
 800a344:	4b29      	ldr	r3, [pc, #164]	; (800a3ec <_reclaim_reent+0xa8>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4283      	cmp	r3, r0
 800a34a:	b570      	push	{r4, r5, r6, lr}
 800a34c:	4604      	mov	r4, r0
 800a34e:	d04b      	beq.n	800a3e8 <_reclaim_reent+0xa4>
 800a350:	69c3      	ldr	r3, [r0, #28]
 800a352:	b143      	cbz	r3, 800a366 <_reclaim_reent+0x22>
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d144      	bne.n	800a3e4 <_reclaim_reent+0xa0>
 800a35a:	69e3      	ldr	r3, [r4, #28]
 800a35c:	6819      	ldr	r1, [r3, #0]
 800a35e:	b111      	cbz	r1, 800a366 <_reclaim_reent+0x22>
 800a360:	4620      	mov	r0, r4
 800a362:	f000 f879 	bl	800a458 <_free_r>
 800a366:	6961      	ldr	r1, [r4, #20]
 800a368:	b111      	cbz	r1, 800a370 <_reclaim_reent+0x2c>
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 f874 	bl	800a458 <_free_r>
 800a370:	69e1      	ldr	r1, [r4, #28]
 800a372:	b111      	cbz	r1, 800a37a <_reclaim_reent+0x36>
 800a374:	4620      	mov	r0, r4
 800a376:	f000 f86f 	bl	800a458 <_free_r>
 800a37a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a37c:	b111      	cbz	r1, 800a384 <_reclaim_reent+0x40>
 800a37e:	4620      	mov	r0, r4
 800a380:	f000 f86a 	bl	800a458 <_free_r>
 800a384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a386:	b111      	cbz	r1, 800a38e <_reclaim_reent+0x4a>
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 f865 	bl	800a458 <_free_r>
 800a38e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a390:	b111      	cbz	r1, 800a398 <_reclaim_reent+0x54>
 800a392:	4620      	mov	r0, r4
 800a394:	f000 f860 	bl	800a458 <_free_r>
 800a398:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a39a:	b111      	cbz	r1, 800a3a2 <_reclaim_reent+0x5e>
 800a39c:	4620      	mov	r0, r4
 800a39e:	f000 f85b 	bl	800a458 <_free_r>
 800a3a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a3a4:	b111      	cbz	r1, 800a3ac <_reclaim_reent+0x68>
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f000 f856 	bl	800a458 <_free_r>
 800a3ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a3ae:	b111      	cbz	r1, 800a3b6 <_reclaim_reent+0x72>
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 f851 	bl	800a458 <_free_r>
 800a3b6:	6a23      	ldr	r3, [r4, #32]
 800a3b8:	b1b3      	cbz	r3, 800a3e8 <_reclaim_reent+0xa4>
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3c0:	4718      	bx	r3
 800a3c2:	5949      	ldr	r1, [r1, r5]
 800a3c4:	b941      	cbnz	r1, 800a3d8 <_reclaim_reent+0x94>
 800a3c6:	3504      	adds	r5, #4
 800a3c8:	69e3      	ldr	r3, [r4, #28]
 800a3ca:	2d80      	cmp	r5, #128	; 0x80
 800a3cc:	68d9      	ldr	r1, [r3, #12]
 800a3ce:	d1f8      	bne.n	800a3c2 <_reclaim_reent+0x7e>
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f000 f841 	bl	800a458 <_free_r>
 800a3d6:	e7c0      	b.n	800a35a <_reclaim_reent+0x16>
 800a3d8:	680e      	ldr	r6, [r1, #0]
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 f83c 	bl	800a458 <_free_r>
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	e7ef      	b.n	800a3c4 <_reclaim_reent+0x80>
 800a3e4:	2500      	movs	r5, #0
 800a3e6:	e7ef      	b.n	800a3c8 <_reclaim_reent+0x84>
 800a3e8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000068 	.word	0x20000068

0800a3f0 <__libc_init_array>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	4d0d      	ldr	r5, [pc, #52]	; (800a428 <__libc_init_array+0x38>)
 800a3f4:	4c0d      	ldr	r4, [pc, #52]	; (800a42c <__libc_init_array+0x3c>)
 800a3f6:	1b64      	subs	r4, r4, r5
 800a3f8:	10a4      	asrs	r4, r4, #2
 800a3fa:	2600      	movs	r6, #0
 800a3fc:	42a6      	cmp	r6, r4
 800a3fe:	d109      	bne.n	800a414 <__libc_init_array+0x24>
 800a400:	4d0b      	ldr	r5, [pc, #44]	; (800a430 <__libc_init_array+0x40>)
 800a402:	4c0c      	ldr	r4, [pc, #48]	; (800a434 <__libc_init_array+0x44>)
 800a404:	f000 f874 	bl	800a4f0 <_init>
 800a408:	1b64      	subs	r4, r4, r5
 800a40a:	10a4      	asrs	r4, r4, #2
 800a40c:	2600      	movs	r6, #0
 800a40e:	42a6      	cmp	r6, r4
 800a410:	d105      	bne.n	800a41e <__libc_init_array+0x2e>
 800a412:	bd70      	pop	{r4, r5, r6, pc}
 800a414:	f855 3b04 	ldr.w	r3, [r5], #4
 800a418:	4798      	blx	r3
 800a41a:	3601      	adds	r6, #1
 800a41c:	e7ee      	b.n	800a3fc <__libc_init_array+0xc>
 800a41e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a422:	4798      	blx	r3
 800a424:	3601      	adds	r6, #1
 800a426:	e7f2      	b.n	800a40e <__libc_init_array+0x1e>
 800a428:	0800acd4 	.word	0x0800acd4
 800a42c:	0800acd4 	.word	0x0800acd4
 800a430:	0800acd4 	.word	0x0800acd4
 800a434:	0800acd8 	.word	0x0800acd8

0800a438 <__retarget_lock_acquire_recursive>:
 800a438:	4770      	bx	lr

0800a43a <__retarget_lock_release_recursive>:
 800a43a:	4770      	bx	lr

0800a43c <memcpy>:
 800a43c:	440a      	add	r2, r1
 800a43e:	4291      	cmp	r1, r2
 800a440:	f100 33ff 	add.w	r3, r0, #4294967295
 800a444:	d100      	bne.n	800a448 <memcpy+0xc>
 800a446:	4770      	bx	lr
 800a448:	b510      	push	{r4, lr}
 800a44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a452:	4291      	cmp	r1, r2
 800a454:	d1f9      	bne.n	800a44a <memcpy+0xe>
 800a456:	bd10      	pop	{r4, pc}

0800a458 <_free_r>:
 800a458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a45a:	2900      	cmp	r1, #0
 800a45c:	d044      	beq.n	800a4e8 <_free_r+0x90>
 800a45e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a462:	9001      	str	r0, [sp, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f1a1 0404 	sub.w	r4, r1, #4
 800a46a:	bfb8      	it	lt
 800a46c:	18e4      	addlt	r4, r4, r3
 800a46e:	f7ff ff55 	bl	800a31c <__malloc_lock>
 800a472:	4a1e      	ldr	r2, [pc, #120]	; (800a4ec <_free_r+0x94>)
 800a474:	9801      	ldr	r0, [sp, #4]
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	b933      	cbnz	r3, 800a488 <_free_r+0x30>
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	6014      	str	r4, [r2, #0]
 800a47e:	b003      	add	sp, #12
 800a480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a484:	f7ff bf50 	b.w	800a328 <__malloc_unlock>
 800a488:	42a3      	cmp	r3, r4
 800a48a:	d908      	bls.n	800a49e <_free_r+0x46>
 800a48c:	6825      	ldr	r5, [r4, #0]
 800a48e:	1961      	adds	r1, r4, r5
 800a490:	428b      	cmp	r3, r1
 800a492:	bf01      	itttt	eq
 800a494:	6819      	ldreq	r1, [r3, #0]
 800a496:	685b      	ldreq	r3, [r3, #4]
 800a498:	1949      	addeq	r1, r1, r5
 800a49a:	6021      	streq	r1, [r4, #0]
 800a49c:	e7ed      	b.n	800a47a <_free_r+0x22>
 800a49e:	461a      	mov	r2, r3
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	b10b      	cbz	r3, 800a4a8 <_free_r+0x50>
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	d9fa      	bls.n	800a49e <_free_r+0x46>
 800a4a8:	6811      	ldr	r1, [r2, #0]
 800a4aa:	1855      	adds	r5, r2, r1
 800a4ac:	42a5      	cmp	r5, r4
 800a4ae:	d10b      	bne.n	800a4c8 <_free_r+0x70>
 800a4b0:	6824      	ldr	r4, [r4, #0]
 800a4b2:	4421      	add	r1, r4
 800a4b4:	1854      	adds	r4, r2, r1
 800a4b6:	42a3      	cmp	r3, r4
 800a4b8:	6011      	str	r1, [r2, #0]
 800a4ba:	d1e0      	bne.n	800a47e <_free_r+0x26>
 800a4bc:	681c      	ldr	r4, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	6053      	str	r3, [r2, #4]
 800a4c2:	440c      	add	r4, r1
 800a4c4:	6014      	str	r4, [r2, #0]
 800a4c6:	e7da      	b.n	800a47e <_free_r+0x26>
 800a4c8:	d902      	bls.n	800a4d0 <_free_r+0x78>
 800a4ca:	230c      	movs	r3, #12
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	e7d6      	b.n	800a47e <_free_r+0x26>
 800a4d0:	6825      	ldr	r5, [r4, #0]
 800a4d2:	1961      	adds	r1, r4, r5
 800a4d4:	428b      	cmp	r3, r1
 800a4d6:	bf04      	itt	eq
 800a4d8:	6819      	ldreq	r1, [r3, #0]
 800a4da:	685b      	ldreq	r3, [r3, #4]
 800a4dc:	6063      	str	r3, [r4, #4]
 800a4de:	bf04      	itt	eq
 800a4e0:	1949      	addeq	r1, r1, r5
 800a4e2:	6021      	streq	r1, [r4, #0]
 800a4e4:	6054      	str	r4, [r2, #4]
 800a4e6:	e7ca      	b.n	800a47e <_free_r+0x26>
 800a4e8:	b003      	add	sp, #12
 800a4ea:	bd30      	pop	{r4, r5, pc}
 800a4ec:	20005dac 	.word	0x20005dac

0800a4f0 <_init>:
 800a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f2:	bf00      	nop
 800a4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f6:	bc08      	pop	{r3}
 800a4f8:	469e      	mov	lr, r3
 800a4fa:	4770      	bx	lr

0800a4fc <_fini>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	bf00      	nop
 800a500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a502:	bc08      	pop	{r3}
 800a504:	469e      	mov	lr, r3
 800a506:	4770      	bx	lr
