
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b36c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800b4fc  0800b4fc  0000c4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b784  0800b784  0000d064  2**0
                  CONTENTS
  4 .ARM          00000008  0800b784  0800b784  0000c784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b78c  0800b78c  0000d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b78c  0800b78c  0000c78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b790  0800b790  0000c790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800b794  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d064  2**0
                  CONTENTS
 10 .bss          00006b80  20000064  20000064  0000d064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006be4  20006be4  0000d064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000270da  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006927  00000000  00000000  0003416e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002288  00000000  00000000  0003aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a75  00000000  00000000  0003cd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e9e2  00000000  00000000  0003e795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038258  00000000  00000000  0006d177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed7f2  00000000  00000000  000a53cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00192bc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009168  00000000  00000000  00192c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0019bd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b4e4 	.word	0x0800b4e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	0800b4e4 	.word	0x0800b4e4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vSenderTask>:
/* Declare a variable of type QueueHandle_t.  This is used to store the queue
that is accessed by all three tasks. */
QueueHandle_t xQueue;

static void vSenderTask( void *pvParameters )
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

    /* Two instances are created of this task so the value that is sent to the
	queue is passed in via the task parameter rather than be hard coded.  This way
	each instance can use a different value.  Cast the parameter to the required
	type. */
	lValueToSend = ( uint16_t * )pvParameters;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	60fb      	str	r3, [r7, #12]
	const TickType_t xTicksToWait = pdMS_TO_TICKS( 100UL );
 80004cc:	2364      	movs	r3, #100	@ 0x64
 80004ce:	60bb      	str	r3, [r7, #8]

		The third parameter is the Block time – the time the task should be kept
		in the Blocked state to wait for space to become available on the queue
		should the queue already be full.  In this case we don’t specify a block
		time because there should always be space in the queue. */
		xQueueSendToBack( xQueue, lValueToSend, 0 );
 80004d0:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <vSenderTask+0x28>)
 80004d2:	6818      	ldr	r0, [r3, #0]
 80004d4:	2300      	movs	r3, #0
 80004d6:	2200      	movs	r2, #0
 80004d8:	68f9      	ldr	r1, [r7, #12]
 80004da:	f008 f941 	bl	8008760 <xQueueGenericSend>
		vTaskDelay(xTicksToWait);
 80004de:	68b8      	ldr	r0, [r7, #8]
 80004e0:	f009 f8fc 	bl	80096dc <vTaskDelay>
		xQueueSendToBack( xQueue, lValueToSend, 0 );
 80004e4:	bf00      	nop
 80004e6:	e7f3      	b.n	80004d0 <vSenderTask+0x10>
 80004e8:	20000080 	.word	0x20000080

080004ec <vReceiverTask>:
	}
}
/*-----------------------------------------------------------*/

static void vReceiverTask( void *pvParameters )
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	/* Declare the variable that will hold the values received from the queue. */
	uint16_t lReceivedValue;
	const TickType_t xTicksToWait = pdMS_TO_TICKS( 500UL );
 80004f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80004f8:	617b      	str	r3, [r7, #20]
		has the required size to hold the received data.

		the last parameter is the block time – the maximum amount of time that the
		task should remain in the Blocked state to wait for data to be available should
		the queue already be empty. */
		xStatus = xQueueReceive( xQueue, &lReceivedValue, xTicksToWait );
 80004fa:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <vReceiverTask+0x34>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f107 010e 	add.w	r1, r7, #14
 8000502:	697a      	ldr	r2, [r7, #20]
 8000504:	4618      	mov	r0, r3
 8000506:	f008 fbf9 	bl	8008cfc <xQueueReceive>
 800050a:	6138      	str	r0, [r7, #16]

		if( xStatus == pdPASS )
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d1f3      	bne.n	80004fa <vReceiverTask+0xe>
		{
			/* Data was successfully received from the queue. */
			HAL_GPIO_TogglePin(GPIOD, lReceivedValue);
 8000512:	89fb      	ldrh	r3, [r7, #14]
 8000514:	4619      	mov	r1, r3
 8000516:	4803      	ldr	r0, [pc, #12]	@ (8000524 <vReceiverTask+0x38>)
 8000518:	f003 fe4d 	bl	80041b6 <HAL_GPIO_TogglePin>
		xStatus = xQueueReceive( xQueue, &lReceivedValue, xTicksToWait );
 800051c:	e7ed      	b.n	80004fa <vReceiverTask+0xe>
 800051e:	bf00      	nop
 8000520:	20000080 	.word	0x20000080
 8000524:	40020c00 	.word	0x40020c00

08000528 <application10>:

uint16_t led1=GREEN_LED;
uint16_t led2=BLUE_LED;

void application10(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af02      	add	r7, sp, #8

	/* The queue is created to hold a maximum of 5 short values. */
	    xQueue = xQueueCreate( 5, sizeof( int16_t ) );
 800052e:	2200      	movs	r2, #0
 8000530:	2102      	movs	r1, #2
 8000532:	2005      	movs	r0, #5
 8000534:	f008 f85e 	bl	80085f4 <xQueueGenericCreate>
 8000538:	4603      	mov	r3, r0
 800053a:	4a15      	ldr	r2, [pc, #84]	@ (8000590 <application10+0x68>)
 800053c:	6013      	str	r3, [r2, #0]

		if( xQueue != NULL )
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <application10+0x68>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d020      	beq.n	8000588 <application10+0x60>
			/* Create two instances of the task that will write to the queue.  The
			parameter is used to pass the value that the task should write to the queue,
			so one task will continuously write 100 to the queue while the other task
			will continuously write 200 to the queue.  Both tasks are created at
			priority 1. */
			xTaskCreate( vSenderTask, "Sender1", 1000, ( void * ) &led1, 1, NULL );
 8000546:	2300      	movs	r3, #0
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <application10+0x6c>)
 8000550:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000554:	4910      	ldr	r1, [pc, #64]	@ (8000598 <application10+0x70>)
 8000556:	4811      	ldr	r0, [pc, #68]	@ (800059c <application10+0x74>)
 8000558:	f008 ff53 	bl	8009402 <xTaskCreate>
			xTaskCreate( vSenderTask, "Sender2", 1000, ( void * ) &led2, 1, NULL );
 800055c:	2300      	movs	r3, #0
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	2301      	movs	r3, #1
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <application10+0x78>)
 8000566:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800056a:	490e      	ldr	r1, [pc, #56]	@ (80005a4 <application10+0x7c>)
 800056c:	480b      	ldr	r0, [pc, #44]	@ (800059c <application10+0x74>)
 800056e:	f008 ff48 	bl	8009402 <xTaskCreate>

			/* Create the task that will read from the queue.  The task is created with
			priority 2, so above the priority of the sender tasks. */
			xTaskCreate( vReceiverTask, "Receiver", 1000, NULL, 2, NULL );
 8000572:	2300      	movs	r3, #0
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2302      	movs	r3, #2
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000580:	4909      	ldr	r1, [pc, #36]	@ (80005a8 <application10+0x80>)
 8000582:	480a      	ldr	r0, [pc, #40]	@ (80005ac <application10+0x84>)
 8000584:	f008 ff3d 	bl	8009402 <xTaskCreate>
		}


}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000080 	.word	0x20000080
 8000594:	20000000 	.word	0x20000000
 8000598:	0800b4fc 	.word	0x0800b4fc
 800059c:	080004c1 	.word	0x080004c1
 80005a0:	20000002 	.word	0x20000002
 80005a4:	0800b504 	.word	0x0800b504
 80005a8:	0800b50c 	.word	0x0800b50c
 80005ac:	080004ed 	.word	0x080004ed

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f003 fb26 	bl	8003c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f814 	bl	80005e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  vTraceEnable(TRC_START);
 80005bc:	2001      	movs	r0, #1
 80005be:	f003 f817 	bl	80035f0 <xTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f931 	bl	8000828 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005c6:	f000 f877 	bl	80006b8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005ca:	f000 f8a3 	bl	8000714 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ce:	f000 f8d1 	bl	8000774 <MX_SPI1_Init>
  MX_TIM11_Init();
 80005d2:	f000 f905 	bl	80007e0 <MX_TIM11_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application10();
 80005d6:	f7ff ffa7 	bl	8000528 <application10>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80005da:	f009 f8b9 	bl	8009750 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005de:	bf00      	nop
 80005e0:	e7fd      	b.n	80005de <main+0x2e>
	...

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	@ 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	@ 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f00a fe9a 	bl	800b32c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	4a27      	ldr	r2, [pc, #156]	@ (80006b0 <SystemClock_Config+0xcc>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	@ 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <SystemClock_Config+0xd0>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000658:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800065c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000662:	2307      	movs	r3, #7
 8000664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	4618      	mov	r0, r3
 800066c:	f006 f92e 	bl	80068cc <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000676:	f000 f9ef 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000686:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f006 fb8f 	bl	8006dbc <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a4:	f000 f9d8 	bl	8000a58 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	@ 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_I2C1_Init+0x50>)
 80006be:	4a13      	ldr	r2, [pc, #76]	@ (800070c <MX_I2C1_Init+0x54>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_I2C1_Init+0x50>)
 80006c4:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <MX_I2C1_Init+0x58>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_I2C1_Init+0x50>)
 80006d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_I2C1_Init+0x50>)
 80006f6:	f005 fb05 	bl	8005d04 <HAL_I2C_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000700:	f000 f9aa 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000084 	.word	0x20000084
 800070c:	40005400 	.word	0x40005400
 8000710:	000186a0 	.word	0x000186a0

08000714 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_I2S3_Init+0x54>)
 800071a:	4a14      	ldr	r2, [pc, #80]	@ (800076c <MX_I2S3_Init+0x58>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_I2S3_Init+0x54>)
 8000720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000724:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_I2S3_Init+0x54>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_I2S3_Init+0x54>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <MX_I2S3_Init+0x54>)
 8000734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000738:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_I2S3_Init+0x54>)
 800073c:	4a0c      	ldr	r2, [pc, #48]	@ (8000770 <MX_I2S3_Init+0x5c>)
 800073e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_I2S3_Init+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_I2S3_Init+0x54>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_I2S3_Init+0x54>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_I2S3_Init+0x54>)
 8000754:	f005 fc1a 	bl	8005f8c <HAL_I2S_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800075e:	f000 f97b 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000d8 	.word	0x200000d8
 800076c:	40003c00 	.word	0x40003c00
 8000770:	00017700 	.word	0x00017700

08000774 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_SPI1_Init+0x64>)
 800077a:	4a18      	ldr	r2, [pc, #96]	@ (80007dc <MX_SPI1_Init+0x68>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007c0:	220a      	movs	r2, #10
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007c6:	f006 fe8d 	bl	80074e4 <HAL_SPI_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d0:	f000 f942 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000120 	.word	0x20000120
 80007dc:	40013000 	.word	0x40013000

080007e0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_TIM11_Init+0x40>)
 80007e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000824 <MX_TIM11_Init+0x44>)
 80007e8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <MX_TIM11_Init+0x40>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_TIM11_Init+0x40>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <MX_TIM11_Init+0x40>)
 80007f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007fc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_TIM11_Init+0x40>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_TIM11_Init+0x40>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_TIM11_Init+0x40>)
 800080c:	f006 fef3 	bl	80075f6 <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000816:	f000 f91f 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000178 	.word	0x20000178
 8000824:	40014800 	.word	0x40014800

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	@ 0x30
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	4b76      	ldr	r3, [pc, #472]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a75      	ldr	r2, [pc, #468]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b73      	ldr	r3, [pc, #460]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	4b6f      	ldr	r3, [pc, #444]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a6e      	ldr	r2, [pc, #440]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b6c      	ldr	r3, [pc, #432]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b68      	ldr	r3, [pc, #416]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a67      	ldr	r2, [pc, #412]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b65      	ldr	r3, [pc, #404]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b61      	ldr	r3, [pc, #388]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a60      	ldr	r2, [pc, #384]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a59      	ldr	r2, [pc, #356]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b57      	ldr	r3, [pc, #348]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a52      	ldr	r2, [pc, #328]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <MX_GPIO_Init+0x1f4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2108      	movs	r1, #8
 80008ea:	484d      	ldr	r0, [pc, #308]	@ (8000a20 <MX_GPIO_Init+0x1f8>)
 80008ec:	f003 fc4a 	bl	8004184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2101      	movs	r1, #1
 80008f4:	484b      	ldr	r0, [pc, #300]	@ (8000a24 <MX_GPIO_Init+0x1fc>)
 80008f6:	f003 fc45 	bl	8004184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	2200      	movs	r2, #0
 80008fc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000900:	4849      	ldr	r0, [pc, #292]	@ (8000a28 <MX_GPIO_Init+0x200>)
 8000902:	f003 fc3f 	bl	8004184 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4840      	ldr	r0, [pc, #256]	@ (8000a20 <MX_GPIO_Init+0x1f8>)
 800091e:	f003 fa95 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	483a      	ldr	r0, [pc, #232]	@ (8000a24 <MX_GPIO_Init+0x1fc>)
 800093a:	f003 fa87 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800093e:	2308      	movs	r3, #8
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094e:	2305      	movs	r3, #5
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4832      	ldr	r0, [pc, #200]	@ (8000a24 <MX_GPIO_Init+0x1fc>)
 800095a:	f003 fa77 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	482e      	ldr	r0, [pc, #184]	@ (8000a2c <MX_GPIO_Init+0x204>)
 8000974:	f003 fa6a 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000978:	2304      	movs	r3, #4
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4829      	ldr	r0, [pc, #164]	@ (8000a30 <MX_GPIO_Init+0x208>)
 800098c:	f003 fa5e 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a2:	2305      	movs	r3, #5
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4820      	ldr	r0, [pc, #128]	@ (8000a30 <MX_GPIO_Init+0x208>)
 80009ae:	f003 fa4d 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <MX_GPIO_Init+0x200>)
 80009cc:	f003 fa3e 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_GPIO_Init+0x200>)
 80009e4:	f003 fa32 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ec:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4808      	ldr	r0, [pc, #32]	@ (8000a20 <MX_GPIO_Init+0x1f8>)
 80009fe:	f003 fa25 	bl	8003e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2105      	movs	r1, #5
 8000a06:	2006      	movs	r0, #6
 8000a08:	f003 f9f6 	bl	8003df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a0c:	2006      	movs	r0, #6
 8000a0e:	f003 fa0f 	bl	8003e30 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400

08000a34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a46:	f003 f8ff 	bl	8003c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010000 	.word	0x40010000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	4a11      	ldr	r2, [pc, #68]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	f06f 0001 	mvn.w	r0, #1
 8000aaa:	f003 f9a5 	bl	8003df8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <HAL_I2C_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000afa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <HAL_I2C_MspInit+0x8c>)
 8000b18:	f003 f998 	bl	8003e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	@ 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	@ 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a31      	ldr	r2, [pc, #196]	@ (8000c3c <HAL_I2S_MspInit+0xf0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d15a      	bne.n	8000c32 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b80:	23c0      	movs	r3, #192	@ 0xc0
 8000b82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f006 fb67 	bl	8007260 <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b98:	f7ff ff5e 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	4b27      	ldr	r3, [pc, #156]	@ (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	4a26      	ldr	r2, [pc, #152]	@ (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bac:	4b24      	ldr	r3, [pc, #144]	@ (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	4a18      	ldr	r2, [pc, #96]	@ (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c00:	2306      	movs	r3, #6
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <HAL_I2S_MspInit+0xf8>)
 8000c0c:	f003 f91e 	bl	8003e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c10:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c22:	2306      	movs	r3, #6
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <HAL_I2S_MspInit+0xfc>)
 8000c2e:	f003 f90d 	bl	8003e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3738      	adds	r7, #56	@ 0x38
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40003c00 	.word	0x40003c00
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020800 	.word	0x40020800

08000c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	@ (8000cd0 <HAL_SPI_MspInit+0x84>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12b      	bne.n	8000cc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	4a17      	ldr	r2, [pc, #92]	@ (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a10      	ldr	r2, [pc, #64]	@ (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ca6:	23e0      	movs	r3, #224	@ 0xe0
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000cc2:	f003 f8c3 	bl	8003e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013000 	.word	0x40013000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <HAL_TIM_Base_MspInit+0x3c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10d      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_TIM_Base_MspInit+0x40>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	4a09      	ldr	r2, [pc, #36]	@ (8000d1c <HAL_TIM_Base_MspInit+0x40>)
 8000cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40014800 	.word	0x40014800
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	@ 0x30
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	4b2f      	ldr	r3, [pc, #188]	@ (8000df4 <HAL_InitTick+0xd4>)
 8000d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d38:	4a2e      	ldr	r2, [pc, #184]	@ (8000df4 <HAL_InitTick+0xd4>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d40:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <HAL_InitTick+0xd4>)
 8000d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d4c:	f107 020c 	add.w	r2, r7, #12
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f006 fa50 	bl	80071fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d5c:	f006 fa3a 	bl	80071d4 <HAL_RCC_GetPCLK2Freq>
 8000d60:	4603      	mov	r3, r0
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d68:	4a23      	ldr	r2, [pc, #140]	@ (8000df8 <HAL_InitTick+0xd8>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	0c9b      	lsrs	r3, r3, #18
 8000d70:	3b01      	subs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <HAL_InitTick+0xdc>)
 8000d76:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <HAL_InitTick+0xe0>)
 8000d78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d7a:	4b20      	ldr	r3, [pc, #128]	@ (8000dfc <HAL_InitTick+0xdc>)
 8000d7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d82:	4a1e      	ldr	r2, [pc, #120]	@ (8000dfc <HAL_InitTick+0xdc>)
 8000d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <HAL_InitTick+0xdc>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <HAL_InitTick+0xdc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <HAL_InitTick+0xdc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d9a:	4818      	ldr	r0, [pc, #96]	@ (8000dfc <HAL_InitTick+0xdc>)
 8000d9c:	f006 fc2b 	bl	80075f6 <HAL_TIM_Base_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000da6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d11b      	bne.n	8000de6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000dae:	4813      	ldr	r0, [pc, #76]	@ (8000dfc <HAL_InitTick+0xdc>)
 8000db0:	f006 fc70 	bl	8007694 <HAL_TIM_Base_Start_IT>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000dba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d111      	bne.n	8000de6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dc2:	2019      	movs	r0, #25
 8000dc4:	f003 f834 	bl	8003e30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b0f      	cmp	r3, #15
 8000dcc:	d808      	bhi.n	8000de0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	2019      	movs	r0, #25
 8000dd4:	f003 f810 	bl	8003df8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <HAL_InitTick+0xe4>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e002      	b.n	8000de6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000de6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3730      	adds	r7, #48	@ 0x30
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	431bde83 	.word	0x431bde83
 8000dfc:	200001c0 	.word	0x200001c0
 8000e00:	40010000 	.word	0x40010000
 8000e04:	20000008 	.word	0x20000008

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <NMI_Handler+0x4>

08000e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <MemManage_Handler+0x4>

08000e20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e46:	f006 fc95 	bl	8007774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200001c0 	.word	0x200001c0

08000e54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <OTG_FS_IRQHandler+0x10>)
 8000e5a:	f003 f9c6 	bl	80041ea <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200066c4 	.word	0x200066c4

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e90:	f7ff ffea 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	@ (8000ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f00a fa95 	bl	800b3e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fb77 	bl	80005b0 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ed0:	0800b794 	.word	0x0800b794
  ldr r2, =_sbss
 8000ed4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ed8:	20006be4 	.word	0x20006be4

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000ee6:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <_DoInit+0xa0>)
 8000ee8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000eea:	22a8      	movs	r2, #168	@ 0xa8
 8000eec:	2100      	movs	r1, #0
 8000eee:	6838      	ldr	r0, [r7, #0]
 8000ef0:	f00a fa1c 	bl	800b32c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2203      	movs	r2, #3
 8000efe:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	4a20      	ldr	r2, [pc, #128]	@ (8000f84 <_DoInit+0xa4>)
 8000f04:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	4a1f      	ldr	r2, [pc, #124]	@ (8000f88 <_DoInit+0xa8>)
 8000f0a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f12:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2200      	movs	r2, #0
 8000f24:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	4a16      	ldr	r2, [pc, #88]	@ (8000f84 <_DoInit+0xa4>)
 8000f2a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <_DoInit+0xac>)
 8000f30:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2210      	movs	r2, #16
 8000f36:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	2200      	movs	r2, #0
 8000f48:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000f4a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	e00c      	b.n	8000f6e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f1c3 030f 	rsb	r3, r3, #15
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <_DoInit+0xb0>)
 8000f5c:	5cd1      	ldrb	r1, [r2, r3]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	460a      	mov	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d9ef      	bls.n	8000f54 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000f74:	f3bf 8f5f 	dmb	sy
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000208 	.word	0x20000208
 8000f84:	0800b518 	.word	0x0800b518
 8000f88:	200002b0 	.word	0x200002b0
 8000f8c:	200006b0 	.word	0x200006b0
 8000f90:	0800b770 	.word	0x0800b770

08000f94 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d905      	bls.n	8000fc4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fc2:	e007      	b.n	8000fd4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69b9      	ldr	r1, [r7, #24]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	1acb      	subs	r3, r1, r3
 8000fce:	4413      	add	r3, r2
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	bf28      	it	cs
 8000fe2:	4613      	movcs	r3, r2
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4293      	cmp	r3, r2
 8000fec:	bf28      	it	cs
 8000fee:	4613      	movcs	r3, r2
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	6978      	ldr	r0, [r7, #20]
 8001002:	f00a fa17 	bl	800b434 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001006:	6a3a      	ldr	r2, [r7, #32]
 8001008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100a:	4413      	add	r3, r2
 800100c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	4413      	add	r3, r2
 8001014:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001022:	4413      	add	r3, r2
 8001024:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	429a      	cmp	r2, r3
 800102e:	d101      	bne.n	8001034 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001034:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1b2      	bne.n	8000faa <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001044:	6a3b      	ldr	r3, [r7, #32]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3728      	adds	r7, #40	@ 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800104e:	b580      	push	{r7, lr}
 8001050:	b088      	sub	sp, #32
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d911      	bls.n	8001096 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	4413      	add	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68b9      	ldr	r1, [r7, #8]
 8001080:	6938      	ldr	r0, [r7, #16]
 8001082:	f00a f9d7 	bl	800b434 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001086:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	441a      	add	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001094:	e01f      	b.n	80010d6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	4413      	add	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	6938      	ldr	r0, [r7, #16]
 80010aa:	f00a f9c3 	bl	800b434 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4413      	add	r3, r2
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4619      	mov	r1, r3
 80010c6:	6938      	ldr	r0, [r7, #16]
 80010c8:	f00a f9b4 	bl	800b434 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80010cc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	60da      	str	r2, [r3, #12]
}
 80010d6:	bf00      	nop
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80010de:	b480      	push	{r7}
 80010e0:	b087      	sub	sp, #28
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d808      	bhi.n	800110c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad2      	subs	r2, r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4413      	add	r3, r2
 8001106:	3b01      	subs	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e004      	b.n	8001116 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	3b01      	subs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001116:	697b      	ldr	r3, [r7, #20]
}
 8001118:	4618      	mov	r0, r3
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	@ 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8001130:	4b3e      	ldr	r3, [pc, #248]	@ (800122c <SEGGER_RTT_ReadNoLock+0x108>)
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b53      	cmp	r3, #83	@ 0x53
 800113c:	d001      	beq.n	8001142 <SEGGER_RTT_ReadNoLock+0x1e>
 800113e:	f7ff fecf 	bl	8000ee0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	3360      	adds	r3, #96	@ 0x60
 800114e:	4a37      	ldr	r2, [pc, #220]	@ (800122c <SEGGER_RTT_ReadNoLock+0x108>)
 8001150:	4413      	add	r3, r2
 8001152:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	429a      	cmp	r2, r3
 800116e:	d92b      	bls.n	80011c8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4293      	cmp	r3, r2
 8001180:	bf28      	it	cs
 8001182:	4613      	movcs	r3, r2
 8001184:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118c:	4413      	add	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	6939      	ldr	r1, [r7, #16]
 8001194:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001196:	f00a f94d 	bl	800b434 <memcpy>
    NumBytesRead += NumBytesRem;
 800119a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	4413      	add	r3, r2
 80011a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80011a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	4413      	add	r3, r2
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80011b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	4413      	add	r3, r2
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d101      	bne.n	80011c8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4293      	cmp	r3, r2
 80011d6:	bf28      	it	cs
 80011d8:	4613      	movcs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d019      	beq.n	8001216 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e8:	4413      	add	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	6939      	ldr	r1, [r7, #16]
 80011f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011f2:	f00a f91f 	bl	800b434 <memcpy>
    NumBytesRead += NumBytesRem;
 80011f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	4413      	add	r3, r2
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80011fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	4413      	add	r3, r2
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800120e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	4413      	add	r3, r2
 8001214:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8001216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001220:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001224:	4618      	mov	r0, r3
 8001226:	3730      	adds	r7, #48	@ 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000208 	.word	0x20000208

08001230 <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;

  SEGGER_RTT_LOCK();
 800123c:	f3ef 8311 	mrs	r3, BASEPRI
 8001240:	f04f 0120 	mov.w	r1, #32
 8001244:	f381 8811 	msr	BASEPRI, r1
 8001248:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff ff68 	bl	8001124 <SEGGER_RTT_ReadNoLock>
 8001254:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f383 8811 	msr	BASEPRI, r3
  //
  return NumBytesRead;
 800125c:	693b      	ldr	r3, [r7, #16]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4a1f      	ldr	r2, [pc, #124]	@ (8001304 <SEGGER_RTT_WriteNoLock+0x9c>)
 8001286:	4413      	add	r3, r2
 8001288:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d029      	beq.n	80012e6 <SEGGER_RTT_WriteNoLock+0x7e>
 8001292:	2b02      	cmp	r3, #2
 8001294:	d82e      	bhi.n	80012f4 <SEGGER_RTT_WriteNoLock+0x8c>
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <SEGGER_RTT_WriteNoLock+0x38>
 800129a:	2b01      	cmp	r3, #1
 800129c:	d013      	beq.n	80012c6 <SEGGER_RTT_WriteNoLock+0x5e>
 800129e:	e029      	b.n	80012f4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80012a0:	6978      	ldr	r0, [r7, #20]
 80012a2:	f7ff ff1c 	bl	80010de <_GetAvailWriteSpace>
 80012a6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d202      	bcs.n	80012b6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80012b4:	e021      	b.n	80012fa <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	69b9      	ldr	r1, [r7, #24]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff fec5 	bl	800104e <_WriteNoCheck>
    break;
 80012c4:	e019      	b.n	80012fa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff09 	bl	80010de <_GetAvailWriteSpace>
 80012cc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4293      	cmp	r3, r2
 80012d4:	bf28      	it	cs
 80012d6:	4613      	movcs	r3, r2
 80012d8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	69b9      	ldr	r1, [r7, #24]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff feb5 	bl	800104e <_WriteNoCheck>
    break;
 80012e4:	e009      	b.n	80012fa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	69b9      	ldr	r1, [r7, #24]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff fe52 	bl	8000f94 <_WriteBlocking>
 80012f0:	61f8      	str	r0, [r7, #28]
    break;
 80012f2:	e002      	b.n	80012fa <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
    break;
 80012f8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80012fa:	69fb      	ldr	r3, [r7, #28]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000208 	.word	0x20000208

08001308 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <SEGGER_RTT_Write+0x48>)
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b53      	cmp	r3, #83	@ 0x53
 8001320:	d001      	beq.n	8001326 <SEGGER_RTT_Write+0x1e>
 8001322:	f7ff fddd 	bl	8000ee0 <_DoInit>
  SEGGER_RTT_LOCK();
 8001326:	f3ef 8311 	mrs	r3, BASEPRI
 800132a:	f04f 0120 	mov.w	r1, #32
 800132e:	f381 8811 	msr	BASEPRI, r1
 8001332:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f7ff ff95 	bl	8001268 <SEGGER_RTT_WriteNoLock>
 800133e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8001346:	697b      	ldr	r3, [r7, #20]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000208 	.word	0x20000208

08001354 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8001364:	623b      	str	r3, [r7, #32]
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b53      	cmp	r3, #83	@ 0x53
 800136e:	d001      	beq.n	8001374 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8001370:	f7ff fdb6 	bl	8000ee0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8001376:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d82a      	bhi.n	80013d4 <SEGGER_RTT_ConfigUpBuffer+0x80>
    SEGGER_RTT_LOCK();
 800137e:	f3ef 8311 	mrs	r3, BASEPRI
 8001382:	f04f 0120 	mov.w	r1, #32
 8001386:	f381 8811 	msr	BASEPRI, r1
 800138a:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	4413      	add	r3, r2
 800139c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <SEGGER_RTT_ConfigUpBuffer+0x6e>
      pUp->sName        = sName;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013c6:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d2:	e002      	b.n	80013da <SEGGER_RTT_ConfigUpBuffer+0x86>
  } else {
    r = -1;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3728      	adds	r7, #40	@ 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000208 	.word	0x20000208

080013e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80013f6:	4b21      	ldr	r3, [pc, #132]	@ (800147c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80013f8:	623b      	str	r3, [r7, #32]
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b53      	cmp	r3, #83	@ 0x53
 8001402:	d001      	beq.n	8001408 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8001404:	f7ff fd6c 	bl	8000ee0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800140a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d82c      	bhi.n	800146c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8001412:	f3ef 8311 	mrs	r3, BASEPRI
 8001416:	f04f 0120 	mov.w	r1, #32
 800141a:	f381 8811 	msr	BASEPRI, r1
 800141e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	3360      	adds	r3, #96	@ 0x60
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00e      	beq.n	8001456 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800145a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800145c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
 800146a:	e002      	b.n	8001472 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001474:	4618      	mov	r0, r3
 8001476:	3728      	adds	r7, #40	@ 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000208 	.word	0x20000208

08001480 <xTraceCounterInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceCounterData_t *pxCounterData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceCounterInitialize(TraceCounterData_t *pxBuffer)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	pxCounterData = pxBuffer;
 8001488:	4a09      	ldr	r2, [pc, #36]	@ (80014b0 <xTraceCounterInitialize+0x30>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
	
	pxCounterData->xCallbackFunction = 0;
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <xTraceCounterInitialize+0x30>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 8001496:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <xTraceCounterInitialize+0x34>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800149e:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <xTraceCounterInitialize+0x34>)
 80014a0:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200006c0 	.word	0x200006c0
 80014b4:	200028e4 	.word	0x200028e4

080014b8 <xTraceDiagnosticsInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceDiagnosticsData_t *pxDiagnostics TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceDiagnosticsInitialize(TraceDiagnosticsData_t *pxBuffer)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxDiagnostics = pxBuffer;
 80014c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001500 <xTraceDiagnosticsInitialize+0x48>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]

	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e008      	b.n	80014de <xTraceDiagnosticsInitialize+0x26>
	{
		pxDiagnostics->metrics[i] = 0;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <xTraceDiagnosticsInitialize+0x48>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	2100      	movs	r1, #0
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3301      	adds	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d9f3      	bls.n	80014cc <xTraceDiagnosticsInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <xTraceDiagnosticsInitialize+0x4c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <xTraceDiagnosticsInitialize+0x4c>)
 80014ee:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200006c4 	.word	0x200006c4
 8001504:	200028e4 	.word	0x200028e4

08001508 <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 8001514:	4b09      	ldr	r3, [pc, #36]	@ (800153c <xTraceDiagnosticsAdd+0x34>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	79fa      	ldrb	r2, [r7, #7]
 800151a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800151e:	4b07      	ldr	r3, [pc, #28]	@ (800153c <xTraceDiagnosticsAdd+0x34>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	4401      	add	r1, r0
 8001528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return TRC_SUCCESS;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	200006c4 	.word	0x200006c4

08001540 <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	return xTraceDiagnosticsAdd(xType, 1);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2101      	movs	r1, #1
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ffda 	bl	8001508 <xTraceDiagnosticsAdd>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <xTraceDiagnosticsSetIfHigher+0x38>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	79fa      	ldrb	r2, [r7, #7]
 8001572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	dd05      	ble.n	8001588 <xTraceDiagnosticsSetIfHigher+0x28>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <xTraceDiagnosticsSetIfHigher+0x38>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	79fa      	ldrb	r2, [r7, #7]
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	return TRC_SUCCESS;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200006c4 	.word	0x200006c4

0800159c <xTraceDiagnosticsCheckStatus>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsCheckStatus(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	/* It is probably good if we always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS) == 0U)
 80015a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <xTraceDiagnosticsCheckStatus+0x7c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <xTraceDiagnosticsCheckStatus+0x14>
	{
		return TRC_FAIL;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e030      	b.n	8001612 <xTraceDiagnosticsCheckStatus+0x76>
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] > 0)
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <xTraceDiagnosticsCheckStatus+0x80>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dd06      	ble.n	80015c8 <xTraceDiagnosticsCheckStatus+0x2c>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
 80015ba:	2008      	movs	r0, #8
 80015bc:	f000 f9f4 	bl	80019a8 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <xTraceDiagnosticsCheckStatus+0x80>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <xTraceDiagnosticsCheckStatus+0x80>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b1c      	cmp	r3, #28
 80015d0:	dd06      	ble.n	80015e0 <xTraceDiagnosticsCheckStatus+0x44>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
 80015d2:	2009      	movs	r0, #9
 80015d4:	f000 f9e8 	bl	80019a8 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
 80015d8:	4b10      	ldr	r3, [pc, #64]	@ (800161c <xTraceDiagnosticsCheckStatus+0x80>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 80015e0:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <xTraceDiagnosticsCheckStatus+0x80>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dd06      	ble.n	80015f8 <xTraceDiagnosticsCheckStatus+0x5c>
	{
		(void)xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f000 f9dc 	bl	80019a8 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <xTraceDiagnosticsCheckStatus+0x80>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <xTraceDiagnosticsCheckStatus+0x80>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	dd06      	ble.n	8001610 <xTraceDiagnosticsCheckStatus+0x74>
	{
		(void)xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
 8001602:	200e      	movs	r0, #14
 8001604:	f000 f9d0 	bl	80019a8 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <xTraceDiagnosticsCheckStatus+0x80>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
	}

	return TRC_SUCCESS;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200028e4 	.word	0x200028e4
 800161c:	200006c4 	.word	0x200006c4

08001620 <xTraceEntryIndexTableInitialize>:
/* Variables */
static TraceEntryTable_t *pxEntryTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;
static TraceEntryIndexTable_t *pxIndexTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEntryIndexTableInitialize(TraceEntryIndexTable_t* const pxBuffer)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxIndexTable = pxBuffer;
 8001628:	4a04      	ldr	r2, [pc, #16]	@ (800163c <xTraceEntryIndexTableInitialize+0x1c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
	
	return prvEntryIndexInitialize();
 800162e:	f000 f945 	bl	80018bc <prvEntryIndexInitialize>
 8001632:	4603      	mov	r3, r0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200006cc 	.word	0x200006cc

08001640 <xTraceEntryTableInitialize>:

traceResult xTraceEntryTableInitialize(TraceEntryTable_t* const pxBuffer)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT((TRC_ENTRY_TABLE_SLOTS) != 0);

	pxEntryTable = pxBuffer;
 8001648:	4a28      	ldr	r2, [pc, #160]	@ (80016ec <xTraceEntryTableInitialize+0xac>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]

	pxEntryTable->uxSlots = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOTS);
 800164e:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <xTraceEntryTableInitialize+0xac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2238      	movs	r2, #56	@ 0x38
 8001654:	601a      	str	r2, [r3, #0]
	pxEntryTable->uxEntrySymbolLength = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE);
 8001656:	4b25      	ldr	r3, [pc, #148]	@ (80016ec <xTraceEntryTableInitialize+0xac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	221c      	movs	r2, #28
 800165c:	605a      	str	r2, [r3, #4]
	pxEntryTable->uxEntryStateCount = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_STATE_COUNT);
 800165e:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <xTraceEntryTableInitialize+0xac>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2203      	movs	r2, #3
 8001664:	609a      	str	r2, [r3, #8]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	e02f      	b.n	80016cc <xTraceEntryTableInitialize+0x8c>
	{
		pxEntryTable->axEntries[i].pvAddress = 0;
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <xTraceEntryTableInitialize+0xac>)
 800166e:	6819      	ldr	r1, [r3, #0]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	440b      	add	r3, r1
 800167c:	330c      	adds	r3, #12
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	e010      	b.n	80016aa <xTraceEntryTableInitialize+0x6a>
		{
			pxEntryTable->axEntries[i].xStates[j] = (TraceUnsignedBaseType_t)0;
 8001688:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <xTraceEntryTableInitialize+0xac>)
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	4413      	add	r3, r2
 800169a:	3302      	adds	r3, #2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3301      	adds	r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d9eb      	bls.n	8001688 <xTraceEntryTableInitialize+0x48>
		}
		pxEntryTable->axEntries[i].szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <xTraceEntryTableInitialize+0xac>)
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	440b      	add	r3, r1
 80016c0:	3320      	adds	r3, #32
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b37      	cmp	r3, #55	@ 0x37
 80016d0:	d9cc      	bls.n	800166c <xTraceEntryTableInitialize+0x2c>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <xTraceEntryTableInitialize+0xb0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <xTraceEntryTableInitialize+0xb0>)
 80016dc:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	200006c8 	.word	0x200006c8
 80016f0:	200028e4 	.word	0x200028e4

080016f4 <xTraceEntryCreate>:

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	@ 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 80016fc:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <xTraceEntryCreate+0xb8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <xTraceEntryCreate+0x18>
	{
		return TRC_FAIL;
 8001708:	2301      	movs	r3, #1
 800170a:	e04b      	b.n	80017a4 <xTraceEntryCreate+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800170c:	f3ef 8310 	mrs	r3, PRIMASK
 8001710:	617b      	str	r3, [r7, #20]
  return(result);
 8001712:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	f383 8810 	msr	PRIMASK, r3
}
 8001720:	bf00      	nop

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 8001722:	f107 030b 	add.w	r3, r7, #11
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f8ea 	bl	8001900 <prvEntryIndexTake>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00a      	beq.n	8001748 <xTraceEntryCreate+0x54>
	{
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff ff04 	bl	8001540 <xTraceDiagnosticsIncrease>
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f383 8810 	msr	PRIMASK, r3
}
 8001742:	bf00      	nop

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 8001744:	2301      	movs	r3, #1
 8001746:	e02d      	b.n	80017a4 <xTraceEntryCreate+0xb0>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 8001748:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <xTraceEntryCreate+0xbc>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	7afb      	ldrb	r3, [r7, #11]
 800174e:	4619      	mov	r1, r3
 8001750:	460b      	mov	r3, r1
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	440b      	add	r3, r1
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	3308      	adds	r3, #8
 800175a:	4413      	add	r3, r2
 800175c:	3304      	adds	r3, #4
 800175e:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
 800176a:	e008      	b.n	800177e <xTraceEntryCreate+0x8a>
	{
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	3301      	adds	r3, #1
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	2b02      	cmp	r3, #2
 8001782:	d9f3      	bls.n	800176c <xTraceEntryCreate+0x78>
	}

	pxEntry->uiOptions = 0u;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	2200      	movs	r2, #0
 800178e:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f383 8810 	msr	PRIMASK, r3
}
 80017a0:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3728      	adds	r7, #40	@ 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200028e4 	.word	0x200028e4
 80017b0:	200006c8 	.word	0x200006c8

080017b4 <xTraceEntryFind>:

	return TRC_SUCCESS;
}

traceResult xTraceEntryFind(const void* const pvAddress, TraceEntryHandle_t* pxEntryHandle)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(pxEntryHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(pvAddress != (void*)0);

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e017      	b.n	80017f4 <xTraceEntryFind+0x40>
	{
		pxEntry = &pxEntryTable->axEntries[i];
 80017c4:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <xTraceEntryFind+0x54>)
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	3308      	adds	r3, #8
 80017d4:	440b      	add	r3, r1
 80017d6:	3304      	adds	r3, #4
 80017d8:	60bb      	str	r3, [r7, #8]
		if (pxEntry->pvAddress == pvAddress)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d104      	bne.n	80017ee <xTraceEntryFind+0x3a>
		{
			*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	601a      	str	r2, [r3, #0]

			return TRC_SUCCESS;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e006      	b.n	80017fc <xTraceEntryFind+0x48>
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3301      	adds	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b37      	cmp	r3, #55	@ 0x37
 80017f8:	d9e4      	bls.n	80017c4 <xTraceEntryFind+0x10>
		}
	}

	return TRC_FAIL;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	200006c8 	.word	0x200006c8

0800180c <xTraceEntrySetSymbol>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceEntrySetSymbol(const TraceEntryHandle_t xEntryHandle, const char* szSymbol, uint32_t uiLength)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == (void*)0)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <xTraceEntrySetSymbol+0x1a>
	{
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <xTraceEntrySetSymbol+0x50>)
 8001820:	60bb      	str	r3, [r7, #8]
		uiLength = 0u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
	}

	/* Remember the longest symbol name */
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4619      	mov	r1, r3
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fe98 	bl	8001560 <xTraceDiagnosticsSetIfHigher>

	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b1b      	cmp	r3, #27
 8001834:	d902      	bls.n	800183c <xTraceEntrySetSymbol+0x30>
	{
		/* No room for null termination. Set to max. */
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8001836:	231c      	movs	r3, #28
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	e002      	b.n	8001842 <xTraceEntrySetSymbol+0x36>
	}
	else
	{
		/* Include null termination by increasing the size by 1 */
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* This will also copy the null termination, if possible */
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3314      	adds	r3, #20
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	4618      	mov	r0, r3
 800184c:	f009 fdf2 	bl	800b434 <memcpy>

	return TRC_SUCCESS;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	0800b524 	.word	0x0800b524

08001860 <xTraceEntryGetCount>:

traceResult xTraceEntryGetCount(uint32_t* puiCount)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	/* This should never fail */
	TRC_ASSERT(puiCount != (void*)0);

	*puiCount = (uint32_t)(TRC_ENTRY_TABLE_SLOTS) - GET_FREE_INDEX_COUNT();
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <xTraceEntryGetCount+0x24>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800186e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	200006cc 	.word	0x200006cc

08001888 <xTraceEntryGetAtIndex>:

traceResult xTraceEntryGetAtIndex(uint32_t index, TraceEntryHandle_t* pxEntryHandle)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(index < (uint32_t)(TRC_ENTRY_TABLE_SLOTS));

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	*pxEntryHandle = (TraceEntryHandle_t)&pxEntryTable->axEntries[index];
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <xTraceEntryGetAtIndex+0x30>)
 8001894:	6819      	ldr	r1, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	3308      	adds	r3, #8
 80018a2:	440b      	add	r3, r1
 80018a4:	1d1a      	adds	r2, r3, #4
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	200006c8 	.word	0x200006c8

080018bc <prvEntryIndexInitialize>:
#endif /* ((TRC_CFG_USE_TRACE_ASSERT) == 1) */

/* PRIVATE FUNCTIONS */

static traceResult prvEntryIndexInitialize(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
	uint32_t i;

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	e00a      	b.n	80018de <prvEntryIndexInitialize+0x22>
	{
		pxIndexTable->axFreeIndexes[i] = (TraceEntryIndex_t)i;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <prvEntryIndexInitialize+0x40>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	b2d9      	uxtb	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	460a      	mov	r2, r1
 80018d6:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3301      	adds	r3, #1
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b37      	cmp	r3, #55	@ 0x37
 80018e2:	d9f1      	bls.n	80018c8 <prvEntryIndexInitialize+0xc>
	}

	pxIndexTable->uiFreeIndexCount = TRC_ENTRY_TABLE_SLOTS;
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <prvEntryIndexInitialize+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2238      	movs	r2, #56	@ 0x38
 80018ea:	639a      	str	r2, [r3, #56]	@ 0x38

	return TRC_SUCCESS;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200006cc 	.word	0x200006cc

08001900 <prvEntryIndexTake>:

static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <prvEntryIndexTake+0x5c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <prvEntryIndexTake+0x16>
	{
		return TRC_FAIL;
 8001912:	2301      	movs	r3, #1
 8001914:	e01c      	b.n	8001950 <prvEntryIndexTake+0x50>
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <prvEntryIndexTake+0x5c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	73fb      	strb	r3, [r7, #15]
	pxIndexTable->uiFreeIndexCount--;
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <prvEntryIndexTake+0x5c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001924:	3a01      	subs	r2, #1
 8001926:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <prvEntryIndexTake+0x5c>)
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <prvEntryIndexTake+0x5c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <prvEntryIndexTake+0x5c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	5c8a      	ldrb	r2, [r1, r2]
 8001938:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <prvEntryIndexTake+0x5c>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <prvEntryIndexTake+0x5c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001944:	21ff      	movs	r1, #255	@ 0xff
 8001946:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	200006cc 	.word	0x200006cc

08001960 <xTraceErrorInitialize>:
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc);

static TraceErrorData_t* pxErrorInfo TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceErrorInitialize(TraceErrorData_t* pxBuffer)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxErrorInfo = pxBuffer;
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <xTraceErrorInitialize+0x40>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]

	pxErrorInfo->uiErrorAndWarningFlags = 0u;
 800196e:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <xTraceErrorInitialize+0x40>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
	pxErrorInfo->uiErrorCode = 0u;
 8001976:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <xTraceErrorInitialize+0x40>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
	pxErrorInfo->xWarningChannel = 0;
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <xTraceErrorInitialize+0x40>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 8001986:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <xTraceErrorInitialize+0x44>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f043 0320 	orr.w	r3, r3, #32
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <xTraceErrorInitialize+0x44>)
 8001990:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	200006d0 	.word	0x200006d0
 80019a4:	200028e4 	.word	0x200028e4

080019a8 <xTraceWarning>:

traceResult xTraceWarning(uint32_t uiErrorCode)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <xTraceWarning+0x54>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0320 	and.w	r3, r3, #32
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <xTraceWarning+0x18>
	{
		/* If not initialized */
		return TRC_FAIL;
 80019bc:	2301      	movs	r3, #1
 80019be:	e019      	b.n	80019f4 <xTraceWarning+0x4c>
	}
	
	if (GET_ERROR_WARNING_FLAG(uiErrorCode) == 0u)
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <xTraceWarning+0x58>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <xTraceWarning+0x4a>
	{
		/* Will never reach this point more than once per warning type, since we verify if uiErrorAndWarningFlags[uiErrorCode] has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <xTraceWarning+0x58>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	2201      	movs	r2, #1
 80019e2:	409a      	lsls	r2, r3
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <xTraceWarning+0x58>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

		(void)prvTraceErrorPrint(uiErrorCode);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f847 	bl	8001a80 <prvTraceErrorPrint>
	}

	return TRC_SUCCESS;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200028e4 	.word	0x200028e4
 8001a00:	200006d0 	.word	0x200006d0

08001a04 <xTraceError>:

traceResult xTraceError(uint32_t uiErrorCode)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8001a0c:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <xTraceError+0x70>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <xTraceError+0x18>
	{
		return TRC_FAIL;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e027      	b.n	8001a6c <xTraceError+0x68>
	}

	if (pxErrorInfo->uiErrorCode == TRC_ERROR_NONE)
 8001a1c:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <xTraceError+0x74>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d121      	bne.n	8001a6a <xTraceError+0x66>
	{
		/* Will never reach this point more than once, since we verify if uiErrorCode has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8001a26:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <xTraceError+0x74>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	2201      	movs	r2, #1
 8001a32:	409a      	lsls	r2, r3
 8001a34:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <xTraceError+0x74>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
		pxErrorInfo->uiErrorCode = uiErrorCode;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <xTraceError+0x74>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]

		if (prvTraceErrorPrint(uiErrorCode) == TRC_FAIL)
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f81b 	bl	8001a80 <prvTraceErrorPrint>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d103      	bne.n	8001a58 <xTraceError+0x54>
		{
			(void)xTraceDisable();
 8001a50:	f001 fe3c 	bl	80036cc <xTraceDisable>
			
			return TRC_FAIL;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e009      	b.n	8001a6c <xTraceError+0x68>
		}
		
		(void)xTracePrint(pxErrorInfo->xWarningChannel, "Recorder stopped in xTraceError(...)!");
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <xTraceError+0x74>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4907      	ldr	r1, [pc, #28]	@ (8001a7c <xTraceError+0x78>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fa3f 	bl	8002ee4 <xTracePrint>
		(void)xTraceDisable();
 8001a66:	f001 fe31 	bl	80036cc <xTraceDisable>
	}

	return TRC_SUCCESS;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200028e4 	.word	0x200028e4
 8001a78:	200006d0 	.word	0x200006d0
 8001a7c:	0800b528 	.word	0x0800b528

08001a80 <prvTraceErrorPrint>:

	return TRC_SUCCESS;
}

static traceResult prvTraceErrorPrint(uint32_t uiErrorCode)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t xFileName;
	
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	if (pxErrorInfo->xWarningChannel == 0)
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <prvTraceErrorPrint+0x80>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10b      	bne.n	8001aaa <prvTraceErrorPrint+0x2a>
		* The abbreviation #WFR is used instead of the longer full name,
		* to avoid truncation by small slots in the symbol table.
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		 */
		if (xTraceStringRegister("#WFR", &pxErrorInfo->xWarningChannel) == TRC_FAIL)
 8001a92:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <prvTraceErrorPrint+0x80>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3308      	adds	r3, #8
 8001a98:	4619      	mov	r1, r3
 8001a9a:	481a      	ldr	r0, [pc, #104]	@ (8001b04 <prvTraceErrorPrint+0x84>)
 8001a9c:	f001 ffcc 	bl	8003a38 <xTraceStringRegister>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <prvTraceErrorPrint+0x2a>
		{
			return TRC_FAIL;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e025      	b.n	8001af6 <prvTraceErrorPrint+0x76>
		}
	}

	(void)prvTraceErrorGetDescription(uiErrorCode, &szDesc);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f82b 	bl	8001b0c <prvTraceErrorGetDescription>

	switch (uiErrorCode)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d011      	beq.n	8001ae0 <prvTraceErrorPrint+0x60>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d010      	beq.n	8001ae4 <prvTraceErrorPrint+0x64>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3b02      	subs	r3, #2
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d80c      	bhi.n	8001ae4 <prvTraceErrorPrint+0x64>
	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
	case TRC_ERROR_DWT_NOT_SUPPORTED:
	case TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		(void)xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
 8001aca:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <prvTraceErrorPrint+0x80>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 fa05 	bl	8002ee4 <xTracePrint>
		break;
 8001ada:	bf00      	nop
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
		
		return TRC_FAIL;
	}

	return TRC_SUCCESS;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e00a      	b.n	8001af6 <prvTraceErrorPrint+0x76>
			return TRC_FAIL;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e008      	b.n	8001af6 <prvTraceErrorPrint+0x76>
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <prvTraceErrorPrint+0x80>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4906      	ldr	r1, [pc, #24]	@ (8001b08 <prvTraceErrorPrint+0x88>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fa2e 	bl	8002f50 <xTracePrintF>
		return TRC_FAIL;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200006d0 	.word	0x200006d0
 8001b04:	0800b550 	.word	0x0800b550
 8001b08:	0800b558 	.word	0x0800b558

08001b0c <prvTraceErrorGetDescription>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (uiErrorCode)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0e      	cmp	r3, #14
 8001b1a:	d85b      	bhi.n	8001bd4 <prvTraceErrorGetDescription+0xc8>
 8001b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b24 <prvTraceErrorGetDescription+0x18>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b61 	.word	0x08001b61
 8001b28:	08001bcd 	.word	0x08001bcd
 8001b2c:	08001ba5 	.word	0x08001ba5
 8001b30:	08001bad 	.word	0x08001bad
 8001b34:	08001bb5 	.word	0x08001bb5
 8001b38:	08001bbd 	.word	0x08001bbd
 8001b3c:	08001bc5 	.word	0x08001bc5
 8001b40:	08001b9d 	.word	0x08001b9d
 8001b44:	08001b65 	.word	0x08001b65
 8001b48:	08001b6d 	.word	0x08001b6d
 8001b4c:	08001b75 	.word	0x08001b75
 8001b50:	08001b7d 	.word	0x08001b7d
 8001b54:	08001b85 	.word	0x08001b85
 8001b58:	08001b8d 	.word	0x08001b8d
 8001b5c:	08001b95 	.word	0x08001b95
	{
	case TRC_ERROR_NONE:
		return TRC_FAIL;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e03c      	b.n	8001bde <prvTraceErrorGetDescription+0xd2>
	case TRC_WARNING_ENTRY_TABLE_SLOTS:
		/* There were not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM]. Inspect this
		variable and increase TRC_CFG_ENTRY_SLOTS by at least that value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SLOTS";
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4a21      	ldr	r2, [pc, #132]	@ (8001bec <prvTraceErrorGetDescription+0xe0>)
 8001b68:	601a      	str	r2, [r3, #0]
		break;
 8001b6a:	e037      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>
		/* A symbol name exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect uiLongestSymbolName in trcEntryTable and increase
		TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH to at least this value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH";
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4a20      	ldr	r2, [pc, #128]	@ (8001bf0 <prvTraceErrorGetDescription+0xe4>)
 8001b70:	601a      	str	r2, [r3, #0]
		break;
 8001b72:	e033      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>
		- xTraceStringRegister

		A trace event may store a maximum of 56 bytes payload, including
		data arguments and string characters. */

		*pszDesc = "Event size exceeded";
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf4 <prvTraceErrorGetDescription+0xe8>)
 8001b78:	601a      	str	r2, [r3, #0]
		break;
 8001b7a:	e02f      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_READ_DATA returned error";
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf8 <prvTraceErrorGetDescription+0xec>)
 8001b80:	601a      	str	r2, [r3, #0]
		break;
 8001b82:	e02b      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <prvTraceErrorGetDescription+0xf0>)
 8001b88:	601a      	str	r2, [r3, #0]
		break;
 8001b8a:	e027      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during xTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		*pszDesc = "Blocking in xTraceEnable";
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c00 <prvTraceErrorGetDescription+0xf4>)
 8001b90:	601a      	str	r2, [r3, #0]
		break;
 8001b92:	e023      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STACKMON_NO_SLOTS:
		/* Some tasks did not fit in the stack monitor. Increase the slot count. */

		*pszDesc = "No slots left in Stack Monitor";
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4a1b      	ldr	r2, [pc, #108]	@ (8001c04 <prvTraceErrorGetDescription+0xf8>)
 8001b98:	601a      	str	r2, [r3, #0]
		break;
 8001b9a:	e01f      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4a17      	ldr	r2, [pc, #92]	@ (8001bfc <prvTraceErrorGetDescription+0xf0>)
 8001ba0:	601a      	str	r2, [r3, #0]
		break;
 8001ba2:	e01b      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		*pszDesc = "Invalid event code";
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <prvTraceErrorGetDescription+0xfc>)
 8001ba8:	601a      	str	r2, [r3, #0]
		break;
 8001baa:	e017      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		*pszDesc = "Exceeded ISR nesting";
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4a17      	ldr	r2, [pc, #92]	@ (8001c0c <prvTraceErrorGetDescription+0x100>)
 8001bb0:	601a      	str	r2, [r3, #0]
		break;
 8001bb2:	e013      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT not supported";
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4a16      	ldr	r2, [pc, #88]	@ (8001c10 <prvTraceErrorGetDescription+0x104>)
 8001bb8:	601a      	str	r2, [r3, #0]
		break;
 8001bba:	e00f      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT_CYCCNT not supported";
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4a15      	ldr	r2, [pc, #84]	@ (8001c14 <prvTraceErrorGetDescription+0x108>)
 8001bc0:	601a      	str	r2, [r3, #0]
		break;
 8001bc2:	e00b      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		/* xTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		*pszDesc = "Could not create TzCtrl";
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4a14      	ldr	r2, [pc, #80]	@ (8001c18 <prvTraceErrorGetDescription+0x10c>)
 8001bc8:	601a      	str	r2, [r3, #0]
		break;
 8001bca:	e007      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_ASSERT:
		/* A TRC_ASSERT has triggered */
		*pszDesc = "ASSERT: %s (%d)";
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <prvTraceErrorGetDescription+0x110>)
 8001bd0:	601a      	str	r2, [r3, #0]
		break;
 8001bd2:	e003      	b.n	8001bdc <prvTraceErrorGetDescription+0xd0>

	default:
		/* An unknown error occurred */
		*pszDesc = "Unknown error code: 0x%08X";
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <prvTraceErrorGetDescription+0x114>)
 8001bd8:	601a      	str	r2, [r3, #0]
		break;
 8001bda:	bf00      	nop
	}

	return TRC_SUCCESS;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	0800b574 	.word	0x0800b574
 8001bf0:	0800b594 	.word	0x0800b594
 8001bf4:	0800b5c0 	.word	0x0800b5c0
 8001bf8:	0800b5d4 	.word	0x0800b5d4
 8001bfc:	0800b600 	.word	0x0800b600
 8001c00:	0800b62c 	.word	0x0800b62c
 8001c04:	0800b648 	.word	0x0800b648
 8001c08:	0800b668 	.word	0x0800b668
 8001c0c:	0800b67c 	.word	0x0800b67c
 8001c10:	0800b694 	.word	0x0800b694
 8001c14:	0800b6a8 	.word	0x0800b6a8
 8001c18:	0800b6c4 	.word	0x0800b6c4
 8001c1c:	0800b6dc 	.word	0x0800b6dc
 8001c20:	0800b558 	.word	0x0800b558

08001c24 <xTraceEventInitialize>:
	memcpy(&((uint8_t*)pxEventData)[sizeof(TraceEvent6_t)], __pvData, __uxSize);

TraceEventDataTable_t *pxTraceEventDataTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEventInitialize(TraceEventDataTable_t* pxBuffer)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceEventDataTable = pxBuffer;
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <xTraceEventInitialize+0x48>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e008      	b.n	8001c4a <xTraceEventInitialize+0x26>
	{
		pxTraceEventDataTable->coreEventData[i].eventCounter = 0u;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <xTraceEventInitialize+0x48>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	2100      	movs	r1, #0
 8001c40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f3      	beq.n	8001c38 <xTraceEventInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 8001c50:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <xTraceEventInitialize+0x4c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c58:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <xTraceEventInitialize+0x4c>)
 8001c5a:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	200006d4 	.word	0x200006d4
 8001c70:	200028e4 	.word	0x200028e4

08001c74 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
	int32_t iBytesCommitted = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 8001c86:	4b30      	ldr	r3, [pc, #192]	@ (8001d48 <xTraceEventCreate1+0xd4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d004      	beq.n	8001c9c <xTraceEventCreate1+0x28>
 8001c92:	4b2e      	ldr	r3, [pc, #184]	@ (8001d4c <xTraceEventCreate1+0xd8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <xTraceEventCreate1+0x2c>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e04e      	b.n	8001d3e <xTraceEventCreate1+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ca4:	617b      	str	r3, [r7, #20]
  return(result);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	2301      	movs	r3, #1
 8001cac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	f383 8810 	msr	PRIMASK, r3
}
 8001cb4:	bf00      	nop
 8001cb6:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <xTraceEventCreate1+0xdc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	3201      	adds	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <xTraceEventCreate1+0xe0>)
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	4b24      	ldr	r3, [pc, #144]	@ (8001d58 <xTraceEventCreate1+0xe4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	0192      	lsls	r2, r2, #6
 8001cd2:	440a      	add	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001ce0:	b292      	uxth	r2, r2
 8001ce2:	801a      	strh	r2, [r3, #0]
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <xTraceEventCreate1+0xdc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	b292      	uxth	r2, r2
 8001cee:	805a      	strh	r2, [r3, #2]
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <xTraceEventCreate1+0xe8>)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <xTraceEventCreate1+0xec>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d204      	bcs.n	8001d10 <xTraceEventCreate1+0x9c>
 8001d06:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <xTraceEventCreate1+0xec>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	3201      	adds	r2, #1
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <xTraceEventCreate1+0xec>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6852      	ldr	r2, [r2, #4]
 8001d18:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1(uxParam1);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	609a      	str	r2, [r3, #8]

	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	220c      	movs	r2, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	2001      	movs	r0, #1
 8001d28:	f7ff faee 	bl	8001308 <SEGGER_RTT_Write>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	f383 8810 	msr	PRIMASK, r3
}
 8001d3a:	bf00      	nop

	return TRC_SUCCESS;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3720      	adds	r7, #32
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200028e4 	.word	0x200028e4
 8001d4c:	200028dc 	.word	0x200028dc
 8001d50:	200006d4 	.word	0x200006d4
 8001d54:	200006e8 	.word	0x200006e8
 8001d58:	200006dc 	.word	0x200006dc
 8001d5c:	e0001004 	.word	0xe0001004
 8001d60:	200028ec 	.word	0x200028ec

08001d64 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 8001d78:	4b31      	ldr	r3, [pc, #196]	@ (8001e40 <xTraceEventCreate2+0xdc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d004      	beq.n	8001d8e <xTraceEventCreate2+0x2a>
 8001d84:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <xTraceEventCreate2+0xe0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <xTraceEventCreate2+0x2e>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e051      	b.n	8001e36 <xTraceEventCreate2+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001d92:	f3ef 8310 	mrs	r3, PRIMASK
 8001d96:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f383 8810 	msr	PRIMASK, r3
}
 8001da6:	bf00      	nop
 8001da8:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <xTraceEventCreate2+0xe4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	3201      	adds	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <xTraceEventCreate2+0xe8>)
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	4b26      	ldr	r3, [pc, #152]	@ (8001e50 <xTraceEventCreate2+0xec>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	0192      	lsls	r2, r2, #6
 8001dc4:	440a      	add	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	801a      	strh	r2, [r3, #0]
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <xTraceEventCreate2+0xe4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	b292      	uxth	r2, r2
 8001de0:	805a      	strh	r2, [r3, #2]
 8001de2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e54 <xTraceEventCreate2+0xf0>)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <xTraceEventCreate2+0xf4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d204      	bcs.n	8001e02 <xTraceEventCreate2+0x9e>
 8001df8:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <xTraceEventCreate2+0xf4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	3201      	adds	r2, #1
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <xTraceEventCreate2+0xf4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6852      	ldr	r2, [r2, #4]
 8001e0a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	60da      	str	r2, [r3, #12]

	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff fa72 	bl	8001308 <SEGGER_RTT_Write>
 8001e24:	4603      	mov	r3, r0
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f383 8810 	msr	PRIMASK, r3
}
 8001e32:	bf00      	nop

	return TRC_SUCCESS;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3728      	adds	r7, #40	@ 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200028e4 	.word	0x200028e4
 8001e44:	200028dc 	.word	0x200028dc
 8001e48:	200006d4 	.word	0x200006d4
 8001e4c:	200006e8 	.word	0x200006e8
 8001e50:	200006dc 	.word	0x200006dc
 8001e54:	e0001004 	.word	0xe0001004
 8001e58:	200028ec 	.word	0x200028ec

08001e5c <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t));
 8001e72:	4b33      	ldr	r3, [pc, #204]	@ (8001f40 <xTraceEventCreate3+0xe4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <xTraceEventCreate3+0x2c>
 8001e7e:	4b31      	ldr	r3, [pc, #196]	@ (8001f44 <xTraceEventCreate3+0xe8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <xTraceEventCreate3+0x30>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e054      	b.n	8001f36 <xTraceEventCreate3+0xda>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e90:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e96:	2301      	movs	r3, #1
 8001e98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	f383 8810 	msr	PRIMASK, r3
}
 8001ea0:	bf00      	nop
 8001ea2:	4b29      	ldr	r3, [pc, #164]	@ (8001f48 <xTraceEventCreate3+0xec>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	3201      	adds	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <xTraceEventCreate3+0xf0>)
 8001eae:	6819      	ldr	r1, [r3, #0]
 8001eb0:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <xTraceEventCreate3+0xf4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	0192      	lsls	r2, r2, #6
 8001ebe:	440a      	add	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 8001ecc:	b292      	uxth	r2, r2
 8001ece:	801a      	strh	r2, [r3, #0]
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <xTraceEventCreate3+0xec>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	805a      	strh	r2, [r3, #2]
 8001edc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f54 <xTraceEventCreate3+0xf8>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <xTraceEventCreate3+0xfc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d204      	bcs.n	8001efc <xTraceEventCreate3+0xa0>
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <xTraceEventCreate3+0xfc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	3201      	adds	r2, #1
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <xTraceEventCreate3+0xfc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6852      	ldr	r2, [r2, #4]
 8001f04:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	611a      	str	r2, [r3, #16]

	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2214      	movs	r2, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff f9f2 	bl	8001308 <SEGGER_RTT_Write>
 8001f24:	4603      	mov	r3, r0
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	f383 8810 	msr	PRIMASK, r3
}
 8001f32:	bf00      	nop

	return TRC_SUCCESS;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3728      	adds	r7, #40	@ 0x28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200028e4 	.word	0x200028e4
 8001f44:	200028dc 	.word	0x200028dc
 8001f48:	200006d4 	.word	0x200006d4
 8001f4c:	200006e8 	.word	0x200006e8
 8001f50:	200006dc 	.word	0x200006dc
 8001f54:	e0001004 	.word	0xe0001004
 8001f58:	200028ec 	.word	0x200028ec

08001f5c <xTraceEventCreate4>:

traceResult xTraceEventCreate4(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3, TraceUnsignedBaseType_t uxParam4)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t));
 8001f72:	4b34      	ldr	r3, [pc, #208]	@ (8002044 <xTraceEventCreate4+0xe8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <xTraceEventCreate4+0x2c>
 8001f7e:	4b32      	ldr	r3, [pc, #200]	@ (8002048 <xTraceEventCreate4+0xec>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <xTraceEventCreate4+0x30>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e057      	b.n	800203c <xTraceEventCreate4+0xe0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f90:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f96:	2301      	movs	r3, #1
 8001f98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f383 8810 	msr	PRIMASK, r3
}
 8001fa0:	bf00      	nop
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <xTraceEventCreate4+0xf0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	3201      	adds	r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4b28      	ldr	r3, [pc, #160]	@ (8002050 <xTraceEventCreate4+0xf4>)
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <xTraceEventCreate4+0xf8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	0192      	lsls	r2, r2, #6
 8001fbe:	440a      	add	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fcc:	b292      	uxth	r2, r2
 8001fce:	801a      	strh	r2, [r3, #0]
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <xTraceEventCreate4+0xf0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	b292      	uxth	r2, r2
 8001fda:	805a      	strh	r2, [r3, #2]
 8001fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002058 <xTraceEventCreate4+0xfc>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <xTraceEventCreate4+0x100>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d204      	bcs.n	8001ffc <xTraceEventCreate4+0xa0>
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <xTraceEventCreate4+0x100>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	3201      	adds	r2, #1
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4b17      	ldr	r3, [pc, #92]	@ (800205c <xTraceEventCreate4+0x100>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6852      	ldr	r2, [r2, #4]
 8002004:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	611a      	str	r2, [r3, #16]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800201c:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2218      	movs	r2, #24
 8002022:	4619      	mov	r1, r3
 8002024:	2001      	movs	r0, #1
 8002026:	f7ff f96f 	bl	8001308 <SEGGER_RTT_Write>
 800202a:	4603      	mov	r3, r0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f383 8810 	msr	PRIMASK, r3
}
 8002038:	bf00      	nop

	return TRC_SUCCESS;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3728      	adds	r7, #40	@ 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200028e4 	.word	0x200028e4
 8002048:	200028dc 	.word	0x200028dc
 800204c:	200006d4 	.word	0x200006d4
 8002050:	200006e8 	.word	0x200006e8
 8002054:	200006dc 	.word	0x200006dc
 8002058:	e0001004 	.word	0xe0001004
 800205c:	200028ec 	.word	0x200028ec

08002060 <xTraceEventCreateRawBlocking>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreateRawBlocking(const void* pxSource, uint32_t ulSize)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
	int32_t iBytesCommitted = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
	void* pxBuffer = (void*)0;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	ulSize = TRC_ALIGN_CEIL(ulSize, sizeof(TraceUnsignedBaseType_t));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	3303      	adds	r3, #3
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800207c:	f3ef 8310 	mrs	r3, PRIMASK
 8002080:	617b      	str	r3, [r7, #20]
  return(result);
 8002082:	697b      	ldr	r3, [r7, #20]

	TRACE_ENTER_CRITICAL_SECTION();
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	2301      	movs	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f383 8810 	msr	PRIMASK, r3
}
 8002090:	bf00      	nop

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 8002092:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <xTraceEventCreateRawBlocking+0x8c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	3201      	adds	r2, #1
 800209a:	601a      	str	r2, [r3, #0]
	while (xTraceStreamPortAllocate(ulSize, (void**)&pxBuffer) == TRC_FAIL) {}
 800209c:	bf00      	nop
 800209e:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <xTraceEventCreateRawBlocking+0x90>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <xTraceEventCreateRawBlocking+0x94>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	3301      	adds	r3, #1
 80020aa:	019b      	lsls	r3, r3, #6
 80020ac:	4413      	add	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]

	memcpy(pxBuffer, pxSource, ulSize);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f009 f9bc 	bl	800b434 <memcpy>
	while (xTraceStreamPortCommit(pxBuffer, ulSize, &iBytesCommitted) == TRC_FAIL) {}
 80020bc:	bf00      	nop
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	2001      	movs	r0, #1
 80020c6:	f7ff f91f 	bl	8001308 <SEGGER_RTT_Write>
 80020ca:	4603      	mov	r3, r0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	2300      	movs	r3, #0
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d0f4      	beq.n	80020be <xTraceEventCreateRawBlocking+0x5e>
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f383 8810 	msr	PRIMASK, r3
}
 80020de:	bf00      	nop
	(void)iBytesCommitted;

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200006d4 	.word	0x200006d4
 80020f0:	200006e8 	.word	0x200006e8
 80020f4:	200006dc 	.word	0x200006dc

080020f8 <xTraceEventCreateDataOffline0>:

traceResult xTraceEventCreateDataOffline0(uint32_t uiEventCode, const TraceUnsignedBaseType_t* const puxData, TraceUnsignedBaseType_t uxSize)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	@ 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
	TraceEvent0_t* pxEventData = (void*)0;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3303      	adds	r3, #3
 8002110:	f023 0303 	bic.w	r3, r3, #3
 8002114:	607b      	str	r3, [r7, #4]
	if (sizeof(TraceEvent0_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3308      	adds	r3, #8
 800211a:	2b40      	cmp	r3, #64	@ 0x40
 800211c:	d901      	bls.n	8002122 <xTraceEventCreateDataOffline0+0x2a>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent0_t);
 800211e:	2338      	movs	r3, #56	@ 0x38
 8002120:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002122:	f3ef 8310 	mrs	r3, PRIMASK
 8002126:	61fb      	str	r3, [r7, #28]
  return(result);
 8002128:	69fb      	ldr	r3, [r7, #28]
	}

	TRACE_EVENT_BEGIN_OFFLINE(sizeof(TraceEvent0_t) + uxSize);
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
 800212c:	2301      	movs	r3, #1
 800212e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	f383 8810 	msr	PRIMASK, r3
}
 8002136:	bf00      	nop
 8002138:	4b28      	ldr	r3, [pc, #160]	@ (80021dc <xTraceEventCreateDataOffline0+0xe4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	3201      	adds	r2, #1
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	4b27      	ldr	r3, [pc, #156]	@ (80021e0 <xTraceEventCreateDataOffline0+0xe8>)
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <xTraceEventCreateDataOffline0+0xec>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	0192      	lsls	r2, r2, #6
 8002154:	440a      	add	r2, r1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	b21a      	sxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	b29b      	uxth	r3, r3
 8002162:	031b      	lsls	r3, r3, #12
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21a      	sxth	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	b292      	uxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <xTraceEventCreateDataOffline0+0xe4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	b292      	uxth	r2, r2
 800217a:	805a      	strh	r2, [r3, #2]
 800217c:	4a1a      	ldr	r2, [pc, #104]	@ (80021e8 <xTraceEventCreateDataOffline0+0xf0>)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <xTraceEventCreateDataOffline0+0xf4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	429a      	cmp	r2, r3
 8002190:	d204      	bcs.n	800219c <xTraceEventCreateDataOffline0+0xa4>
 8002192:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <xTraceEventCreateDataOffline0+0xf4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	3201      	adds	r2, #1
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <xTraceEventCreateDataOffline0+0xf4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6852      	ldr	r2, [r2, #4]
 80021a4:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_0_DATA(puxData, uxSize);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3308      	adds	r3, #8
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f009 f940 	bl	800b434 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent0_t) + uxSize);
 80021b4:	6979      	ldr	r1, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3308      	adds	r3, #8
 80021ba:	461a      	mov	r2, r3
 80021bc:	2001      	movs	r0, #1
 80021be:	f7ff f8a3 	bl	8001308 <SEGGER_RTT_Write>
 80021c2:	4603      	mov	r3, r0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f383 8810 	msr	PRIMASK, r3
}
 80021d0:	bf00      	nop

	return TRC_SUCCESS;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3728      	adds	r7, #40	@ 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200006d4 	.word	0x200006d4
 80021e0:	200006e8 	.word	0x200006e8
 80021e4:	200006dc 	.word	0x200006dc
 80021e8:	e0001004 	.word	0xe0001004
 80021ec:	200028ec 	.word	0x200028ec

080021f0 <xTraceEventCreateData1>:
	uint32_t uiEventCode,
	TraceUnsignedBaseType_t uxParam1,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	@ 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3303      	adds	r3, #3
 800220a:	f023 0303 	bic.w	r3, r3, #3
 800220e:	603b      	str	r3, [r7, #0]
	if (sizeof(TraceEvent1_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	330c      	adds	r3, #12
 8002214:	2b40      	cmp	r3, #64	@ 0x40
 8002216:	d901      	bls.n	800221c <xTraceEventCreateData1+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent1_t);
 8002218:	2334      	movs	r3, #52	@ 0x34
 800221a:	603b      	str	r3, [r7, #0]
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 800221c:	4b36      	ldr	r3, [pc, #216]	@ (80022f8 <xTraceEventCreateData1+0x108>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <xTraceEventCreateData1+0x42>
 8002228:	4b34      	ldr	r3, [pc, #208]	@ (80022fc <xTraceEventCreateData1+0x10c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <xTraceEventCreateData1+0x46>
 8002232:	2301      	movs	r3, #1
 8002234:	e05c      	b.n	80022f0 <xTraceEventCreateData1+0x100>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002236:	f3ef 8310 	mrs	r3, PRIMASK
 800223a:	61fb      	str	r3, [r7, #28]
  return(result);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002240:	2301      	movs	r3, #1
 8002242:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	f383 8810 	msr	PRIMASK, r3
}
 800224a:	bf00      	nop
 800224c:	4b2c      	ldr	r3, [pc, #176]	@ (8002300 <xTraceEventCreateData1+0x110>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	3201      	adds	r2, #1
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	4b2b      	ldr	r3, [pc, #172]	@ (8002304 <xTraceEventCreateData1+0x114>)
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	4b2b      	ldr	r3, [pc, #172]	@ (8002308 <xTraceEventCreateData1+0x118>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	0192      	lsls	r2, r2, #6
 8002268:	440a      	add	r2, r1
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	b21a      	sxth	r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	3304      	adds	r3, #4
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	b29b      	uxth	r3, r3
 8002278:	031b      	lsls	r3, r3, #12
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21a      	sxth	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	b292      	uxth	r2, r2
 8002284:	801a      	strh	r2, [r3, #0]
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <xTraceEventCreateData1+0x110>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	b292      	uxth	r2, r2
 8002290:	805a      	strh	r2, [r3, #2]
 8002292:	4a1e      	ldr	r2, [pc, #120]	@ (800230c <xTraceEventCreateData1+0x11c>)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <xTraceEventCreateData1+0x120>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d204      	bcs.n	80022b2 <xTraceEventCreateData1+0xc2>
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <xTraceEventCreateData1+0x120>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	3201      	adds	r2, #1
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <xTraceEventCreateData1+0x120>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6852      	ldr	r2, [r2, #4]
 80022ba:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1_DATA(uxParam1, puxData, uxSize);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	330c      	adds	r3, #12
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f009 f8b2 	bl	800b434 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent1_t) + uxSize);
 80022d0:	6979      	ldr	r1, [r7, #20]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	330c      	adds	r3, #12
 80022d6:	461a      	mov	r2, r3
 80022d8:	2001      	movs	r0, #1
 80022da:	f7ff f815 	bl	8001308 <SEGGER_RTT_Write>
 80022de:	4603      	mov	r3, r0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f383 8810 	msr	PRIMASK, r3
}
 80022ec:	bf00      	nop

	return TRC_SUCCESS;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3728      	adds	r7, #40	@ 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	200028e4 	.word	0x200028e4
 80022fc:	200028dc 	.word	0x200028dc
 8002300:	200006d4 	.word	0x200006d4
 8002304:	200006e8 	.word	0x200006e8
 8002308:	200006dc 	.word	0x200006dc
 800230c:	e0001004 	.word	0xe0001004
 8002310:	200028ec 	.word	0x200028ec

08002314 <xTraceEventCreateData2>:
	TraceUnsignedBaseType_t uxParam1,
	TraceUnsignedBaseType_t uxParam2,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
	TraceEvent2_t* pxEventData = (void*)0;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232c:	3303      	adds	r3, #3
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
	if (sizeof(TraceEvent2_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8002334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002336:	3310      	adds	r3, #16
 8002338:	2b40      	cmp	r3, #64	@ 0x40
 800233a:	d901      	bls.n	8002340 <xTraceEventCreateData2+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent2_t);
 800233c:	2330      	movs	r3, #48	@ 0x30
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t) + uxSize);
 8002340:	4b38      	ldr	r3, [pc, #224]	@ (8002424 <xTraceEventCreateData2+0x110>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d004      	beq.n	8002356 <xTraceEventCreateData2+0x42>
 800234c:	4b36      	ldr	r3, [pc, #216]	@ (8002428 <xTraceEventCreateData2+0x114>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <xTraceEventCreateData2+0x46>
 8002356:	2301      	movs	r3, #1
 8002358:	e05f      	b.n	800241a <xTraceEventCreateData2+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800235a:	f3ef 8310 	mrs	r3, PRIMASK
 800235e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
 8002364:	2301      	movs	r3, #1
 8002366:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f383 8810 	msr	PRIMASK, r3
}
 800236e:	bf00      	nop
 8002370:	4b2e      	ldr	r3, [pc, #184]	@ (800242c <xTraceEventCreateData2+0x118>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	3201      	adds	r2, #1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <xTraceEventCreateData2+0x11c>)
 800237c:	6819      	ldr	r1, [r3, #0]
 800237e:	4b2d      	ldr	r3, [pc, #180]	@ (8002434 <xTraceEventCreateData2+0x120>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	0192      	lsls	r2, r2, #6
 800238c:	440a      	add	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	b21a      	sxth	r2, r3
 8002394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002396:	3308      	adds	r3, #8
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	b29b      	uxth	r3, r3
 800239c:	031b      	lsls	r3, r3, #12
 800239e:	b21b      	sxth	r3, r3
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b21a      	sxth	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	b292      	uxth	r2, r2
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	4b20      	ldr	r3, [pc, #128]	@ (800242c <xTraceEventCreateData2+0x118>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	b292      	uxth	r2, r2
 80023b4:	805a      	strh	r2, [r3, #2]
 80023b6:	4a20      	ldr	r2, [pc, #128]	@ (8002438 <xTraceEventCreateData2+0x124>)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <xTraceEventCreateData2+0x128>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d204      	bcs.n	80023d6 <xTraceEventCreateData2+0xc2>
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <xTraceEventCreateData2+0x128>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	3201      	adds	r2, #1
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4b18      	ldr	r3, [pc, #96]	@ (800243c <xTraceEventCreateData2+0x128>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6852      	ldr	r2, [r2, #4]
 80023de:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2_DATA(uxParam1, uxParam2, puxData, uxSize);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	60da      	str	r2, [r3, #12]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3310      	adds	r3, #16
 80023f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f009 f81d 	bl	800b434 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent2_t) + uxSize);
 80023fa:	6979      	ldr	r1, [r7, #20]
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	3310      	adds	r3, #16
 8002400:	461a      	mov	r2, r3
 8002402:	2001      	movs	r0, #1
 8002404:	f7fe ff80 	bl	8001308 <SEGGER_RTT_Write>
 8002408:	4603      	mov	r3, r0
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f383 8810 	msr	PRIMASK, r3
}
 8002416:	bf00      	nop

	return TRC_SUCCESS;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3728      	adds	r7, #40	@ 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200028e4 	.word	0x200028e4
 8002428:	200028dc 	.word	0x200028dc
 800242c:	200006d4 	.word	0x200006d4
 8002430:	200006e8 	.word	0x200006e8
 8002434:	200006dc 	.word	0x200006dc
 8002438:	e0001004 	.word	0xe0001004
 800243c:	200028ec 	.word	0x200028ec

08002440 <xTraceEventCreateData3>:
	TraceUnsignedBaseType_t uxParam2,
	TraceUnsignedBaseType_t uxParam3,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	@ 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8002456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002458:	3303      	adds	r3, #3
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sizeof(TraceEvent3_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8002460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002462:	3314      	adds	r3, #20
 8002464:	2b40      	cmp	r3, #64	@ 0x40
 8002466:	d901      	bls.n	800246c <xTraceEventCreateData3+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent3_t);
 8002468:	232c      	movs	r3, #44	@ 0x2c
 800246a:	637b      	str	r3, [r7, #52]	@ 0x34
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t) + uxSize);
 800246c:	4b39      	ldr	r3, [pc, #228]	@ (8002554 <xTraceEventCreateData3+0x114>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <xTraceEventCreateData3+0x42>
 8002478:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <xTraceEventCreateData3+0x118>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <xTraceEventCreateData3+0x46>
 8002482:	2301      	movs	r3, #1
 8002484:	e062      	b.n	800254c <xTraceEventCreateData3+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002486:	f3ef 8310 	mrs	r3, PRIMASK
 800248a:	61fb      	str	r3, [r7, #28]
  return(result);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002490:	2301      	movs	r3, #1
 8002492:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f383 8810 	msr	PRIMASK, r3
}
 800249a:	bf00      	nop
 800249c:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <xTraceEventCreateData3+0x11c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	3201      	adds	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002560 <xTraceEventCreateData3+0x120>)
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002564 <xTraceEventCreateData3+0x124>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	0192      	lsls	r2, r2, #6
 80024b8:	440a      	add	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	b21a      	sxth	r2, r3
 80024c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c2:	330c      	adds	r3, #12
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	031b      	lsls	r3, r3, #12
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b21a      	sxth	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	b292      	uxth	r2, r2
 80024d4:	801a      	strh	r2, [r3, #0]
 80024d6:	4b21      	ldr	r3, [pc, #132]	@ (800255c <xTraceEventCreateData3+0x11c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	b292      	uxth	r2, r2
 80024e0:	805a      	strh	r2, [r3, #2]
 80024e2:	4a21      	ldr	r2, [pc, #132]	@ (8002568 <xTraceEventCreateData3+0x128>)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4b1f      	ldr	r3, [pc, #124]	@ (800256c <xTraceEventCreateData3+0x12c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d204      	bcs.n	8002502 <xTraceEventCreateData3+0xc2>
 80024f8:	4b1c      	ldr	r3, [pc, #112]	@ (800256c <xTraceEventCreateData3+0x12c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	3201      	adds	r2, #1
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <xTraceEventCreateData3+0x12c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6852      	ldr	r2, [r2, #4]
 800250a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3_DATA(uxParam1, uxParam2, uxParam3, puxData, uxSize);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3314      	adds	r3, #20
 8002522:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002524:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002526:	4618      	mov	r0, r3
 8002528:	f008 ff84 	bl	800b434 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent3_t) + uxSize);
 800252c:	6979      	ldr	r1, [r7, #20]
 800252e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002530:	3314      	adds	r3, #20
 8002532:	461a      	mov	r2, r3
 8002534:	2001      	movs	r0, #1
 8002536:	f7fe fee7 	bl	8001308 <SEGGER_RTT_Write>
 800253a:	4603      	mov	r3, r0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f383 8810 	msr	PRIMASK, r3
}
 8002548:	bf00      	nop

	return TRC_SUCCESS;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3728      	adds	r7, #40	@ 0x28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200028e4 	.word	0x200028e4
 8002558:	200028dc 	.word	0x200028dc
 800255c:	200006d4 	.word	0x200006d4
 8002560:	200006e8 	.word	0x200006e8
 8002564:	200006dc 	.word	0x200006dc
 8002568:	e0001004 	.word	0xe0001004
 800256c:	200028ec 	.word	0x200028ec

08002570 <xTraceEventCreateData4>:
	TraceUnsignedBaseType_t uxParam3,
	TraceUnsignedBaseType_t uxParam4,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	@ 0x28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8002586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002588:	3303      	adds	r3, #3
 800258a:	f023 0303 	bic.w	r3, r3, #3
 800258e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (sizeof(TraceEvent4_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8002590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002592:	3318      	adds	r3, #24
 8002594:	2b40      	cmp	r3, #64	@ 0x40
 8002596:	d901      	bls.n	800259c <xTraceEventCreateData4+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent4_t);
 8002598:	2328      	movs	r3, #40	@ 0x28
 800259a:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t) + uxSize);
 800259c:	4b3b      	ldr	r3, [pc, #236]	@ (800268c <xTraceEventCreateData4+0x11c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d004      	beq.n	80025b2 <xTraceEventCreateData4+0x42>
 80025a8:	4b39      	ldr	r3, [pc, #228]	@ (8002690 <xTraceEventCreateData4+0x120>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <xTraceEventCreateData4+0x46>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e065      	b.n	8002682 <xTraceEventCreateData4+0x112>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025b6:	f3ef 8310 	mrs	r3, PRIMASK
 80025ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	2301      	movs	r3, #1
 80025c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	f383 8810 	msr	PRIMASK, r3
}
 80025ca:	bf00      	nop
 80025cc:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <xTraceEventCreateData4+0x124>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	3201      	adds	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	4b30      	ldr	r3, [pc, #192]	@ (8002698 <xTraceEventCreateData4+0x128>)
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	4b30      	ldr	r3, [pc, #192]	@ (800269c <xTraceEventCreateData4+0x12c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	0192      	lsls	r2, r2, #6
 80025e8:	440a      	add	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f2:	3310      	adds	r3, #16
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	031b      	lsls	r3, r3, #12
 80025fa:	b21b      	sxth	r3, r3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b21a      	sxth	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	b292      	uxth	r2, r2
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	4b23      	ldr	r3, [pc, #140]	@ (8002694 <xTraceEventCreateData4+0x124>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	b292      	uxth	r2, r2
 8002610:	805a      	strh	r2, [r3, #2]
 8002612:	4a23      	ldr	r2, [pc, #140]	@ (80026a0 <xTraceEventCreateData4+0x130>)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4b21      	ldr	r3, [pc, #132]	@ (80026a4 <xTraceEventCreateData4+0x134>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	429a      	cmp	r2, r3
 8002626:	d204      	bcs.n	8002632 <xTraceEventCreateData4+0xc2>
 8002628:	4b1e      	ldr	r3, [pc, #120]	@ (80026a4 <xTraceEventCreateData4+0x134>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	3201      	adds	r2, #1
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <xTraceEventCreateData4+0x134>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6852      	ldr	r2, [r2, #4]
 800263a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4_DATA(uxParam1, uxParam2, uxParam3, uxParam4, puxData, uxSize);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3318      	adds	r3, #24
 8002658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800265a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800265c:	4618      	mov	r0, r3
 800265e:	f008 fee9 	bl	800b434 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent4_t) + uxSize);
 8002662:	6979      	ldr	r1, [r7, #20]
 8002664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002666:	3318      	adds	r3, #24
 8002668:	461a      	mov	r2, r3
 800266a:	2001      	movs	r0, #1
 800266c:	f7fe fe4c 	bl	8001308 <SEGGER_RTT_Write>
 8002670:	4603      	mov	r3, r0
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f383 8810 	msr	PRIMASK, r3
}
 800267e:	bf00      	nop

	return TRC_SUCCESS;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3728      	adds	r7, #40	@ 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200028e4 	.word	0x200028e4
 8002690:	200028dc 	.word	0x200028dc
 8002694:	200006d4 	.word	0x200006d4
 8002698:	200006e8 	.word	0x200006e8
 800269c:	200006dc 	.word	0x200006dc
 80026a0:	e0001004 	.word	0xe0001004
 80026a4:	200028ec 	.word	0x200028ec

080026a8 <xTraceEventCreateData5>:
	TraceUnsignedBaseType_t uxParam4,
	TraceUnsignedBaseType_t uxParam5,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	@ 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
	TraceEvent5_t* pxEventData = (void*)0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 80026be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c0:	3303      	adds	r3, #3
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (sizeof(TraceEvent5_t) + uxSize > TRC_MAX_BLOB_SIZE)
 80026c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ca:	331c      	adds	r3, #28
 80026cc:	2b40      	cmp	r3, #64	@ 0x40
 80026ce:	d901      	bls.n	80026d4 <xTraceEventCreateData5+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent5_t);
 80026d0:	2324      	movs	r3, #36	@ 0x24
 80026d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent5_t) + uxSize);
 80026d4:	4b3c      	ldr	r3, [pc, #240]	@ (80027c8 <xTraceEventCreateData5+0x120>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <xTraceEventCreateData5+0x42>
 80026e0:	4b3a      	ldr	r3, [pc, #232]	@ (80027cc <xTraceEventCreateData5+0x124>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <xTraceEventCreateData5+0x46>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e068      	b.n	80027c0 <xTraceEventCreateData5+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026ee:	f3ef 8310 	mrs	r3, PRIMASK
 80026f2:	61fb      	str	r3, [r7, #28]
  return(result);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f8:	2301      	movs	r3, #1
 80026fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	f383 8810 	msr	PRIMASK, r3
}
 8002702:	bf00      	nop
 8002704:	4b32      	ldr	r3, [pc, #200]	@ (80027d0 <xTraceEventCreateData5+0x128>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	3201      	adds	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <xTraceEventCreateData5+0x12c>)
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	4b31      	ldr	r3, [pc, #196]	@ (80027d8 <xTraceEventCreateData5+0x130>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	0192      	lsls	r2, r2, #6
 8002720:	440a      	add	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	b21a      	sxth	r2, r3
 8002728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800272a:	3314      	adds	r3, #20
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	b29b      	uxth	r3, r3
 8002730:	031b      	lsls	r3, r3, #12
 8002732:	b21b      	sxth	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b21a      	sxth	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	b292      	uxth	r2, r2
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <xTraceEventCreateData5+0x128>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	b292      	uxth	r2, r2
 8002748:	805a      	strh	r2, [r3, #2]
 800274a:	4a24      	ldr	r2, [pc, #144]	@ (80027dc <xTraceEventCreateData5+0x134>)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <xTraceEventCreateData5+0x138>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	429a      	cmp	r2, r3
 800275e:	d204      	bcs.n	800276a <xTraceEventCreateData5+0xc2>
 8002760:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <xTraceEventCreateData5+0x138>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	3201      	adds	r2, #1
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <xTraceEventCreateData5+0x138>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6852      	ldr	r2, [r2, #4]
 8002772:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_5_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, puxData, uxSize);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800278a:	615a      	str	r2, [r3, #20]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002790:	619a      	str	r2, [r3, #24]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	331c      	adds	r3, #28
 8002796:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002798:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800279a:	4618      	mov	r0, r3
 800279c:	f008 fe4a 	bl	800b434 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent5_t) + uxSize);
 80027a0:	6979      	ldr	r1, [r7, #20]
 80027a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a4:	331c      	adds	r3, #28
 80027a6:	461a      	mov	r2, r3
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7fe fdad 	bl	8001308 <SEGGER_RTT_Write>
 80027ae:	4603      	mov	r3, r0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f383 8810 	msr	PRIMASK, r3
}
 80027bc:	bf00      	nop

	return TRC_SUCCESS;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3728      	adds	r7, #40	@ 0x28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200028e4 	.word	0x200028e4
 80027cc:	200028dc 	.word	0x200028dc
 80027d0:	200006d4 	.word	0x200006d4
 80027d4:	200006e8 	.word	0x200006e8
 80027d8:	200006dc 	.word	0x200006dc
 80027dc:	e0001004 	.word	0xe0001004
 80027e0:	200028ec 	.word	0x200028ec

080027e4 <xTraceEventCreateData6>:
	TraceUnsignedBaseType_t uxParam5,
	TraceUnsignedBaseType_t uxParam6,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	@ 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
	TraceEvent6_t* pxEventData = (void*)0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 80027fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027fc:	3303      	adds	r3, #3
 80027fe:	f023 0303 	bic.w	r3, r3, #3
 8002802:	643b      	str	r3, [r7, #64]	@ 0x40
	if (sizeof(TraceEvent6_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8002804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002806:	3320      	adds	r3, #32
 8002808:	2b40      	cmp	r3, #64	@ 0x40
 800280a:	d901      	bls.n	8002810 <xTraceEventCreateData6+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent6_t);
 800280c:	2320      	movs	r3, #32
 800280e:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent6_t) + uxSize);
 8002810:	4b3e      	ldr	r3, [pc, #248]	@ (800290c <xTraceEventCreateData6+0x128>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <xTraceEventCreateData6+0x42>
 800281c:	4b3c      	ldr	r3, [pc, #240]	@ (8002910 <xTraceEventCreateData6+0x12c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <xTraceEventCreateData6+0x46>
 8002826:	2301      	movs	r3, #1
 8002828:	e06b      	b.n	8002902 <xTraceEventCreateData6+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800282a:	f3ef 8310 	mrs	r3, PRIMASK
 800282e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
 8002834:	2301      	movs	r3, #1
 8002836:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f383 8810 	msr	PRIMASK, r3
}
 800283e:	bf00      	nop
 8002840:	4b34      	ldr	r3, [pc, #208]	@ (8002914 <xTraceEventCreateData6+0x130>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	3201      	adds	r2, #1
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	4b33      	ldr	r3, [pc, #204]	@ (8002918 <xTraceEventCreateData6+0x134>)
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	4b33      	ldr	r3, [pc, #204]	@ (800291c <xTraceEventCreateData6+0x138>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	0192      	lsls	r2, r2, #6
 800285c:	440a      	add	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	b21a      	sxth	r2, r3
 8002864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002866:	3318      	adds	r3, #24
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	b29b      	uxth	r3, r3
 800286c:	031b      	lsls	r3, r3, #12
 800286e:	b21b      	sxth	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b21a      	sxth	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	b292      	uxth	r2, r2
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	4b26      	ldr	r3, [pc, #152]	@ (8002914 <xTraceEventCreateData6+0x130>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	b292      	uxth	r2, r2
 8002884:	805a      	strh	r2, [r3, #2]
 8002886:	4a26      	ldr	r2, [pc, #152]	@ (8002920 <xTraceEventCreateData6+0x13c>)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <xTraceEventCreateData6+0x140>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	d204      	bcs.n	80028a6 <xTraceEventCreateData6+0xc2>
 800289c:	4b21      	ldr	r3, [pc, #132]	@ (8002924 <xTraceEventCreateData6+0x140>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	3201      	adds	r2, #1
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <xTraceEventCreateData6+0x140>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6852      	ldr	r2, [r2, #4]
 80028ae:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_6_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, uxParam6, puxData, uxSize);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	611a      	str	r2, [r3, #16]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028c6:	615a      	str	r2, [r3, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028cc:	619a      	str	r2, [r3, #24]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028d2:	61da      	str	r2, [r3, #28]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3320      	adds	r3, #32
 80028d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028dc:	4618      	mov	r0, r3
 80028de:	f008 fda9 	bl	800b434 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent6_t) + uxSize);
 80028e2:	6979      	ldr	r1, [r7, #20]
 80028e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e6:	3320      	adds	r3, #32
 80028e8:	461a      	mov	r2, r3
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7fe fd0c 	bl	8001308 <SEGGER_RTT_Write>
 80028f0:	4603      	mov	r3, r0
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f383 8810 	msr	PRIMASK, r3
}
 80028fe:	bf00      	nop

	return TRC_SUCCESS;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3728      	adds	r7, #40	@ 0x28
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200028e4 	.word	0x200028e4
 8002910:	200028dc 	.word	0x200028dc
 8002914:	200006d4 	.word	0x200006d4
 8002918:	200006e8 	.word	0x200006e8
 800291c:	200006dc 	.word	0x200006dc
 8002920:	e0001004 	.word	0xe0001004
 8002924:	200028ec 	.word	0x200028ec

08002928 <xTraceExtensionInitialize>:
		)

static TraceExtensionData_t *pxExtensionData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceExtensionInitialize(TraceExtensionData_t* const pxBuffer)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);
	
	pxExtensionData = pxBuffer;
 8002930:	4a09      	ldr	r2, [pc, #36]	@ (8002958 <xTraceExtensionInitialize+0x30>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6013      	str	r3, [r2, #0]
	
	pxExtensionData->uxNextFreeExtensionEventId = TRC_EXTENSION_BASE_EVENT_ID;
 8002936:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <xTraceExtensionInitialize+0x30>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	22fd      	movs	r2, #253	@ 0xfd
 800293c:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 800293e:	4b07      	ldr	r3, [pc, #28]	@ (800295c <xTraceExtensionInitialize+0x34>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <xTraceExtensionInitialize+0x34>)
 8002948:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	200006d8 	.word	0x200006d8
 800295c:	200028e4 	.word	0x200028e4

08002960 <xTraceHardwarePortInitCortexM>:
#if (((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) || (TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M_NRF_SD)) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK

void xTraceHardwarePortInitCortexM(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
	/* Make sure the DWT registers are unlocked, in case the debugger doesn't do this. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8002964:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <xTraceHardwarePortInitCortexM+0x54>)
 8002966:	4a14      	ldr	r2, [pc, #80]	@ (80029b8 <xTraceHardwarePortInitCortexM+0x58>)
 8002968:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800296a:	4b14      	ldr	r3, [pc, #80]	@ (80029bc <xTraceHardwarePortInitCortexM+0x5c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a13      	ldr	r2, [pc, #76]	@ (80029bc <xTraceHardwarePortInitCortexM+0x5c>)
 8002970:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002974:	6013      	str	r3, [r2, #0]

	do
	{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8002976:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <xTraceHardwarePortInitCortexM+0x5c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			xTraceError(TRC_ERROR_DWT_NOT_SUPPORTED);
 800297e:	2004      	movs	r0, #4
 8002980:	f7ff f840 	bl	8001a04 <xTraceError>
			break;
 8002984:	e013      	b.n	80029ae <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8002986:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <xTraceHardwarePortInitCortexM+0x60>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			xTraceError(TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 8002992:	2005      	movs	r0, #5
 8002994:	f7ff f836 	bl	8001a04 <xTraceError>
			break;
 8002998:	e009      	b.n	80029ae <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 800299a:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <xTraceHardwarePortInitCortexM+0x64>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <xTraceHardwarePortInitCortexM+0x60>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a06      	ldr	r2, [pc, #24]	@ (80029c0 <xTraceHardwarePortInitCortexM+0x60>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6013      	str	r3, [r2, #0]

	} while (0);	/* breaks above jump here */
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e0001fb0 	.word	0xe0001fb0
 80029b8:	c5acce55 	.word	0xc5acce55
 80029bc:	e000edfc 	.word	0xe000edfc
 80029c0:	e0001000 	.word	0xe0001000
 80029c4:	e0001004 	.word	0xe0001004

080029c8 <xTraceHeapCreate>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING) && (TRC_USE_HEAPS == 1)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceHeapCreate(const char *szName, TraceUnsignedBaseType_t uxCurrent, TraceUnsignedBaseType_t uxHighWaterMark, TraceUnsignedBaseType_t uxMax, TraceHeapHandle_t *pxHeapHandle)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	@ 0x30
 80029cc:	af04      	add	r7, sp, #16
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
	TraceUnsignedBaseType_t uxStates[3];

	uxStates[TRC_HEAP_STATE_INDEX_CURRENT] = uxCurrent;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	617b      	str	r3, [r7, #20]
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	61bb      	str	r3, [r7, #24]
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	61fb      	str	r3, [r7, #28]

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 80029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2303      	movs	r3, #3
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	2100      	movs	r1, #0
 80029f8:	20f2      	movs	r0, #242	@ 0xf2
 80029fa:	f000 f911 	bl	8002c20 <xTraceObjectRegisterInternal>
 80029fe:	4603      	mov	r3, r0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <xTraceHeapAlloc>:

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <xTraceHeapAlloc+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e024      	b.n	8002a68 <xTraceHeapAlloc+0x60>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d015      	beq.n	8002a50 <xTraceHeapAlloc+0x48>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	613b      	str	r3, [r7, #16]

		uxCurrent += uxSize;
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

		if (uxCurrent > uxHighWaterMark)
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d904      	bls.n	8002a4a <xTraceHeapAlloc+0x42>
		{
			uxHighWaterMark = uxCurrent;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	613b      	str	r3, [r7, #16]
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	609a      	str	r2, [r3, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <xTraceHeapAlloc+0x52>
 8002a56:	2338      	movs	r3, #56	@ 0x38
 8002a58:	e000      	b.n	8002a5c <xTraceHeapAlloc+0x54>
 8002a5a:	23e9      	movs	r3, #233	@ 0xe9
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff f97f 	bl	8001d64 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <xTraceHeapFree>:

traceResult xTraceHeapFree(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent;

	if (xHeapHandle == 0)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <xTraceHeapFree+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e018      	b.n	8002ab8 <xTraceHeapFree+0x48>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d009      	beq.n	8002aa0 <xTraceHeapFree+0x30>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	617b      	str	r3, [r7, #20]

		uxCurrent -= uxSize;
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_FREE : PSF_EVENT_FREE_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <xTraceHeapFree+0x3a>
 8002aa6:	2339      	movs	r3, #57	@ 0x39
 8002aa8:	e000      	b.n	8002aac <xTraceHeapFree+0x3c>
 8002aaa:	23ea      	movs	r3, #234	@ 0xea
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f957 	bl	8001d64 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <xTraceISRInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceISRData_t* pxTraceISRData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceISRInitialize(TraceISRData_t *pxBuffer)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	uint32_t uiStackIndex;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceISRData = pxBuffer;
 8002ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b38 <xTraceISRInitialize+0x78>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]

	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e020      	b.n	8002b16 <xTraceISRInitialize+0x56>
	{
		TraceISRCoreData_t* pxCoreData = &pxTraceISRData->cores[uiCoreIndex];
 8002ad4:	4b18      	ldr	r3, [pc, #96]	@ (8002b38 <xTraceISRInitialize+0x78>)
 8002ad6:	6819      	ldr	r1, [r3, #0]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	60fb      	str	r3, [r7, #12]

		/* Initialize ISR stack */
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	e007      	b.n	8002afc <xTraceISRInitialize+0x3c>
		{
			pxCoreData->handleStack[uiStackIndex] = 0;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	2100      	movs	r1, #0
 8002af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	3301      	adds	r3, #1
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b07      	cmp	r3, #7
 8002b00:	d9f4      	bls.n	8002aec <xTraceISRInitialize+0x2c>
		}
		
		pxCoreData->stackIndex = -1;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	621a      	str	r2, [r3, #32]
		pxCoreData->isPendingContextSwitch = 0u;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24
	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0db      	beq.n	8002ad4 <xTraceISRInitialize+0x14>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 8002b1c:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <xTraceISRInitialize+0x7c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b24:	4a05      	ldr	r2, [pc, #20]	@ (8002b3c <xTraceISRInitialize+0x7c>)
 8002b26:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	200006dc 	.word	0x200006dc
 8002b3c:	200028e4 	.word	0x200028e4

08002b40 <xTraceKernelPortInitialize>:
static TraceKernelPortData_t* pxKernelPortData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

#define TRC_PORT_MALLOC(size) pvPortMalloc(size)

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceKernelPortDataBuffer_t, TraceKernelPortData_t);
	
	if (pxBuffer == 0)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <xTraceKernelPortInitialize+0x12>
	{
		return TRC_FAIL;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00b      	b.n	8002b6a <xTraceKernelPortInitialize+0x2a>
	}
	
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 8002b52:	4a09      	ldr	r2, [pc, #36]	@ (8002b78 <xTraceKernelPortInitialize+0x38>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6013      	str	r3, [r2, #0]

	pxKernelPortData->xSystemHeapHandle = 0;
 8002b58:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <xTraceKernelPortInitialize+0x38>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
	pxKernelPortData->xTzCtrlHandle = 0;
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <xTraceKernelPortInitialize+0x38>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2200      	movs	r2, #0
 8002b66:	605a      	str	r2, [r3, #4]
	
	return TRC_SUCCESS;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	200006e0 	.word	0x200006e0

08002b7c <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af02      	add	r7, sp, #8
		xTraceEntrySetOptions(xIdleHandle, TRC_ENTRY_OPTION_IDLE_NAME);
	}
#endif
	
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
	if (pxKernelPortData->xSystemHeapHandle == 0)
 8002b82:	4b17      	ldr	r3, [pc, #92]	@ (8002be0 <xTraceKernelPortEnable+0x64>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <xTraceKernelPortEnable+0x24>
	{
#if defined(configTOTAL_HEAP_SIZE)
		xTraceHeapCreate("System Heap", 0, 0, configTOTAL_HEAP_SIZE, &pxKernelPortData->xSystemHeapHandle);
 8002b8c:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <xTraceKernelPortEnable+0x64>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4812      	ldr	r0, [pc, #72]	@ (8002be4 <xTraceKernelPortEnable+0x68>)
 8002b9c:	f7ff ff14 	bl	80029c8 <xTraceHeapCreate>
		xTraceHeapCreate("System Heap", 0, 0, (TRC_CFG_TOTAL_HEAP_SIZE), &pxKernelPortData->xSystemHeapHandle);
#endif
	}
#endif
	
	if (pxKernelPortData->xTzCtrlHandle == 0)
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <xTraceKernelPortEnable+0x64>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d116      	bne.n	8002bd8 <xTraceKernelPortEnable+0x5c>
	{
		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, &pxKernelPortData->xTzCtrlHandle);
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <xTraceKernelPortEnable+0x64>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bbc:	490a      	ldr	r1, [pc, #40]	@ (8002be8 <xTraceKernelPortEnable+0x6c>)
 8002bbe:	480b      	ldr	r0, [pc, #44]	@ (8002bec <xTraceKernelPortEnable+0x70>)
 8002bc0:	f006 fc1f 	bl	8009402 <xTaskCreate>
#endif

		if (pxKernelPortData->xTzCtrlHandle == 0)
 8002bc4:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <xTraceKernelPortEnable+0x64>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <xTraceKernelPortEnable+0x5c>
		{
			xTraceError(TRC_ERROR_TZCTRLTASK_NOT_CREATED);
 8002bce:	2006      	movs	r0, #6
 8002bd0:	f7fe ff18 	bl	8001a04 <xTraceError>

			return TRC_FAIL;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <xTraceKernelPortEnable+0x5e>
		}
	}
	
	return TRC_SUCCESS;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200006e0 	.word	0x200006e0
 8002be4:	0800b6ec 	.word	0x0800b6ec
 8002be8:	0800b6f8 	.word	0x0800b6f8
 8002bec:	08002bf1 	.word	0x08002bf1

08002bf0 <TzCtrl>:

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		xTraceTzCtrl();
 8002bf8:	f000 fd70 	bl	80036dc <xTraceTzCtrl>

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 8002bfc:	200a      	movs	r0, #10
 8002bfe:	f006 fd6d 	bl	80096dc <vTaskDelay>
		xTraceTzCtrl();
 8002c02:	bf00      	nop
 8002c04:	e7f8      	b.n	8002bf8 <TzCtrl+0x8>
	...

08002c08 <xTraceKernelPortGetSystemHeapHandle>:
#endif

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
	return pxKernelPortData->xSystemHeapHandle;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	@ (8002c1c <xTraceKernelPortGetSystemHeapHandle+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	200006e0 	.word	0x200006e0

08002c20 <xTraceObjectRegisterInternal>:
#define TRC_SEND_NAME_ONLY_ON_DELETE 0
#endif

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b090      	sub	sp, #64	@ 0x40
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	TRC_ASSERT(pxObjectHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c38:	2301      	movs	r3, #1
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3e:	f383 8810 	msr	PRIMASK, r3
}
 8002c42:	bf00      	nop

	if (pvObject != (void*)0)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01a      	beq.n	8002c80 <xTraceObjectRegisterInternal+0x60>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8002c4a:	f107 0318 	add.w	r3, r7, #24
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fd50 	bl	80016f4 <xTraceEntryCreate>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <xTraceObjectRegisterInternal+0x44>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	2300      	movs	r3, #0
 8002c62:	e000      	b.n	8002c66 <xTraceObjectRegisterInternal+0x46>
 8002c64:	2301      	movs	r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <xTraceObjectRegisterInternal+0x5a>
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	f383 8810 	msr	PRIMASK, r3
}
 8002c74:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e080      	b.n	8002d7c <xTraceObjectRegisterInternal+0x15c>
		}
		
		pvAddress = pvObject;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e012      	b.n	8002ca6 <xTraceObjectRegisterInternal+0x86>
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8002c80:	f107 0318 	add.w	r3, r7, #24
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe fd35 	bl	80016f4 <xTraceEntryCreate>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d107      	bne.n	8002ca0 <xTraceObjectRegisterInternal+0x80>
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	f383 8810 	msr	PRIMASK, r3
}
 8002c9a:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e06d      	b.n	8002d7c <xTraceObjectRegisterInternal+0x15c>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	617b      	str	r3, [r7, #20]
	}

	for (i = 0u; i < uxStateCount; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002caa:	e00c      	b.n	8002cc6 <xTraceObjectRegisterInternal+0xa6>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 8002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cb2:	4413      	add	r3, r2
 8002cb4:	69b9      	ldr	r1, [r7, #24]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < uxStateCount; i++)
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d3ee      	bcc.n	8002cac <xTraceObjectRegisterInternal+0x8c>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6919      	ldr	r1, [r3, #16]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	611a      	str	r2, [r3, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f383 8810 	msr	PRIMASK, r3
}
 8002cea:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <xTraceObjectRegisterInternal+0xe4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <xTraceObjectRegisterInternal+0xe4>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f840 	bl	8002d84 <xTraceObjectSetName>
	}

	switch (uxStateCount)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d835      	bhi.n	8002d76 <xTraceObjectRegisterInternal+0x156>
 8002d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <xTraceObjectRegisterInternal+0xf0>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002d2d 	.word	0x08002d2d
 8002d18:	08002d3f 	.word	0x08002d3f
 8002d1c:	08002d55 	.word	0x08002d55
	{
		case 0:
			xTraceEventCreate1(uiEventCode, (TraceUnsignedBaseType_t)pvAddress);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4619      	mov	r1, r3
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7fe ffa5 	bl	8001c74 <xTraceEventCreate1>
			break;
 8002d2a:	e026      	b.n	8002d7a <xTraceObjectRegisterInternal+0x15a>
		case 1:
			xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0]);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff f814 	bl	8001d64 <xTraceEventCreate2>
			break;
 8002d3c:	e01d      	b.n	8002d7a <xTraceObjectRegisterInternal+0x15a>
		case 2:
			xTraceEventCreate3(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1]);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	4619      	mov	r1, r3
 8002d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d48:	3304      	adds	r3, #4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff f885 	bl	8001e5c <xTraceEventCreate3>
			break;
 8002d52:	e012      	b.n	8002d7a <xTraceObjectRegisterInternal+0x15a>
		case 3:
			xTraceEventCreate4(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1], uxStates[2]);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4618      	mov	r0, r3
 8002d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d5e:	3304      	adds	r3, #4
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d64:	3308      	adds	r3, #8
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f7ff f8f4 	bl	8001f5c <xTraceEventCreate4>
			break;
 8002d74:	e001      	b.n	8002d7a <xTraceObjectRegisterInternal+0x15a>
		default:
			return TRC_FAIL;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <xTraceObjectRegisterInternal+0x15c>
			break;
	}

	return TRC_SUCCESS;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3738      	adds	r7, #56	@ 0x38
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <xTraceObjectSetName>:
	return xTraceEntryDelete(xObjectHandle);
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
	void* pvObject = (void*)0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    /* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)pvObject;

	if (szName == (void*)0)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <xTraceObjectSetName+0x18>
	{
		szName = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8002d98:	4b13      	ldr	r3, [pc, #76]	@ (8002de8 <xTraceObjectSetName+0x64>)
 8002d9a:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e002      	b.n	8002dae <xTraceObjectSetName+0x2a>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3301      	adds	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <xTraceObjectSetName+0x3c>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dbe:	d9f3      	bls.n	8002da8 <xTraceObjectSetName+0x24>

	uiLength = i;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	613b      	str	r3, [r7, #16]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 0)
	/* Attempt to send name event now since we don't do it on delete events */
	(void)xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)pvObject, (TraceUnsignedBaseType_t*)szName, uiLength + 1); /* +1 for termination */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	2003      	movs	r0, #3
 8002dd0:	f7ff fa0e 	bl	80021f0 <xTraceEventCreateData1>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fe fd17 	bl	800180c <xTraceEntrySetSymbol>
 8002dde:	4603      	mov	r3, r0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	0800b700 	.word	0x0800b700

08002dec <xTraceObjectRegisterWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	@ 0x28
 8002df0:	af04      	add	r7, sp, #16
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, &xObjectHandle);
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	9302      	str	r3, [sp, #8]
 8002e00:	2300      	movs	r3, #0
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	463b      	mov	r3, r7
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff ff06 	bl	8002c20 <xTraceObjectRegisterInternal>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <xTraceObjectSetNameWithoutHandle>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetNameWithoutHandle(void* pvObject, const char* szName)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b08a      	sub	sp, #40	@ 0x28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e28:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e2e:	69bb      	ldr	r3, [r7, #24]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e32:	2301      	movs	r3, #1
 8002e34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f383 8810 	msr	PRIMASK, r3
}
 8002e3c:	bf00      	nop

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fe fcb5 	bl	80017b4 <xTraceEntryFind>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d117      	bne.n	8002e80 <xTraceObjectSetNameWithoutHandle+0x62>
	{
		/* No previous entry found. Create one. */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8002e50:	f107 030c 	add.w	r3, r7, #12
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe fc4d 	bl	80016f4 <xTraceEntryCreate>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d104      	bne.n	8002e6a <xTraceObjectSetNameWithoutHandle+0x4c>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <xTraceObjectSetNameWithoutHandle+0x4e>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <xTraceObjectSetNameWithoutHandle+0x62>
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f383 8810 	msr	PRIMASK, r3
}
 8002e7a:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e00c      	b.n	8002e9a <xTraceObjectSetNameWithoutHandle+0x7c>
		}
	}

	xResult = xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff7d 	bl	8002d84 <xTraceObjectSetName>
 8002e8a:	6238      	str	r0, [r7, #32]
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f383 8810 	msr	PRIMASK, r3
}
 8002e96:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8002e98:	6a3b      	ldr	r3, [r7, #32]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3728      	adds	r7, #40	@ 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <xTracePrintInitialize>:
static traceResult prvTraceVPrintF(const TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList);

static TracePrintData_t *pxPrintData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTracePrintInitialize(TracePrintData_t *pxBuffer)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxPrintData = pxBuffer;
 8002eac:	4a0b      	ldr	r2, [pc, #44]	@ (8002edc <xTracePrintInitialize+0x38>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6013      	str	r3, [r2, #0]

	pxPrintData->defaultChannel = 0;
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <xTracePrintInitialize+0x38>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
	pxPrintData->consoleChannel = 0;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <xTracePrintInitialize+0x38>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	605a      	str	r2, [r3, #4]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_PRINT);
 8002ec2:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <xTracePrintInitialize+0x3c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eca:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <xTracePrintInitialize+0x3c>)
 8002ecc:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	200006e4 	.word	0x200006e4
 8002ee0:	200028e4 	.word	0x200028e4

08002ee4 <xTracePrint>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTracePrint(TraceStringHandle_t xChannel, const char* szString)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
	uint32_t uiLength;
	uint32_t i;
	
	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <xTracePrint+0x64>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <xTracePrint+0x1a>
	{
		return TRC_FAIL;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e01f      	b.n	8002f3e <xTracePrint+0x5a>
	}

	if (szString == (void*)0)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <xTracePrint+0x24>
	{
		szString = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8002f04:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <xTracePrint+0x68>)
 8002f06:	603b      	str	r3, [r7, #0]
	}

	for (i = 0u; (szString[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e002      	b.n	8002f14 <xTracePrint+0x30>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3301      	adds	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <xTracePrint+0x42>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f24:	d9f3      	bls.n	8002f0e <xTracePrint+0x2a>

	uiLength = i + 1u; /* Null termination */
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]

	return prvTraceVPrintF(xChannel, szString, uiLength, 0u, (va_list*)0);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 Suppress conversion of pointer to integer check*/ /*cstat !MISRAC2012-Rule-11.9 Suppress NULL recommendation*/
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2300      	movs	r3, #0
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	6839      	ldr	r1, [r7, #0]
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f880 	bl	800303c <prvTraceVPrintF>
 8002f3c:	4603      	mov	r3, r0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200028e4 	.word	0x200028e4
 8002f4c:	0800b704 	.word	0x0800b704

08002f50 <xTracePrintF>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-16.1 Suppress variable parameter count check*/
traceResult xTracePrintF(TraceStringHandle_t xChannel, const char* szFormat, ...)
{
 8002f50:	b40e      	push	{r1, r2, r3}
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
	traceResult xResult;
	va_list xVariableList; /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <xTracePrintF+0x40>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <xTracePrintF+0x1a>
	{
		return TRC_FAIL;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00b      	b.n	8002f82 <xTracePrintF+0x32>
	}

	va_start(xVariableList, szFormat);
 8002f6a:	f107 0320 	add.w	r3, r7, #32
 8002f6e:	60bb      	str	r3, [r7, #8]
	xResult = xTraceVPrintF(xChannel, szFormat, &xVariableList);
 8002f70:	f107 0308 	add.w	r3, r7, #8
 8002f74:	461a      	mov	r2, r3
 8002f76:	69f9      	ldr	r1, [r7, #28]
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f80b 	bl	8002f94 <xTraceVPrintF>
 8002f7e:	60f8      	str	r0, [r7, #12]
	va_end(xVariableList);

	return xResult;
 8002f80:	68fb      	ldr	r3, [r7, #12]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f8c:	b003      	add	sp, #12
 8002f8e:	4770      	bx	lr
 8002f90:	200028e4 	.word	0x200028e4

08002f94 <xTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
traceResult xTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, va_list* pxVariableList)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	@ 0x28
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
	uint32_t i;
	uint32_t uiArgs = 0u;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61bb      	str	r3, [r7, #24]
	uint32_t uiLength;

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8002fa4:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <xTraceVPrintF+0xa0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <xTraceVPrintF+0x20>
	{
		return TRC_FAIL;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e03b      	b.n	800302c <xTraceVPrintF+0x98>
	}

	if (szFormat == (void*)0)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <xTraceVPrintF+0x2a>
	{
		szFormat = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8002fba:	4b1f      	ldr	r3, [pc, #124]	@ (8003038 <xTraceVPrintF+0xa4>)
 8002fbc:	60bb      	str	r3, [r7, #8]
	}

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e01e      	b.n	8003002 <xTraceVPrintF+0x6e>
	{
		if (szFormat[i] == '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	4413      	add	r3, r2
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b25      	cmp	r3, #37	@ 0x25
 8002fce:	d115      	bne.n	8002ffc <xTraceVPrintF+0x68>
		{
			if (szFormat[i + 1u] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00d      	beq.n	8002ffa <xTraceVPrintF+0x66>
			{
				/* Found end of string, let for loop detect it */
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
			}

			if (szFormat[i + 1u] != '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b25      	cmp	r3, #37	@ 0x25
 8002fea:	d002      	beq.n	8002ff2 <xTraceVPrintF+0x5e>
			{
				uiArgs++;        /* Found an argument */
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
			}

			/* Move past format specifier or non-argument '%' */
			i++; /*cstat !MISRAC2004-13.6 Suppress i increment inside for loop check*/
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	e000      	b.n	8002ffc <xTraceVPrintF+0x68>
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
 8002ffa:	bf00      	nop
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	3301      	adds	r3, #1
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <xTraceVPrintF+0x80>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	2b7f      	cmp	r3, #127	@ 0x7f
 8003012:	d9d7      	bls.n	8002fc4 <xTraceVPrintF+0x30>
		}
	}

	uiLength = i + 1u; /* Null termination */
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	3301      	adds	r3, #1
 8003018:	617b      	str	r3, [r7, #20]

	return prvTraceVPrintF(xChannel, szFormat, uiLength, uiArgs, pxVariableList);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f809 	bl	800303c <prvTraceVPrintF>
 800302a:	4603      	mov	r3, r0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200028e4 	.word	0x200028e4
 8003038:	0800b704 	.word	0x0800b704

0800303c <prvTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
static traceResult prvTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b092      	sub	sp, #72	@ 0x48
 8003040:	af06      	add	r7, sp, #24
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
	const uint32_t uiEventCode = PSF_EVENT_USER_EVENT + 1u + uiArgs; /* Add channel (1) */
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	3391      	adds	r3, #145	@ 0x91
 800304e:	62bb      	str	r3, [r7, #40]	@ 0x28
	TraceUnsignedBaseType_t uxParam2;
	TraceUnsignedBaseType_t uxParam3;
	TraceUnsignedBaseType_t uxParam4;
	TraceUnsignedBaseType_t uxParam5;

	if (xChannel == 0)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d113      	bne.n	800307e <prvTraceVPrintF+0x42>
	{
		if (pxPrintData->defaultChannel == 0)
 8003056:	4b73      	ldr	r3, [pc, #460]	@ (8003224 <prvTraceVPrintF+0x1e8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <prvTraceVPrintF+0x3a>
		{
			/* Channel is not present */
			if (xTraceStringRegister("Default", &pxPrintData->defaultChannel) == TRC_FAIL)
 8003060:	4b70      	ldr	r3, [pc, #448]	@ (8003224 <prvTraceVPrintF+0x1e8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	4870      	ldr	r0, [pc, #448]	@ (8003228 <prvTraceVPrintF+0x1ec>)
 8003068:	f000 fce6 	bl	8003a38 <xTraceStringRegister>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <prvTraceVPrintF+0x3a>
			{
				return TRC_FAIL;
 8003072:	2301      	movs	r3, #1
 8003074:	e0d1      	b.n	800321a <prvTraceVPrintF+0x1de>
			}
		}

		xChannel = pxPrintData->defaultChannel; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003076:	4b6b      	ldr	r3, [pc, #428]	@ (8003224 <prvTraceVPrintF+0x1e8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
	}

	switch (uiArgs)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b05      	cmp	r3, #5
 8003082:	f200 80c6 	bhi.w	8003212 <prvTraceVPrintF+0x1d6>
 8003086:	a201      	add	r2, pc, #4	@ (adr r2, 800308c <prvTraceVPrintF+0x50>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	080030a5 	.word	0x080030a5
 8003090:	080030b5 	.word	0x080030b5
 8003094:	080030d7 	.word	0x080030d7
 8003098:	0800310b 	.word	0x0800310b
 800309c:	08003151 	.word	0x08003151
 80030a0:	080031a9 	.word	0x080031a9
	{
		case 0:
			xResult = xTraceEventCreateData1(uiEventCode, (TraceUnsignedBaseType_t)xChannel, (TraceUnsignedBaseType_t*)szFormat, uiLength);
 80030a4:	68f9      	ldr	r1, [r7, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030ac:	f7ff f8a0 	bl	80021f0 <xTraceEventCreateData1>
 80030b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
			break;
 80030b2:	e0b1      	b.n	8003218 <prvTraceVPrintF+0x1dc>
		case 1:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80030b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	1d19      	adds	r1, r3, #4
 80030ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030bc:	6011      	str	r1, [r2, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
			xResult = xTraceEventCreateData2(
 80030c2:	68f9      	ldr	r1, [r7, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030ce:	f7ff f921 	bl	8002314 <xTraceEventCreateData2>
 80030d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
				(TraceUnsignedBaseType_t)xChannel,
				uxParam1,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 80030d4:	e0a0      	b.n	8003218 <prvTraceVPrintF+0x1dc>
		case 2:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	1d19      	adds	r1, r3, #4
 80030dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030de:	6011      	str	r1, [r2, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80030e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1d19      	adds	r1, r3, #4
 80030ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030ec:	6011      	str	r1, [r2, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	623b      	str	r3, [r7, #32]
			xResult = xTraceEventCreateData3(
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003100:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003102:	f7ff f99d 	bl	8002440 <xTraceEventCreateData3>
 8003106:	62f8      	str	r0, [r7, #44]	@ 0x2c
				uxParam1,
				uxParam2,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 8003108:	e086      	b.n	8003218 <prvTraceVPrintF+0x1dc>
		case 3:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800310a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	1d19      	adds	r1, r3, #4
 8003110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003112:	6011      	str	r1, [r2, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8003118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	1d19      	adds	r1, r3, #4
 800311e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003120:	6011      	str	r1, [r2, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8003126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	1d19      	adds	r1, r3, #4
 800312c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800312e:	6011      	str	r1, [r2, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	61fb      	str	r3, [r7, #28]
			xResult = xTraceEventCreateData4(
 8003134:	68f9      	ldr	r1, [r7, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	9302      	str	r3, [sp, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003146:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003148:	f7ff fa12 	bl	8002570 <xTraceEventCreateData4>
 800314c:	62f8      	str	r0, [r7, #44]	@ 0x2c
				uxParam2,
				uxParam3,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 800314e:	e063      	b.n	8003218 <prvTraceVPrintF+0x1dc>
		case 4:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8003150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	1d19      	adds	r1, r3, #4
 8003156:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003158:	6011      	str	r1, [r2, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800315e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1d19      	adds	r1, r3, #4
 8003164:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003166:	6011      	str	r1, [r2, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800316c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	1d19      	adds	r1, r3, #4
 8003172:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003174:	6011      	str	r1, [r2, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	61fb      	str	r3, [r7, #28]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800317a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1d19      	adds	r1, r3, #4
 8003180:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003182:	6011      	str	r1, [r2, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	61bb      	str	r3, [r7, #24]
			xResult = xTraceEventCreateData5(
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	9303      	str	r3, [sp, #12]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031a0:	f7ff fa82 	bl	80026a8 <xTraceEventCreateData5>
 80031a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
				uxParam3,
				uxParam4,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 80031a6:	e037      	b.n	8003218 <prvTraceVPrintF+0x1dc>
		case 5:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80031a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1d19      	adds	r1, r3, #4
 80031ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031b0:	6011      	str	r1, [r2, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80031b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	1d19      	adds	r1, r3, #4
 80031bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031be:	6011      	str	r1, [r2, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80031c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	1d19      	adds	r1, r3, #4
 80031ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031cc:	6011      	str	r1, [r2, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61fb      	str	r3, [r7, #28]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80031d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1d19      	adds	r1, r3, #4
 80031d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031da:	6011      	str	r1, [r2, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	61bb      	str	r3, [r7, #24]
			uxParam5 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80031e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	1d19      	adds	r1, r3, #4
 80031e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031e8:	6011      	str	r1, [r2, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	617b      	str	r3, [r7, #20]
			xResult = xTraceEventCreateData6(
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	9303      	str	r3, [sp, #12]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	9302      	str	r3, [sp, #8]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003208:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800320a:	f7ff faeb 	bl	80027e4 <xTraceEventCreateData6>
 800320e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				uxParam4,
				uxParam5,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 8003210:	e002      	b.n	8003218 <prvTraceVPrintF+0x1dc>
		default:
			xResult = TRC_FAIL;
 8003212:	2301      	movs	r3, #1
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 8003216:	bf00      	nop
	}

	return xResult;
 8003218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800321a:	4618      	mov	r0, r3
 800321c:	3730      	adds	r7, #48	@ 0x30
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200006e4 	.word	0x200006e4
 8003228:	0800b718 	.word	0x0800b718

0800322c <xTraceStaticBufferInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceStaticBufferTable_t *pxTraceStaticBufferTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStaticBufferInitialize(TraceStaticBufferTable_t *pxBuffer)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceStaticBufferTable = pxBuffer;
 8003234:	4a07      	ldr	r2, [pc, #28]	@ (8003254 <xTraceStaticBufferInitialize+0x28>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6013      	str	r3, [r2, #0]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 800323a:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <xTraceStaticBufferInitialize+0x2c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003242:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <xTraceStaticBufferInitialize+0x2c>)
 8003244:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	200006e8 	.word	0x200006e8
 8003258:	200028e4 	.word	0x200028e4

0800325c <xTraceStreamPortInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceStreamPortBuffer_t* pxStreamPortRTT TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStreamPortInitialize(TraceStreamPortBuffer_t* pxBuffer)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceStreamPortBuffer_t, TraceStreamPortRTT_t);

	if (pxBuffer == 0)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <xTraceStreamPortInitialize+0x12>
	{
		return TRC_FAIL;
 800326a:	2301      	movs	r3, #1
 800326c:	e003      	b.n	8003276 <xTraceStreamPortInitialize+0x1a>
	}

	pxStreamPortRTT = (TraceStreamPortBuffer_t*)pxBuffer;
 800326e:	4a05      	ldr	r2, [pc, #20]	@ (8003284 <xTraceStreamPortInitialize+0x28>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6013      	str	r3, [r2, #0]

#if (TRC_USE_INTERNAL_BUFFER == 1)
	return xTraceInternalEventBufferInitialize(pxStreamPortRTT->bufferInternal, sizeof(pxStreamPortRTT->bufferInternal));
#else
	return TRC_SUCCESS;
 8003274:	2300      	movs	r3, #0
#endif
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	200006ec 	.word	0x200006ec

08003288 <xTraceStreamPortOnEnable>:

traceResult xTraceStreamPortOnEnable(uint32_t uiStartOption)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af02      	add	r7, sp, #8
 800328e:	6078      	str	r0, [r7, #4]
	(void)uiStartOption;

	/* Configure the RTT buffers */
	if (SEGGER_RTT_ConfigUpBuffer(TRC_CFG_STREAM_PORT_RTT_UP_BUFFER_INDEX, "TzData", pxStreamPortRTT->bufferUp, sizeof(pxStreamPortRTT->bufferUp), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 8003290:	4b12      	ldr	r3, [pc, #72]	@ (80032dc <xTraceStreamPortOnEnable+0x54>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	2300      	movs	r3, #0
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800329e:	4910      	ldr	r1, [pc, #64]	@ (80032e0 <xTraceStreamPortOnEnable+0x58>)
 80032a0:	2001      	movs	r0, #1
 80032a2:	f7fe f857 	bl	8001354 <SEGGER_RTT_ConfigUpBuffer>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da01      	bge.n	80032b0 <xTraceStreamPortOnEnable+0x28>
	{
		return TRC_FAIL;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e010      	b.n	80032d2 <xTraceStreamPortOnEnable+0x4a>
	}

	if (SEGGER_RTT_ConfigDownBuffer(TRC_CFG_STREAM_PORT_RTT_DOWN_BUFFER_INDEX, "TzCtrl", pxStreamPortRTT->bufferDown, sizeof(pxStreamPortRTT->bufferDown), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 80032b0:	4b0a      	ldr	r3, [pc, #40]	@ (80032dc <xTraceStreamPortOnEnable+0x54>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f503 52a0 	add.w	r2, r3, #5120	@ 0x1400
 80032b8:	2300      	movs	r3, #0
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2320      	movs	r3, #32
 80032be:	4909      	ldr	r1, [pc, #36]	@ (80032e4 <xTraceStreamPortOnEnable+0x5c>)
 80032c0:	2001      	movs	r0, #1
 80032c2:	f7fe f891 	bl	80013e8 <SEGGER_RTT_ConfigDownBuffer>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	da01      	bge.n	80032d0 <xTraceStreamPortOnEnable+0x48>
	{
		return TRC_FAIL;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <xTraceStreamPortOnEnable+0x4a>
	}

	return TRC_SUCCESS;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	200006ec 	.word	0x200006ec
 80032e0:	0800b720 	.word	0x0800b720
 80032e4:	0800b728 	.word	0x0800b728

080032e8 <xTraceInitialize>:
* trace recorder can be enabled, at which point make sure to call this function
* as early as possible.
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h.
******************************************************************************/
traceResult xTraceInitialize(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceBaseType_t);

	/* TraceUnsignedBaseType_t is used to store handles (addresses) */
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceHandleBaseType_t);
	
	if (RecorderInitialized != 0u)
 80032ee:	4b76      	ldr	r3, [pc, #472]	@ (80034c8 <xTraceInitialize+0x1e0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <xTraceInitialize+0x12>
	{
		return TRC_SUCCESS;
 80032f6:	2300      	movs	r3, #0
 80032f8:	e0e2      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}

	TRC_PORT_SPECIFIC_INIT();
 80032fa:	f7ff fb31 	bl	8002960 <xTraceHardwarePortInitCortexM>
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	pxTraceRecorderData = &xRecorderData;
 80032fe:	4b73      	ldr	r3, [pc, #460]	@ (80034cc <xTraceInitialize+0x1e4>)
 8003300:	4a73      	ldr	r2, [pc, #460]	@ (80034d0 <xTraceInitialize+0x1e8>)
 8003302:	601a      	str	r2, [r3, #0]
	/* Allocate data */
	pxTraceRecorderData = TRC_KERNEL_PORT_HEAP_MALLOC(sizeof(TraceRecorderData_t));
#endif

	/* These are set on init so they aren't overwritten by late initialization values. */
	pxTraceRecorderData->uiSessionCounter = 0u;
 8003304:	4b71      	ldr	r3, [pc, #452]	@ (80034cc <xTraceInitialize+0x1e4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 800330c:	4b6f      	ldr	r3, [pc, #444]	@ (80034cc <xTraceInitialize+0x1e4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2200      	movs	r2, #0
 8003312:	605a      	str	r2, [r3, #4]
	
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 8003314:	2300      	movs	r3, #0
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	e009      	b.n	800332e <xTraceInitialize+0x46>
	{
		pxTraceRecorderData->uxTraceSystemStates[i] = (TraceUnsignedBaseType_t)TRC_STATE_IN_STARTUP;
 800331a:	4b6c      	ldr	r3, [pc, #432]	@ (80034cc <xTraceInitialize+0x1e4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	3202      	adds	r2, #2
 8003322:	2100      	movs	r1, #0
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3301      	adds	r3, #1
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f2      	beq.n	800331a <xTraceInitialize+0x32>
	}
	
	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceEntryIndexTableInitialize(&pxTraceRecorderData->xEntryIndexTableBuffer) == TRC_FAIL)
 8003334:	4b65      	ldr	r3, [pc, #404]	@ (80034cc <xTraceInitialize+0x1e4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe f970 	bl	8001620 <xTraceEntryIndexTableInitialize>
 8003340:	4603      	mov	r3, r0
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <xTraceInitialize+0x62>
	{
		return TRC_FAIL;
 8003346:	2301      	movs	r3, #1
 8003348:	e0ba      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}

#if (TRC_EXTERNAL_BUFFERS == 0)
	if (xTraceHeaderInitialize(&pxTraceRecorderData->xHeaderBuffer) == TRC_FAIL)
 800334a:	4b60      	ldr	r3, [pc, #384]	@ (80034cc <xTraceInitialize+0x1e4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3354      	adds	r3, #84	@ 0x54
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f8bf 	bl	80034d4 <xTraceHeaderInitialize>
 8003356:	4603      	mov	r3, r0
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <xTraceInitialize+0x78>
	{
		return TRC_FAIL;
 800335c:	2301      	movs	r3, #1
 800335e:	e0af      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}

	if (xTraceEntryTableInitialize(&pxTraceRecorderData->xEntryTable) == TRC_FAIL)
 8003360:	4b5a      	ldr	r3, [pc, #360]	@ (80034cc <xTraceInitialize+0x1e4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3374      	adds	r3, #116	@ 0x74
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe f96a 	bl	8001640 <xTraceEntryTableInitialize>
 800336c:	4603      	mov	r3, r0
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <xTraceInitialize+0x8e>
	{
		return TRC_FAIL;
 8003372:	2301      	movs	r3, #1
 8003374:	e0a4      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}

	if (xTraceTimestampInitialize(&pxTraceRecorderData->xTimestampBuffer) == TRC_FAIL)
 8003376:	4b55      	ldr	r3, [pc, #340]	@ (80034cc <xTraceInitialize+0x1e4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fc0a 	bl	8003b98 <xTraceTimestampInitialize>
 8003384:	4603      	mov	r3, r0
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <xTraceInitialize+0xa6>
	{
		return TRC_FAIL;
 800338a:	2301      	movs	r3, #1
 800338c:	e098      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}
#endif
	
	if (xTraceCounterInitialize(&pxTraceRecorderData->xCounterBuffer) == TRC_FAIL)
 800338e:	4b4f      	ldr	r3, [pc, #316]	@ (80034cc <xTraceInitialize+0x1e4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f503 5307 	add.w	r3, r3, #8640	@ 0x21c0
 8003396:	3328      	adds	r3, #40	@ 0x28
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe f871 	bl	8001480 <xTraceCounterInitialize>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <xTraceInitialize+0xc0>
	{
		return TRC_FAIL;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e08b      	b.n	80034c0 <xTraceInitialize+0x1d8>
	{
		return TRC_FAIL;
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortInitialize(&pxTraceRecorderData->xStreamPortBuffer) == TRC_FAIL)
 80033a8:	4b48      	ldr	r3, [pc, #288]	@ (80034cc <xTraceInitialize+0x1e4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f603 331c 	addw	r3, r3, #2844	@ 0xb1c
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff53 	bl	800325c <xTraceStreamPortInitialize>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <xTraceInitialize+0xd8>
	{
		return TRC_FAIL;
 80033bc:	2301      	movs	r3, #1
 80033be:	e07f      	b.n	80034c0 <xTraceInitialize+0x1d8>
	if (xTraceAssertInitialize(&pxTraceRecorderData->xAssertBuffer) == TRC_FAIL)
	{
		return TRC_FAIL;
	}

	if (xTraceDiagnosticsInitialize(&pxTraceRecorderData->xDiagnosticsBuffer) == TRC_FAIL)
 80033c0:	4b42      	ldr	r3, [pc, #264]	@ (80034cc <xTraceInitialize+0x1e4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f503 5307 	add.w	r3, r3, #8640	@ 0x21c0
 80033c8:	3310      	adds	r3, #16
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe f874 	bl	80014b8 <xTraceDiagnosticsInitialize>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <xTraceInitialize+0xf2>
	{
		return TRC_FAIL;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e072      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}

	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceExtensionInitialize(&pxTraceRecorderData->xExtensionBuffer) == TRC_FAIL)
 80033da:	4b3c      	ldr	r3, [pc, #240]	@ (80034cc <xTraceInitialize+0x1e4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f503 5307 	add.w	r3, r3, #8640	@ 0x21c0
 80033e2:	3324      	adds	r3, #36	@ 0x24
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fa9f 	bl	8002928 <xTraceExtensionInitialize>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <xTraceInitialize+0x10c>
	{
		return TRC_FAIL;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e065      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}
	
	if (xTraceStaticBufferInitialize(&pxTraceRecorderData->xStaticBufferBuffer) == TRC_FAIL)
 80033f4:	4b35      	ldr	r3, [pc, #212]	@ (80034cc <xTraceInitialize+0x1e4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f503 53f9 	add.w	r3, r3, #7968	@ 0x1f20
 80033fc:	331c      	adds	r3, #28
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ff14 	bl	800322c <xTraceStaticBufferInitialize>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <xTraceInitialize+0x126>
	{
		return TRC_FAIL;
 800340a:	2301      	movs	r3, #1
 800340c:	e058      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}

	if (xTraceEventInitialize(&pxTraceRecorderData->xEventDataBuffer) == TRC_FAIL)
 800340e:	4b2f      	ldr	r3, [pc, #188]	@ (80034cc <xTraceInitialize+0x1e4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f503 5305 	add.w	r3, r3, #8512	@ 0x2140
 8003416:	333c      	adds	r3, #60	@ 0x3c
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe fc03 	bl	8001c24 <xTraceEventInitialize>
 800341e:	4603      	mov	r3, r0
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <xTraceInitialize+0x140>
	{
		return TRC_FAIL;
 8003424:	2301      	movs	r3, #1
 8003426:	e04b      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}
	
	if (xTracePrintInitialize(&pxTraceRecorderData->xPrintBuffer) == TRC_FAIL)
 8003428:	4b28      	ldr	r3, [pc, #160]	@ (80034cc <xTraceInitialize+0x1e4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 8003430:	3304      	adds	r3, #4
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fd36 	bl	8002ea4 <xTracePrintInitialize>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <xTraceInitialize+0x15a>
	{
		return TRC_FAIL;
 800343e:	2301      	movs	r3, #1
 8003440:	e03e      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}
	
	if (xTraceErrorInitialize(&pxTraceRecorderData->xErrorBuffer) == TRC_FAIL)
 8003442:	4b22      	ldr	r3, [pc, #136]	@ (80034cc <xTraceInitialize+0x1e4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 800344a:	330c      	adds	r3, #12
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fa87 	bl	8001960 <xTraceErrorInitialize>
 8003452:	4603      	mov	r3, r0
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <xTraceInitialize+0x174>
	{
		return TRC_FAIL;
 8003458:	2301      	movs	r3, #1
 800345a:	e031      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}

	if (xTraceISRInitialize(&pxTraceRecorderData->xISRBuffer) == TRC_FAIL)
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <xTraceInitialize+0x1e4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 8003464:	3318      	adds	r3, #24
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fb2a 	bl	8002ac0 <xTraceISRInitialize>
 800346c:	4603      	mov	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <xTraceInitialize+0x18e>
	{
		return TRC_FAIL;
 8003472:	2301      	movs	r3, #1
 8003474:	e024      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}

	if (xTraceTaskInitialize(&pxTraceRecorderData->xTaskInfoBuffer) == TRC_FAIL)
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <xTraceInitialize+0x1e4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f503 5307 	add.w	r3, r3, #8640	@ 0x21c0
 800347e:	3308      	adds	r3, #8
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fb11 	bl	8003aa8 <xTraceTaskInitialize>
 8003486:	4603      	mov	r3, r0
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <xTraceInitialize+0x1a8>
	{
		return TRC_FAIL;
 800348c:	2301      	movs	r3, #1
 800348e:	e017      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortInitialize(&pxTraceRecorderData->xKernelPortBuffer) == TRC_FAIL)
 8003490:	4b0e      	ldr	r3, [pc, #56]	@ (80034cc <xTraceInitialize+0x1e4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f503 5307 	add.w	r3, r3, #8640	@ 0x21c0
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fb51 	bl	8002b40 <xTraceKernelPortInitialize>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <xTraceInitialize+0x1c0>
	{
		return TRC_FAIL;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e00b      	b.n	80034c0 <xTraceInitialize+0x1d8>
	}

	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;
 80034a8:	4b08      	ldr	r3, [pc, #32]	@ (80034cc <xTraceInitialize+0x1e4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	60da      	str	r2, [r3, #12]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <xTraceInitialize+0x1e0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	4a03      	ldr	r2, [pc, #12]	@ (80034c8 <xTraceInitialize+0x1e0>)
 80034bc:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	200028e4 	.word	0x200028e4
 80034cc:	200028dc 	.word	0x200028dc
 80034d0:	200006f0 	.word	0x200006f0

080034d4 <xTraceHeaderInitialize>:

traceResult xTraceHeaderInitialize(TraceHeaderBuffer_t *pxBuffer)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	uint32_t i;
	const char* platform_cfg = TRC_PLATFORM_CFG; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80034dc:	4b41      	ldr	r3, [pc, #260]	@ (80035e4 <xTraceHeaderInitialize+0x110>)
 80034de:	60bb      	str	r3, [r7, #8]

	TRC_ASSERT_EQUAL_SIZE(TraceHeaderBuffer_t, TraceHeader_t);

	if (pxBuffer == (void*)0)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <xTraceHeaderInitialize+0x16>
	{
		return TRC_FAIL;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e078      	b.n	80035dc <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceStreamPortBuffer_t)) == TRC_FAIL)
 80034ea:	f44f 50a1 	mov.w	r0, #5152	@ 0x1420
 80034ee:	f000 fa91 	bl	8003a14 <prvVerifySizeAlignment>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <xTraceHeaderInitialize+0x28>
	{
		/* TraceStreamPortBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e06f      	b.n	80035dc <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceEventDataTable_t)) == TRC_FAIL)
 80034fc:	2008      	movs	r0, #8
 80034fe:	f000 fa89 	bl	8003a14 <prvVerifySizeAlignment>
 8003502:	4603      	mov	r3, r0
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <xTraceHeaderInitialize+0x38>
	{
		/* TraceEventDataTable_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 8003508:	2301      	movs	r3, #1
 800350a:	e067      	b.n	80035dc <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceKernelPortDataBuffer_t)) == TRC_FAIL)
 800350c:	2008      	movs	r0, #8
 800350e:	f000 fa81 	bl	8003a14 <prvVerifySizeAlignment>
 8003512:	4603      	mov	r3, r0
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <xTraceHeaderInitialize+0x48>
	{
		/* TraceKernelPortDataBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 8003518:	2301      	movs	r3, #1
 800351a:	e05f      	b.n	80035dc <xTraceHeaderInitialize+0x108>
	}

	pxHeader = (TraceHeader_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 800351c:	4a32      	ldr	r2, [pc, #200]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6013      	str	r3, [r2, #0]

	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
 8003522:	4b31      	ldr	r3, [pc, #196]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a31      	ldr	r2, [pc, #196]	@ (80035ec <xTraceHeaderInitialize+0x118>)
 8003528:	601a      	str	r2, [r3, #0]
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 800352a:	4b2f      	ldr	r3, [pc, #188]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	220e      	movs	r2, #14
 8003530:	809a      	strh	r2, [r3, #4]
	pxHeader->uiPlatform = TRACE_KERNEL_VERSION;
 8003532:	4b2d      	ldr	r3, [pc, #180]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f641 22a1 	movw	r2, #6817	@ 0x1aa1
 800353a:	80da      	strh	r2, [r3, #6]

	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e013      	b.n	800356a <xTraceHeaderInitialize+0x96>
	{
		pxHeader->platformCfg[i] = platform_cfg[i]; /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	4a27      	ldr	r2, [pc, #156]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	7819      	ldrb	r1, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4413      	add	r3, r2
 8003552:	3318      	adds	r3, #24
 8003554:	460a      	mov	r2, r1
 8003556:	701a      	strb	r2, [r3, #0]
		if (platform_cfg[i] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <xTraceHeaderInitialize+0x9e>
	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3301      	adds	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b07      	cmp	r3, #7
 800356e:	d9e8      	bls.n	8003542 <xTraceHeaderInitialize+0x6e>
 8003570:	e000      	b.n	8003574 <xTraceHeaderInitialize+0xa0>
		{
			break;
 8003572:	bf00      	nop
		}
	}
	pxHeader->uiPlatformCfgPatch = (uint16_t)TRC_PLATFORM_CFG_PATCH;
 8003574:	4b1c      	ldr	r3, [pc, #112]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	829a      	strh	r2, [r3, #20]
	pxHeader->uiPlatformCfgMinor = (uint8_t)TRC_PLATFORM_CFG_MINOR;
 800357c:	4b1a      	ldr	r3, [pc, #104]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2202      	movs	r2, #2
 8003582:	759a      	strb	r2, [r3, #22]
	pxHeader->uiPlatformCfgMajor = (uint8_t)TRC_PLATFORM_CFG_MAJOR;
 8003584:	4b18      	ldr	r3, [pc, #96]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2201      	movs	r2, #1
 800358a:	75da      	strb	r2, [r3, #23]
	pxHeader->uiNumCores = (uint32_t)TRC_CFG_CORE_COUNT;
 800358c:	4b16      	ldr	r3, [pc, #88]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2201      	movs	r2, #1
 8003592:	60da      	str	r2, [r3, #12]
	
#ifdef TRC_STREAM_PORT_MULTISTREAM_SUPPORT
	pxHeader->uiNumCores |= 2 << 8;
#else
	pxHeader->uiNumCores |= 3 << 8;
 8003594:	4b14      	ldr	r3, [pc, #80]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	4b13      	ldr	r3, [pc, #76]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80035a2:	60da      	str	r2, [r3, #12]
#endif
	
	pxHeader->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80035a4:	4b10      	ldr	r3, [pc, #64]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]

	/* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
	pxHeader->uiOptions = (((uint32_t)(TRC_IRQ_PRIORITY_ORDER)) << 0);
 80035ac:	4b0e      	ldr	r3, [pc, #56]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2200      	movs	r2, #0
 80035b2:	609a      	str	r2, [r3, #8]

	/* 3rd bit used for TRC_CFG_TEST_MODE */
	pxHeader->uiOptions |= (((uint32_t)(TRC_CFG_TEST_MODE)) << 2);
 80035b4:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	609a      	str	r2, [r3, #8]

	/* 4th bit used for 64-bit*/
	if (prvIs64bit()) /* Call helper function to avoid "unreachable code" */
 80035c0:	f000 f8e0 	bl	8003784 <prvIs64bit>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <xTraceHeaderInitialize+0x106>
	{
		pxHeader->uiOptions |= (1 << 3);
 80035ca:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <xTraceHeaderInitialize+0x114>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0208 	orr.w	r2, r2, #8
 80035d8:	609a      	str	r2, [r3, #8]
	}

	return TRC_SUCCESS;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	0800b730 	.word	0x0800b730
 80035e8:	200028e0 	.word	0x200028e0
 80035ec:	50534600 	.word	0x50534600

080035f0 <xTraceEnable>:

traceResult xTraceEnable(uint32_t uiStartOption)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	TraceCommand_t xCommand = { 0 };
 80035f8:	f107 0310 	add.w	r3, r7, #16
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
	int32_t iBytes;

	if (xTraceInitialize() == TRC_FAIL)
 8003602:	f7ff fe71 	bl	80032e8 <xTraceInitialize>
 8003606:	4603      	mov	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <xTraceEnable+0x20>
	{
		return TRC_FAIL;
 800360c:	2301      	movs	r3, #1
 800360e:	e055      	b.n	80036bc <xTraceEnable+0xcc>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortOnEnable(uiStartOption) == TRC_FAIL)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff fe39 	bl	8003288 <xTraceStreamPortOnEnable>
 8003616:	4603      	mov	r3, r0
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <xTraceEnable+0x30>
	{
		return TRC_FAIL;
 800361c:	2301      	movs	r3, #1
 800361e:	e04d      	b.n	80036bc <xTraceEnable+0xcc>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortEnable() == TRC_FAIL)
 8003620:	f7ff faac 	bl	8002b7c <xTraceKernelPortEnable>
 8003624:	4603      	mov	r3, r0
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <xTraceEnable+0x3e>
	{
		return TRC_FAIL;
 800362a:	2301      	movs	r3, #1
 800362c:	e046      	b.n	80036bc <xTraceEnable+0xcc>
	}

	if (uiStartOption == TRC_START_AWAIT_HOST)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d130      	bne.n	8003696 <xTraceEnable+0xa6>
	{
		/* We keep trying to read commands from host until the recorder has been started */
		do
		{
			iBytes = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]

			if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), (int32_t*)&iBytes) == TRC_FAIL)
 8003638:	4b22      	ldr	r3, [pc, #136]	@ (80036c4 <xTraceEnable+0xd4>)
 800363a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800363e:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <xTraceEnable+0xd4>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003644:	429a      	cmp	r2, r3
 8003646:	d00a      	beq.n	800365e <xTraceEnable+0x6e>
 8003648:	f107 0310 	add.w	r3, r7, #16
 800364c:	2208      	movs	r2, #8
 800364e:	4619      	mov	r1, r3
 8003650:	2001      	movs	r0, #1
 8003652:	f7fd fded 	bl	8001230 <SEGGER_RTT_Read>
 8003656:	4603      	mov	r3, r0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	2300      	movs	r3, #0
 800365c:	e000      	b.n	8003660 <xTraceEnable+0x70>
 800365e:	2300      	movs	r3, #0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <xTraceEnable+0x7a>
			{
				(void)xTraceWarning(TRC_WARNING_STREAM_PORT_READ);
 8003664:	200b      	movs	r0, #11
 8003666:	f7fe f99f 	bl	80019a8 <xTraceWarning>
			}

			if ((uint32_t)iBytes == sizeof(TraceCommand_t))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d10c      	bne.n	800368a <xTraceEnable+0x9a>
			{
				if (prvIsValidCommand(&xCommand) != 0)
 8003670:	f107 0310 	add.w	r3, r7, #16
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f97b 	bl	8003970 <prvIsValidCommand>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <xTraceEnable+0x9a>
				{
					prvProcessCommand(&xCommand);
 8003680:	f107 0310 	add.w	r3, r7, #16
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f9ae 	bl	80039e6 <prvProcessCommand>
				}
			}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0u);
 800368a:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <xTraceEnable+0xd8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0cf      	beq.n	8003634 <xTraceEnable+0x44>
 8003694:	e011      	b.n	80036ba <xTraceEnable+0xca>
	}
	else if (uiStartOption == (uint32_t)(TRC_START))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d109      	bne.n	80036b0 <xTraceEnable+0xc0>
	{
		/* We start streaming directly - this assumes that the host interface is ready! */
		xCommand.cmdCode = CMD_SET_ACTIVE;
 800369c:	2301      	movs	r3, #1
 800369e:	743b      	strb	r3, [r7, #16]
		xCommand.param1 = 1u;
 80036a0:	2301      	movs	r3, #1
 80036a2:	747b      	strb	r3, [r7, #17]
		prvProcessCommand(&xCommand);
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f99c 	bl	80039e6 <prvProcessCommand>
 80036ae:	e004      	b.n	80036ba <xTraceEnable+0xca>
	}
	else if (uiStartOption == TRC_START_FROM_HOST)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <xTraceEnable+0xca>
	{
		/* We prepare the system to receive commands from host, but let system resume execution until that happens */
	}
	else
	{
		return TRC_FAIL;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <xTraceEnable+0xcc>
	}

	return TRC_SUCCESS;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000208 	.word	0x20000208
 80036c8:	200028dc 	.word	0x200028dc

080036cc <xTraceDisable>:

traceResult xTraceDisable(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
	prvSetRecorderDisabled();
 80036d0:	f000 f8b0 	bl	8003834 <prvSetRecorderDisabled>

	(void)xTraceStreamPortOnDisable();
	
	return TRC_SUCCESS;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <xTraceTzCtrl>:
	
	return TRC_SUCCESS;
}

traceResult xTraceTzCtrl(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
	TraceCommand_t xCommand = { 0 };
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	605a      	str	r2, [r3, #4]
	int32_t iRxBytes;
	
	do
	{
		/* Listen for new commands */
		iRxBytes = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	607b      	str	r3, [r7, #4]
		if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), &iRxBytes) == TRC_FAIL)
 80036f0:	4b21      	ldr	r3, [pc, #132]	@ (8003778 <xTraceTzCtrl+0x9c>)
 80036f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80036f6:	4b20      	ldr	r3, [pc, #128]	@ (8003778 <xTraceTzCtrl+0x9c>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d00a      	beq.n	8003716 <xTraceTzCtrl+0x3a>
 8003700:	f107 0308 	add.w	r3, r7, #8
 8003704:	2208      	movs	r2, #8
 8003706:	4619      	mov	r1, r3
 8003708:	2001      	movs	r0, #1
 800370a:	f7fd fd91 	bl	8001230 <SEGGER_RTT_Read>
 800370e:	4603      	mov	r3, r0
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	2300      	movs	r3, #0
 8003714:	e000      	b.n	8003718 <xTraceTzCtrl+0x3c>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <xTraceTzCtrl+0x48>
		{
			/* The connection has failed, stop tracing */
			(void)xTraceDisable();
 800371c:	f7ff ffd6 	bl	80036cc <xTraceDisable>

			return TRC_FAIL;
 8003720:	2301      	movs	r3, #1
 8003722:	e025      	b.n	8003770 <xTraceTzCtrl+0x94>
		}

		if ((uint32_t)iRxBytes == sizeof(TraceCommand_t))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b08      	cmp	r3, #8
 8003728:	d10c      	bne.n	8003744 <xTraceTzCtrl+0x68>
		{
			if (prvIsValidCommand(&xCommand) != 0)
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f91e 	bl	8003970 <prvIsValidCommand>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <xTraceTzCtrl+0x68>
			{
				prvProcessCommand(&xCommand); /* Start or Stop currently... */
 800373a:	f107 0308 	add.w	r3, r7, #8
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f951 	bl	80039e6 <prvProcessCommand>
			}
		}

		if (xTraceIsRecorderEnabled())
 8003744:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <xTraceTzCtrl+0xa0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
		}

		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */

	} while (iRxBytes > 0);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	dccb      	bgt.n	80036ec <xTraceTzCtrl+0x10>

	if (xTraceIsRecorderEnabled())
 8003754:	4b09      	ldr	r3, [pc, #36]	@ (800377c <xTraceTzCtrl+0xa0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <xTraceTzCtrl+0x92>
 8003760:	4b07      	ldr	r3, [pc, #28]	@ (8003780 <xTraceTzCtrl+0xa4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <xTraceTzCtrl+0x92>
	{
		(void)xTraceDiagnosticsCheckStatus();
 800376a:	f7fd ff17 	bl	800159c <xTraceDiagnosticsCheckStatus>
		(void)xTraceStackMonitorReport();
	}

	return TRC_SUCCESS;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000208 	.word	0x20000208
 800377c:	200028e4 	.word	0x200028e4
 8003780:	200028dc 	.word	0x200028dc

08003784 <prvIs64bit>:
/******************************************************************************/
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

static TraceUnsignedBaseType_t prvIs64bit(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
	return sizeof(TraceUnsignedBaseType_t) == 8;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <prvSetRecorderEnabled>:

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxTimestampFrequency = 0u;
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
	uint32_t uiTimestampPeriod = 0u;
 800379e:	2300      	movs	r3, #0
 80037a0:	603b      	str	r3, [r7, #0]
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (pxTraceRecorderData->uiRecorderEnabled == 1u)
 80037a2:	4b21      	ldr	r3, [pc, #132]	@ (8003828 <prvSetRecorderEnabled+0x94>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d038      	beq.n	800381e <prvSetRecorderEnabled+0x8a>
	{
		return;
	}

	(void)xTraceTimestampGetFrequency(&uxTimestampFrequency);
 80037ac:	4b1f      	ldr	r3, [pc, #124]	@ (800382c <prvSetRecorderEnabled+0x98>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	607b      	str	r3, [r7, #4]
	/* If not overridden using xTraceTimestampSetFrequency(...), use default value */
	if (uxTimestampFrequency == 0u)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <prvSetRecorderEnabled+0x30>
	{
		(void)xTraceTimestampSetFrequency((TraceUnsignedBaseType_t)(TRC_HWTC_FREQ_HZ));
 80037ba:	4b1c      	ldr	r3, [pc, #112]	@ (800382c <prvSetRecorderEnabled+0x98>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1c      	ldr	r2, [pc, #112]	@ (8003830 <prvSetRecorderEnabled+0x9c>)
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	609a      	str	r2, [r3, #8]
	}

	(void)xTraceTimestampGetPeriod(&uiTimestampPeriod);
 80037c4:	4b19      	ldr	r3, [pc, #100]	@ (800382c <prvSetRecorderEnabled+0x98>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	603b      	str	r3, [r7, #0]
	/* If not overridden using xTraceTimestampSetPeriod(...), use default value */
	if (uiTimestampPeriod == 0u)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <prvSetRecorderEnabled+0x46>
	{
		(void)xTraceTimestampSetPeriod((TraceUnsignedBaseType_t)(TRC_HWTC_PERIOD));
 80037d2:	4b16      	ldr	r3, [pc, #88]	@ (800382c <prvSetRecorderEnabled+0x98>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037da:	f3ef 8310 	mrs	r3, PRIMASK
 80037de:	60bb      	str	r3, [r7, #8]
  return(result);
 80037e0:	68bb      	ldr	r3, [r7, #8]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	2301      	movs	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	bf00      	nop
	/* If the internal event buffer is used, we must clear it */
	(void)xTraceInternalEventBufferClear();
	
	(void)xTraceStreamPortOnTraceBegin();

	prvTraceStoreHeader();
 80037f0:	f000 f846 	bl	8003880 <prvTraceStoreHeader>
	prvTraceStoreTimestampInfo();
 80037f4:	f000 f850 	bl	8003898 <prvTraceStoreTimestampInfo>
	prvTraceStoreEntryTable();
 80037f8:	f000 f85c 	bl	80038b4 <prvTraceStoreEntryTable>
	prvTraceStoreStartEvent();
 80037fc:	f000 f890 	bl	8003920 <prvTraceStoreStartEvent>

	pxTraceRecorderData->uiSessionCounter++;
 8003800:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <prvSetRecorderEnabled+0x94>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	3201      	adds	r2, #1
 8003808:	601a      	str	r2, [r3, #0]

	pxTraceRecorderData->uiRecorderEnabled = 1u;
 800380a:	4b07      	ldr	r3, [pc, #28]	@ (8003828 <prvSetRecorderEnabled+0x94>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2201      	movs	r2, #1
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f383 8810 	msr	PRIMASK, r3
}
 800381c:	e000      	b.n	8003820 <prvSetRecorderEnabled+0x8c>
		return;
 800381e:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();
}
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200028dc 	.word	0x200028dc
 800382c:	200028ec 	.word	0x200028ec
 8003830:	20000004 	.word	0x20000004

08003834 <prvSetRecorderDisabled>:

static void prvSetRecorderDisabled(void)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
	TRACE_ALLOC_CRITICAL_SECTION();

	if (pxTraceRecorderData->uiRecorderEnabled == 0u)
 800383a:	4b10      	ldr	r3, [pc, #64]	@ (800387c <prvSetRecorderDisabled+0x48>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d014      	beq.n	800386e <prvSetRecorderDisabled+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003844:	f3ef 8310 	mrs	r3, PRIMASK
 8003848:	603b      	str	r3, [r7, #0]
  return(result);
 800384a:	683b      	ldr	r3, [r7, #0]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	2301      	movs	r3, #1
 8003850:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f383 8810 	msr	PRIMASK, r3
}
 8003858:	bf00      	nop
	
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 800385a:	4b08      	ldr	r3, [pc, #32]	@ (800387c <prvSetRecorderDisabled+0x48>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	e000      	b.n	8003870 <prvSetRecorderDisabled+0x3c>
		return;
 800386e:	bf00      	nop

	(void)xTraceStreamPortOnTraceEnd();

	TRACE_EXIT_CRITICAL_SECTION();
}
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	200028dc 	.word	0x200028dc

08003880 <prvTraceStoreHeader>:

#if (TRC_EXTERNAL_BUFFERS == 0)
/* Stores the header information on Start */
static void prvTraceStoreHeader(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
	xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t*)pxHeader, sizeof(TraceHeader_t));
 8003884:	4b03      	ldr	r3, [pc, #12]	@ (8003894 <prvTraceStoreHeader+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2120      	movs	r1, #32
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fbe8 	bl	8002060 <xTraceEventCreateRawBlocking>
}
 8003890:	bf00      	nop
 8003892:	bd80      	pop	{r7, pc}
 8003894:	200028e0 	.word	0x200028e0

08003898 <prvTraceStoreTimestampInfo>:

/* Store the Timestamp */
static void prvTraceStoreTimestampInfo(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
	xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t*)&pxTraceRecorderData->xTimestampBuffer,sizeof(TraceTimestampData_t));
 800389c:	4b04      	ldr	r3, [pc, #16]	@ (80038b0 <prvTraceStoreTimestampInfo+0x18>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a4:	211c      	movs	r1, #28
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fbda 	bl	8002060 <xTraceEventCreateRawBlocking>
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	200028dc 	.word	0x200028dc

080038b4 <prvTraceStoreEntryTable>:

/* Stores the entry table on Start */
static void prvTraceStoreEntryTable(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
	TraceEntryHandle_t xEntryHandle;
	uint32_t uiEntryCount;
	TraceUnsignedBaseType_t xHeaderData[3];
	void *pvEntryAddress;

	(void)xTraceEntryGetCount(&uiEntryCount);
 80038be:	f107 0314 	add.w	r3, r7, #20
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd ffcc 	bl	8001860 <xTraceEntryGetCount>

	xHeaderData[0] = (TraceUnsignedBaseType_t)uiEntryCount;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	60bb      	str	r3, [r7, #8]
	xHeaderData[1] = TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE;
 80038cc:	231c      	movs	r3, #28
 80038ce:	60fb      	str	r3, [r7, #12]
	xHeaderData[2] = TRC_ENTRY_TABLE_STATE_COUNT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	613b      	str	r3, [r7, #16]

	xTraceEventCreateRawBlocking(xHeaderData, sizeof(xHeaderData));
 80038d4:	f107 0308 	add.w	r3, r7, #8
 80038d8:	210c      	movs	r1, #12
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fbc0 	bl	8002060 <xTraceEventCreateRawBlocking>

	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	e013      	b.n	800390e <prvTraceStoreEntryTable+0x5a>
	{
		(void)xTraceEntryGetAtIndex(i, &xEntryHandle);
 80038e6:	f107 0318 	add.w	r3, r7, #24
 80038ea:	4619      	mov	r1, r3
 80038ec:	69f8      	ldr	r0, [r7, #28]
 80038ee:	f7fd ffcb 	bl	8001888 <xTraceEntryGetAtIndex>
		(void)xTraceEntryGetAddress(xEntryHandle, &pvEntryAddress);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	607b      	str	r3, [r7, #4]

		/* We only send used entry slots */
		if (pvEntryAddress != 0)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <prvTraceStoreEntryTable+0x54>
		{
			xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t *) xEntryHandle, sizeof(TraceEntry_t));
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2130      	movs	r1, #48	@ 0x30
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fbac 	bl	8002060 <xTraceEventCreateRawBlocking>
	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3301      	adds	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2b37      	cmp	r3, #55	@ 0x37
 8003912:	d9e8      	bls.n	80038e6 <prvTraceStoreEntryTable+0x32>
		}
	}

}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <prvTraceStoreStartEvent>:
#endif /* (TRC_EXTERNAL_BUFFERS == 0) */

static void prvTraceStoreStartEvent(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
	void* pvCurrentTask = (void*)0;
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
	uint32_t i;

	TraceUnsignedBaseType_t xTraceTasks[TRC_CFG_CORE_COUNT];
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e010      	b.n	8003952 <prvTraceStoreStartEvent+0x32>
	{
		(void)xTraceTaskGetCurrentOnCore(i, &pvCurrentTask);
 8003930:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <prvTraceStoreStartEvent+0x4c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393a:	60bb      	str	r3, [r7, #8]
		xTraceTasks[i] = (TraceUnsignedBaseType_t)pvCurrentTask;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	3310      	adds	r3, #16
 8003946:	443b      	add	r3, r7
 8003948:	f843 2c0c 	str.w	r2, [r3, #-12]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3301      	adds	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0eb      	beq.n	8003930 <prvTraceStoreStartEvent+0x10>
	}

	(void)xTraceEventCreateDataOffline0(PSF_EVENT_TRACE_START, xTraceTasks, sizeof(xTraceTasks));
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	2204      	movs	r2, #4
 800395c:	4619      	mov	r1, r3
 800395e:	2001      	movs	r0, #1
 8003960:	f7fe fbca 	bl	80020f8 <xTraceEventCreateDataOffline0>
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	200028e8 	.word	0x200028e8

08003970 <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
static int32_t prvIsValidCommand(const TraceCommand_t* const cmd)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	781a      	ldrb	r2, [r3, #0]
												cmd->param1 +
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	785b      	ldrb	r3, [r3, #1]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003980:	4413      	add	r3, r2
 8003982:	b2da      	uxtb	r2, r3
												cmd->param2 +
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	789b      	ldrb	r3, [r3, #2]
												cmd->param1 +
 8003988:	4413      	add	r3, r2
 800398a:	b2da      	uxtb	r2, r3
												cmd->param3 +
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	78db      	ldrb	r3, [r3, #3]
												cmd->param2 +
 8003990:	4413      	add	r3, r2
 8003992:	b2da      	uxtb	r2, r3
												cmd->param4 +
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	791b      	ldrb	r3, [r3, #4]
												cmd->param3 +
 8003998:	4413      	add	r3, r2
 800399a:	b2da      	uxtb	r2, r3
												cmd->param5);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	795b      	ldrb	r3, [r3, #5]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80039a0:	4413      	add	r3, r2
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	81fb      	strh	r3, [r7, #14]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	79da      	ldrb	r2, [r3, #7]
 80039ac:	89fb      	ldrh	r3, [r7, #14]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <prvIsValidCommand+0x4c>
	{
		return 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e00e      	b.n	80039da <prvIsValidCommand+0x6a>
	}

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFFU)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	799a      	ldrb	r2, [r3, #6]
 80039c0:	89fb      	ldrh	r3, [r7, #14]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <prvIsValidCommand+0x5c>
	{
		return 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e006      	b.n	80039da <prvIsValidCommand+0x6a>
	}

	if (cmd->cmdCode > (unsigned char)(CMD_LAST_COMMAND)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d901      	bls.n	80039d8 <prvIsValidCommand+0x68>
	{
		return 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e000      	b.n	80039da <prvIsValidCommand+0x6a>
	}

	return 1;
 80039d8:	2301      	movs	r3, #1
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
static void prvProcessCommand(const TraceCommand_t* const cmd)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d109      	bne.n	8003a0a <prvProcessCommand+0x24>
	{
		case CMD_SET_ACTIVE:
			if (cmd->param1 == 1u)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d102      	bne.n	8003a04 <prvProcessCommand+0x1e>
			{
				prvSetRecorderEnabled();
 80039fe:	f7ff fec9 	bl	8003794 <prvSetRecorderEnabled>
			}
			else
			{
				prvSetRecorderDisabled();
			}
		  	break;
 8003a02:	e003      	b.n	8003a0c <prvProcessCommand+0x26>
				prvSetRecorderDisabled();
 8003a04:	f7ff ff16 	bl	8003834 <prvSetRecorderDisabled>
		  	break;
 8003a08:	e000      	b.n	8003a0c <prvProcessCommand+0x26>
		default:
		  	break;
 8003a0a:	bf00      	nop
	}
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <prvVerifySizeAlignment>:

/* Do this in function to avoid unreachable code warnings */
static traceResult prvVerifySizeAlignment(uint32_t ulSize)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	return (ulSize % sizeof(TraceUnsignedBaseType_t)) == 0 ? TRC_SUCCESS : TRC_FAIL;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf14      	ite	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	2300      	moveq	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <xTraceStringRegister>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceStringRegister(const char* szString, TraceStringHandle_t *pString)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	int32_t i;
	uint32_t uiLength = 0u;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
	
	/* This should never fail */
	TRC_ASSERT(pString != (void*)0);

	/* We need to check this */
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8003a46:	f107 030c 	add.w	r3, r7, #12
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fe52 	bl	80016f4 <xTraceEntryCreate>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <xTraceStringRegister+0x22>
	{
		return TRC_FAIL;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e022      	b.n	8003aa0 <xTraceStringRegister+0x68>
	}

	for (i = 0; (szString[i] != (char)0) && (i < (int32_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e002      	b.n	8003a66 <xTraceStringRegister+0x2e>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <xTraceStringRegister+0x40>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b1b      	cmp	r3, #27
 8003a76:	ddf3      	ble.n	8003a60 <xTraceStringRegister+0x28>

	uiLength = (uint32_t)i;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	613b      	str	r3, [r7, #16]

	/* The address to the available symbol table slot is the address we use */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString, uiLength) == TRC_SUCCESS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd fec2 	bl	800180c <xTraceEntrySetSymbol>

	*pString = (TraceStringHandle_t)xEntryHandle;
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	601a      	str	r2, [r3, #0]

	return xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)xEntryHandle, (TraceUnsignedBaseType_t*)szString, uiLength + 1);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4619      	mov	r1, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	3301      	adds	r3, #1
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	2003      	movs	r0, #3
 8003a9a:	f7fe fba9 	bl	80021f0 <xTraceEventCreateData1>
 8003a9e:	4603      	mov	r3, r0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <xTraceTaskInitialize>:
#define TRC_TASK_STATE_INDEX_PRIORITY		0u

TraceTaskData_t* pxTraceTaskData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTaskInitialize(TraceTaskData_t *pxBuffer)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	int32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTaskData= pxBuffer;
 8003ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8003af0 <xTraceTaskInitialize+0x48>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]

	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e008      	b.n	8003ace <xTraceTaskInitialize+0x26>
	{
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8003abc:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <xTraceTaskInitialize+0x48>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3301      	adds	r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	ddf3      	ble.n	8003abc <xTraceTaskInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 8003ad4:	4b07      	ldr	r3, [pc, #28]	@ (8003af4 <xTraceTaskInitialize+0x4c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003adc:	4a05      	ldr	r2, [pc, #20]	@ (8003af4 <xTraceTaskInitialize+0x4c>)
 8003ade:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	200028e8 	.word	0x200028e8
 8003af4:	200028e4 	.word	0x200028e4

08003af8 <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8003b06:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <xTraceTaskSwitch+0x94>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <xTraceTaskSwitch+0x1e>
	{
		return xResult;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	e035      	b.n	8003b82 <xTraceTaskSwitch+0x8a>
	}

	if (!xTraceIsRecorderEnabled())
 8003b16:	4b1d      	ldr	r3, [pc, #116]	@ (8003b8c <xTraceTaskSwitch+0x94>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <xTraceTaskSwitch+0x34>
 8003b22:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <xTraceTaskSwitch+0x98>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <xTraceTaskSwitch+0x40>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		xTraceTaskSetCurrent(pvTask);
 8003b2c:	4b19      	ldr	r3, [pc, #100]	@ (8003b94 <xTraceTaskSwitch+0x9c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	601a      	str	r2, [r3, #0]

		return xResult;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	e024      	b.n	8003b82 <xTraceTaskSwitch+0x8a>
	}

	xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 8003b38:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <xTraceTaskSwitch+0x98>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b40:	f3ef 8310 	mrs	r3, PRIMASK
 8003b44:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b46:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f383 8810 	msr	PRIMASK, r3
}
 8003b54:	bf00      	nop
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		xTraceTaskSetCurrent(pvTask);
 8003b56:	4b0f      	ldr	r3, [pc, #60]	@ (8003b94 <xTraceTaskSwitch+0x9c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	4619      	mov	r1, r3
 8003b64:	2037      	movs	r0, #55	@ 0x37
 8003b66:	f7fe f8fd 	bl	8001d64 <xTraceEventCreate2>
 8003b6a:	61f8      	str	r0, [r7, #28]
	}

	xTraceStateSet(TRC_STATE_IN_APPLICATION);
 8003b6c:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <xTraceTaskSwitch+0x98>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2202      	movs	r2, #2
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f383 8810 	msr	PRIMASK, r3
}
 8003b7e:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8003b80:	69fb      	ldr	r3, [r7, #28]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200028e4 	.word	0x200028e4
 8003b90:	200028dc 	.word	0x200028dc
 8003b94:	200028e8 	.word	0x200028e8

08003b98 <xTraceTimestampInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceTimestampData_t *pxTraceTimestamp TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTimestampInitialize(TraceTimestampData_t *pxBuffer)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTimestamp = pxBuffer;
 8003ba0:	4a16      	ldr	r2, [pc, #88]	@ (8003bfc <xTraceTimestampInitialize+0x64>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6013      	str	r3, [r2, #0]

	/* These will be set when tracing is enabled */
	pxTraceTimestamp->frequency = 0u;
 8003ba6:	4b15      	ldr	r3, [pc, #84]	@ (8003bfc <xTraceTimestampInitialize+0x64>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
	pxTraceTimestamp->period = 0u;
 8003bae:	4b13      	ldr	r3, [pc, #76]	@ (8003bfc <xTraceTimestampInitialize+0x64>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	605a      	str	r2, [r3, #4]

	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 8003bb6:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <xTraceTimestampInitialize+0x64>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bbe:	611a      	str	r2, [r3, #16]
	pxTraceTimestamp->osTickCount = 0u;
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bfc <xTraceTimestampInitialize+0x64>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	619a      	str	r2, [r3, #24]
	pxTraceTimestamp->wraparounds = 0u;
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <xTraceTimestampInitialize+0x64>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	60da      	str	r2, [r3, #12]
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bfc <xTraceTimestampInitialize+0x64>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

#if (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_INCR)
	pxTraceTimestamp->latestTimestamp = 0u;
 8003bd8:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <xTraceTimestampInitialize+0x64>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	615a      	str	r2, [r3, #20]
#elif (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	pxTraceTimestamp->latestTimestamp = pxTraceTimestamp->period - 1u;
#endif

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 8003be0:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <xTraceTimestampInitialize+0x68>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003be8:	4a05      	ldr	r2, [pc, #20]	@ (8003c00 <xTraceTimestampInitialize+0x68>)
 8003bea:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	200028ec 	.word	0x200028ec
 8003c00:	200028e4 	.word	0x200028e4

08003c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c08:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <HAL_Init+0x40>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c44 <HAL_Init+0x40>)
 8003c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c14:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <HAL_Init+0x40>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	@ (8003c44 <HAL_Init+0x40>)
 8003c1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c20:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <HAL_Init+0x40>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a07      	ldr	r2, [pc, #28]	@ (8003c44 <HAL_Init+0x40>)
 8003c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c2c:	2003      	movs	r0, #3
 8003c2e:	f000 f8d8 	bl	8003de2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c32:	200f      	movs	r0, #15
 8003c34:	f7fd f874 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c38:	f7fc ff14 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023c00 	.word	0x40023c00

08003c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <HAL_IncTick+0x20>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_IncTick+0x24>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4413      	add	r3, r2
 8003c58:	4a04      	ldr	r2, [pc, #16]	@ (8003c6c <HAL_IncTick+0x24>)
 8003c5a:	6013      	str	r3, [r2, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	2000000c 	.word	0x2000000c
 8003c6c:	200028f0 	.word	0x200028f0

08003c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return uwTick;
 8003c74:	4b03      	ldr	r3, [pc, #12]	@ (8003c84 <HAL_GetTick+0x14>)
 8003c76:	681b      	ldr	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	200028f0 	.word	0x200028f0

08003c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cba:	4a04      	ldr	r2, [pc, #16]	@ (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	60d3      	str	r3, [r2, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd4:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0307 	and.w	r3, r3, #7
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db0b      	blt.n	8003d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	f003 021f 	and.w	r2, r3, #31
 8003d04:	4907      	ldr	r1, [pc, #28]	@ (8003d24 <__NVIC_EnableIRQ+0x38>)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000e100 	.word	0xe000e100

08003d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	db0a      	blt.n	8003d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	490c      	ldr	r1, [pc, #48]	@ (8003d74 <__NVIC_SetPriority+0x4c>)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	0112      	lsls	r2, r2, #4
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d50:	e00a      	b.n	8003d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4908      	ldr	r1, [pc, #32]	@ (8003d78 <__NVIC_SetPriority+0x50>)
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	440b      	add	r3, r1
 8003d66:	761a      	strb	r2, [r3, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	e000e100 	.word	0xe000e100
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	@ 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f1c3 0307 	rsb	r3, r3, #7
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf28      	it	cs
 8003d9a:	2304      	movcs	r3, #4
 8003d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d902      	bls.n	8003dac <NVIC_EncodePriority+0x30>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3b03      	subs	r3, #3
 8003daa:	e000      	b.n	8003dae <NVIC_EncodePriority+0x32>
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	f04f 32ff 	mov.w	r2, #4294967295
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	43d9      	mvns	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	4313      	orrs	r3, r2
         );
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3724      	adds	r7, #36	@ 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ff4c 	bl	8003c88 <__NVIC_SetPriorityGrouping>
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e0a:	f7ff ff61 	bl	8003cd0 <__NVIC_GetPriorityGrouping>
 8003e0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	6978      	ldr	r0, [r7, #20]
 8003e16:	f7ff ffb1 	bl	8003d7c <NVIC_EncodePriority>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff ff80 	bl	8003d28 <__NVIC_SetPriority>
}
 8003e28:	bf00      	nop
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff ff54 	bl	8003cec <__NVIC_EnableIRQ>
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	@ 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e16b      	b.n	8004140 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e68:	2201      	movs	r2, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	f040 815a 	bne.w	800413a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d005      	beq.n	8003e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d130      	bne.n	8003f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 0201 	and.w	r2, r3, #1
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d017      	beq.n	8003f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d123      	bne.n	8003f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	08da      	lsrs	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3208      	adds	r2, #8
 8003f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	220f      	movs	r2, #15
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	08da      	lsrs	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3208      	adds	r2, #8
 8003f8a:	69b9      	ldr	r1, [r7, #24]
 8003f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0203 	and.w	r2, r3, #3
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80b4 	beq.w	800413a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	4b60      	ldr	r3, [pc, #384]	@ (8004158 <HAL_GPIO_Init+0x30c>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	4a5f      	ldr	r2, [pc, #380]	@ (8004158 <HAL_GPIO_Init+0x30c>)
 8003fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8004158 <HAL_GPIO_Init+0x30c>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fee:	4a5b      	ldr	r2, [pc, #364]	@ (800415c <HAL_GPIO_Init+0x310>)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	220f      	movs	r2, #15
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a52      	ldr	r2, [pc, #328]	@ (8004160 <HAL_GPIO_Init+0x314>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d02b      	beq.n	8004072 <HAL_GPIO_Init+0x226>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a51      	ldr	r2, [pc, #324]	@ (8004164 <HAL_GPIO_Init+0x318>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d025      	beq.n	800406e <HAL_GPIO_Init+0x222>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a50      	ldr	r2, [pc, #320]	@ (8004168 <HAL_GPIO_Init+0x31c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01f      	beq.n	800406a <HAL_GPIO_Init+0x21e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4f      	ldr	r2, [pc, #316]	@ (800416c <HAL_GPIO_Init+0x320>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d019      	beq.n	8004066 <HAL_GPIO_Init+0x21a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4e      	ldr	r2, [pc, #312]	@ (8004170 <HAL_GPIO_Init+0x324>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_GPIO_Init+0x216>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4d      	ldr	r2, [pc, #308]	@ (8004174 <HAL_GPIO_Init+0x328>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00d      	beq.n	800405e <HAL_GPIO_Init+0x212>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4c      	ldr	r2, [pc, #304]	@ (8004178 <HAL_GPIO_Init+0x32c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <HAL_GPIO_Init+0x20e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4b      	ldr	r2, [pc, #300]	@ (800417c <HAL_GPIO_Init+0x330>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_GPIO_Init+0x20a>
 8004052:	2307      	movs	r3, #7
 8004054:	e00e      	b.n	8004074 <HAL_GPIO_Init+0x228>
 8004056:	2308      	movs	r3, #8
 8004058:	e00c      	b.n	8004074 <HAL_GPIO_Init+0x228>
 800405a:	2306      	movs	r3, #6
 800405c:	e00a      	b.n	8004074 <HAL_GPIO_Init+0x228>
 800405e:	2305      	movs	r3, #5
 8004060:	e008      	b.n	8004074 <HAL_GPIO_Init+0x228>
 8004062:	2304      	movs	r3, #4
 8004064:	e006      	b.n	8004074 <HAL_GPIO_Init+0x228>
 8004066:	2303      	movs	r3, #3
 8004068:	e004      	b.n	8004074 <HAL_GPIO_Init+0x228>
 800406a:	2302      	movs	r3, #2
 800406c:	e002      	b.n	8004074 <HAL_GPIO_Init+0x228>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_GPIO_Init+0x228>
 8004072:	2300      	movs	r3, #0
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	f002 0203 	and.w	r2, r2, #3
 800407a:	0092      	lsls	r2, r2, #2
 800407c:	4093      	lsls	r3, r2
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004084:	4935      	ldr	r1, [pc, #212]	@ (800415c <HAL_GPIO_Init+0x310>)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	3302      	adds	r3, #2
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004092:	4b3b      	ldr	r3, [pc, #236]	@ (8004180 <HAL_GPIO_Init+0x334>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	43db      	mvns	r3, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4013      	ands	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040b6:	4a32      	ldr	r2, [pc, #200]	@ (8004180 <HAL_GPIO_Init+0x334>)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040bc:	4b30      	ldr	r3, [pc, #192]	@ (8004180 <HAL_GPIO_Init+0x334>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040e0:	4a27      	ldr	r2, [pc, #156]	@ (8004180 <HAL_GPIO_Init+0x334>)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040e6:	4b26      	ldr	r3, [pc, #152]	@ (8004180 <HAL_GPIO_Init+0x334>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800410a:	4a1d      	ldr	r2, [pc, #116]	@ (8004180 <HAL_GPIO_Init+0x334>)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004110:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <HAL_GPIO_Init+0x334>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004134:	4a12      	ldr	r2, [pc, #72]	@ (8004180 <HAL_GPIO_Init+0x334>)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3301      	adds	r3, #1
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b0f      	cmp	r3, #15
 8004144:	f67f ae90 	bls.w	8003e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	3724      	adds	r7, #36	@ 0x24
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800
 800415c:	40013800 	.word	0x40013800
 8004160:	40020000 	.word	0x40020000
 8004164:	40020400 	.word	0x40020400
 8004168:	40020800 	.word	0x40020800
 800416c:	40020c00 	.word	0x40020c00
 8004170:	40021000 	.word	0x40021000
 8004174:	40021400 	.word	0x40021400
 8004178:	40021800 	.word	0x40021800
 800417c:	40021c00 	.word	0x40021c00
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
 8004190:	4613      	mov	r3, r2
 8004192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004194:	787b      	ldrb	r3, [r7, #1]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041a0:	e003      	b.n	80041aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	041a      	lsls	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	619a      	str	r2, [r3, #24]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041c8:	887a      	ldrh	r2, [r7, #2]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4013      	ands	r3, r2
 80041ce:	041a      	lsls	r2, r3, #16
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	43d9      	mvns	r1, r3
 80041d4:	887b      	ldrh	r3, [r7, #2]
 80041d6:	400b      	ands	r3, r1
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	619a      	str	r2, [r3, #24]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f003 fd9d 	bl	8007d40 <USB_GetMode>
 8004206:	4603      	mov	r3, r0
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 80fb 	bne.w	8004404 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f003 fd60 	bl	8007cd8 <USB_ReadInterrupts>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80f1 	beq.w	8004402 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f003 fd57 	bl	8007cd8 <USB_ReadInterrupts>
 800422a:	4603      	mov	r3, r0
 800422c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004230:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004234:	d104      	bne.n	8004240 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800423e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f003 fd47 	bl	8007cd8 <USB_ReadInterrupts>
 800424a:	4603      	mov	r3, r0
 800424c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004250:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004254:	d104      	bne.n	8004260 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800425e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f003 fd37 	bl	8007cd8 <USB_ReadInterrupts>
 800426a:	4603      	mov	r3, r0
 800426c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004270:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004274:	d104      	bne.n	8004280 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800427e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f003 fd27 	bl	8007cd8 <USB_ReadInterrupts>
 800428a:	4603      	mov	r3, r0
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b02      	cmp	r3, #2
 8004292:	d103      	bne.n	800429c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2202      	movs	r2, #2
 800429a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f003 fd19 	bl	8007cd8 <USB_ReadInterrupts>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042b0:	d120      	bne.n	80042f4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80042ba:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d113      	bne.n	80042f4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80042cc:	2110      	movs	r1, #16
 80042ce:	6938      	ldr	r0, [r7, #16]
 80042d0:	f003 fc4a 	bl	8007b68 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80042d4:	6938      	ldr	r0, [r7, #16]
 80042d6:	f003 fc79 	bl	8007bcc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	7a5b      	ldrb	r3, [r3, #9]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d105      	bne.n	80042ee <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2101      	movs	r1, #1
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 fd37 	bl	8007d5c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f006 ff8c 	bl	800b20c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f003 fced 	bl	8007cd8 <USB_ReadInterrupts>
 80042fe:	4603      	mov	r3, r0
 8004300:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004308:	d102      	bne.n	8004310 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f001 fc87 	bl	8005c1e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f003 fcdf 	bl	8007cd8 <USB_ReadInterrupts>
 800431a:	4603      	mov	r3, r0
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b08      	cmp	r3, #8
 8004322:	d106      	bne.n	8004332 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f006 ff55 	bl	800b1d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2208      	movs	r2, #8
 8004330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f003 fcce 	bl	8007cd8 <USB_ReadInterrupts>
 800433c:	4603      	mov	r3, r0
 800433e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004342:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004346:	d139      	bne.n	80043bc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f003 fd42 	bl	8007dd6 <USB_HC_ReadInterrupt>
 8004352:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e025      	b.n	80043a6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004384:	d106      	bne.n	8004394 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f859 	bl	8004444 <HCD_HC_IN_IRQHandler>
 8004392:	e005      	b.n	80043a0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 febb 	bl	8005116 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3301      	adds	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	795b      	ldrb	r3, [r3, #5]
 80043aa:	461a      	mov	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d3d3      	bcc.n	800435a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f003 fc89 	bl	8007cd8 <USB_ReadInterrupts>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d101      	bne.n	80043d4 <HAL_HCD_IRQHandler+0x1ea>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_HCD_IRQHandler+0x1ec>
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d014      	beq.n	8004404 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0210 	bic.w	r2, r2, #16
 80043e8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f001 fb38 	bl	8005a60 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0210 	orr.w	r2, r2, #16
 80043fe:	619a      	str	r2, [r3, #24]
 8004400:	e000      	b.n	8004404 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004402:	bf00      	nop
    }
  }
}
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_HCD_Stop+0x16>
 800441c:	2302      	movs	r3, #2
 800441e:	e00d      	b.n	800443c <HAL_HCD_Stop+0x32>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f003 fe03 	bl	8008038 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f003 fc4b 	bl	8007cfe <USB_ReadChInterrupts>
 8004468:	4603      	mov	r3, r0
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b04      	cmp	r3, #4
 8004470:	d11a      	bne.n	80044a8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4413      	add	r3, r2
 800447a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800447e:	461a      	mov	r2, r3
 8004480:	2304      	movs	r3, #4
 8004482:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	334d      	adds	r3, #77	@ 0x4d
 8004494:	2207      	movs	r2, #7
 8004496:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f003 fca9 	bl	8007df8 <USB_HC_Halt>
 80044a6:	e09e      	b.n	80045e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f003 fc24 	bl	8007cfe <USB_ReadChInterrupts>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c0:	d11b      	bne.n	80044fa <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ce:	461a      	mov	r2, r3
 80044d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	334d      	adds	r3, #77	@ 0x4d
 80044e6:	2208      	movs	r2, #8
 80044e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	4611      	mov	r1, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f003 fc80 	bl	8007df8 <USB_HC_Halt>
 80044f8:	e075      	b.n	80045e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f003 fbfb 	bl	8007cfe <USB_ReadChInterrupts>
 8004508:	4603      	mov	r3, r0
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b08      	cmp	r3, #8
 8004510:	d11a      	bne.n	8004548 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	4413      	add	r3, r2
 800451a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800451e:	461a      	mov	r2, r3
 8004520:	2308      	movs	r3, #8
 8004522:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	334d      	adds	r3, #77	@ 0x4d
 8004534:	2206      	movs	r2, #6
 8004536:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f003 fc59 	bl	8007df8 <USB_HC_Halt>
 8004546:	e04e      	b.n	80045e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f003 fbd4 	bl	8007cfe <USB_ReadChInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004560:	d11b      	bne.n	800459a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4413      	add	r3, r2
 800456a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800456e:	461a      	mov	r2, r3
 8004570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004574:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	334d      	adds	r3, #77	@ 0x4d
 8004586:	2209      	movs	r2, #9
 8004588:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f003 fc30 	bl	8007df8 <USB_HC_Halt>
 8004598:	e025      	b.n	80045e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f003 fbab 	bl	8007cfe <USB_ReadChInterrupts>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	2b80      	cmp	r3, #128	@ 0x80
 80045b0:	d119      	bne.n	80045e6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045be:	461a      	mov	r2, r3
 80045c0:	2380      	movs	r3, #128	@ 0x80
 80045c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	334d      	adds	r3, #77	@ 0x4d
 80045d4:	2207      	movs	r2, #7
 80045d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f003 fc09 	bl	8007df8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f003 fb85 	bl	8007cfe <USB_ReadChInterrupts>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045fe:	d112      	bne.n	8004626 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f003 fbf5 	bl	8007df8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800461a:	461a      	mov	r2, r3
 800461c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004620:	6093      	str	r3, [r2, #8]
 8004622:	f000 bd75 	b.w	8005110 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	78fa      	ldrb	r2, [r7, #3]
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f003 fb65 	bl	8007cfe <USB_ReadChInterrupts>
 8004634:	4603      	mov	r3, r0
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	f040 8128 	bne.w	8004890 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800464c:	461a      	mov	r2, r3
 800464e:	2320      	movs	r3, #32
 8004650:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	331b      	adds	r3, #27
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d119      	bne.n	800469c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	331b      	adds	r3, #27
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	440a      	add	r2, r1
 8004692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	799b      	ldrb	r3, [r3, #6]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01b      	beq.n	80046dc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3330      	adds	r3, #48	@ 0x30
 80046b4:	6819      	ldr	r1, [r3, #0]
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	1ac9      	subs	r1, r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4403      	add	r3, r0
 80046d8:	3338      	adds	r3, #56	@ 0x38
 80046da:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	334d      	adds	r3, #77	@ 0x4d
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	3344      	adds	r3, #68	@ 0x44
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	4413      	add	r3, r2
 800470c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004710:	461a      	mov	r2, r3
 8004712:	2301      	movs	r3, #1
 8004714:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3326      	adds	r3, #38	@ 0x26
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	3326      	adds	r3, #38	@ 0x26
 800473c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800473e:	2b02      	cmp	r3, #2
 8004740:	d110      	bne.n	8004764 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	78fa      	ldrb	r2, [r7, #3]
 8004748:	4611      	mov	r1, r2
 800474a:	4618      	mov	r0, r3
 800474c:	f003 fb54 	bl	8007df8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4413      	add	r3, r2
 8004758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800475c:	461a      	mov	r2, r3
 800475e:	2310      	movs	r3, #16
 8004760:	6093      	str	r3, [r2, #8]
 8004762:	e03d      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	3326      	adds	r3, #38	@ 0x26
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d00a      	beq.n	8004790 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3326      	adds	r3, #38	@ 0x26
 800478a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800478c:	2b01      	cmp	r3, #1
 800478e:	d127      	bne.n	80047e0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	0151      	lsls	r1, r2, #5
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	440a      	add	r2, r1
 80047a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	334c      	adds	r3, #76	@ 0x4c
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	334c      	adds	r3, #76	@ 0x4c
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f006 fd24 	bl	800b228 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	799b      	ldrb	r3, [r3, #6]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d13b      	bne.n	8004860 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	3338      	adds	r3, #56	@ 0x38
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4403      	add	r3, r0
 8004808:	3328      	adds	r3, #40	@ 0x28
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	440b      	add	r3, r1
 800480e:	1e59      	subs	r1, r3, #1
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4403      	add	r3, r0
 800481e:	3328      	adds	r3, #40	@ 0x28
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	fbb1 f3f3 	udiv	r3, r1, r3
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8470 	beq.w	8005110 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	333c      	adds	r3, #60	@ 0x3c
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	f083 0301 	eor.w	r3, r3, #1
 8004848:	b2d8      	uxtb	r0, r3
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	333c      	adds	r3, #60	@ 0x3c
 8004858:	4602      	mov	r2, r0
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	f000 bc58 	b.w	8005110 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	333c      	adds	r3, #60	@ 0x3c
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	f083 0301 	eor.w	r3, r3, #1
 8004878:	b2d8      	uxtb	r0, r3
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	333c      	adds	r3, #60	@ 0x3c
 8004888:	4602      	mov	r2, r0
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	f000 bc40 	b.w	8005110 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f003 fa30 	bl	8007cfe <USB_ReadChInterrupts>
 800489e:	4603      	mov	r3, r0
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d131      	bne.n	800490c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b4:	461a      	mov	r2, r3
 80048b6:	2320      	movs	r3, #32
 80048b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	331a      	adds	r3, #26
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	f040 841f 	bne.w	8005110 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	331b      	adds	r3, #27
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	334d      	adds	r3, #77	@ 0x4d
 80048f6:	2203      	movs	r2, #3
 80048f8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	78fa      	ldrb	r2, [r7, #3]
 8004900:	4611      	mov	r1, r2
 8004902:	4618      	mov	r0, r3
 8004904:	f003 fa78 	bl	8007df8 <USB_HC_Halt>
 8004908:	f000 bc02 	b.w	8005110 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f003 f9f2 	bl	8007cfe <USB_ReadChInterrupts>
 800491a:	4603      	mov	r3, r0
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	f040 8305 	bne.w	8004f30 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4413      	add	r3, r2
 800492e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004932:	461a      	mov	r2, r3
 8004934:	2302      	movs	r3, #2
 8004936:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	334d      	adds	r3, #77	@ 0x4d
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d114      	bne.n	8004978 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	334d      	adds	r3, #77	@ 0x4d
 800495e:	2202      	movs	r2, #2
 8004960:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	334c      	adds	r3, #76	@ 0x4c
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	e2cc      	b.n	8004f12 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	334d      	adds	r3, #77	@ 0x4d
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b06      	cmp	r3, #6
 800498c:	d114      	bne.n	80049b8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	334d      	adds	r3, #77	@ 0x4d
 800499e:	2202      	movs	r2, #2
 80049a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	334c      	adds	r3, #76	@ 0x4c
 80049b2:	2205      	movs	r2, #5
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e2ac      	b.n	8004f12 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	334d      	adds	r3, #77	@ 0x4d
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b07      	cmp	r3, #7
 80049cc:	d00b      	beq.n	80049e6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	334d      	adds	r3, #77	@ 0x4d
 80049de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	f040 80a6 	bne.w	8004b32 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	334d      	adds	r3, #77	@ 0x4d
 80049f6:	2202      	movs	r2, #2
 80049f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80049fa:	78fa      	ldrb	r2, [r7, #3]
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	3344      	adds	r3, #68	@ 0x44
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	1c59      	adds	r1, r3, #1
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4403      	add	r3, r0
 8004a1a:	3344      	adds	r3, #68	@ 0x44
 8004a1c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3344      	adds	r3, #68	@ 0x44
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d943      	bls.n	8004abc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a34:	78fa      	ldrb	r2, [r7, #3]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	3344      	adds	r3, #68	@ 0x44
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004a48:	78fa      	ldrb	r2, [r7, #3]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	331a      	adds	r3, #26
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d123      	bne.n	8004aa6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004a5e:	78fa      	ldrb	r2, [r7, #3]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	331b      	adds	r3, #27
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	331c      	adds	r3, #28
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	334c      	adds	r3, #76	@ 0x4c
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004aba:	e229      	b.n	8004f10 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	334c      	adds	r3, #76	@ 0x4c
 8004acc:	2202      	movs	r2, #2
 8004ace:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ad0:	78fa      	ldrb	r2, [r7, #3]
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	3326      	adds	r3, #38	@ 0x26
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ae6:	78fa      	ldrb	r2, [r7, #3]
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	3326      	adds	r3, #38	@ 0x26
 8004af6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	f040 8209 	bne.w	8004f10 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b14:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b1c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b30:	e1ee      	b.n	8004f10 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	334d      	adds	r3, #77	@ 0x4d
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b05      	cmp	r3, #5
 8004b46:	f040 80c8 	bne.w	8004cda <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	334d      	adds	r3, #77	@ 0x4d
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	331b      	adds	r3, #27
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	f040 81ce 	bne.w	8004f12 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	3326      	adds	r3, #38	@ 0x26
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d16b      	bne.n	8004c64 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	3348      	adds	r3, #72	@ 0x48
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	1c59      	adds	r1, r3, #1
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4403      	add	r3, r0
 8004bac:	3348      	adds	r3, #72	@ 0x48
 8004bae:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	3348      	adds	r3, #72	@ 0x48
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d943      	bls.n	8004c4e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3348      	adds	r3, #72	@ 0x48
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	331b      	adds	r3, #27
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	3344      	adds	r3, #68	@ 0x44
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d809      	bhi.n	8004c18 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	331c      	adds	r3, #28
 8004c14:	2201      	movs	r2, #1
 8004c16:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c36:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	334c      	adds	r3, #76	@ 0x4c
 8004c48:	2204      	movs	r2, #4
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e014      	b.n	8004c78 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	334c      	adds	r3, #76	@ 0x4c
 8004c5e:	2202      	movs	r2, #2
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	e009      	b.n	8004c78 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	334c      	adds	r3, #76	@ 0x4c
 8004c74:	2202      	movs	r2, #2
 8004c76:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	3326      	adds	r3, #38	@ 0x26
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c8e:	78fa      	ldrb	r2, [r7, #3]
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	3326      	adds	r3, #38	@ 0x26
 8004c9e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	f040 8136 	bne.w	8004f12 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cbc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cc4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e11b      	b.n	8004f12 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	334d      	adds	r3, #77	@ 0x4d
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	f040 8081 	bne.w	8004df4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	334d      	adds	r3, #77	@ 0x4d
 8004d02:	2202      	movs	r2, #2
 8004d04:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	331b      	adds	r3, #27
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	f040 80fa 	bne.w	8004f12 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	334c      	adds	r3, #76	@ 0x4c
 8004d2e:	2202      	movs	r2, #2
 8004d30:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	0151      	lsls	r1, r2, #5
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	440a      	add	r2, r1
 8004d48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d50:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	78fa      	ldrb	r2, [r7, #3]
 8004d62:	0151      	lsls	r1, r2, #5
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	440a      	add	r2, r1
 8004d68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d70:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d8c:	f023 0320 	bic.w	r3, r3, #32
 8004d90:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	3326      	adds	r3, #38	@ 0x26
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	3326      	adds	r3, #38	@ 0x26
 8004db8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	f040 80a9 	bne.w	8004f12 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004dd6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004dde:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dec:	461a      	mov	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e08e      	b.n	8004f12 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	334d      	adds	r3, #77	@ 0x4d
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d143      	bne.n	8004e92 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	334d      	adds	r3, #77	@ 0x4d
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	334c      	adds	r3, #76	@ 0x4c
 8004e2e:	2202      	movs	r2, #2
 8004e30:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	3326      	adds	r3, #38	@ 0x26
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	1a9b      	subs	r3, r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	3326      	adds	r3, #38	@ 0x26
 8004e58:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d159      	bne.n	8004f12 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e74:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e7c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e03f      	b.n	8004f12 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004e92:	78fa      	ldrb	r2, [r7, #3]
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	334d      	adds	r3, #77	@ 0x4d
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d126      	bne.n	8004ef6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	334d      	adds	r3, #77	@ 0x4d
 8004eb8:	2202      	movs	r2, #2
 8004eba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	3344      	adds	r3, #68	@ 0x44
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	1c59      	adds	r1, r3, #1
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4403      	add	r3, r0
 8004edc:	3344      	adds	r3, #68	@ 0x44
 8004ede:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	334c      	adds	r3, #76	@ 0x4c
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e00d      	b.n	8004f12 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004ef6:	78fa      	ldrb	r2, [r7, #3]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	334d      	adds	r3, #77	@ 0x4d
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	f000 8100 	beq.w	800510e <HCD_HC_IN_IRQHandler+0xcca>
 8004f0e:	e000      	b.n	8004f12 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f10:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	334c      	adds	r3, #76	@ 0x4c
 8004f22:	781a      	ldrb	r2, [r3, #0]
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f006 f97d 	bl	800b228 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f2e:	e0ef      	b.n	8005110 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f002 fee0 	bl	8007cfe <USB_ReadChInterrupts>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f44:	2b40      	cmp	r3, #64	@ 0x40
 8004f46:	d12f      	bne.n	8004fa8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f54:	461a      	mov	r2, r3
 8004f56:	2340      	movs	r3, #64	@ 0x40
 8004f58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004f5a:	78fa      	ldrb	r2, [r7, #3]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	334d      	adds	r3, #77	@ 0x4d
 8004f6a:	2205      	movs	r2, #5
 8004f6c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	331a      	adds	r3, #26
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	1a9b      	subs	r3, r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	3344      	adds	r3, #68	@ 0x44
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	78fa      	ldrb	r2, [r7, #3]
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f002 ff29 	bl	8007df8 <USB_HC_Halt>
 8004fa6:	e0b3      	b.n	8005110 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f002 fea4 	bl	8007cfe <USB_ReadChInterrupts>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	f040 80a7 	bne.w	8005110 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3326      	adds	r3, #38	@ 0x26
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d11b      	bne.n	8005010 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004fd8:	78fa      	ldrb	r2, [r7, #3]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3344      	adds	r3, #68	@ 0x44
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	334d      	adds	r3, #77	@ 0x4d
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f002 fef5 	bl	8007df8 <USB_HC_Halt>
 800500e:	e03f      	b.n	8005090 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	3326      	adds	r3, #38	@ 0x26
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005026:	78fa      	ldrb	r2, [r7, #3]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	3326      	adds	r3, #38	@ 0x26
 8005036:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005038:	2b02      	cmp	r3, #2
 800503a:	d129      	bne.n	8005090 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	3344      	adds	r3, #68	@ 0x44
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	799b      	ldrb	r3, [r3, #6]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HCD_HC_IN_IRQHandler+0xc2a>
 8005058:	78fa      	ldrb	r2, [r7, #3]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	331b      	adds	r3, #27
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d110      	bne.n	8005090 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	334d      	adds	r3, #77	@ 0x4d
 800507e:	2204      	movs	r2, #4
 8005080:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f002 feb4 	bl	8007df8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	331b      	adds	r3, #27
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d129      	bne.n	80050fa <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	331b      	adds	r3, #27
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	0151      	lsls	r1, r2, #5
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	440a      	add	r2, r1
 80050d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	78fa      	ldrb	r2, [r7, #3]
 80050ea:	0151      	lsls	r1, r2, #5
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	440a      	add	r2, r1
 80050f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050f4:	f043 0320 	orr.w	r3, r3, #32
 80050f8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4413      	add	r3, r2
 8005102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005106:	461a      	mov	r2, r3
 8005108:	2310      	movs	r3, #16
 800510a:	6093      	str	r3, [r2, #8]
 800510c:	e000      	b.n	8005110 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800510e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	78fa      	ldrb	r2, [r7, #3]
 8005132:	4611      	mov	r1, r2
 8005134:	4618      	mov	r0, r3
 8005136:	f002 fde2 	bl	8007cfe <USB_ReadChInterrupts>
 800513a:	4603      	mov	r3, r0
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b04      	cmp	r3, #4
 8005142:	d11b      	bne.n	800517c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005150:	461a      	mov	r2, r3
 8005152:	2304      	movs	r3, #4
 8005154:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	334d      	adds	r3, #77	@ 0x4d
 8005166:	2207      	movs	r2, #7
 8005168:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f002 fe40 	bl	8007df8 <USB_HC_Halt>
 8005178:	f000 bc6f 	b.w	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	4611      	mov	r1, r2
 8005184:	4618      	mov	r0, r3
 8005186:	f002 fdba 	bl	8007cfe <USB_ReadChInterrupts>
 800518a:	4603      	mov	r3, r0
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b20      	cmp	r3, #32
 8005192:	f040 8082 	bne.w	800529a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a2:	461a      	mov	r2, r3
 80051a4:	2320      	movs	r3, #32
 80051a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3319      	adds	r3, #25
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d124      	bne.n	8005208 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	3319      	adds	r3, #25
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	334c      	adds	r3, #76	@ 0x4c
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	334d      	adds	r3, #77	@ 0x4d
 80051f6:	2203      	movs	r2, #3
 80051f8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	4611      	mov	r1, r2
 8005202:	4618      	mov	r0, r3
 8005204:	f002 fdf8 	bl	8007df8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005208:	78fa      	ldrb	r2, [r7, #3]
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	331a      	adds	r3, #26
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b01      	cmp	r3, #1
 800521c:	f040 841d 	bne.w	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	331b      	adds	r3, #27
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f040 8411 	bne.w	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	3326      	adds	r3, #38	@ 0x26
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d009      	beq.n	8005262 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	331b      	adds	r3, #27
 800525e:	2201      	movs	r2, #1
 8005260:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005262:	78fa      	ldrb	r2, [r7, #3]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	334d      	adds	r3, #77	@ 0x4d
 8005272:	2203      	movs	r2, #3
 8005274:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	78fa      	ldrb	r2, [r7, #3]
 800527c:	4611      	mov	r1, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f002 fdba 	bl	8007df8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	3344      	adds	r3, #68	@ 0x44
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e3df      	b.n	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f002 fd2b 	bl	8007cfe <USB_ReadChInterrupts>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b2:	d111      	bne.n	80052d8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c0:	461a      	mov	r2, r3
 80052c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052c6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	78fa      	ldrb	r2, [r7, #3]
 80052ce:	4611      	mov	r1, r2
 80052d0:	4618      	mov	r0, r3
 80052d2:	f002 fd91 	bl	8007df8 <USB_HC_Halt>
 80052d6:	e3c0      	b.n	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	4611      	mov	r1, r2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f002 fd0c 	bl	8007cfe <USB_ReadChInterrupts>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d168      	bne.n	80053c2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	1a9b      	subs	r3, r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	3344      	adds	r3, #68	@ 0x44
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	4611      	mov	r1, r2
 800530c:	4618      	mov	r0, r3
 800530e:	f002 fcf6 	bl	8007cfe <USB_ReadChInterrupts>
 8005312:	4603      	mov	r3, r0
 8005314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005318:	2b40      	cmp	r3, #64	@ 0x40
 800531a:	d112      	bne.n	8005342 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800531c:	78fa      	ldrb	r2, [r7, #3]
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4613      	mov	r3, r2
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	3319      	adds	r3, #25
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800533c:	461a      	mov	r2, r3
 800533e:	2340      	movs	r3, #64	@ 0x40
 8005340:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	331b      	adds	r3, #27
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d019      	beq.n	800538c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005358:	78fa      	ldrb	r2, [r7, #3]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	331b      	adds	r3, #27
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	440a      	add	r2, r1
 8005382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800538a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005398:	461a      	mov	r2, r3
 800539a:	2301      	movs	r3, #1
 800539c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	334d      	adds	r3, #77	@ 0x4d
 80053ae:	2201      	movs	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	4611      	mov	r1, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f002 fd1c 	bl	8007df8 <USB_HC_Halt>
 80053c0:	e34b      	b.n	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f002 fc97 	bl	8007cfe <USB_ReadChInterrupts>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d6:	2b40      	cmp	r3, #64	@ 0x40
 80053d8:	d139      	bne.n	800544e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	334d      	adds	r3, #77	@ 0x4d
 80053ea:	2205      	movs	r2, #5
 80053ec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	1a9b      	subs	r3, r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	331a      	adds	r3, #26
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d109      	bne.n	8005418 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	3319      	adds	r3, #25
 8005414:	2201      	movs	r2, #1
 8005416:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	3344      	adds	r3, #68	@ 0x44
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	4611      	mov	r1, r2
 8005434:	4618      	mov	r0, r3
 8005436:	f002 fcdf 	bl	8007df8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4413      	add	r3, r2
 8005442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005446:	461a      	mov	r2, r3
 8005448:	2340      	movs	r3, #64	@ 0x40
 800544a:	6093      	str	r3, [r2, #8]
 800544c:	e305      	b.n	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f002 fc51 	bl	8007cfe <USB_ReadChInterrupts>
 800545c:	4603      	mov	r3, r0
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b08      	cmp	r3, #8
 8005464:	d11a      	bne.n	800549c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4413      	add	r3, r2
 800546e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005472:	461a      	mov	r2, r3
 8005474:	2308      	movs	r3, #8
 8005476:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	334d      	adds	r3, #77	@ 0x4d
 8005488:	2206      	movs	r2, #6
 800548a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	78fa      	ldrb	r2, [r7, #3]
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f002 fcaf 	bl	8007df8 <USB_HC_Halt>
 800549a:	e2de      	b.n	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	78fa      	ldrb	r2, [r7, #3]
 80054a2:	4611      	mov	r1, r2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f002 fc2a 	bl	8007cfe <USB_ReadChInterrupts>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d144      	bne.n	800553e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	3344      	adds	r3, #68	@ 0x44
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	334d      	adds	r3, #77	@ 0x4d
 80054d8:	2204      	movs	r2, #4
 80054da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	3319      	adds	r3, #25
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d114      	bne.n	800551c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	3318      	adds	r3, #24
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d109      	bne.n	800551c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	440b      	add	r3, r1
 8005516:	3319      	adds	r3, #25
 8005518:	2201      	movs	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	78fa      	ldrb	r2, [r7, #3]
 8005522:	4611      	mov	r1, r2
 8005524:	4618      	mov	r0, r3
 8005526:	f002 fc67 	bl	8007df8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4413      	add	r3, r2
 8005532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005536:	461a      	mov	r2, r3
 8005538:	2310      	movs	r3, #16
 800553a:	6093      	str	r3, [r2, #8]
 800553c:	e28d      	b.n	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f002 fbd9 	bl	8007cfe <USB_ReadChInterrupts>
 800554c:	4603      	mov	r3, r0
 800554e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005552:	2b80      	cmp	r3, #128	@ 0x80
 8005554:	d169      	bne.n	800562a <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	799b      	ldrb	r3, [r3, #6]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d111      	bne.n	8005582 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	334d      	adds	r3, #77	@ 0x4d
 800556e:	2207      	movs	r2, #7
 8005570:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	4611      	mov	r1, r2
 800557a:	4618      	mov	r0, r3
 800557c:	f002 fc3c 	bl	8007df8 <USB_HC_Halt>
 8005580:	e049      	b.n	8005616 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	3344      	adds	r3, #68	@ 0x44
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	1c59      	adds	r1, r3, #1
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4403      	add	r3, r0
 80055a2:	3344      	adds	r3, #68	@ 0x44
 80055a4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	3344      	adds	r3, #68	@ 0x44
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d922      	bls.n	8005602 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	3344      	adds	r3, #68	@ 0x44
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	334c      	adds	r3, #76	@ 0x4c
 80055e0:	2204      	movs	r2, #4
 80055e2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80055e4:	78fa      	ldrb	r2, [r7, #3]
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4613      	mov	r3, r2
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	334c      	adds	r3, #76	@ 0x4c
 80055f4:	781a      	ldrb	r2, [r3, #0]
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f005 fe14 	bl	800b228 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005600:	e009      	b.n	8005616 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	334c      	adds	r3, #76	@ 0x4c
 8005612:	2202      	movs	r2, #2
 8005614:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	4413      	add	r3, r2
 800561e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005622:	461a      	mov	r2, r3
 8005624:	2380      	movs	r3, #128	@ 0x80
 8005626:	6093      	str	r3, [r2, #8]
 8005628:	e217      	b.n	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f002 fb63 	bl	8007cfe <USB_ReadChInterrupts>
 8005638:	4603      	mov	r3, r0
 800563a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005642:	d11b      	bne.n	800567c <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	334d      	adds	r3, #77	@ 0x4d
 8005654:	2209      	movs	r2, #9
 8005656:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f002 fbc9 	bl	8007df8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005672:	461a      	mov	r2, r3
 8005674:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005678:	6093      	str	r3, [r2, #8]
 800567a:	e1ee      	b.n	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	78fa      	ldrb	r2, [r7, #3]
 8005682:	4611      	mov	r1, r2
 8005684:	4618      	mov	r0, r3
 8005686:	f002 fb3a 	bl	8007cfe <USB_ReadChInterrupts>
 800568a:	4603      	mov	r3, r0
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b02      	cmp	r3, #2
 8005692:	f040 81df 	bne.w	8005a54 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4413      	add	r3, r2
 800569e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a2:	461a      	mov	r2, r3
 80056a4:	2302      	movs	r3, #2
 80056a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80056a8:	78fa      	ldrb	r2, [r7, #3]
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	334d      	adds	r3, #77	@ 0x4d
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	f040 8093 	bne.w	80057e6 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	334d      	adds	r3, #77	@ 0x4d
 80056d0:	2202      	movs	r2, #2
 80056d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	334c      	adds	r3, #76	@ 0x4c
 80056e4:	2201      	movs	r2, #1
 80056e6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80056e8:	78fa      	ldrb	r2, [r7, #3]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	3326      	adds	r3, #38	@ 0x26
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d00b      	beq.n	8005716 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	3326      	adds	r3, #38	@ 0x26
 800570e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005710:	2b03      	cmp	r3, #3
 8005712:	f040 8190 	bne.w	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	799b      	ldrb	r3, [r3, #6]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d115      	bne.n	800574a <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	333d      	adds	r3, #61	@ 0x3d
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	f083 0301 	eor.w	r3, r3, #1
 8005736:	b2d8      	uxtb	r0, r3
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	333d      	adds	r3, #61	@ 0x3d
 8005746:	4602      	mov	r2, r0
 8005748:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	799b      	ldrb	r3, [r3, #6]
 800574e:	2b01      	cmp	r3, #1
 8005750:	f040 8171 	bne.w	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	3334      	adds	r3, #52	@ 0x34
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8165 	beq.w	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800576c:	78fa      	ldrb	r2, [r7, #3]
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	3334      	adds	r3, #52	@ 0x34
 800577c:	6819      	ldr	r1, [r3, #0]
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4403      	add	r3, r0
 800578c:	3328      	adds	r3, #40	@ 0x28
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	440b      	add	r3, r1
 8005792:	1e59      	subs	r1, r3, #1
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4403      	add	r3, r0
 80057a2:	3328      	adds	r3, #40	@ 0x28
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80057aa:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 813f 	beq.w	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80057b8:	78fa      	ldrb	r2, [r7, #3]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	333d      	adds	r3, #61	@ 0x3d
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	f083 0301 	eor.w	r3, r3, #1
 80057d0:	b2d8      	uxtb	r0, r3
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	333d      	adds	r3, #61	@ 0x3d
 80057e0:	4602      	mov	r2, r0
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	e127      	b.n	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	334d      	adds	r3, #77	@ 0x4d
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d120      	bne.n	800583e <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	334d      	adds	r3, #77	@ 0x4d
 800580c:	2202      	movs	r2, #2
 800580e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4613      	mov	r3, r2
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	331b      	adds	r3, #27
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b01      	cmp	r3, #1
 8005824:	f040 8107 	bne.w	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	334c      	adds	r3, #76	@ 0x4c
 8005838:	2202      	movs	r2, #2
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	e0fb      	b.n	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800583e:	78fa      	ldrb	r2, [r7, #3]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	334d      	adds	r3, #77	@ 0x4d
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b04      	cmp	r3, #4
 8005852:	d13a      	bne.n	80058ca <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	334d      	adds	r3, #77	@ 0x4d
 8005864:	2202      	movs	r2, #2
 8005866:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005868:	78fa      	ldrb	r2, [r7, #3]
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	334c      	adds	r3, #76	@ 0x4c
 8005878:	2202      	movs	r2, #2
 800587a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	4613      	mov	r3, r2
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	1a9b      	subs	r3, r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	331b      	adds	r3, #27
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b01      	cmp	r3, #1
 8005890:	f040 80d1 	bne.w	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	331b      	adds	r3, #27
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	78fa      	ldrb	r2, [r7, #3]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058c6:	6053      	str	r3, [r2, #4]
 80058c8:	e0b5      	b.n	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80058ca:	78fa      	ldrb	r2, [r7, #3]
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	4613      	mov	r3, r2
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	334d      	adds	r3, #77	@ 0x4d
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b05      	cmp	r3, #5
 80058de:	d114      	bne.n	800590a <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4613      	mov	r3, r2
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	334d      	adds	r3, #77	@ 0x4d
 80058f0:	2202      	movs	r2, #2
 80058f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	334c      	adds	r3, #76	@ 0x4c
 8005904:	2202      	movs	r2, #2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e095      	b.n	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800590a:	78fa      	ldrb	r2, [r7, #3]
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	1a9b      	subs	r3, r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	334d      	adds	r3, #77	@ 0x4d
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b06      	cmp	r3, #6
 800591e:	d114      	bne.n	800594a <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005920:	78fa      	ldrb	r2, [r7, #3]
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	334d      	adds	r3, #77	@ 0x4d
 8005930:	2202      	movs	r2, #2
 8005932:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	334c      	adds	r3, #76	@ 0x4c
 8005944:	2205      	movs	r2, #5
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	e075      	b.n	8005a36 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800594a:	78fa      	ldrb	r2, [r7, #3]
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	334d      	adds	r3, #77	@ 0x4d
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b07      	cmp	r3, #7
 800595e:	d00a      	beq.n	8005976 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	334d      	adds	r3, #77	@ 0x4d
 8005970:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005972:	2b09      	cmp	r3, #9
 8005974:	d170      	bne.n	8005a58 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	334d      	adds	r3, #77	@ 0x4d
 8005986:	2202      	movs	r2, #2
 8005988:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	3344      	adds	r3, #68	@ 0x44
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	1c59      	adds	r1, r3, #1
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4403      	add	r3, r0
 80059aa:	3344      	adds	r3, #68	@ 0x44
 80059ac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	3344      	adds	r3, #68	@ 0x44
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d914      	bls.n	80059ee <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80059c4:	78fa      	ldrb	r2, [r7, #3]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	3344      	adds	r3, #68	@ 0x44
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	334c      	adds	r3, #76	@ 0x4c
 80059e8:	2204      	movs	r2, #4
 80059ea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059ec:	e022      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059ee:	78fa      	ldrb	r2, [r7, #3]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	334c      	adds	r3, #76	@ 0x4c
 80059fe:	2202      	movs	r2, #2
 8005a00:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a18:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a20:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a34:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	334c      	adds	r3, #76	@ 0x4c
 8005a46:	781a      	ldrb	r2, [r3, #0]
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f005 fbeb 	bl	800b228 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005a52:	e002      	b.n	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005a54:	bf00      	nop
 8005a56:	e000      	b.n	8005a5a <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005a58:	bf00      	nop
  }
}
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	@ 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	0c5b      	lsrs	r3, r3, #17
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	091b      	lsrs	r3, r3, #4
 8005a90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a94:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d004      	beq.n	8005aa6 <HCD_RXQLVL_IRQHandler+0x46>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	f000 80b6 	beq.w	8005c10 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005aa4:	e0b7      	b.n	8005c16 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80b3 	beq.w	8005c14 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	332c      	adds	r3, #44	@ 0x2c
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80a7 	beq.w	8005c14 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4613      	mov	r3, r2
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	3338      	adds	r3, #56	@ 0x38
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	18d1      	adds	r1, r2, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4403      	add	r3, r0
 8005aea:	3334      	adds	r3, #52	@ 0x34
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4299      	cmp	r1, r3
 8005af0:	f200 8083 	bhi.w	8005bfa <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4613      	mov	r3, r2
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	332c      	adds	r3, #44	@ 0x2c
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	b292      	uxth	r2, r2
 8005b0e:	4619      	mov	r1, r3
 8005b10:	f002 f88a 	bl	8007c28 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	332c      	adds	r3, #44	@ 0x2c
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	18d1      	adds	r1, r2, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4403      	add	r3, r0
 8005b38:	332c      	adds	r3, #44	@ 0x2c
 8005b3a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4613      	mov	r3, r2
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	3338      	adds	r3, #56	@ 0x38
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	18d1      	adds	r1, r2, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4613      	mov	r3, r2
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4403      	add	r3, r0
 8005b60:	3338      	adds	r3, #56	@ 0x38
 8005b62:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	0cdb      	lsrs	r3, r3, #19
 8005b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b78:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	3328      	adds	r3, #40	@ 0x28
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d13f      	bne.n	8005c14 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d03c      	beq.n	8005c14 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bb0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bb8:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	333c      	adds	r3, #60	@ 0x3c
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	f083 0301 	eor.w	r3, r3, #1
 8005be2:	b2d8      	uxtb	r0, r3
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4613      	mov	r3, r2
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	333c      	adds	r3, #60	@ 0x3c
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	701a      	strb	r2, [r3, #0]
      break;
 8005bf8:	e00c      	b.n	8005c14 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	334c      	adds	r3, #76	@ 0x4c
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	701a      	strb	r2, [r3, #0]
      break;
 8005c0e:	e001      	b.n	8005c14 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005c10:	bf00      	nop
 8005c12:	e000      	b.n	8005c16 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005c14:	bf00      	nop
  }
}
 8005c16:	bf00      	nop
 8005c18:	3728      	adds	r7, #40	@ 0x28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b086      	sub	sp, #24
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c4a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d10b      	bne.n	8005c6e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d102      	bne.n	8005c66 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f005 fac5 	bl	800b1f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f043 0302 	orr.w	r3, r3, #2
 8005c6c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d132      	bne.n	8005cde <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f043 0308 	orr.w	r3, r3, #8
 8005c7e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d126      	bne.n	8005cd8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	7a5b      	ldrb	r3, [r3, #9]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d113      	bne.n	8005cba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005c98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c9c:	d106      	bne.n	8005cac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2102      	movs	r1, #2
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f002 f859 	bl	8007d5c <USB_InitFSLSPClkSel>
 8005caa:	e011      	b.n	8005cd0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f002 f852 	bl	8007d5c <USB_InitFSLSPClkSel>
 8005cb8:	e00a      	b.n	8005cd0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	79db      	ldrb	r3, [r3, #7]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d106      	bne.n	8005cd0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005cce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f005 fabb 	bl	800b24c <HAL_HCD_PortEnabled_Callback>
 8005cd6:	e002      	b.n	8005cde <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f005 fac5 	bl	800b268 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d103      	bne.n	8005cf0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f043 0320 	orr.w	r3, r3, #32
 8005cee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6013      	str	r3, [r2, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e12b      	b.n	8005f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fa fec6 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2224      	movs	r2, #36	@ 0x24
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d68:	f001 fa20 	bl	80071ac <HAL_RCC_GetPCLK1Freq>
 8005d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	4a81      	ldr	r2, [pc, #516]	@ (8005f78 <HAL_I2C_Init+0x274>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d807      	bhi.n	8005d88 <HAL_I2C_Init+0x84>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4a80      	ldr	r2, [pc, #512]	@ (8005f7c <HAL_I2C_Init+0x278>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	bf94      	ite	ls
 8005d80:	2301      	movls	r3, #1
 8005d82:	2300      	movhi	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	e006      	b.n	8005d96 <HAL_I2C_Init+0x92>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4a7d      	ldr	r2, [pc, #500]	@ (8005f80 <HAL_I2C_Init+0x27c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	bf94      	ite	ls
 8005d90:	2301      	movls	r3, #1
 8005d92:	2300      	movhi	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e0e7      	b.n	8005f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a78      	ldr	r2, [pc, #480]	@ (8005f84 <HAL_I2C_Init+0x280>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	0c9b      	lsrs	r3, r3, #18
 8005da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8005f78 <HAL_I2C_Init+0x274>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d802      	bhi.n	8005dd8 <HAL_I2C_Init+0xd4>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	e009      	b.n	8005dec <HAL_I2C_Init+0xe8>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	4a69      	ldr	r2, [pc, #420]	@ (8005f88 <HAL_I2C_Init+0x284>)
 8005de4:	fba2 2303 	umull	r2, r3, r2, r3
 8005de8:	099b      	lsrs	r3, r3, #6
 8005dea:	3301      	adds	r3, #1
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	430b      	orrs	r3, r1
 8005df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005dfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	495c      	ldr	r1, [pc, #368]	@ (8005f78 <HAL_I2C_Init+0x274>)
 8005e08:	428b      	cmp	r3, r1
 8005e0a:	d819      	bhi.n	8005e40 <HAL_I2C_Init+0x13c>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	1e59      	subs	r1, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e1a:	1c59      	adds	r1, r3, #1
 8005e1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e20:	400b      	ands	r3, r1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <HAL_I2C_Init+0x138>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1e59      	subs	r1, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e34:	3301      	adds	r3, #1
 8005e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e3a:	e051      	b.n	8005ee0 <HAL_I2C_Init+0x1dc>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	e04f      	b.n	8005ee0 <HAL_I2C_Init+0x1dc>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d111      	bne.n	8005e6c <HAL_I2C_Init+0x168>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	1e58      	subs	r0, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	440b      	add	r3, r1
 8005e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf0c      	ite	eq
 8005e64:	2301      	moveq	r3, #1
 8005e66:	2300      	movne	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	e012      	b.n	8005e92 <HAL_I2C_Init+0x18e>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	1e58      	subs	r0, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6859      	ldr	r1, [r3, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	0099      	lsls	r1, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e82:	3301      	adds	r3, #1
 8005e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_I2C_Init+0x196>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e022      	b.n	8005ee0 <HAL_I2C_Init+0x1dc>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10e      	bne.n	8005ec0 <HAL_I2C_Init+0x1bc>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	1e58      	subs	r0, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6859      	ldr	r1, [r3, #4]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	440b      	add	r3, r1
 8005eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ebe:	e00f      	b.n	8005ee0 <HAL_I2C_Init+0x1dc>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1e58      	subs	r0, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6859      	ldr	r1, [r3, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	0099      	lsls	r1, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005edc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	6809      	ldr	r1, [r1, #0]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69da      	ldr	r2, [r3, #28]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6911      	ldr	r1, [r2, #16]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68d2      	ldr	r2, [r2, #12]
 8005f1a:	4311      	orrs	r1, r2
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6812      	ldr	r2, [r2, #0]
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	000186a0 	.word	0x000186a0
 8005f7c:	001e847f 	.word	0x001e847f
 8005f80:	003d08ff 	.word	0x003d08ff
 8005f84:	431bde83 	.word	0x431bde83
 8005f88:	10624dd3 	.word	0x10624dd3

08005f8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e128      	b.n	80061f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d109      	bne.n	8005fbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a90      	ldr	r2, [pc, #576]	@ (80061f8 <HAL_I2S_Init+0x26c>)
 8005fb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7fa fdc7 	bl	8000b4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005fd4:	f023 030f 	bic.w	r3, r3, #15
 8005fd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d060      	beq.n	80060ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d102      	bne.n	8005ff8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005ff2:	2310      	movs	r3, #16
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	e001      	b.n	8005ffc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005ff8:	2320      	movs	r3, #32
 8005ffa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b20      	cmp	r3, #32
 8006002:	d802      	bhi.n	800600a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800600a:	2001      	movs	r0, #1
 800600c:	f001 fa0a 	bl	8007424 <HAL_RCCEx_GetPeriphCLKFreq>
 8006010:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800601a:	d125      	bne.n	8006068 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d010      	beq.n	8006046 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	fbb2 f2f3 	udiv	r2, r2, r3
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006040:	3305      	adds	r3, #5
 8006042:	613b      	str	r3, [r7, #16]
 8006044:	e01f      	b.n	8006086 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	461a      	mov	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006062:	3305      	adds	r3, #5
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	e00e      	b.n	8006086 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	461a      	mov	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	3305      	adds	r3, #5
 8006084:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4a5c      	ldr	r2, [pc, #368]	@ (80061fc <HAL_I2S_Init+0x270>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	08db      	lsrs	r3, r3, #3
 8006090:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	085b      	lsrs	r3, r3, #1
 80060a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	e003      	b.n	80060b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80060ac:	2302      	movs	r3, #2
 80060ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d902      	bls.n	80060c0 <HAL_I2S_Init+0x134>
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	2bff      	cmp	r3, #255	@ 0xff
 80060be:	d907      	bls.n	80060d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c4:	f043 0210 	orr.w	r2, r3, #16
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e08f      	b.n	80061f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	ea42 0103 	orr.w	r1, r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80060ee:	f023 030f 	bic.w	r3, r3, #15
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6851      	ldr	r1, [r2, #4]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6892      	ldr	r2, [r2, #8]
 80060fa:	4311      	orrs	r1, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	68d2      	ldr	r2, [r2, #12]
 8006100:	4311      	orrs	r1, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6992      	ldr	r2, [r2, #24]
 8006106:	430a      	orrs	r2, r1
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006112:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d161      	bne.n	80061e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a38      	ldr	r2, [pc, #224]	@ (8006200 <HAL_I2S_Init+0x274>)
 8006120:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a37      	ldr	r2, [pc, #220]	@ (8006204 <HAL_I2S_Init+0x278>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d101      	bne.n	8006130 <HAL_I2S_Init+0x1a4>
 800612c:	4b36      	ldr	r3, [pc, #216]	@ (8006208 <HAL_I2S_Init+0x27c>)
 800612e:	e001      	b.n	8006134 <HAL_I2S_Init+0x1a8>
 8006130:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	4932      	ldr	r1, [pc, #200]	@ (8006204 <HAL_I2S_Init+0x278>)
 800613c:	428a      	cmp	r2, r1
 800613e:	d101      	bne.n	8006144 <HAL_I2S_Init+0x1b8>
 8006140:	4a31      	ldr	r2, [pc, #196]	@ (8006208 <HAL_I2S_Init+0x27c>)
 8006142:	e001      	b.n	8006148 <HAL_I2S_Init+0x1bc>
 8006144:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006148:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800614c:	f023 030f 	bic.w	r3, r3, #15
 8006150:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a2b      	ldr	r2, [pc, #172]	@ (8006204 <HAL_I2S_Init+0x278>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d101      	bne.n	8006160 <HAL_I2S_Init+0x1d4>
 800615c:	4b2a      	ldr	r3, [pc, #168]	@ (8006208 <HAL_I2S_Init+0x27c>)
 800615e:	e001      	b.n	8006164 <HAL_I2S_Init+0x1d8>
 8006160:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006164:	2202      	movs	r2, #2
 8006166:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a25      	ldr	r2, [pc, #148]	@ (8006204 <HAL_I2S_Init+0x278>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d101      	bne.n	8006176 <HAL_I2S_Init+0x1ea>
 8006172:	4b25      	ldr	r3, [pc, #148]	@ (8006208 <HAL_I2S_Init+0x27c>)
 8006174:	e001      	b.n	800617a <HAL_I2S_Init+0x1ee>
 8006176:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006186:	d003      	beq.n	8006190 <HAL_I2S_Init+0x204>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d103      	bne.n	8006198 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	e001      	b.n	800619c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006198:	2300      	movs	r3, #0
 800619a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80061a6:	4313      	orrs	r3, r2
 80061a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80061b0:	4313      	orrs	r3, r2
 80061b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80061ba:	4313      	orrs	r3, r2
 80061bc:	b29a      	uxth	r2, r3
 80061be:	897b      	ldrh	r3, [r7, #10]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80061c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006204 <HAL_I2S_Init+0x278>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d101      	bne.n	80061d8 <HAL_I2S_Init+0x24c>
 80061d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006208 <HAL_I2S_Init+0x27c>)
 80061d6:	e001      	b.n	80061dc <HAL_I2S_Init+0x250>
 80061d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061dc:	897a      	ldrh	r2, [r7, #10]
 80061de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	08006303 	.word	0x08006303
 80061fc:	cccccccd 	.word	0xcccccccd
 8006200:	08006419 	.word	0x08006419
 8006204:	40003800 	.word	0x40003800
 8006208:	40003400 	.word	0x40003400

0800620c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006254:	881a      	ldrh	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006260:	1c9a      	adds	r2, r3, #2
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b01      	subs	r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10e      	bne.n	800629c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800628c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff ffb8 	bl	800620c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	b292      	uxth	r2, r2
 80062b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	1c9a      	adds	r2, r3, #2
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10e      	bne.n	80062fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff ff93 	bl	8006220 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b086      	sub	sp, #24
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b04      	cmp	r3, #4
 800631c:	d13a      	bne.n	8006394 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b01      	cmp	r3, #1
 8006326:	d109      	bne.n	800633c <I2S_IRQHandler+0x3a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006332:	2b40      	cmp	r3, #64	@ 0x40
 8006334:	d102      	bne.n	800633c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff ffb4 	bl	80062a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006342:	2b40      	cmp	r3, #64	@ 0x40
 8006344:	d126      	bne.n	8006394 <I2S_IRQHandler+0x92>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b20      	cmp	r3, #32
 8006352:	d11f      	bne.n	8006394 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006362:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	f043 0202 	orr.w	r2, r3, #2
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff ff50 	bl	8006234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b03      	cmp	r3, #3
 800639e:	d136      	bne.n	800640e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d109      	bne.n	80063be <I2S_IRQHandler+0xbc>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b4:	2b80      	cmp	r3, #128	@ 0x80
 80063b6:	d102      	bne.n	80063be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7ff ff45 	bl	8006248 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d122      	bne.n	800640e <I2S_IRQHandler+0x10c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d11b      	bne.n	800640e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80063e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006400:	f043 0204 	orr.w	r2, r3, #4
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff ff13 	bl	8006234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800640e:	bf00      	nop
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a92      	ldr	r2, [pc, #584]	@ (8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d101      	bne.n	8006436 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006432:	4b92      	ldr	r3, [pc, #584]	@ (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006434:	e001      	b.n	800643a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006436:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a8b      	ldr	r2, [pc, #556]	@ (8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d101      	bne.n	8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006450:	4b8a      	ldr	r3, [pc, #552]	@ (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006452:	e001      	b.n	8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006454:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006464:	d004      	beq.n	8006470 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f040 8099 	bne.w	80065a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b02      	cmp	r3, #2
 8006478:	d107      	bne.n	800648a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f925 	bl	80066d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b01      	cmp	r3, #1
 8006492:	d107      	bne.n	80064a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f9c8 	bl	8006834 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064aa:	2b40      	cmp	r3, #64	@ 0x40
 80064ac:	d13a      	bne.n	8006524 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d035      	beq.n	8006524 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a6e      	ldr	r2, [pc, #440]	@ (8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d101      	bne.n	80064c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80064c2:	4b6e      	ldr	r3, [pc, #440]	@ (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064c4:	e001      	b.n	80064ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80064c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4969      	ldr	r1, [pc, #420]	@ (8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064d2:	428b      	cmp	r3, r1
 80064d4:	d101      	bne.n	80064da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80064d6:	4b69      	ldr	r3, [pc, #420]	@ (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064d8:	e001      	b.n	80064de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80064da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80064e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006516:	f043 0202 	orr.w	r2, r3, #2
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff fe88 	bl	8006234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b08      	cmp	r3, #8
 800652c:	f040 80c3 	bne.w	80066b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 80bd 	beq.w	80066b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800654a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a49      	ldr	r2, [pc, #292]	@ (8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d101      	bne.n	800655a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006556:	4b49      	ldr	r3, [pc, #292]	@ (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006558:	e001      	b.n	800655e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800655a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4944      	ldr	r1, [pc, #272]	@ (8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006566:	428b      	cmp	r3, r1
 8006568:	d101      	bne.n	800656e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800656a:	4b44      	ldr	r3, [pc, #272]	@ (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800656c:	e001      	b.n	8006572 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800656e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006572:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006576:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006578:	2300      	movs	r3, #0
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006592:	f043 0204 	orr.w	r2, r3, #4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff fe4a 	bl	8006234 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065a0:	e089      	b.n	80066b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d107      	bne.n	80065bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8be 	bl	8006738 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d107      	bne.n	80065d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f8fd 	bl	80067d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065dc:	2b40      	cmp	r3, #64	@ 0x40
 80065de:	d12f      	bne.n	8006640 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d02a      	beq.n	8006640 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d101      	bne.n	8006608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006604:	4b1d      	ldr	r3, [pc, #116]	@ (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006606:	e001      	b.n	800660c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006608:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4919      	ldr	r1, [pc, #100]	@ (8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006614:	428b      	cmp	r3, r1
 8006616:	d101      	bne.n	800661c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006618:	4b18      	ldr	r3, [pc, #96]	@ (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800661a:	e001      	b.n	8006620 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800661c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006620:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006624:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006632:	f043 0202 	orr.w	r2, r3, #2
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff fdfa 	bl	8006234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b08      	cmp	r3, #8
 8006648:	d136      	bne.n	80066b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d031      	beq.n	80066b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a07      	ldr	r2, [pc, #28]	@ (8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d101      	bne.n	8006662 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800665e:	4b07      	ldr	r3, [pc, #28]	@ (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006660:	e001      	b.n	8006666 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006662:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4902      	ldr	r1, [pc, #8]	@ (8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800666e:	428b      	cmp	r3, r1
 8006670:	d106      	bne.n	8006680 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006672:	4b02      	ldr	r3, [pc, #8]	@ (800667c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006674:	e006      	b.n	8006684 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006676:	bf00      	nop
 8006678:	40003800 	.word	0x40003800
 800667c:	40003400 	.word	0x40003400
 8006680:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006684:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006688:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006698:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a6:	f043 0204 	orr.w	r2, r3, #4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fdc0 	bl	8006234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066b4:	e000      	b.n	80066b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066b6:	bf00      	nop
}
 80066b8:	bf00      	nop
 80066ba:	3720      	adds	r7, #32
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	1c99      	adds	r1, r3, #2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80066e6:	881a      	ldrh	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006700:	b29b      	uxth	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d113      	bne.n	800672e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006714:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d106      	bne.n	800672e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ffc9 	bl	80066c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	1c99      	adds	r1, r3, #2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6251      	str	r1, [r2, #36]	@ 0x24
 800674a:	8819      	ldrh	r1, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a1d      	ldr	r2, [pc, #116]	@ (80067c8 <I2SEx_TxISR_I2SExt+0x90>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d101      	bne.n	800675a <I2SEx_TxISR_I2SExt+0x22>
 8006756:	4b1d      	ldr	r3, [pc, #116]	@ (80067cc <I2SEx_TxISR_I2SExt+0x94>)
 8006758:	e001      	b.n	800675e <I2SEx_TxISR_I2SExt+0x26>
 800675a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800675e:	460a      	mov	r2, r1
 8006760:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006766:	b29b      	uxth	r3, r3
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d121      	bne.n	80067be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a12      	ldr	r2, [pc, #72]	@ (80067c8 <I2SEx_TxISR_I2SExt+0x90>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d101      	bne.n	8006788 <I2SEx_TxISR_I2SExt+0x50>
 8006784:	4b11      	ldr	r3, [pc, #68]	@ (80067cc <I2SEx_TxISR_I2SExt+0x94>)
 8006786:	e001      	b.n	800678c <I2SEx_TxISR_I2SExt+0x54>
 8006788:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	490d      	ldr	r1, [pc, #52]	@ (80067c8 <I2SEx_TxISR_I2SExt+0x90>)
 8006794:	428b      	cmp	r3, r1
 8006796:	d101      	bne.n	800679c <I2SEx_TxISR_I2SExt+0x64>
 8006798:	4b0c      	ldr	r3, [pc, #48]	@ (80067cc <I2SEx_TxISR_I2SExt+0x94>)
 800679a:	e001      	b.n	80067a0 <I2SEx_TxISR_I2SExt+0x68>
 800679c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80067a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff ff81 	bl	80066c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40003800 	.word	0x40003800
 80067cc:	40003400 	.word	0x40003400

080067d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68d8      	ldr	r0, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e2:	1c99      	adds	r1, r3, #2
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80067e8:	b282      	uxth	r2, r0
 80067ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d113      	bne.n	800682c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006812:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ff4a 	bl	80066c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a20      	ldr	r2, [pc, #128]	@ (80068c4 <I2SEx_RxISR_I2SExt+0x90>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <I2SEx_RxISR_I2SExt+0x16>
 8006846:	4b20      	ldr	r3, [pc, #128]	@ (80068c8 <I2SEx_RxISR_I2SExt+0x94>)
 8006848:	e001      	b.n	800684e <I2SEx_RxISR_I2SExt+0x1a>
 800684a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800684e:	68d8      	ldr	r0, [r3, #12]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	1c99      	adds	r1, r3, #2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800685a:	b282      	uxth	r2, r0
 800685c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d121      	bne.n	80068ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a12      	ldr	r2, [pc, #72]	@ (80068c4 <I2SEx_RxISR_I2SExt+0x90>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d101      	bne.n	8006884 <I2SEx_RxISR_I2SExt+0x50>
 8006880:	4b11      	ldr	r3, [pc, #68]	@ (80068c8 <I2SEx_RxISR_I2SExt+0x94>)
 8006882:	e001      	b.n	8006888 <I2SEx_RxISR_I2SExt+0x54>
 8006884:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	490d      	ldr	r1, [pc, #52]	@ (80068c4 <I2SEx_RxISR_I2SExt+0x90>)
 8006890:	428b      	cmp	r3, r1
 8006892:	d101      	bne.n	8006898 <I2SEx_RxISR_I2SExt+0x64>
 8006894:	4b0c      	ldr	r3, [pc, #48]	@ (80068c8 <I2SEx_RxISR_I2SExt+0x94>)
 8006896:	e001      	b.n	800689c <I2SEx_RxISR_I2SExt+0x68>
 8006898:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800689c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80068a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d106      	bne.n	80068ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff ff03 	bl	80066c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40003800 	.word	0x40003800
 80068c8:	40003400 	.word	0x40003400

080068cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e267      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d075      	beq.n	80069d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068ea:	4b88      	ldr	r3, [pc, #544]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 030c 	and.w	r3, r3, #12
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d00c      	beq.n	8006910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068f6:	4b85      	ldr	r3, [pc, #532]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d112      	bne.n	8006928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006902:	4b82      	ldr	r3, [pc, #520]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800690a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800690e:	d10b      	bne.n	8006928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006910:	4b7e      	ldr	r3, [pc, #504]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d05b      	beq.n	80069d4 <HAL_RCC_OscConfig+0x108>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d157      	bne.n	80069d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e242      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006930:	d106      	bne.n	8006940 <HAL_RCC_OscConfig+0x74>
 8006932:	4b76      	ldr	r3, [pc, #472]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a75      	ldr	r2, [pc, #468]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	e01d      	b.n	800697c <HAL_RCC_OscConfig+0xb0>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006948:	d10c      	bne.n	8006964 <HAL_RCC_OscConfig+0x98>
 800694a:	4b70      	ldr	r3, [pc, #448]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a6f      	ldr	r2, [pc, #444]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	4b6d      	ldr	r3, [pc, #436]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a6c      	ldr	r2, [pc, #432]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 800695c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	e00b      	b.n	800697c <HAL_RCC_OscConfig+0xb0>
 8006964:	4b69      	ldr	r3, [pc, #420]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a68      	ldr	r2, [pc, #416]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 800696a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	4b66      	ldr	r3, [pc, #408]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a65      	ldr	r2, [pc, #404]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800697a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d013      	beq.n	80069ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006984:	f7fd f974 	bl	8003c70 <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800698c:	f7fd f970 	bl	8003c70 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b64      	cmp	r3, #100	@ 0x64
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e207      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699e:	4b5b      	ldr	r3, [pc, #364]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCC_OscConfig+0xc0>
 80069aa:	e014      	b.n	80069d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ac:	f7fd f960 	bl	8003c70 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069b2:	e008      	b.n	80069c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069b4:	f7fd f95c 	bl	8003c70 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b64      	cmp	r3, #100	@ 0x64
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e1f3      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c6:	4b51      	ldr	r3, [pc, #324]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1f0      	bne.n	80069b4 <HAL_RCC_OscConfig+0xe8>
 80069d2:	e000      	b.n	80069d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d063      	beq.n	8006aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069e2:	4b4a      	ldr	r3, [pc, #296]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 030c 	and.w	r3, r3, #12
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ee:	4b47      	ldr	r3, [pc, #284]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d11c      	bne.n	8006a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069fa:	4b44      	ldr	r3, [pc, #272]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d116      	bne.n	8006a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a06:	4b41      	ldr	r3, [pc, #260]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <HAL_RCC_OscConfig+0x152>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d001      	beq.n	8006a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e1c7      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	4937      	ldr	r1, [pc, #220]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a32:	e03a      	b.n	8006aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d020      	beq.n	8006a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a3c:	4b34      	ldr	r3, [pc, #208]	@ (8006b10 <HAL_RCC_OscConfig+0x244>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a42:	f7fd f915 	bl	8003c70 <HAL_GetTick>
 8006a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a4a:	f7fd f911 	bl	8003c70 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e1a8      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0f0      	beq.n	8006a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a68:	4b28      	ldr	r3, [pc, #160]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	4925      	ldr	r1, [pc, #148]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	600b      	str	r3, [r1, #0]
 8006a7c:	e015      	b.n	8006aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a7e:	4b24      	ldr	r3, [pc, #144]	@ (8006b10 <HAL_RCC_OscConfig+0x244>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a84:	f7fd f8f4 	bl	8003c70 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a8c:	f7fd f8f0 	bl	8003c70 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e187      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1f0      	bne.n	8006a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d036      	beq.n	8006b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d016      	beq.n	8006aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006abe:	4b15      	ldr	r3, [pc, #84]	@ (8006b14 <HAL_RCC_OscConfig+0x248>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac4:	f7fd f8d4 	bl	8003c70 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006acc:	f7fd f8d0 	bl	8003c70 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e167      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ade:	4b0b      	ldr	r3, [pc, #44]	@ (8006b0c <HAL_RCC_OscConfig+0x240>)
 8006ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f0      	beq.n	8006acc <HAL_RCC_OscConfig+0x200>
 8006aea:	e01b      	b.n	8006b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aec:	4b09      	ldr	r3, [pc, #36]	@ (8006b14 <HAL_RCC_OscConfig+0x248>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af2:	f7fd f8bd 	bl	8003c70 <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006af8:	e00e      	b.n	8006b18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006afa:	f7fd f8b9 	bl	8003c70 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d907      	bls.n	8006b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e150      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	42470000 	.word	0x42470000
 8006b14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b18:	4b88      	ldr	r3, [pc, #544]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1ea      	bne.n	8006afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8097 	beq.w	8006c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b32:	2300      	movs	r3, #0
 8006b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b36:	4b81      	ldr	r3, [pc, #516]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10f      	bne.n	8006b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b42:	2300      	movs	r3, #0
 8006b44:	60bb      	str	r3, [r7, #8]
 8006b46:	4b7d      	ldr	r3, [pc, #500]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b52:	4b7a      	ldr	r3, [pc, #488]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b5a:	60bb      	str	r3, [r7, #8]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b62:	4b77      	ldr	r3, [pc, #476]	@ (8006d40 <HAL_RCC_OscConfig+0x474>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d118      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b6e:	4b74      	ldr	r3, [pc, #464]	@ (8006d40 <HAL_RCC_OscConfig+0x474>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a73      	ldr	r2, [pc, #460]	@ (8006d40 <HAL_RCC_OscConfig+0x474>)
 8006b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b7a:	f7fd f879 	bl	8003c70 <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b80:	e008      	b.n	8006b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b82:	f7fd f875 	bl	8003c70 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e10c      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b94:	4b6a      	ldr	r3, [pc, #424]	@ (8006d40 <HAL_RCC_OscConfig+0x474>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0f0      	beq.n	8006b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d106      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x2ea>
 8006ba8:	4b64      	ldr	r3, [pc, #400]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bac:	4a63      	ldr	r2, [pc, #396]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bb4:	e01c      	b.n	8006bf0 <HAL_RCC_OscConfig+0x324>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b05      	cmp	r3, #5
 8006bbc:	d10c      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x30c>
 8006bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006bc4:	f043 0304 	orr.w	r3, r3, #4
 8006bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bca:	4b5c      	ldr	r3, [pc, #368]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bce:	4a5b      	ldr	r2, [pc, #364]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006bd0:	f043 0301 	orr.w	r3, r3, #1
 8006bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bd6:	e00b      	b.n	8006bf0 <HAL_RCC_OscConfig+0x324>
 8006bd8:	4b58      	ldr	r3, [pc, #352]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bdc:	4a57      	ldr	r2, [pc, #348]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006bde:	f023 0301 	bic.w	r3, r3, #1
 8006be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006be4:	4b55      	ldr	r3, [pc, #340]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be8:	4a54      	ldr	r2, [pc, #336]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006bea:	f023 0304 	bic.w	r3, r3, #4
 8006bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d015      	beq.n	8006c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf8:	f7fd f83a 	bl	8003c70 <HAL_GetTick>
 8006bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bfe:	e00a      	b.n	8006c16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c00:	f7fd f836 	bl	8003c70 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e0cb      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c16:	4b49      	ldr	r3, [pc, #292]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0ee      	beq.n	8006c00 <HAL_RCC_OscConfig+0x334>
 8006c22:	e014      	b.n	8006c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c24:	f7fd f824 	bl	8003c70 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c2a:	e00a      	b.n	8006c42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c2c:	f7fd f820 	bl	8003c70 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e0b5      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c42:	4b3e      	ldr	r3, [pc, #248]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1ee      	bne.n	8006c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d105      	bne.n	8006c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c54:	4b39      	ldr	r3, [pc, #228]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c58:	4a38      	ldr	r2, [pc, #224]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80a1 	beq.w	8006dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c6a:	4b34      	ldr	r3, [pc, #208]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 030c 	and.w	r3, r3, #12
 8006c72:	2b08      	cmp	r3, #8
 8006c74:	d05c      	beq.n	8006d30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d141      	bne.n	8006d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c7e:	4b31      	ldr	r3, [pc, #196]	@ (8006d44 <HAL_RCC_OscConfig+0x478>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c84:	f7fc fff4 	bl	8003c70 <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c8c:	f7fc fff0 	bl	8003c70 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e087      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9e:	4b27      	ldr	r3, [pc, #156]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f0      	bne.n	8006c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69da      	ldr	r2, [r3, #28]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	019b      	lsls	r3, r3, #6
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	041b      	lsls	r3, r3, #16
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ccc:	061b      	lsls	r3, r3, #24
 8006cce:	491b      	ldr	r1, [pc, #108]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d44 <HAL_RCC_OscConfig+0x478>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cda:	f7fc ffc9 	bl	8003c70 <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ce2:	f7fc ffc5 	bl	8003c70 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e05c      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf4:	4b11      	ldr	r3, [pc, #68]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0f0      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x416>
 8006d00:	e054      	b.n	8006dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d02:	4b10      	ldr	r3, [pc, #64]	@ (8006d44 <HAL_RCC_OscConfig+0x478>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d08:	f7fc ffb2 	bl	8003c70 <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d10:	f7fc ffae 	bl	8003c70 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e045      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d22:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <HAL_RCC_OscConfig+0x470>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1f0      	bne.n	8006d10 <HAL_RCC_OscConfig+0x444>
 8006d2e:	e03d      	b.n	8006dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d107      	bne.n	8006d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e038      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	40007000 	.word	0x40007000
 8006d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d48:	4b1b      	ldr	r3, [pc, #108]	@ (8006db8 <HAL_RCC_OscConfig+0x4ec>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d028      	beq.n	8006da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d121      	bne.n	8006da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d11a      	bne.n	8006da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d78:	4013      	ands	r3, r2
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d111      	bne.n	8006da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	3b01      	subs	r3, #1
 8006d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d107      	bne.n	8006da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d001      	beq.n	8006dac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	40023800 	.word	0x40023800

08006dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0cc      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dd0:	4b68      	ldr	r3, [pc, #416]	@ (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d90c      	bls.n	8006df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dde:	4b65      	ldr	r3, [pc, #404]	@ (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de6:	4b63      	ldr	r3, [pc, #396]	@ (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d001      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0b8      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d020      	beq.n	8006e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d005      	beq.n	8006e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e10:	4b59      	ldr	r3, [pc, #356]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	4a58      	ldr	r2, [pc, #352]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e28:	4b53      	ldr	r3, [pc, #332]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4a52      	ldr	r2, [pc, #328]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e34:	4b50      	ldr	r3, [pc, #320]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	494d      	ldr	r1, [pc, #308]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d044      	beq.n	8006edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d107      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5a:	4b47      	ldr	r3, [pc, #284]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d119      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e07f      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d003      	beq.n	8006e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d107      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e06f      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e067      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e9a:	4b37      	ldr	r3, [pc, #220]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f023 0203 	bic.w	r2, r3, #3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	4934      	ldr	r1, [pc, #208]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006eac:	f7fc fee0 	bl	8003c70 <HAL_GetTick>
 8006eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eb2:	e00a      	b.n	8006eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb4:	f7fc fedc 	bl	8003c70 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e04f      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eca:	4b2b      	ldr	r3, [pc, #172]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 020c 	and.w	r2, r3, #12
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d1eb      	bne.n	8006eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006edc:	4b25      	ldr	r3, [pc, #148]	@ (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d20c      	bcs.n	8006f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	4b22      	ldr	r3, [pc, #136]	@ (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef2:	4b20      	ldr	r3, [pc, #128]	@ (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d001      	beq.n	8006f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e032      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f10:	4b19      	ldr	r3, [pc, #100]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	4916      	ldr	r1, [pc, #88]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d009      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f2e:	4b12      	ldr	r3, [pc, #72]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	490e      	ldr	r1, [pc, #56]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f42:	f000 f821 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 8006f46:	4602      	mov	r2, r0
 8006f48:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	091b      	lsrs	r3, r3, #4
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	490a      	ldr	r1, [pc, #40]	@ (8006f7c <HAL_RCC_ClockConfig+0x1c0>)
 8006f54:	5ccb      	ldrb	r3, [r1, r3]
 8006f56:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5a:	4a09      	ldr	r2, [pc, #36]	@ (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f5e:	4b09      	ldr	r3, [pc, #36]	@ (8006f84 <HAL_RCC_ClockConfig+0x1c8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7f9 fedc 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	40023c00 	.word	0x40023c00
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	0800b758 	.word	0x0800b758
 8006f80:	20000004 	.word	0x20000004
 8006f84:	20000008 	.word	0x20000008

08006f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f8c:	b094      	sub	sp, #80	@ 0x50
 8006f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f94:	2300      	movs	r3, #0
 8006f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f98:	2300      	movs	r3, #0
 8006f9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fa0:	4b79      	ldr	r3, [pc, #484]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 030c 	and.w	r3, r3, #12
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d00d      	beq.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	f200 80e1 	bhi.w	8007174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_RCC_GetSysClockFreq+0x34>
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d003      	beq.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fba:	e0db      	b.n	8007174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fbc:	4b73      	ldr	r3, [pc, #460]	@ (800718c <HAL_RCC_GetSysClockFreq+0x204>)
 8006fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006fc0:	e0db      	b.n	800717a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fc2:	4b73      	ldr	r3, [pc, #460]	@ (8007190 <HAL_RCC_GetSysClockFreq+0x208>)
 8006fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fc6:	e0d8      	b.n	800717a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d063      	beq.n	80070a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fde:	4b6a      	ldr	r3, [pc, #424]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	099b      	lsrs	r3, r3, #6
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	f04f 0000 	mov.w	r0, #0
 8007002:	f04f 0100 	mov.w	r1, #0
 8007006:	0159      	lsls	r1, r3, #5
 8007008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800700c:	0150      	lsls	r0, r2, #5
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4621      	mov	r1, r4
 8007014:	1a51      	subs	r1, r2, r1
 8007016:	6139      	str	r1, [r7, #16]
 8007018:	4629      	mov	r1, r5
 800701a:	eb63 0301 	sbc.w	r3, r3, r1
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	f04f 0300 	mov.w	r3, #0
 8007028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800702c:	4659      	mov	r1, fp
 800702e:	018b      	lsls	r3, r1, #6
 8007030:	4651      	mov	r1, sl
 8007032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007036:	4651      	mov	r1, sl
 8007038:	018a      	lsls	r2, r1, #6
 800703a:	4651      	mov	r1, sl
 800703c:	ebb2 0801 	subs.w	r8, r2, r1
 8007040:	4659      	mov	r1, fp
 8007042:	eb63 0901 	sbc.w	r9, r3, r1
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	f04f 0300 	mov.w	r3, #0
 800704e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800705a:	4690      	mov	r8, r2
 800705c:	4699      	mov	r9, r3
 800705e:	4623      	mov	r3, r4
 8007060:	eb18 0303 	adds.w	r3, r8, r3
 8007064:	60bb      	str	r3, [r7, #8]
 8007066:	462b      	mov	r3, r5
 8007068:	eb49 0303 	adc.w	r3, r9, r3
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800707a:	4629      	mov	r1, r5
 800707c:	024b      	lsls	r3, r1, #9
 800707e:	4621      	mov	r1, r4
 8007080:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007084:	4621      	mov	r1, r4
 8007086:	024a      	lsls	r2, r1, #9
 8007088:	4610      	mov	r0, r2
 800708a:	4619      	mov	r1, r3
 800708c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800708e:	2200      	movs	r2, #0
 8007090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007098:	f7f9 f89a 	bl	80001d0 <__aeabi_uldivmod>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4613      	mov	r3, r2
 80070a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070a4:	e058      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070a6:	4b38      	ldr	r3, [pc, #224]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x200>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	099b      	lsrs	r3, r3, #6
 80070ac:	2200      	movs	r2, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	4611      	mov	r1, r2
 80070b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070b6:	623b      	str	r3, [r7, #32]
 80070b8:	2300      	movs	r3, #0
 80070ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80070bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	f04f 0000 	mov.w	r0, #0
 80070c8:	f04f 0100 	mov.w	r1, #0
 80070cc:	0159      	lsls	r1, r3, #5
 80070ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070d2:	0150      	lsls	r0, r2, #5
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4641      	mov	r1, r8
 80070da:	ebb2 0a01 	subs.w	sl, r2, r1
 80070de:	4649      	mov	r1, r9
 80070e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070f8:	ebb2 040a 	subs.w	r4, r2, sl
 80070fc:	eb63 050b 	sbc.w	r5, r3, fp
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	00eb      	lsls	r3, r5, #3
 800710a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800710e:	00e2      	lsls	r2, r4, #3
 8007110:	4614      	mov	r4, r2
 8007112:	461d      	mov	r5, r3
 8007114:	4643      	mov	r3, r8
 8007116:	18e3      	adds	r3, r4, r3
 8007118:	603b      	str	r3, [r7, #0]
 800711a:	464b      	mov	r3, r9
 800711c:	eb45 0303 	adc.w	r3, r5, r3
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800712e:	4629      	mov	r1, r5
 8007130:	028b      	lsls	r3, r1, #10
 8007132:	4621      	mov	r1, r4
 8007134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007138:	4621      	mov	r1, r4
 800713a:	028a      	lsls	r2, r1, #10
 800713c:	4610      	mov	r0, r2
 800713e:	4619      	mov	r1, r3
 8007140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007142:	2200      	movs	r2, #0
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	61fa      	str	r2, [r7, #28]
 8007148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800714c:	f7f9 f840 	bl	80001d0 <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4613      	mov	r3, r2
 8007156:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007158:	4b0b      	ldr	r3, [pc, #44]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x200>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	0c1b      	lsrs	r3, r3, #16
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	3301      	adds	r3, #1
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800716a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007170:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007172:	e002      	b.n	800717a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007174:	4b05      	ldr	r3, [pc, #20]	@ (800718c <HAL_RCC_GetSysClockFreq+0x204>)
 8007176:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800717a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800717c:	4618      	mov	r0, r3
 800717e:	3750      	adds	r7, #80	@ 0x50
 8007180:	46bd      	mov	sp, r7
 8007182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007186:	bf00      	nop
 8007188:	40023800 	.word	0x40023800
 800718c:	00f42400 	.word	0x00f42400
 8007190:	007a1200 	.word	0x007a1200

08007194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007198:	4b03      	ldr	r3, [pc, #12]	@ (80071a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800719a:	681b      	ldr	r3, [r3, #0]
}
 800719c:	4618      	mov	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000004 	.word	0x20000004

080071ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071b0:	f7ff fff0 	bl	8007194 <HAL_RCC_GetHCLKFreq>
 80071b4:	4602      	mov	r2, r0
 80071b6:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	0a9b      	lsrs	r3, r3, #10
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	4903      	ldr	r1, [pc, #12]	@ (80071d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071c2:	5ccb      	ldrb	r3, [r1, r3]
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	40023800 	.word	0x40023800
 80071d0:	0800b768 	.word	0x0800b768

080071d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071d8:	f7ff ffdc 	bl	8007194 <HAL_RCC_GetHCLKFreq>
 80071dc:	4602      	mov	r2, r0
 80071de:	4b05      	ldr	r3, [pc, #20]	@ (80071f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	0b5b      	lsrs	r3, r3, #13
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	4903      	ldr	r1, [pc, #12]	@ (80071f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ea:	5ccb      	ldrb	r3, [r1, r3]
 80071ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40023800 	.word	0x40023800
 80071f8:	0800b768 	.word	0x0800b768

080071fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	220f      	movs	r2, #15
 800720a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800720c:	4b12      	ldr	r3, [pc, #72]	@ (8007258 <HAL_RCC_GetClockConfig+0x5c>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 0203 	and.w	r2, r3, #3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007218:	4b0f      	ldr	r3, [pc, #60]	@ (8007258 <HAL_RCC_GetClockConfig+0x5c>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007224:	4b0c      	ldr	r3, [pc, #48]	@ (8007258 <HAL_RCC_GetClockConfig+0x5c>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007230:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <HAL_RCC_GetClockConfig+0x5c>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	08db      	lsrs	r3, r3, #3
 8007236:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800723e:	4b07      	ldr	r3, [pc, #28]	@ (800725c <HAL_RCC_GetClockConfig+0x60>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0207 	and.w	r2, r3, #7
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	601a      	str	r2, [r3, #0]
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	40023800 	.word	0x40023800
 800725c:	40023c00 	.word	0x40023c00

08007260 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d105      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007284:	2b00      	cmp	r3, #0
 8007286:	d035      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007288:	4b62      	ldr	r3, [pc, #392]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800728e:	f7fc fcef 	bl	8003c70 <HAL_GetTick>
 8007292:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007294:	e008      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007296:	f7fc fceb 	bl	8003c70 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e0b0      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072a8:	4b5b      	ldr	r3, [pc, #364]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1f0      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	019a      	lsls	r2, r3, #6
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	071b      	lsls	r3, r3, #28
 80072c0:	4955      	ldr	r1, [pc, #340]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072c8:	4b52      	ldr	r3, [pc, #328]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072ce:	f7fc fccf 	bl	8003c70 <HAL_GetTick>
 80072d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072d4:	e008      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072d6:	f7fc fccb 	bl	8003c70 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e090      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072e8:	4b4b      	ldr	r3, [pc, #300]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8083 	beq.w	8007408 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
 8007306:	4b44      	ldr	r3, [pc, #272]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730a:	4a43      	ldr	r2, [pc, #268]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800730c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007310:	6413      	str	r3, [r2, #64]	@ 0x40
 8007312:	4b41      	ldr	r3, [pc, #260]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800731e:	4b3f      	ldr	r3, [pc, #252]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a3e      	ldr	r2, [pc, #248]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007328:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800732a:	f7fc fca1 	bl	8003c70 <HAL_GetTick>
 800732e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007330:	e008      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007332:	f7fc fc9d 	bl	8003c70 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e062      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007344:	4b35      	ldr	r3, [pc, #212]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0f0      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007350:	4b31      	ldr	r3, [pc, #196]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007354:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007358:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d02f      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	429a      	cmp	r2, r3
 800736c:	d028      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800736e:	4b2a      	ldr	r3, [pc, #168]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007376:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007378:	4b29      	ldr	r3, [pc, #164]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800737a:	2201      	movs	r2, #1
 800737c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800737e:	4b28      	ldr	r3, [pc, #160]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007384:	4a24      	ldr	r2, [pc, #144]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800738a:	4b23      	ldr	r3, [pc, #140]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800738c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b01      	cmp	r3, #1
 8007394:	d114      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007396:	f7fc fc6b 	bl	8003c70 <HAL_GetTick>
 800739a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800739c:	e00a      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800739e:	f7fc fc67 	bl	8003c70 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e02a      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b4:	4b18      	ldr	r3, [pc, #96]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0ee      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073cc:	d10d      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80073ce:	4b12      	ldr	r3, [pc, #72]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80073de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073e2:	490d      	ldr	r1, [pc, #52]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	608b      	str	r3, [r1, #8]
 80073e8:	e005      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80073f4:	6093      	str	r3, [r2, #8]
 80073f6:	4b08      	ldr	r3, [pc, #32]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007402:	4905      	ldr	r1, [pc, #20]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007404:	4313      	orrs	r3, r2
 8007406:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	42470068 	.word	0x42470068
 8007418:	40023800 	.word	0x40023800
 800741c:	40007000 	.word	0x40007000
 8007420:	42470e40 	.word	0x42470e40

08007424 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d13f      	bne.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007442:	4b24      	ldr	r3, [pc, #144]	@ (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d006      	beq.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007458:	d12f      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800745a:	4b1f      	ldr	r3, [pc, #124]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800745c:	617b      	str	r3, [r7, #20]
          break;
 800745e:	e02f      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007460:	4b1c      	ldr	r3, [pc, #112]	@ (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800746c:	d108      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800746e:	4b19      	ldr	r3, [pc, #100]	@ (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007476:	4a19      	ldr	r2, [pc, #100]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007478:	fbb2 f3f3 	udiv	r3, r2, r3
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	e007      	b.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007480:	4b14      	ldr	r3, [pc, #80]	@ (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007488:	4a15      	ldr	r2, [pc, #84]	@ (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800748a:	fbb2 f3f3 	udiv	r3, r2, r3
 800748e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007490:	4b10      	ldr	r3, [pc, #64]	@ (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007496:	099b      	lsrs	r3, r3, #6
 8007498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80074a4:	4b0b      	ldr	r3, [pc, #44]	@ (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074aa:	0f1b      	lsrs	r3, r3, #28
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b6:	617b      	str	r3, [r7, #20]
          break;
 80074b8:	e002      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]
          break;
 80074be:	bf00      	nop
        }
      }
      break;
 80074c0:	e000      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80074c2:	bf00      	nop
    }
  }
  return frequency;
 80074c4:	697b      	ldr	r3, [r7, #20]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800
 80074d8:	00bb8000 	.word	0x00bb8000
 80074dc:	007a1200 	.word	0x007a1200
 80074e0:	00f42400 	.word	0x00f42400

080074e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e07b      	b.n	80075ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d108      	bne.n	8007510 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007506:	d009      	beq.n	800751c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	61da      	str	r2, [r3, #28]
 800750e:	e005      	b.n	800751c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d106      	bne.n	800753c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7f9 fb88 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007552:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007564:	431a      	orrs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a0:	ea42 0103 	orr.w	r1, r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	0c1b      	lsrs	r3, r3, #16
 80075ba:	f003 0104 	and.w	r1, r3, #4
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c2:	f003 0210 	and.w	r2, r3, #16
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e041      	b.n	800768c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d106      	bne.n	8007622 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7f9 fb5d 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2202      	movs	r2, #2
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3304      	adds	r3, #4
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f000 f9b5 	bl	80079a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d001      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e04e      	b.n	800774a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a23      	ldr	r2, [pc, #140]	@ (8007758 <HAL_TIM_Base_Start_IT+0xc4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d022      	beq.n	8007714 <HAL_TIM_Base_Start_IT+0x80>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d6:	d01d      	beq.n	8007714 <HAL_TIM_Base_Start_IT+0x80>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1f      	ldr	r2, [pc, #124]	@ (800775c <HAL_TIM_Base_Start_IT+0xc8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d018      	beq.n	8007714 <HAL_TIM_Base_Start_IT+0x80>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007760 <HAL_TIM_Base_Start_IT+0xcc>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d013      	beq.n	8007714 <HAL_TIM_Base_Start_IT+0x80>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007764 <HAL_TIM_Base_Start_IT+0xd0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00e      	beq.n	8007714 <HAL_TIM_Base_Start_IT+0x80>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007768 <HAL_TIM_Base_Start_IT+0xd4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d009      	beq.n	8007714 <HAL_TIM_Base_Start_IT+0x80>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a19      	ldr	r2, [pc, #100]	@ (800776c <HAL_TIM_Base_Start_IT+0xd8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d004      	beq.n	8007714 <HAL_TIM_Base_Start_IT+0x80>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <HAL_TIM_Base_Start_IT+0xdc>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d111      	bne.n	8007738 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b06      	cmp	r3, #6
 8007724:	d010      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0201 	orr.w	r2, r2, #1
 8007734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007736:	e007      	b.n	8007748 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40010000 	.word	0x40010000
 800775c:	40000400 	.word	0x40000400
 8007760:	40000800 	.word	0x40000800
 8007764:	40000c00 	.word	0x40000c00
 8007768:	40010400 	.word	0x40010400
 800776c:	40014000 	.word	0x40014000
 8007770:	40001800 	.word	0x40001800

08007774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d020      	beq.n	80077d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01b      	beq.n	80077d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0202 	mvn.w	r2, #2
 80077a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f8d2 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
 80077c4:	e005      	b.n	80077d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f8c4 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f8d5 	bl	800797c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d020      	beq.n	8007824 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01b      	beq.n	8007824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0204 	mvn.w	r2, #4
 80077f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2202      	movs	r2, #2
 80077fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f8ac 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
 8007810:	e005      	b.n	800781e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f89e 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f8af 	bl	800797c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f003 0308 	and.w	r3, r3, #8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d020      	beq.n	8007870 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01b      	beq.n	8007870 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f06f 0208 	mvn.w	r2, #8
 8007840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2204      	movs	r2, #4
 8007846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f886 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
 800785c:	e005      	b.n	800786a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f878 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f889 	bl	800797c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f003 0310 	and.w	r3, r3, #16
 8007876:	2b00      	cmp	r3, #0
 8007878:	d020      	beq.n	80078bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0210 	mvn.w	r2, #16
 800788c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2208      	movs	r2, #8
 8007892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f860 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f852 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f863 	bl	800797c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00c      	beq.n	80078e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d007      	beq.n	80078e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0201 	mvn.w	r2, #1
 80078d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7f9 f8aa 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00c      	beq.n	8007904 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d007      	beq.n	8007904 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80078fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f906 	bl	8007b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00c      	beq.n	8007928 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f834 	bl	8007990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00c      	beq.n	800794c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b00      	cmp	r3, #0
 800793a:	d007      	beq.n	800794c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0220 	mvn.w	r2, #32
 8007944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f8d8 	bl	8007afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a46      	ldr	r2, [pc, #280]	@ (8007ad0 <TIM_Base_SetConfig+0x12c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d013      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c2:	d00f      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a43      	ldr	r2, [pc, #268]	@ (8007ad4 <TIM_Base_SetConfig+0x130>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a42      	ldr	r2, [pc, #264]	@ (8007ad8 <TIM_Base_SetConfig+0x134>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d007      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a41      	ldr	r2, [pc, #260]	@ (8007adc <TIM_Base_SetConfig+0x138>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a40      	ldr	r2, [pc, #256]	@ (8007ae0 <TIM_Base_SetConfig+0x13c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d108      	bne.n	80079f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a35      	ldr	r2, [pc, #212]	@ (8007ad0 <TIM_Base_SetConfig+0x12c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d02b      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a04:	d027      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a32      	ldr	r2, [pc, #200]	@ (8007ad4 <TIM_Base_SetConfig+0x130>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d023      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a31      	ldr	r2, [pc, #196]	@ (8007ad8 <TIM_Base_SetConfig+0x134>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01f      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a30      	ldr	r2, [pc, #192]	@ (8007adc <TIM_Base_SetConfig+0x138>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d01b      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a2f      	ldr	r2, [pc, #188]	@ (8007ae0 <TIM_Base_SetConfig+0x13c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d017      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae4 <TIM_Base_SetConfig+0x140>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d013      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a2d      	ldr	r2, [pc, #180]	@ (8007ae8 <TIM_Base_SetConfig+0x144>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00f      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a2c      	ldr	r2, [pc, #176]	@ (8007aec <TIM_Base_SetConfig+0x148>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00b      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a2b      	ldr	r2, [pc, #172]	@ (8007af0 <TIM_Base_SetConfig+0x14c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d007      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a2a      	ldr	r2, [pc, #168]	@ (8007af4 <TIM_Base_SetConfig+0x150>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d003      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a29      	ldr	r2, [pc, #164]	@ (8007af8 <TIM_Base_SetConfig+0x154>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d108      	bne.n	8007a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a10      	ldr	r2, [pc, #64]	@ (8007ad0 <TIM_Base_SetConfig+0x12c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_Base_SetConfig+0xf8>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a12      	ldr	r2, [pc, #72]	@ (8007ae0 <TIM_Base_SetConfig+0x13c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d103      	bne.n	8007aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	691a      	ldr	r2, [r3, #16]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d105      	bne.n	8007ac2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f023 0201 	bic.w	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	611a      	str	r2, [r3, #16]
  }
}
 8007ac2:	bf00      	nop
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40010000 	.word	0x40010000
 8007ad4:	40000400 	.word	0x40000400
 8007ad8:	40000800 	.word	0x40000800
 8007adc:	40000c00 	.word	0x40000c00
 8007ae0:	40010400 	.word	0x40010400
 8007ae4:	40014000 	.word	0x40014000
 8007ae8:	40014400 	.word	0x40014400
 8007aec:	40014800 	.word	0x40014800
 8007af0:	40001800 	.word	0x40001800
 8007af4:	40001c00 	.word	0x40001c00
 8007af8:	40002000 	.word	0x40002000

08007afc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f043 0201 	orr.w	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f023 0201 	bic.w	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b82:	d901      	bls.n	8007b88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e01b      	b.n	8007bc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	daf2      	bge.n	8007b76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	019b      	lsls	r3, r3, #6
 8007b98:	f043 0220 	orr.w	r2, r3, #32
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bac:	d901      	bls.n	8007bb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e006      	b.n	8007bc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d0f0      	beq.n	8007ba0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007be4:	d901      	bls.n	8007bea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e018      	b.n	8007c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	daf2      	bge.n	8007bd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2210      	movs	r2, #16
 8007bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c08:	d901      	bls.n	8007c0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e006      	b.n	8007c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 0310 	and.w	r3, r3, #16
 8007c16:	2b10      	cmp	r3, #16
 8007c18:	d0f0      	beq.n	8007bfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b08b      	sub	sp, #44	@ 0x2c
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	089b      	lsrs	r3, r3, #2
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c46:	88fb      	ldrh	r3, [r7, #6]
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c4e:	2300      	movs	r3, #0
 8007c50:	623b      	str	r3, [r7, #32]
 8007c52:	e014      	b.n	8007c7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c62:	3301      	adds	r3, #1
 8007c64:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	3301      	adds	r3, #1
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	3301      	adds	r3, #1
 8007c70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c74:	3301      	adds	r3, #1
 8007c76:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	623b      	str	r3, [r7, #32]
 8007c7e:	6a3a      	ldr	r2, [r7, #32]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d3e6      	bcc.n	8007c54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c86:	8bfb      	ldrh	r3, [r7, #30]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01e      	beq.n	8007cca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c96:	461a      	mov	r2, r3
 8007c98:	f107 0310 	add.w	r3, r7, #16
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	00db      	lsls	r3, r3, #3
 8007ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb0:	701a      	strb	r2, [r3, #0]
      i++;
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cba:	3301      	adds	r3, #1
 8007cbc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007cbe:	8bfb      	ldrh	r3, [r7, #30]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007cc4:	8bfb      	ldrh	r3, [r7, #30]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1ea      	bne.n	8007ca0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	372c      	adds	r7, #44	@ 0x2c
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4013      	ands	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d32:	68bb      	ldr	r3, [r7, #8]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d7a:	f023 0303 	bic.w	r3, r3, #3
 8007d7e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	68f9      	ldr	r1, [r7, #12]
 8007d90:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007d94:	4313      	orrs	r3, r2
 8007d96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d107      	bne.n	8007dae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007da4:	461a      	mov	r2, r3
 8007da6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007daa:	6053      	str	r3, [r2, #4]
 8007dac:	e00c      	b.n	8007dc8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d107      	bne.n	8007dc4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007dc0:	6053      	str	r3, [r2, #4]
 8007dc2:	e001      	b.n	8007dc8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e000      	b.n	8007dca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	b29b      	uxth	r3, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b089      	sub	sp, #36	@ 0x24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	0c9b      	lsrs	r3, r3, #18
 8007e20:	f003 0303 	and.w	r3, r3, #3
 8007e24:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	0fdb      	lsrs	r3, r3, #31
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	0fdb      	lsrs	r3, r3, #31
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	d10d      	bne.n	8007e7a <USB_HC_Halt+0x82>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <USB_HC_Halt+0x82>
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d002      	beq.n	8007e76 <USB_HC_Halt+0x7e>
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d101      	bne.n	8007e7a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	e0d8      	b.n	800802c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <USB_HC_Halt+0x8e>
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d173      	bne.n	8007f6e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	0151      	lsls	r1, r2, #5
 8007e98:	69fa      	ldr	r2, [r7, #28]
 8007e9a:	440a      	add	r2, r1
 8007e9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ea0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ea4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d14a      	bne.n	8007f48 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d133      	bne.n	8007f26 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	0151      	lsls	r1, r2, #5
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	440a      	add	r2, r1
 8007ed4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007edc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	0151      	lsls	r1, r2, #5
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	440a      	add	r2, r1
 8007ef4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ef8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007efc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	3301      	adds	r3, #1
 8007f02:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f0a:	d82e      	bhi.n	8007f6a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f22:	d0ec      	beq.n	8007efe <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f24:	e081      	b.n	800802a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	69fa      	ldr	r2, [r7, #28]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f44:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f46:	e070      	b.n	800802a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f66:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f68:	e05f      	b.n	800802a <USB_HC_Halt+0x232>
            break;
 8007f6a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f6c:	e05d      	b.n	800802a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f8c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d133      	bne.n	8008006 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	0151      	lsls	r1, r2, #5
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	440a      	add	r2, r1
 8007fb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fbc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	0151      	lsls	r1, r2, #5
 8007fd0:	69fa      	ldr	r2, [r7, #28]
 8007fd2:	440a      	add	r2, r1
 8007fd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fdc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fea:	d81d      	bhi.n	8008028 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008002:	d0ec      	beq.n	8007fde <USB_HC_Halt+0x1e6>
 8008004:	e011      	b.n	800802a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	4413      	add	r3, r2
 800800e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	0151      	lsls	r1, r2, #5
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	440a      	add	r2, r1
 800801c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008020:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	e000      	b.n	800802a <USB_HC_Halt+0x232>
          break;
 8008028:	bf00      	nop
    }
  }

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3724      	adds	r7, #36	@ 0x24
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff fd7a 	bl	8007b46 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008052:	2110      	movs	r1, #16
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff fd87 	bl	8007b68 <USB_FlushTxFifo>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff fdb1 	bl	8007bcc <USB_FlushRxFifo>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008074:	2300      	movs	r3, #0
 8008076:	61bb      	str	r3, [r7, #24]
 8008078:	e01f      	b.n	80080ba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	4413      	add	r3, r2
 8008082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008090:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008098:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ae:	461a      	mov	r2, r3
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	3301      	adds	r3, #1
 80080b8:	61bb      	str	r3, [r7, #24]
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	2b0f      	cmp	r3, #15
 80080be:	d9dc      	bls.n	800807a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80080c0:	2300      	movs	r3, #0
 80080c2:	61bb      	str	r3, [r7, #24]
 80080c4:	e034      	b.n	8008130 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080fa:	461a      	mov	r2, r3
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3301      	adds	r3, #1
 8008104:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800810c:	d80c      	bhi.n	8008128 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	4413      	add	r3, r2
 8008116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008120:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008124:	d0ec      	beq.n	8008100 <USB_StopHost+0xc8>
 8008126:	e000      	b.n	800812a <USB_StopHost+0xf2>
        break;
 8008128:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	3301      	adds	r3, #1
 800812e:	61bb      	str	r3, [r7, #24]
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	2b0f      	cmp	r3, #15
 8008134:	d9c7      	bls.n	80080c6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800813c:	461a      	mov	r2, r3
 800813e:	f04f 33ff 	mov.w	r3, #4294967295
 8008142:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f04f 32ff 	mov.w	r2, #4294967295
 800814a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff fce9 	bl	8007b24 <USB_EnableGlobalInt>

  return ret;
 8008152:	7ffb      	ldrb	r3, [r7, #31]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3720      	adds	r7, #32
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f804 	bl	8008180 <USBH_HandleSof>
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b0b      	cmp	r3, #11
 8008190:	d10a      	bne.n	80081a8 <USBH_HandleSof+0x28>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
  }
}
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80081d4:	2200      	movs	r2, #0
 80081d6:	4619      	mov	r1, r3
 80081d8:	f000 f8ae 	bl	8008338 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80081dc:	bf00      	nop
}
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80081f4:	bf00      	nop
}
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008234:	2200      	movs	r2, #0
 8008236:	4619      	mov	r1, r3
 8008238:	f000 f87e 	bl	8008338 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f003 f80c 	bl	800b284 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	791b      	ldrb	r3, [r3, #4]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f830 	bl	80082d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	795b      	ldrb	r3, [r3, #5]
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f82a 	bl	80082d8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008298:	2200      	movs	r2, #0
 800829a:	4619      	mov	r1, r3
 800829c:	f000 f84c 	bl	8008338 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80082c6:	2200      	movs	r2, #0
 80082c8:	4619      	mov	r1, r3
 80082ca:	f000 f835 	bl	8008338 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	2b0f      	cmp	r3, #15
 80082e8:	d80d      	bhi.n	8008306 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	33e0      	adds	r3, #224	@ 0xe0
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	78fb      	ldrb	r3, [r7, #3]
 80082f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	33e0      	adds	r3, #224	@ 0xe0
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800831a:	f3ef 8305 	mrs	r3, IPSR
 800831e:	607b      	str	r3, [r7, #4]
  return(result);
 8008320:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008322:	2b00      	cmp	r3, #0
 8008324:	bf14      	ite	ne
 8008326:	2301      	movne	r3, #1
 8008328:	2300      	moveq	r3, #0
 800832a:	b2db      	uxtb	r3, r3
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008344:	2300      	movs	r3, #0
 8008346:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <osMessagePut+0x1e>
    ticks = 1;
 8008352:	2301      	movs	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008356:	f7ff ffdd 	bl	8008314 <inHandlerMode>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d018      	beq.n	8008392 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008360:	f107 0210 	add.w	r2, r7, #16
 8008364:	f107 0108 	add.w	r1, r7, #8
 8008368:	2300      	movs	r3, #0
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fbd0 	bl	8008b10 <xQueueGenericSendFromISR>
 8008370:	4603      	mov	r3, r0
 8008372:	2b01      	cmp	r3, #1
 8008374:	d001      	beq.n	800837a <osMessagePut+0x42>
      return osErrorOS;
 8008376:	23ff      	movs	r3, #255	@ 0xff
 8008378:	e018      	b.n	80083ac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d014      	beq.n	80083aa <osMessagePut+0x72>
 8008380:	4b0c      	ldr	r3, [pc, #48]	@ (80083b4 <osMessagePut+0x7c>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	e00b      	b.n	80083aa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008392:	f107 0108 	add.w	r1, r7, #8
 8008396:	2300      	movs	r3, #0
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 f9e0 	bl	8008760 <xQueueGenericSend>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d001      	beq.n	80083aa <osMessagePut+0x72>
      return osErrorOS;
 80083a6:	23ff      	movs	r3, #255	@ 0xff
 80083a8:	e000      	b.n	80083ac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f103 0208 	add.w	r2, r3, #8
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295
 80083d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f103 0208 	add.w	r2, r3, #8
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f103 0208 	add.w	r2, r3, #8
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008406:	bf00      	nop
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]
}
 800844e:	bf00      	nop
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800845a:	b480      	push	{r7}
 800845c:	b085      	sub	sp, #20
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d103      	bne.n	800847a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e00c      	b.n	8008494 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3308      	adds	r3, #8
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	e002      	b.n	8008488 <vListInsert+0x2e>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	429a      	cmp	r2, r3
 8008492:	d2f6      	bcs.n	8008482 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	601a      	str	r2, [r3, #0]
}
 80084c0:	bf00      	nop
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6892      	ldr	r2, [r2, #8]
 80084e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6852      	ldr	r2, [r2, #4]
 80084ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d103      	bne.n	8008500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	1e5a      	subs	r2, r3, #1
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10b      	bne.n	800854c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800854c:	f002 fafe 	bl	800ab4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008558:	68f9      	ldr	r1, [r7, #12]
 800855a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800855c:	fb01 f303 	mul.w	r3, r1, r3
 8008560:	441a      	add	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800857c:	3b01      	subs	r3, #1
 800857e:	68f9      	ldr	r1, [r7, #12]
 8008580:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008582:	fb01 f303 	mul.w	r3, r1, r3
 8008586:	441a      	add	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	22ff      	movs	r2, #255	@ 0xff
 8008590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	22ff      	movs	r2, #255	@ 0xff
 8008598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d114      	bne.n	80085cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d01a      	beq.n	80085e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3310      	adds	r3, #16
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 fb8e 	bl	8009cd0 <xTaskRemoveFromEventList>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d012      	beq.n	80085e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085ba:	4b0d      	ldr	r3, [pc, #52]	@ (80085f0 <xQueueGenericReset+0xd0>)
 80085bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	e009      	b.n	80085e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3310      	adds	r3, #16
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff fef1 	bl	80083b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3324      	adds	r3, #36	@ 0x24
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff feec 	bl	80083b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085e0:	f002 fae6 	bl	800abb0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085e4:	2301      	movs	r3, #1
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08a      	sub	sp, #40	@ 0x28
 80085f8:	af02      	add	r7, sp, #8
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	4613      	mov	r3, r2
 8008600:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10b      	bne.n	8008620 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	613b      	str	r3, [r7, #16]
}
 800861a:	bf00      	nop
 800861c:	bf00      	nop
 800861e:	e7fd      	b.n	800861c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	3354      	adds	r3, #84	@ 0x54
 800862e:	4618      	mov	r0, r3
 8008630:	f002 fbb4 	bl	800ad9c <pvPortMalloc>
 8008634:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00e      	beq.n	800865a <xQueueGenericCreate+0x66>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	3354      	adds	r3, #84	@ 0x54
 8008644:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008646:	79fa      	ldrb	r2, [r7, #7]
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	4613      	mov	r3, r2
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	68b9      	ldr	r1, [r7, #8]
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 f82e 	bl	80086b4 <prvInitialiseNewQueue>
 8008658:	e027      	b.n	80086aa <xQueueGenericCreate+0xb6>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	2b04      	cmp	r3, #4
 800865e:	d824      	bhi.n	80086aa <xQueueGenericCreate+0xb6>
 8008660:	a201      	add	r2, pc, #4	@ (adr r2, 8008668 <xQueueGenericCreate+0x74>)
 8008662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008666:	bf00      	nop
 8008668:	0800867d 	.word	0x0800867d
 800866c:	08008695 	.word	0x08008695
 8008670:	080086ab 	.word	0x080086ab
 8008674:	08008689 	.word	0x08008689
 8008678:	080086a1 	.word	0x080086a1
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	2100      	movs	r1, #0
 8008680:	2041      	movs	r0, #65	@ 0x41
 8008682:	f7f9 fb6f 	bl	8001d64 <xTraceEventCreate2>
 8008686:	e010      	b.n	80086aa <xQueueGenericCreate+0xb6>
 8008688:	2200      	movs	r2, #0
 800868a:	2100      	movs	r1, #0
 800868c:	2042      	movs	r0, #66	@ 0x42
 800868e:	f7f9 fb69 	bl	8001d64 <xTraceEventCreate2>
 8008692:	e00a      	b.n	80086aa <xQueueGenericCreate+0xb6>
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	2043      	movs	r0, #67	@ 0x43
 800869a:	f7f9 fb63 	bl	8001d64 <xTraceEventCreate2>
 800869e:	e004      	b.n	80086aa <xQueueGenericCreate+0xb6>
 80086a0:	2200      	movs	r2, #0
 80086a2:	2100      	movs	r1, #0
 80086a4:	2047      	movs	r0, #71	@ 0x47
 80086a6:	f7f9 fb5d 	bl	8001d64 <xTraceEventCreate2>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086aa:	69bb      	ldr	r3, [r7, #24]
	}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d103      	bne.n	80086d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	e002      	b.n	80086d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086e2:	2101      	movs	r1, #1
 80086e4:	69b8      	ldr	r0, [r7, #24]
 80086e6:	f7ff ff1b 	bl	8008520 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	78fa      	ldrb	r2, [r7, #3]
 80086ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2200      	movs	r2, #0
 80086f6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80086fe:	2b04      	cmp	r3, #4
 8008700:	d827      	bhi.n	8008752 <prvInitialiseNewQueue+0x9e>
 8008702:	a201      	add	r2, pc, #4	@ (adr r2, 8008708 <prvInitialiseNewQueue+0x54>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	0800871d 	.word	0x0800871d
 800870c:	08008739 	.word	0x08008739
 8008710:	08008753 	.word	0x08008753
 8008714:	0800872b 	.word	0x0800872b
 8008718:	08008747 	.word	0x08008747
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4a0f      	ldr	r2, [pc, #60]	@ (800875c <prvInitialiseNewQueue+0xa8>)
 8008720:	69b9      	ldr	r1, [r7, #24]
 8008722:	2011      	movs	r0, #17
 8008724:	f7fa fb62 	bl	8002dec <xTraceObjectRegisterWithoutHandle>
 8008728:	e013      	b.n	8008752 <prvInitialiseNewQueue+0x9e>
 800872a:	2300      	movs	r3, #0
 800872c:	4a0b      	ldr	r2, [pc, #44]	@ (800875c <prvInitialiseNewQueue+0xa8>)
 800872e:	69b9      	ldr	r1, [r7, #24]
 8008730:	2012      	movs	r0, #18
 8008732:	f7fa fb5b 	bl	8002dec <xTraceObjectRegisterWithoutHandle>
 8008736:	e00c      	b.n	8008752 <prvInitialiseNewQueue+0x9e>
 8008738:	2300      	movs	r3, #0
 800873a:	4a08      	ldr	r2, [pc, #32]	@ (800875c <prvInitialiseNewQueue+0xa8>)
 800873c:	69b9      	ldr	r1, [r7, #24]
 800873e:	2013      	movs	r0, #19
 8008740:	f7fa fb54 	bl	8002dec <xTraceObjectRegisterWithoutHandle>
 8008744:	e005      	b.n	8008752 <prvInitialiseNewQueue+0x9e>
 8008746:	2300      	movs	r3, #0
 8008748:	4a04      	ldr	r2, [pc, #16]	@ (800875c <prvInitialiseNewQueue+0xa8>)
 800874a:	69b9      	ldr	r1, [r7, #24]
 800874c:	2017      	movs	r0, #23
 800874e:	f7fa fb4d 	bl	8002dec <xTraceObjectRegisterWithoutHandle>
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	0800b73c 	.word	0x0800b73c

08008760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08e      	sub	sp, #56	@ 0x38
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800876e:	2300      	movs	r3, #0
 8008770:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10b      	bne.n	8008794 <xQueueGenericSend+0x34>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d103      	bne.n	80087a2 <xQueueGenericSend+0x42>
 800879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <xQueueGenericSend+0x46>
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <xQueueGenericSend+0x48>
 80087a6:	2300      	movs	r3, #0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10b      	bne.n	80087c4 <xQueueGenericSend+0x64>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	623b      	str	r3, [r7, #32]
}
 80087be:	bf00      	nop
 80087c0:	bf00      	nop
 80087c2:	e7fd      	b.n	80087c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d103      	bne.n	80087d2 <xQueueGenericSend+0x72>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <xQueueGenericSend+0x76>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <xQueueGenericSend+0x78>
 80087d6:	2300      	movs	r3, #0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10b      	bne.n	80087f4 <xQueueGenericSend+0x94>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	61fb      	str	r3, [r7, #28]
}
 80087ee:	bf00      	nop
 80087f0:	bf00      	nop
 80087f2:	e7fd      	b.n	80087f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087f4:	f001 fc16 	bl	800a024 <xTaskGetSchedulerState>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <xQueueGenericSend+0xa4>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <xQueueGenericSend+0xa8>
 8008804:	2301      	movs	r3, #1
 8008806:	e000      	b.n	800880a <xQueueGenericSend+0xaa>
 8008808:	2300      	movs	r3, #0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10b      	bne.n	8008826 <xQueueGenericSend+0xc6>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	61bb      	str	r3, [r7, #24]
}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	e7fd      	b.n	8008822 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008826:	f002 f991 	bl	800ab4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008832:	429a      	cmp	r2, r3
 8008834:	d302      	bcc.n	800883c <xQueueGenericSend+0xdc>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d179      	bne.n	8008930 <xQueueGenericSend+0x1d0>
			{
				traceQUEUE_SEND( pxQueue );
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008842:	2b04      	cmp	r3, #4
 8008844:	d82e      	bhi.n	80088a4 <xQueueGenericSend+0x144>
 8008846:	a201      	add	r2, pc, #4	@ (adr r2, 800884c <xQueueGenericSend+0xec>)
 8008848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884c:	08008861 	.word	0x08008861
 8008850:	0800888f 	.word	0x0800888f
 8008854:	0800887d 	.word	0x0800887d
 8008858:	0800887d 	.word	0x0800887d
 800885c:	0800889b 	.word	0x0800889b
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <xQueueGenericSend+0x10a>
 8008866:	2050      	movs	r0, #80	@ 0x50
 8008868:	e000      	b.n	800886c <xQueueGenericSend+0x10c>
 800886a:	20c0      	movs	r0, #192	@ 0xc0
 800886c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008872:	3301      	adds	r3, #1
 8008874:	461a      	mov	r2, r3
 8008876:	f7f9 fa75 	bl	8001d64 <xTraceEventCreate2>
 800887a:	e013      	b.n	80088a4 <xQueueGenericSend+0x144>
 800887c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008882:	3301      	adds	r3, #1
 8008884:	461a      	mov	r2, r3
 8008886:	2051      	movs	r0, #81	@ 0x51
 8008888:	f7f9 fa6c 	bl	8001d64 <xTraceEventCreate2>
 800888c:	e00a      	b.n	80088a4 <xQueueGenericSend+0x144>
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	4619      	mov	r1, r3
 8008892:	2052      	movs	r0, #82	@ 0x52
 8008894:	f7f9 f9ee 	bl	8001c74 <xTraceEventCreate1>
 8008898:	e004      	b.n	80088a4 <xQueueGenericSend+0x144>
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	4619      	mov	r1, r3
 800889e:	20c5      	movs	r0, #197	@ 0xc5
 80088a0:	f7f9 f9e8 	bl	8001c74 <xTraceEventCreate1>

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	68b9      	ldr	r1, [r7, #8]
 80088ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088b0:	f000 fbc6 	bl	8009040 <prvCopyDataToQueue>
 80088b4:	62b8      	str	r0, [r7, #40]	@ 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d014      	beq.n	80088e8 <xQueueGenericSend+0x188>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d102      	bne.n	80088ca <xQueueGenericSend+0x16a>
 80088c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d12e      	bne.n	8008928 <xQueueGenericSend+0x1c8>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80088ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088cc:	f000 fd36 	bl	800933c <prvNotifyQueueSetContainer>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d028      	beq.n	8008928 <xQueueGenericSend+0x1c8>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 80088d6:	4b8d      	ldr	r3, [pc, #564]	@ (8008b0c <xQueueGenericSend+0x3ac>)
 80088d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	e01f      	b.n	8008928 <xQueueGenericSend+0x1c8>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d010      	beq.n	8008912 <xQueueGenericSend+0x1b2>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f2:	3324      	adds	r3, #36	@ 0x24
 80088f4:	4618      	mov	r0, r3
 80088f6:	f001 f9eb 	bl	8009cd0 <xTaskRemoveFromEventList>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d013      	beq.n	8008928 <xQueueGenericSend+0x1c8>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8008900:	4b82      	ldr	r3, [pc, #520]	@ (8008b0c <xQueueGenericSend+0x3ac>)
 8008902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	e00a      	b.n	8008928 <xQueueGenericSend+0x1c8>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	2b00      	cmp	r3, #0
 8008916:	d007      	beq.n	8008928 <xQueueGenericSend+0x1c8>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8008918:	4b7c      	ldr	r3, [pc, #496]	@ (8008b0c <xQueueGenericSend+0x3ac>)
 800891a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008928:	f002 f942 	bl	800abb0 <vPortExitCritical>
				return pdPASS;
 800892c:	2301      	movs	r3, #1
 800892e:	e0e8      	b.n	8008b02 <xQueueGenericSend+0x3a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d130      	bne.n	8008998 <xQueueGenericSend+0x238>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008936:	f002 f93b 	bl	800abb0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008940:	2b04      	cmp	r3, #4
 8008942:	d827      	bhi.n	8008994 <xQueueGenericSend+0x234>
 8008944:	a201      	add	r2, pc, #4	@ (adr r2, 800894c <xQueueGenericSend+0x1ec>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	08008961 	.word	0x08008961
 8008950:	0800898b 	.word	0x0800898b
 8008954:	0800897b 	.word	0x0800897b
 8008958:	0800897b 	.word	0x0800897b
 800895c:	0800898b 	.word	0x0800898b
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <xQueueGenericSend+0x20a>
 8008966:	2053      	movs	r0, #83	@ 0x53
 8008968:	e000      	b.n	800896c <xQueueGenericSend+0x20c>
 800896a:	20c1      	movs	r0, #193	@ 0xc1
 800896c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800896e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008972:	461a      	mov	r2, r3
 8008974:	f7f9 f9f6 	bl	8001d64 <xTraceEventCreate2>
 8008978:	e00c      	b.n	8008994 <xQueueGenericSend+0x234>
 800897a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008980:	461a      	mov	r2, r3
 8008982:	2054      	movs	r0, #84	@ 0x54
 8008984:	f7f9 f9ee 	bl	8001d64 <xTraceEventCreate2>
 8008988:	e004      	b.n	8008994 <xQueueGenericSend+0x234>
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	4619      	mov	r1, r3
 800898e:	2055      	movs	r0, #85	@ 0x55
 8008990:	f7f9 f970 	bl	8001c74 <xTraceEventCreate1>
					return errQUEUE_FULL;
 8008994:	2300      	movs	r3, #0
 8008996:	e0b4      	b.n	8008b02 <xQueueGenericSend+0x3a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <xQueueGenericSend+0x24c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800899e:	f107 0310 	add.w	r3, r7, #16
 80089a2:	4618      	mov	r0, r3
 80089a4:	f001 f9fc 	bl	8009da0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089ac:	f002 f900 	bl	800abb0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089b0:	f000 ff2e 	bl	8009810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089b4:	f002 f8ca 	bl	800ab4c <vPortEnterCritical>
 80089b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089be:	b25b      	sxtb	r3, r3
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d103      	bne.n	80089ce <xQueueGenericSend+0x26e>
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089d4:	b25b      	sxtb	r3, r3
 80089d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089da:	d103      	bne.n	80089e4 <xQueueGenericSend+0x284>
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089e4:	f002 f8e4 	bl	800abb0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089e8:	1d3a      	adds	r2, r7, #4
 80089ea:	f107 0310 	add.w	r3, r7, #16
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 f9eb 	bl	8009dcc <xTaskCheckForTimeOut>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d150      	bne.n	8008a9e <xQueueGenericSend+0x33e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089fe:	f000 fc24 	bl	800924a <prvIsQueueFull>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d044      	beq.n	8008a92 <xQueueGenericSend+0x332>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8008a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d826      	bhi.n	8008a60 <xQueueGenericSend+0x300>
 8008a12:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <xQueueGenericSend+0x2b8>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a2d 	.word	0x08008a2d
 8008a1c:	08008a57 	.word	0x08008a57
 8008a20:	08008a47 	.word	0x08008a47
 8008a24:	08008a47 	.word	0x08008a47
 8008a28:	08008a57 	.word	0x08008a57
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <xQueueGenericSend+0x2d6>
 8008a32:	2056      	movs	r0, #86	@ 0x56
 8008a34:	e000      	b.n	8008a38 <xQueueGenericSend+0x2d8>
 8008a36:	20c2      	movs	r0, #194	@ 0xc2
 8008a38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f9 f990 	bl	8001d64 <xTraceEventCreate2>
 8008a44:	e00c      	b.n	8008a60 <xQueueGenericSend+0x300>
 8008a46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	2057      	movs	r0, #87	@ 0x57
 8008a50:	f7f9 f988 	bl	8001d64 <xTraceEventCreate2>
 8008a54:	e004      	b.n	8008a60 <xQueueGenericSend+0x300>
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	4619      	mov	r1, r3
 8008a5a:	2058      	movs	r0, #88	@ 0x58
 8008a5c:	f7f9 f90a 	bl	8001c74 <xTraceEventCreate1>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a62:	3310      	adds	r3, #16
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f001 f8d5 	bl	8009c18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a70:	f000 fb76 	bl	8009160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a74:	f000 feda 	bl	800982c <xTaskResumeAll>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f47f aed3 	bne.w	8008826 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a80:	4b22      	ldr	r3, [pc, #136]	@ (8008b0c <xQueueGenericSend+0x3ac>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	e6c9      	b.n	8008826 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a94:	f000 fb64 	bl	8009160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a98:	f000 fec8 	bl	800982c <xTaskResumeAll>
 8008a9c:	e6c3      	b.n	8008826 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008aa0:	f000 fb5e 	bl	8009160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008aa4:	f000 fec2 	bl	800982c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d826      	bhi.n	8008b00 <xQueueGenericSend+0x3a0>
 8008ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab8 <xQueueGenericSend+0x358>)
 8008ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab8:	08008acd 	.word	0x08008acd
 8008abc:	08008af7 	.word	0x08008af7
 8008ac0:	08008ae7 	.word	0x08008ae7
 8008ac4:	08008ae7 	.word	0x08008ae7
 8008ac8:	08008af7 	.word	0x08008af7
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <xQueueGenericSend+0x376>
 8008ad2:	2053      	movs	r0, #83	@ 0x53
 8008ad4:	e000      	b.n	8008ad8 <xQueueGenericSend+0x378>
 8008ad6:	20c1      	movs	r0, #193	@ 0xc1
 8008ad8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f7f9 f940 	bl	8001d64 <xTraceEventCreate2>
 8008ae4:	e00c      	b.n	8008b00 <xQueueGenericSend+0x3a0>
 8008ae6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aec:	461a      	mov	r2, r3
 8008aee:	2054      	movs	r0, #84	@ 0x54
 8008af0:	f7f9 f938 	bl	8001d64 <xTraceEventCreate2>
 8008af4:	e004      	b.n	8008b00 <xQueueGenericSend+0x3a0>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af8:	4619      	mov	r1, r3
 8008afa:	2055      	movs	r0, #85	@ 0x55
 8008afc:	f7f9 f8ba 	bl	8001c74 <xTraceEventCreate1>
			return errQUEUE_FULL;
 8008b00:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3738      	adds	r7, #56	@ 0x38
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	e000ed04 	.word	0xe000ed04

08008b10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b090      	sub	sp, #64	@ 0x40
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
 8008b1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10b      	bne.n	8008b40 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b3a:	bf00      	nop
 8008b3c:	bf00      	nop
 8008b3e:	e7fd      	b.n	8008b3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d103      	bne.n	8008b4e <xQueueGenericSendFromISR+0x3e>
 8008b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <xQueueGenericSendFromISR+0x42>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <xQueueGenericSendFromISR+0x44>
 8008b52:	2300      	movs	r3, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10b      	bne.n	8008b70 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b6a:	bf00      	nop
 8008b6c:	bf00      	nop
 8008b6e:	e7fd      	b.n	8008b6c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d103      	bne.n	8008b7e <xQueueGenericSendFromISR+0x6e>
 8008b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d101      	bne.n	8008b82 <xQueueGenericSendFromISR+0x72>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e000      	b.n	8008b84 <xQueueGenericSendFromISR+0x74>
 8008b82:	2300      	movs	r3, #0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10b      	bne.n	8008ba0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	623b      	str	r3, [r7, #32]
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ba0:	f002 f8ba 	bl	800ad18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ba4:	f3ef 8211 	mrs	r2, BASEPRI
 8008ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	61fa      	str	r2, [r7, #28]
 8008bba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bbc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d302      	bcc.n	8008bd2 <xQueueGenericSendFromISR+0xc2>
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d167      	bne.n	8008ca2 <xQueueGenericSendFromISR+0x192>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <xQueueGenericSendFromISR+0xe8>
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	db19      	blt.n	8008c24 <xQueueGenericSendFromISR+0x114>
 8008bf0:	3b02      	subs	r3, #2
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d816      	bhi.n	8008c24 <xQueueGenericSendFromISR+0x114>
 8008bf6:	e00d      	b.n	8008c14 <xQueueGenericSendFromISR+0x104>
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <xQueueGenericSendFromISR+0xf2>
 8008bfe:	2059      	movs	r0, #89	@ 0x59
 8008c00:	e000      	b.n	8008c04 <xQueueGenericSendFromISR+0xf4>
 8008c02:	20c3      	movs	r0, #195	@ 0xc3
 8008c04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f7f9 f8a9 	bl	8001d64 <xTraceEventCreate2>
 8008c12:	e007      	b.n	8008c24 <xQueueGenericSendFromISR+0x114>
 8008c14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	205a      	movs	r0, #90	@ 0x5a
 8008c20:	f7f9 f8a0 	bl	8001d64 <xTraceEventCreate2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	68b9      	ldr	r1, [r7, #8]
 8008c28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c2a:	f000 fa09 	bl	8009040 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c36:	d129      	bne.n	8008c8c <xQueueGenericSendFromISR+0x17c>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8008c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d012      	beq.n	8008c66 <xQueueGenericSendFromISR+0x156>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d102      	bne.n	8008c4c <xQueueGenericSendFromISR+0x13c>
 8008c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d127      	bne.n	8008c9c <xQueueGenericSendFromISR+0x18c>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8008c4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c4e:	f000 fb75 	bl	800933c <prvNotifyQueueSetContainer>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d021      	beq.n	8008c9c <xQueueGenericSendFromISR+0x18c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d01e      	beq.n	8008c9c <xQueueGenericSendFromISR+0x18c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	e01a      	b.n	8008c9c <xQueueGenericSendFromISR+0x18c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d016      	beq.n	8008c9c <xQueueGenericSendFromISR+0x18c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	3324      	adds	r3, #36	@ 0x24
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 f82c 	bl	8009cd0 <xTaskRemoveFromEventList>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00e      	beq.n	8008c9c <xQueueGenericSendFromISR+0x18c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00b      	beq.n	8008c9c <xQueueGenericSendFromISR+0x18c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	e007      	b.n	8008c9c <xQueueGenericSendFromISR+0x18c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008c90:	3301      	adds	r3, #1
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	b25a      	sxtb	r2, r3
 8008c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008ca0:	e020      	b.n	8008ce4 <xQueueGenericSendFromISR+0x1d4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d005      	beq.n	8008cb8 <xQueueGenericSendFromISR+0x1a8>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	db17      	blt.n	8008ce0 <xQueueGenericSendFromISR+0x1d0>
 8008cb0:	3b02      	subs	r3, #2
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d814      	bhi.n	8008ce0 <xQueueGenericSendFromISR+0x1d0>
 8008cb6:	e00c      	b.n	8008cd2 <xQueueGenericSendFromISR+0x1c2>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <xQueueGenericSendFromISR+0x1b2>
 8008cbe:	205c      	movs	r0, #92	@ 0x5c
 8008cc0:	e000      	b.n	8008cc4 <xQueueGenericSendFromISR+0x1b4>
 8008cc2:	20c4      	movs	r0, #196	@ 0xc4
 8008cc4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f7f9 f84a 	bl	8001d64 <xTraceEventCreate2>
 8008cd0:	e006      	b.n	8008ce0 <xQueueGenericSendFromISR+0x1d0>
 8008cd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd8:	461a      	mov	r2, r3
 8008cda:	205d      	movs	r0, #93	@ 0x5d
 8008cdc:	f7f9 f842 	bl	8001d64 <xTraceEventCreate2>
			xReturn = errQUEUE_FULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3740      	adds	r7, #64	@ 0x40
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08c      	sub	sp, #48	@ 0x30
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10b      	bne.n	8008d2e <xQueueReceive+0x32>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	623b      	str	r3, [r7, #32]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d103      	bne.n	8008d3c <xQueueReceive+0x40>
 8008d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <xQueueReceive+0x44>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <xQueueReceive+0x46>
 8008d40:	2300      	movs	r3, #0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10b      	bne.n	8008d5e <xQueueReceive+0x62>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	61fb      	str	r3, [r7, #28]
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop
 8008d5c:	e7fd      	b.n	8008d5a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d5e:	f001 f961 	bl	800a024 <xTaskGetSchedulerState>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <xQueueReceive+0x72>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <xQueueReceive+0x76>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e000      	b.n	8008d74 <xQueueReceive+0x78>
 8008d72:	2300      	movs	r3, #0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10b      	bne.n	8008d90 <xQueueReceive+0x94>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	61bb      	str	r3, [r7, #24]
}
 8008d8a:	bf00      	nop
 8008d8c:	bf00      	nop
 8008d8e:	e7fd      	b.n	8008d8c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d90:	f001 fedc 	bl	800ab4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d98:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d050      	beq.n	8008e42 <xQueueReceive+0x146>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008da4:	f000 f9b6 	bl	8009114 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8008da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008daa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	d82b      	bhi.n	8008e0a <xQueueReceive+0x10e>
 8008db2:	a201      	add	r2, pc, #4	@ (adr r2, 8008db8 <xQueueReceive+0xbc>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008dcd 	.word	0x08008dcd
 8008dbc:	08008df1 	.word	0x08008df1
 8008dc0:	08008ddf 	.word	0x08008ddf
 8008dc4:	08008ddf 	.word	0x08008ddf
 8008dc8:	08008dff 	.word	0x08008dff
 8008dcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	2060      	movs	r0, #96	@ 0x60
 8008dd8:	f7f9 f840 	bl	8001e5c <xTraceEventCreate3>
 8008ddc:	e015      	b.n	8008e0a <xQueueReceive+0x10e>
 8008dde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de6:	3b01      	subs	r3, #1
 8008de8:	2061      	movs	r0, #97	@ 0x61
 8008dea:	f7f9 f837 	bl	8001e5c <xTraceEventCreate3>
 8008dee:	e00c      	b.n	8008e0a <xQueueReceive+0x10e>
 8008df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	4619      	mov	r1, r3
 8008df6:	2062      	movs	r0, #98	@ 0x62
 8008df8:	f7f8 ffb4 	bl	8001d64 <xTraceEventCreate2>
 8008dfc:	e005      	b.n	8008e0a <xQueueReceive+0x10e>
 8008dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	4619      	mov	r1, r3
 8008e04:	20c7      	movs	r0, #199	@ 0xc7
 8008e06:	f7f8 ffad 	bl	8001d64 <xTraceEventCreate2>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	1e5a      	subs	r2, r3, #1
 8008e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e10:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00f      	beq.n	8008e3a <xQueueReceive+0x13e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1c:	3310      	adds	r3, #16
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 ff56 	bl	8009cd0 <xTaskRemoveFromEventList>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d007      	beq.n	8008e3a <xQueueReceive+0x13e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e2a:	4b84      	ldr	r3, [pc, #528]	@ (800903c <xQueueReceive+0x340>)
 8008e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e3a:	f001 feb9 	bl	800abb0 <vPortExitCritical>
				return pdPASS;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e0f8      	b.n	8009034 <xQueueReceive+0x338>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d132      	bne.n	8008eae <xQueueReceive+0x1b2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e48:	f001 feb2 	bl	800abb0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d829      	bhi.n	8008eaa <xQueueReceive+0x1ae>
 8008e56:	a201      	add	r2, pc, #4	@ (adr r2, 8008e5c <xQueueReceive+0x160>)
 8008e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5c:	08008e71 	.word	0x08008e71
 8008e60:	08008e91 	.word	0x08008e91
 8008e64:	08008e81 	.word	0x08008e81
 8008e68:	08008e81 	.word	0x08008e81
 8008e6c:	08008e9f 	.word	0x08008e9f
 8008e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e78:	2063      	movs	r0, #99	@ 0x63
 8008e7a:	f7f8 ffef 	bl	8001e5c <xTraceEventCreate3>
 8008e7e:	e014      	b.n	8008eaa <xQueueReceive+0x1ae>
 8008e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e88:	2064      	movs	r0, #100	@ 0x64
 8008e8a:	f7f8 ffe7 	bl	8001e5c <xTraceEventCreate3>
 8008e8e:	e00c      	b.n	8008eaa <xQueueReceive+0x1ae>
 8008e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	4619      	mov	r1, r3
 8008e96:	2065      	movs	r0, #101	@ 0x65
 8008e98:	f7f8 ff64 	bl	8001d64 <xTraceEventCreate2>
 8008e9c:	e005      	b.n	8008eaa <xQueueReceive+0x1ae>
 8008e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	20c8      	movs	r0, #200	@ 0xc8
 8008ea6:	f7f8 ff5d 	bl	8001d64 <xTraceEventCreate2>
					return errQUEUE_EMPTY;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e0c2      	b.n	8009034 <xQueueReceive+0x338>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d106      	bne.n	8008ec2 <xQueueReceive+0x1c6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eb4:	f107 0310 	add.w	r3, r7, #16
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 ff71 	bl	8009da0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ec2:	f001 fe75 	bl	800abb0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ec6:	f000 fca3 	bl	8009810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eca:	f001 fe3f 	bl	800ab4c <vPortEnterCritical>
 8008ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ed4:	b25b      	sxtb	r3, r3
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eda:	d103      	bne.n	8008ee4 <xQueueReceive+0x1e8>
 8008edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008eea:	b25b      	sxtb	r3, r3
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef0:	d103      	bne.n	8008efa <xQueueReceive+0x1fe>
 8008ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008efa:	f001 fe59 	bl	800abb0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008efe:	1d3a      	adds	r2, r7, #4
 8008f00:	f107 0310 	add.w	r3, r7, #16
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 ff60 	bl	8009dcc <xTaskCheckForTimeOut>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d154      	bne.n	8008fbc <xQueueReceive+0x2c0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f14:	f000 f983 	bl	800921e <prvIsQueueEmpty>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d048      	beq.n	8008fb0 <xQueueReceive+0x2b4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8008f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008f24:	2b04      	cmp	r3, #4
 8008f26:	d82a      	bhi.n	8008f7e <xQueueReceive+0x282>
 8008f28:	a201      	add	r2, pc, #4	@ (adr r2, 8008f30 <xQueueReceive+0x234>)
 8008f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2e:	bf00      	nop
 8008f30:	08008f45 	.word	0x08008f45
 8008f34:	08008f65 	.word	0x08008f65
 8008f38:	08008f55 	.word	0x08008f55
 8008f3c:	08008f55 	.word	0x08008f55
 8008f40:	08008f73 	.word	0x08008f73
 8008f44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4c:	2066      	movs	r0, #102	@ 0x66
 8008f4e:	f7f8 ff85 	bl	8001e5c <xTraceEventCreate3>
 8008f52:	e014      	b.n	8008f7e <xQueueReceive+0x282>
 8008f54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f5c:	2067      	movs	r0, #103	@ 0x67
 8008f5e:	f7f8 ff7d 	bl	8001e5c <xTraceEventCreate3>
 8008f62:	e00c      	b.n	8008f7e <xQueueReceive+0x282>
 8008f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	2068      	movs	r0, #104	@ 0x68
 8008f6c:	f7f8 fefa 	bl	8001d64 <xTraceEventCreate2>
 8008f70:	e005      	b.n	8008f7e <xQueueReceive+0x282>
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	4619      	mov	r1, r3
 8008f78:	20f6      	movs	r0, #246	@ 0xf6
 8008f7a:	f7f8 fef3 	bl	8001d64 <xTraceEventCreate2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f80:	3324      	adds	r3, #36	@ 0x24
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fe46 	bl	8009c18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f8e:	f000 f8e7 	bl	8009160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f92:	f000 fc4b 	bl	800982c <xTaskResumeAll>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f47f aef9 	bne.w	8008d90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008f9e:	4b27      	ldr	r3, [pc, #156]	@ (800903c <xQueueReceive+0x340>)
 8008fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	e6ef      	b.n	8008d90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008fb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fb2:	f000 f8d5 	bl	8009160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fb6:	f000 fc39 	bl	800982c <xTaskResumeAll>
 8008fba:	e6e9      	b.n	8008d90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008fbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fbe:	f000 f8cf 	bl	8009160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fc2:	f000 fc33 	bl	800982c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fc8:	f000 f929 	bl	800921e <prvIsQueueEmpty>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f43f aede 	beq.w	8008d90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	d829      	bhi.n	8009032 <xQueueReceive+0x336>
 8008fde:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe4 <xQueueReceive+0x2e8>)
 8008fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe4:	08008ff9 	.word	0x08008ff9
 8008fe8:	08009019 	.word	0x08009019
 8008fec:	08009009 	.word	0x08009009
 8008ff0:	08009009 	.word	0x08009009
 8008ff4:	08009027 	.word	0x08009027
 8008ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009000:	2063      	movs	r0, #99	@ 0x63
 8009002:	f7f8 ff2b 	bl	8001e5c <xTraceEventCreate3>
 8009006:	e014      	b.n	8009032 <xQueueReceive+0x336>
 8009008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009010:	2064      	movs	r0, #100	@ 0x64
 8009012:	f7f8 ff23 	bl	8001e5c <xTraceEventCreate3>
 8009016:	e00c      	b.n	8009032 <xQueueReceive+0x336>
 8009018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	4619      	mov	r1, r3
 800901e:	2065      	movs	r0, #101	@ 0x65
 8009020:	f7f8 fea0 	bl	8001d64 <xTraceEventCreate2>
 8009024:	e005      	b.n	8009032 <xQueueReceive+0x336>
 8009026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	4619      	mov	r1, r3
 800902c:	20c8      	movs	r0, #200	@ 0xc8
 800902e:	f7f8 fe99 	bl	8001d64 <xTraceEventCreate2>
				return errQUEUE_EMPTY;
 8009032:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009034:	4618      	mov	r0, r3
 8009036:	3730      	adds	r7, #48	@ 0x30
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	e000ed04 	.word	0xe000ed04

08009040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10d      	bne.n	800907a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d14d      	bne.n	8009102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fff8 	bl	800a060 <xTaskPriorityDisinherit>
 8009070:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	609a      	str	r2, [r3, #8]
 8009078:	e043      	b.n	8009102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d119      	bne.n	80090b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6858      	ldr	r0, [r3, #4]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009088:	461a      	mov	r2, r3
 800908a:	68b9      	ldr	r1, [r7, #8]
 800908c:	f002 f9d2 	bl	800b434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009098:	441a      	add	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d32b      	bcc.n	8009102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	605a      	str	r2, [r3, #4]
 80090b2:	e026      	b.n	8009102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	68d8      	ldr	r0, [r3, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090bc:	461a      	mov	r2, r3
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	f002 f9b8 	bl	800b434 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090cc:	425b      	negs	r3, r3
 80090ce:	441a      	add	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d207      	bcs.n	80090f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e8:	425b      	negs	r3, r3
 80090ea:	441a      	add	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d105      	bne.n	8009102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	3b01      	subs	r3, #1
 8009100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	1c5a      	adds	r2, r3, #1
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800910a:	697b      	ldr	r3, [r7, #20]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009122:	2b00      	cmp	r3, #0
 8009124:	d018      	beq.n	8009158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800912e:	441a      	add	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	429a      	cmp	r2, r3
 800913e:	d303      	bcc.n	8009148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68d9      	ldr	r1, [r3, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009150:	461a      	mov	r2, r3
 8009152:	6838      	ldr	r0, [r7, #0]
 8009154:	f002 f96e 	bl	800b434 <memcpy>
	}
}
 8009158:	bf00      	nop
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009168:	f001 fcf0 	bl	800ab4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009174:	e01e      	b.n	80091b4 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800917a:	2b00      	cmp	r3, #0
 800917c:	d008      	beq.n	8009190 <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f8dc 	bl	800933c <prvNotifyQueueSetContainer>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d010      	beq.n	80091ac <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 800918a:	f000 fe83 	bl	8009e94 <vTaskMissedYield>
 800918e:	e00d      	b.n	80091ac <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009194:	2b00      	cmp	r3, #0
 8009196:	d012      	beq.n	80091be <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3324      	adds	r3, #36	@ 0x24
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fd97 	bl	8009cd0 <xTaskRemoveFromEventList>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80091a8:	f000 fe74 	bl	8009e94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	dcdc      	bgt.n	8009176 <prvUnlockQueue+0x16>
 80091bc:	e000      	b.n	80091c0 <prvUnlockQueue+0x60>
						break;
 80091be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	22ff      	movs	r2, #255	@ 0xff
 80091c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80091c8:	f001 fcf2 	bl	800abb0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091cc:	f001 fcbe 	bl	800ab4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091d8:	e011      	b.n	80091fe <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d012      	beq.n	8009208 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	3310      	adds	r3, #16
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fd72 	bl	8009cd0 <xTaskRemoveFromEventList>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 80091f2:	f000 fe4f 	bl	8009e94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009202:	2b00      	cmp	r3, #0
 8009204:	dce9      	bgt.n	80091da <prvUnlockQueue+0x7a>
 8009206:	e000      	b.n	800920a <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 8009208:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	22ff      	movs	r2, #255	@ 0xff
 800920e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009212:	f001 fccd 	bl	800abb0 <vPortExitCritical>
}
 8009216:	bf00      	nop
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009226:	f001 fc91 	bl	800ab4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009232:	2301      	movs	r3, #1
 8009234:	60fb      	str	r3, [r7, #12]
 8009236:	e001      	b.n	800923c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800923c:	f001 fcb8 	bl	800abb0 <vPortExitCritical>

	return xReturn;
 8009240:	68fb      	ldr	r3, [r7, #12]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009252:	f001 fc7b 	bl	800ab4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925e:	429a      	cmp	r2, r3
 8009260:	d102      	bne.n	8009268 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009262:	2301      	movs	r3, #1
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	e001      	b.n	800926c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009268:	2300      	movs	r3, #0
 800926a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800926c:	f001 fca0 	bl	800abb0 <vPortExitCritical>

	return xReturn;
 8009270:	68fb      	ldr	r3, [r7, #12]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009286:	2300      	movs	r3, #0
 8009288:	60fb      	str	r3, [r7, #12]
 800928a:	e018      	b.n	80092be <vQueueAddToRegistry+0x42>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800928c:	4a10      	ldr	r2, [pc, #64]	@ (80092d0 <vQueueAddToRegistry+0x54>)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10f      	bne.n	80092b8 <vQueueAddToRegistry+0x3c>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009298:	490d      	ldr	r1, [pc, #52]	@ (80092d0 <vQueueAddToRegistry+0x54>)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80092a2:	4a0b      	ldr	r2, [pc, #44]	@ (80092d0 <vQueueAddToRegistry+0x54>)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	4413      	add	r3, r2
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7f9 fdb4 	bl	8002e1e <xTraceObjectSetNameWithoutHandle>
				break;
 80092b6:	e006      	b.n	80092c6 <vQueueAddToRegistry+0x4a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3301      	adds	r3, #1
 80092bc:	60fb      	str	r3, [r7, #12]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2b07      	cmp	r3, #7
 80092c2:	d9e3      	bls.n	800928c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	200028f4 	.word	0x200028f4

080092d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092e4:	f001 fc32 	bl	800ab4c <vPortEnterCritical>
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092ee:	b25b      	sxtb	r3, r3
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f4:	d103      	bne.n	80092fe <vQueueWaitForMessageRestricted+0x2a>
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009304:	b25b      	sxtb	r3, r3
 8009306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930a:	d103      	bne.n	8009314 <vQueueWaitForMessageRestricted+0x40>
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009314:	f001 fc4c 	bl	800abb0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931c:	2b00      	cmp	r3, #0
 800931e:	d106      	bne.n	800932e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	3324      	adds	r3, #36	@ 0x24
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fc9b 	bl	8009c64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800932e:	6978      	ldr	r0, [r7, #20]
 8009330:	f7ff ff16 	bl	8009160 <prvUnlockQueue>
	}
 8009334:	bf00      	nop
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009348:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10b      	bne.n	800936c <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	613b      	str	r3, [r7, #16]
}
 8009366:	bf00      	nop
 8009368:	bf00      	nop
 800936a:	e7fd      	b.n	8009368 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009374:	429a      	cmp	r2, r3
 8009376:	d30b      	bcc.n	8009390 <prvNotifyQueueSetContainer+0x54>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	60fb      	str	r3, [r7, #12]
}
 800938a:	bf00      	nop
 800938c:	bf00      	nop
 800938e:	e7fd      	b.n	800938c <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009398:	429a      	cmp	r2, r3
 800939a:	d22d      	bcs.n	80093f8 <prvNotifyQueueSetContainer+0xbc>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093a2:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SET_SEND( pxQueueSetContainer );
 80093a4:	69b9      	ldr	r1, [r7, #24]
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093aa:	3301      	adds	r3, #1
 80093ac:	461a      	mov	r2, r3
 80093ae:	2050      	movs	r0, #80	@ 0x50
 80093b0:	f7f8 fcd8 	bl	8001d64 <xTraceEventCreate2>

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80093b4:	1d3b      	adds	r3, r7, #4
 80093b6:	2200      	movs	r2, #0
 80093b8:	4619      	mov	r1, r3
 80093ba:	69b8      	ldr	r0, [r7, #24]
 80093bc:	f7ff fe40 	bl	8009040 <prvCopyDataToQueue>
 80093c0:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80093c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ca:	d10e      	bne.n	80093ea <prvNotifyQueueSetContainer+0xae>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d011      	beq.n	80093f8 <prvNotifyQueueSetContainer+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	3324      	adds	r3, #36	@ 0x24
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fc79 	bl	8009cd0 <xTaskRemoveFromEventList>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d009      	beq.n	80093f8 <prvNotifyQueueSetContainer+0xbc>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80093e4:	2301      	movs	r3, #1
 80093e6:	61fb      	str	r3, [r7, #28]
 80093e8:	e006      	b.n	80093f8 <prvNotifyQueueSetContainer+0xbc>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	3301      	adds	r3, #1
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	b25a      	sxtb	r2, r3
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093f8:	69fb      	ldr	r3, [r7, #28]
	}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009402:	b580      	push	{r7, lr}
 8009404:	b08c      	sub	sp, #48	@ 0x30
 8009406:	af04      	add	r7, sp, #16
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	603b      	str	r3, [r7, #0]
 800940e:	4613      	mov	r3, r2
 8009410:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009412:	88fb      	ldrh	r3, [r7, #6]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4618      	mov	r0, r3
 8009418:	f001 fcc0 	bl	800ad9c <pvPortMalloc>
 800941c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00e      	beq.n	8009442 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009424:	20a8      	movs	r0, #168	@ 0xa8
 8009426:	f001 fcb9 	bl	800ad9c <pvPortMalloc>
 800942a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	631a      	str	r2, [r3, #48]	@ 0x30
 8009438:	e005      	b.n	8009446 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800943a:	6978      	ldr	r0, [r7, #20]
 800943c:	f001 fd94 	bl	800af68 <vPortFree>
 8009440:	e001      	b.n	8009446 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009442:	2300      	movs	r3, #0
 8009444:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d013      	beq.n	8009474 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800944c:	88fa      	ldrh	r2, [r7, #6]
 800944e:	2300      	movs	r3, #0
 8009450:	9303      	str	r3, [sp, #12]
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	9302      	str	r3, [sp, #8]
 8009456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	68b9      	ldr	r1, [r7, #8]
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 f80e 	bl	8009484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009468:	69f8      	ldr	r0, [r7, #28]
 800946a:	f000 f8b3 	bl	80095d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800946e:	2301      	movs	r3, #1
 8009470:	61bb      	str	r3, [r7, #24]
 8009472:	e002      	b.n	800947a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009474:	f04f 33ff 	mov.w	r3, #4294967295
 8009478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800947a:	69bb      	ldr	r3, [r7, #24]
	}
 800947c:	4618      	mov	r0, r3
 800947e:	3720      	adds	r7, #32
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b088      	sub	sp, #32
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	461a      	mov	r2, r3
 800949c:	21a5      	movs	r1, #165	@ 0xa5
 800949e:	f001 ff45 	bl	800b32c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094ac:	3b01      	subs	r3, #1
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	f023 0307 	bic.w	r3, r3, #7
 80094ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	f003 0307 	and.w	r3, r3, #7
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <prvInitialiseNewTask+0x5a>
	__asm volatile
 80094c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	617b      	str	r3, [r7, #20]
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	e7fd      	b.n	80094da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d01f      	beq.n	8009524 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094e4:	2300      	movs	r3, #0
 80094e6:	61fb      	str	r3, [r7, #28]
 80094e8:	e012      	b.n	8009510 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	4413      	add	r3, r2
 80094f0:	7819      	ldrb	r1, [r3, #0]
 80094f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	4413      	add	r3, r2
 80094f8:	3334      	adds	r3, #52	@ 0x34
 80094fa:	460a      	mov	r2, r1
 80094fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	4413      	add	r3, r2
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d006      	beq.n	8009518 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	3301      	adds	r3, #1
 800950e:	61fb      	str	r3, [r7, #28]
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	2b0f      	cmp	r3, #15
 8009514:	d9e9      	bls.n	80094ea <prvInitialiseNewTask+0x66>
 8009516:	e000      	b.n	800951a <prvInitialiseNewTask+0x96>
			{
				break;
 8009518:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009522:	e003      	b.n	800952c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	2b06      	cmp	r3, #6
 8009530:	d901      	bls.n	8009536 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009532:	2306      	movs	r3, #6
 8009534:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800953a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800953c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009540:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009544:	2200      	movs	r2, #0
 8009546:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	3304      	adds	r3, #4
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe ff53 	bl	80083f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	3318      	adds	r3, #24
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe ff4e 	bl	80083f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009560:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009564:	f1c3 0207 	rsb	r2, r3, #7
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800956c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009570:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009574:	2200      	movs	r2, #0
 8009576:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	2200      	movs	r2, #0
 800957e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009584:	3354      	adds	r3, #84	@ 0x54
 8009586:	224c      	movs	r2, #76	@ 0x4c
 8009588:	2100      	movs	r1, #0
 800958a:	4618      	mov	r0, r3
 800958c:	f001 fece 	bl	800b32c <memset>
 8009590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009592:	4a0d      	ldr	r2, [pc, #52]	@ (80095c8 <prvInitialiseNewTask+0x144>)
 8009594:	659a      	str	r2, [r3, #88]	@ 0x58
 8009596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009598:	4a0c      	ldr	r2, [pc, #48]	@ (80095cc <prvInitialiseNewTask+0x148>)
 800959a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	4a0c      	ldr	r2, [pc, #48]	@ (80095d0 <prvInitialiseNewTask+0x14c>)
 80095a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	68f9      	ldr	r1, [r7, #12]
 80095a6:	69b8      	ldr	r0, [r7, #24]
 80095a8:	f001 f98e 	bl	800a8c8 <pxPortInitialiseStack>
 80095ac:	4602      	mov	r2, r0
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095be:	bf00      	nop
 80095c0:	3720      	adds	r7, #32
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20006aa8 	.word	0x20006aa8
 80095cc:	20006b10 	.word	0x20006b10
 80095d0:	20006b78 	.word	0x20006b78

080095d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095dc:	f001 fab6 	bl	800ab4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095e0:	4b37      	ldr	r3, [pc, #220]	@ (80096c0 <prvAddNewTaskToReadyList+0xec>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	4a36      	ldr	r2, [pc, #216]	@ (80096c0 <prvAddNewTaskToReadyList+0xec>)
 80095e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095ea:	4b36      	ldr	r3, [pc, #216]	@ (80096c4 <prvAddNewTaskToReadyList+0xf0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d109      	bne.n	8009606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095f2:	4a34      	ldr	r2, [pc, #208]	@ (80096c4 <prvAddNewTaskToReadyList+0xf0>)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095f8:	4b31      	ldr	r3, [pc, #196]	@ (80096c0 <prvAddNewTaskToReadyList+0xec>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d110      	bne.n	8009622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009600:	f000 fc6c 	bl	8009edc <prvInitialiseTaskLists>
 8009604:	e00d      	b.n	8009622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009606:	4b30      	ldr	r3, [pc, #192]	@ (80096c8 <prvAddNewTaskToReadyList+0xf4>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d109      	bne.n	8009622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800960e:	4b2d      	ldr	r3, [pc, #180]	@ (80096c4 <prvAddNewTaskToReadyList+0xf0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009618:	429a      	cmp	r2, r3
 800961a:	d802      	bhi.n	8009622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800961c:	4a29      	ldr	r2, [pc, #164]	@ (80096c4 <prvAddNewTaskToReadyList+0xf0>)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009622:	4b2a      	ldr	r3, [pc, #168]	@ (80096cc <prvAddNewTaskToReadyList+0xf8>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3301      	adds	r3, #1
 8009628:	4a28      	ldr	r2, [pc, #160]	@ (80096cc <prvAddNewTaskToReadyList+0xf8>)
 800962a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800962c:	4b27      	ldr	r3, [pc, #156]	@ (80096cc <prvAddNewTaskToReadyList+0xf8>)
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00d      	beq.n	8009656 <prvAddNewTaskToReadyList+0x82>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00a      	beq.n	8009656 <prvAddNewTaskToReadyList+0x82>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	2010      	movs	r0, #16
 800964e:	f7f9 fbcd 	bl	8002dec <xTraceObjectRegisterWithoutHandle>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0

		prvAddTaskToReadyList( pxNewTCB );
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4619      	mov	r1, r3
 800965a:	2030      	movs	r0, #48	@ 0x30
 800965c:	f7f8 fb0a 	bl	8001c74 <xTraceEventCreate1>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009664:	2201      	movs	r2, #1
 8009666:	409a      	lsls	r2, r3
 8009668:	4b19      	ldr	r3, [pc, #100]	@ (80096d0 <prvAddNewTaskToReadyList+0xfc>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4313      	orrs	r3, r2
 800966e:	4a18      	ldr	r2, [pc, #96]	@ (80096d0 <prvAddNewTaskToReadyList+0xfc>)
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009676:	4613      	mov	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4a15      	ldr	r2, [pc, #84]	@ (80096d4 <prvAddNewTaskToReadyList+0x100>)
 8009680:	441a      	add	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3304      	adds	r3, #4
 8009686:	4619      	mov	r1, r3
 8009688:	4610      	mov	r0, r2
 800968a:	f7fe fec2 	bl	8008412 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800968e:	f001 fa8f 	bl	800abb0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009692:	4b0d      	ldr	r3, [pc, #52]	@ (80096c8 <prvAddNewTaskToReadyList+0xf4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00e      	beq.n	80096b8 <prvAddNewTaskToReadyList+0xe4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800969a:	4b0a      	ldr	r3, [pc, #40]	@ (80096c4 <prvAddNewTaskToReadyList+0xf0>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d207      	bcs.n	80096b8 <prvAddNewTaskToReadyList+0xe4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096a8:	4b0b      	ldr	r3, [pc, #44]	@ (80096d8 <prvAddNewTaskToReadyList+0x104>)
 80096aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20002a34 	.word	0x20002a34
 80096c4:	20002934 	.word	0x20002934
 80096c8:	20002a40 	.word	0x20002a40
 80096cc:	20002a50 	.word	0x20002a50
 80096d0:	20002a3c 	.word	0x20002a3c
 80096d4:	20002938 	.word	0x20002938
 80096d8:	e000ed04 	.word	0xe000ed04

080096dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096e4:	2300      	movs	r3, #0
 80096e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d01c      	beq.n	8009728 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096ee:	4b16      	ldr	r3, [pc, #88]	@ (8009748 <vTaskDelay+0x6c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00b      	beq.n	800970e <vTaskDelay+0x32>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	60bb      	str	r3, [r7, #8]
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	e7fd      	b.n	800970a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800970e:	f000 f87f 	bl	8009810 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	207a      	movs	r0, #122	@ 0x7a
 8009716:	f7f8 faad 	bl	8001c74 <xTraceEventCreate1>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800971a:	2100      	movs	r1, #0
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fd33 	bl	800a188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009722:	f000 f883 	bl	800982c <xTaskResumeAll>
 8009726:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d107      	bne.n	800973e <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 800972e:	4b07      	ldr	r3, [pc, #28]	@ (800974c <vTaskDelay+0x70>)
 8009730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009734:	601a      	str	r2, [r3, #0]
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800973e:	bf00      	nop
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20002a5c 	.word	0x20002a5c
 800974c:	e000ed04 	.word	0xe000ed04

08009750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009756:	4b26      	ldr	r3, [pc, #152]	@ (80097f0 <vTaskStartScheduler+0xa0>)
 8009758:	9301      	str	r3, [sp, #4]
 800975a:	2300      	movs	r3, #0
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	2300      	movs	r3, #0
 8009760:	2280      	movs	r2, #128	@ 0x80
 8009762:	4924      	ldr	r1, [pc, #144]	@ (80097f4 <vTaskStartScheduler+0xa4>)
 8009764:	4824      	ldr	r0, [pc, #144]	@ (80097f8 <vTaskStartScheduler+0xa8>)
 8009766:	f7ff fe4c 	bl	8009402 <xTaskCreate>
 800976a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d102      	bne.n	8009778 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8009772:	f000 fd6f 	bl	800a254 <xTimerCreateTimerTask>
 8009776:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d124      	bne.n	80097c8 <vTaskStartScheduler+0x78>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	60bb      	str	r3, [r7, #8]
}
 8009790:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009792:	4b1a      	ldr	r3, [pc, #104]	@ (80097fc <vTaskStartScheduler+0xac>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3354      	adds	r3, #84	@ 0x54
 8009798:	4a19      	ldr	r2, [pc, #100]	@ (8009800 <vTaskStartScheduler+0xb0>)
 800979a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800979c:	4b19      	ldr	r3, [pc, #100]	@ (8009804 <vTaskStartScheduler+0xb4>)
 800979e:	f04f 32ff 	mov.w	r2, #4294967295
 80097a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097a4:	4b18      	ldr	r3, [pc, #96]	@ (8009808 <vTaskStartScheduler+0xb8>)
 80097a6:	2201      	movs	r2, #1
 80097a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80097aa:	4b18      	ldr	r3, [pc, #96]	@ (800980c <vTaskStartScheduler+0xbc>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80097b0:	4b12      	ldr	r3, [pc, #72]	@ (80097fc <vTaskStartScheduler+0xac>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	4b11      	ldr	r3, [pc, #68]	@ (80097fc <vTaskStartScheduler+0xac>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ba:	4619      	mov	r1, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	f7fa f99b 	bl	8003af8 <xTraceTaskSwitch>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097c2:	f001 f90d 	bl	800a9e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097c6:	e00f      	b.n	80097e8 <vTaskStartScheduler+0x98>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ce:	d10b      	bne.n	80097e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	607b      	str	r3, [r7, #4]
}
 80097e2:	bf00      	nop
 80097e4:	bf00      	nop
 80097e6:	e7fd      	b.n	80097e4 <vTaskStartScheduler+0x94>
}
 80097e8:	bf00      	nop
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20002a58 	.word	0x20002a58
 80097f4:	0800b740 	.word	0x0800b740
 80097f8:	08009ead 	.word	0x08009ead
 80097fc:	20002934 	.word	0x20002934
 8009800:	20000014 	.word	0x20000014
 8009804:	20002a54 	.word	0x20002a54
 8009808:	20002a40 	.word	0x20002a40
 800980c:	20002a38 	.word	0x20002a38

08009810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009810:	b480      	push	{r7}
 8009812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009814:	4b04      	ldr	r3, [pc, #16]	@ (8009828 <vTaskSuspendAll+0x18>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3301      	adds	r3, #1
 800981a:	4a03      	ldr	r2, [pc, #12]	@ (8009828 <vTaskSuspendAll+0x18>)
 800981c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800981e:	bf00      	nop
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	20002a5c 	.word	0x20002a5c

0800982c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009836:	2300      	movs	r3, #0
 8009838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800983a:	4b44      	ldr	r3, [pc, #272]	@ (800994c <xTaskResumeAll+0x120>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10b      	bne.n	800985a <xTaskResumeAll+0x2e>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	603b      	str	r3, [r7, #0]
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	e7fd      	b.n	8009856 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800985a:	f001 f977 	bl	800ab4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800985e:	4b3b      	ldr	r3, [pc, #236]	@ (800994c <xTaskResumeAll+0x120>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3b01      	subs	r3, #1
 8009864:	4a39      	ldr	r2, [pc, #228]	@ (800994c <xTaskResumeAll+0x120>)
 8009866:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009868:	4b38      	ldr	r3, [pc, #224]	@ (800994c <xTaskResumeAll+0x120>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d166      	bne.n	800993e <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009870:	4b37      	ldr	r3, [pc, #220]	@ (8009950 <xTaskResumeAll+0x124>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d062      	beq.n	800993e <xTaskResumeAll+0x112>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009878:	e033      	b.n	80098e2 <xTaskResumeAll+0xb6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800987a:	4b36      	ldr	r3, [pc, #216]	@ (8009954 <xTaskResumeAll+0x128>)
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	3318      	adds	r3, #24
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe fe20 	bl	80084cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3304      	adds	r3, #4
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe fe1b 	bl	80084cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4619      	mov	r1, r3
 800989a:	2030      	movs	r0, #48	@ 0x30
 800989c:	f7f8 f9ea 	bl	8001c74 <xTraceEventCreate1>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a4:	2201      	movs	r2, #1
 80098a6:	409a      	lsls	r2, r3
 80098a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009958 <xTaskResumeAll+0x12c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009958 <xTaskResumeAll+0x12c>)
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4a27      	ldr	r2, [pc, #156]	@ (800995c <xTaskResumeAll+0x130>)
 80098c0:	441a      	add	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	3304      	adds	r3, #4
 80098c6:	4619      	mov	r1, r3
 80098c8:	4610      	mov	r0, r2
 80098ca:	f7fe fda2 	bl	8008412 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d2:	4b23      	ldr	r3, [pc, #140]	@ (8009960 <xTaskResumeAll+0x134>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d8:	429a      	cmp	r2, r3
 80098da:	d302      	bcc.n	80098e2 <xTaskResumeAll+0xb6>
					{
						xYieldPending = pdTRUE;
 80098dc:	4b21      	ldr	r3, [pc, #132]	@ (8009964 <xTaskResumeAll+0x138>)
 80098de:	2201      	movs	r2, #1
 80098e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009954 <xTaskResumeAll+0x128>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1c7      	bne.n	800987a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <xTaskResumeAll+0xc8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098f0:	f000 fb78 	bl	8009fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80098f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009968 <xTaskResumeAll+0x13c>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d010      	beq.n	8009922 <xTaskResumeAll+0xf6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009900:	f000 f846 	bl	8009990 <xTaskIncrementTick>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <xTaskResumeAll+0xe4>
							{
								xYieldPending = pdTRUE;
 800990a:	4b16      	ldr	r3, [pc, #88]	@ (8009964 <xTaskResumeAll+0x138>)
 800990c:	2201      	movs	r2, #1
 800990e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3b01      	subs	r3, #1
 8009914:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1f1      	bne.n	8009900 <xTaskResumeAll+0xd4>

						xPendedTicks = 0;
 800991c:	4b12      	ldr	r3, [pc, #72]	@ (8009968 <xTaskResumeAll+0x13c>)
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009922:	4b10      	ldr	r3, [pc, #64]	@ (8009964 <xTaskResumeAll+0x138>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d009      	beq.n	800993e <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800992a:	2301      	movs	r3, #1
 800992c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800992e:	4b0f      	ldr	r3, [pc, #60]	@ (800996c <xTaskResumeAll+0x140>)
 8009930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800993e:	f001 f937 	bl	800abb0 <vPortExitCritical>

	return xAlreadyYielded;
 8009942:	68bb      	ldr	r3, [r7, #8]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20002a5c 	.word	0x20002a5c
 8009950:	20002a34 	.word	0x20002a34
 8009954:	200029f4 	.word	0x200029f4
 8009958:	20002a3c 	.word	0x20002a3c
 800995c:	20002938 	.word	0x20002938
 8009960:	20002934 	.word	0x20002934
 8009964:	20002a48 	.word	0x20002a48
 8009968:	20002a44 	.word	0x20002a44
 800996c:	e000ed04 	.word	0xe000ed04

08009970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009976:	4b05      	ldr	r3, [pc, #20]	@ (800998c <xTaskGetTickCount+0x1c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800997c:	687b      	ldr	r3, [r7, #4]
}
 800997e:	4618      	mov	r0, r3
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	20002a38 	.word	0x20002a38

08009990 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009996:	2300      	movs	r3, #0
 8009998:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800999a:	4b5e      	ldr	r3, [pc, #376]	@ (8009b14 <xTaskIncrementTick+0x184>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d003      	beq.n	80099aa <xTaskIncrementTick+0x1a>
 80099a2:	4b5d      	ldr	r3, [pc, #372]	@ (8009b18 <xTaskIncrementTick+0x188>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d105      	bne.n	80099b6 <xTaskIncrementTick+0x26>
 80099aa:	4b5c      	ldr	r3, [pc, #368]	@ (8009b1c <xTaskIncrementTick+0x18c>)
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	4b5c      	ldr	r3, [pc, #368]	@ (8009b20 <xTaskIncrementTick+0x190>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3201      	adds	r2, #1
 80099b4:	619a      	str	r2, [r3, #24]
 80099b6:	4b57      	ldr	r3, [pc, #348]	@ (8009b14 <xTaskIncrementTick+0x184>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d106      	bne.n	80099cc <xTaskIncrementTick+0x3c>
 80099be:	4b57      	ldr	r3, [pc, #348]	@ (8009b1c <xTaskIncrementTick+0x18c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	4619      	mov	r1, r3
 80099c6:	2031      	movs	r0, #49	@ 0x31
 80099c8:	f7f8 f954 	bl	8001c74 <xTraceEventCreate1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099cc:	4b51      	ldr	r3, [pc, #324]	@ (8009b14 <xTaskIncrementTick+0x184>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f040 8094 	bne.w	8009afe <xTaskIncrementTick+0x16e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099d6:	4b51      	ldr	r3, [pc, #324]	@ (8009b1c <xTaskIncrementTick+0x18c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3301      	adds	r3, #1
 80099dc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099de:	4a4f      	ldr	r2, [pc, #316]	@ (8009b1c <xTaskIncrementTick+0x18c>)
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d121      	bne.n	8009a2e <xTaskIncrementTick+0x9e>
		{
			taskSWITCH_DELAYED_LISTS();
 80099ea:	4b4e      	ldr	r3, [pc, #312]	@ (8009b24 <xTaskIncrementTick+0x194>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00b      	beq.n	8009a0c <xTaskIncrementTick+0x7c>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	603b      	str	r3, [r7, #0]
}
 8009a06:	bf00      	nop
 8009a08:	bf00      	nop
 8009a0a:	e7fd      	b.n	8009a08 <xTaskIncrementTick+0x78>
 8009a0c:	4b45      	ldr	r3, [pc, #276]	@ (8009b24 <xTaskIncrementTick+0x194>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	4b45      	ldr	r3, [pc, #276]	@ (8009b28 <xTaskIncrementTick+0x198>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a43      	ldr	r2, [pc, #268]	@ (8009b24 <xTaskIncrementTick+0x194>)
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	4a43      	ldr	r2, [pc, #268]	@ (8009b28 <xTaskIncrementTick+0x198>)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	4b42      	ldr	r3, [pc, #264]	@ (8009b2c <xTaskIncrementTick+0x19c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3301      	adds	r3, #1
 8009a26:	4a41      	ldr	r2, [pc, #260]	@ (8009b2c <xTaskIncrementTick+0x19c>)
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	f000 fadb 	bl	8009fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a2e:	4b40      	ldr	r3, [pc, #256]	@ (8009b30 <xTaskIncrementTick+0x1a0>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d34d      	bcc.n	8009ad4 <xTaskIncrementTick+0x144>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a38:	4b3a      	ldr	r3, [pc, #232]	@ (8009b24 <xTaskIncrementTick+0x194>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d104      	bne.n	8009a4c <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a42:	4b3b      	ldr	r3, [pc, #236]	@ (8009b30 <xTaskIncrementTick+0x1a0>)
 8009a44:	f04f 32ff 	mov.w	r2, #4294967295
 8009a48:	601a      	str	r2, [r3, #0]
					break;
 8009a4a:	e043      	b.n	8009ad4 <xTaskIncrementTick+0x144>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a4c:	4b35      	ldr	r3, [pc, #212]	@ (8009b24 <xTaskIncrementTick+0x194>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d203      	bcs.n	8009a6c <xTaskIncrementTick+0xdc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a64:	4a32      	ldr	r2, [pc, #200]	@ (8009b30 <xTaskIncrementTick+0x1a0>)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a6a:	e033      	b.n	8009ad4 <xTaskIncrementTick+0x144>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fd2b 	bl	80084cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d004      	beq.n	8009a88 <xTaskIncrementTick+0xf8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	3318      	adds	r3, #24
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fd22 	bl	80084cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	2030      	movs	r0, #48	@ 0x30
 8009a8e:	f7f8 f8f1 	bl	8001c74 <xTraceEventCreate1>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a96:	2201      	movs	r2, #1
 8009a98:	409a      	lsls	r2, r3
 8009a9a:	4b26      	ldr	r3, [pc, #152]	@ (8009b34 <xTaskIncrementTick+0x1a4>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	4a24      	ldr	r2, [pc, #144]	@ (8009b34 <xTaskIncrementTick+0x1a4>)
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4a21      	ldr	r2, [pc, #132]	@ (8009b38 <xTaskIncrementTick+0x1a8>)
 8009ab2:	441a      	add	r2, r3
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4610      	mov	r0, r2
 8009abc:	f7fe fca9 	bl	8008412 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8009b3c <xTaskIncrementTick+0x1ac>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d3b4      	bcc.n	8009a38 <xTaskIncrementTick+0xa8>
						{
							xSwitchRequired = pdTRUE;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ad2:	e7b1      	b.n	8009a38 <xTaskIncrementTick+0xa8>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ad4:	4b19      	ldr	r3, [pc, #100]	@ (8009b3c <xTaskIncrementTick+0x1ac>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ada:	4917      	ldr	r1, [pc, #92]	@ (8009b38 <xTaskIncrementTick+0x1a8>)
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	440b      	add	r3, r1
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d901      	bls.n	8009af0 <xTaskIncrementTick+0x160>
			{
				xSwitchRequired = pdTRUE;
 8009aec:	2301      	movs	r3, #1
 8009aee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009af0:	4b13      	ldr	r3, [pc, #76]	@ (8009b40 <xTaskIncrementTick+0x1b0>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d007      	beq.n	8009b08 <xTaskIncrementTick+0x178>
			{
				xSwitchRequired = pdTRUE;
 8009af8:	2301      	movs	r3, #1
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	e004      	b.n	8009b08 <xTaskIncrementTick+0x178>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009afe:	4b06      	ldr	r3, [pc, #24]	@ (8009b18 <xTaskIncrementTick+0x188>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3301      	adds	r3, #1
 8009b04:	4a04      	ldr	r2, [pc, #16]	@ (8009b18 <xTaskIncrementTick+0x188>)
 8009b06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009b08:	697b      	ldr	r3, [r7, #20]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20002a5c 	.word	0x20002a5c
 8009b18:	20002a44 	.word	0x20002a44
 8009b1c:	20002a38 	.word	0x20002a38
 8009b20:	200028ec 	.word	0x200028ec
 8009b24:	200029ec 	.word	0x200029ec
 8009b28:	200029f0 	.word	0x200029f0
 8009b2c:	20002a4c 	.word	0x20002a4c
 8009b30:	20002a54 	.word	0x20002a54
 8009b34:	20002a3c 	.word	0x20002a3c
 8009b38:	20002938 	.word	0x20002938
 8009b3c:	20002934 	.word	0x20002934
 8009b40:	20002a48 	.word	0x20002a48

08009b44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8009c00 <vTaskSwitchContext+0xbc>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b52:	4b2c      	ldr	r3, [pc, #176]	@ (8009c04 <vTaskSwitchContext+0xc0>)
 8009b54:	2201      	movs	r2, #1
 8009b56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b58:	e04e      	b.n	8009bf8 <vTaskSwitchContext+0xb4>
		xYieldPending = pdFALSE;
 8009b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8009c04 <vTaskSwitchContext+0xc0>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b60:	4b29      	ldr	r3, [pc, #164]	@ (8009c08 <vTaskSwitchContext+0xc4>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	fab3 f383 	clz	r3, r3
 8009b6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b6e:	7afb      	ldrb	r3, [r7, #11]
 8009b70:	f1c3 031f 	rsb	r3, r3, #31
 8009b74:	617b      	str	r3, [r7, #20]
 8009b76:	4925      	ldr	r1, [pc, #148]	@ (8009c0c <vTaskSwitchContext+0xc8>)
 8009b78:	697a      	ldr	r2, [r7, #20]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10b      	bne.n	8009ba2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	607b      	str	r3, [r7, #4]
}
 8009b9c:	bf00      	nop
 8009b9e:	bf00      	nop
 8009ba0:	e7fd      	b.n	8009b9e <vTaskSwitchContext+0x5a>
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4a17      	ldr	r2, [pc, #92]	@ (8009c0c <vTaskSwitchContext+0xc8>)
 8009bae:	4413      	add	r3, r2
 8009bb0:	613b      	str	r3, [r7, #16]
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	605a      	str	r2, [r3, #4]
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d104      	bne.n	8009bd2 <vTaskSwitchContext+0x8e>
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	605a      	str	r2, [r3, #4]
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8009c10 <vTaskSwitchContext+0xcc>)
 8009bda:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8009c10 <vTaskSwitchContext+0xcc>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	4b0b      	ldr	r3, [pc, #44]	@ (8009c10 <vTaskSwitchContext+0xcc>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be6:	4619      	mov	r1, r3
 8009be8:	4610      	mov	r0, r2
 8009bea:	f7f9 ff85 	bl	8003af8 <xTraceTaskSwitch>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bee:	4b08      	ldr	r3, [pc, #32]	@ (8009c10 <vTaskSwitchContext+0xcc>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3354      	adds	r3, #84	@ 0x54
 8009bf4:	4a07      	ldr	r2, [pc, #28]	@ (8009c14 <vTaskSwitchContext+0xd0>)
 8009bf6:	6013      	str	r3, [r2, #0]
}
 8009bf8:	bf00      	nop
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20002a5c 	.word	0x20002a5c
 8009c04:	20002a48 	.word	0x20002a48
 8009c08:	20002a3c 	.word	0x20002a3c
 8009c0c:	20002938 	.word	0x20002938
 8009c10:	20002934 	.word	0x20002934
 8009c14:	20000014 	.word	0x20000014

08009c18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10b      	bne.n	8009c40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	60fb      	str	r3, [r7, #12]
}
 8009c3a:	bf00      	nop
 8009c3c:	bf00      	nop
 8009c3e:	e7fd      	b.n	8009c3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c40:	4b07      	ldr	r3, [pc, #28]	@ (8009c60 <vTaskPlaceOnEventList+0x48>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3318      	adds	r3, #24
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fe fc06 	bl	800845a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c4e:	2101      	movs	r1, #1
 8009c50:	6838      	ldr	r0, [r7, #0]
 8009c52:	f000 fa99 	bl	800a188 <prvAddCurrentTaskToDelayedList>
}
 8009c56:	bf00      	nop
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	20002934 	.word	0x20002934

08009c64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	617b      	str	r3, [r7, #20]
}
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	e7fd      	b.n	8009c8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009cc8 <vTaskPlaceOnEventListRestricted+0x64>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3318      	adds	r3, #24
 8009c94:	4619      	mov	r1, r3
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f7fe fbbb 	bl	8008412 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8009ca8:	4b08      	ldr	r3, [pc, #32]	@ (8009ccc <vTaskPlaceOnEventListRestricted+0x68>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	4413      	add	r3, r2
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	2079      	movs	r0, #121	@ 0x79
 8009cb4:	f7f7 ffde 	bl	8001c74 <xTraceEventCreate1>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009cb8:	6879      	ldr	r1, [r7, #4]
 8009cba:	68b8      	ldr	r0, [r7, #8]
 8009cbc:	f000 fa64 	bl	800a188 <prvAddCurrentTaskToDelayedList>
	}
 8009cc0:	bf00      	nop
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	20002934 	.word	0x20002934
 8009ccc:	20002a38 	.word	0x20002a38

08009cd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10b      	bne.n	8009cfe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	60fb      	str	r3, [r7, #12]
}
 8009cf8:	bf00      	nop
 8009cfa:	bf00      	nop
 8009cfc:	e7fd      	b.n	8009cfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	3318      	adds	r3, #24
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fbe2 	bl	80084cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d08:	4b1f      	ldr	r3, [pc, #124]	@ (8009d88 <xTaskRemoveFromEventList+0xb8>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d121      	bne.n	8009d54 <xTaskRemoveFromEventList+0x84>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	3304      	adds	r3, #4
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fe fbd9 	bl	80084cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	2030      	movs	r0, #48	@ 0x30
 8009d20:	f7f7 ffa8 	bl	8001c74 <xTraceEventCreate1>
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d28:	2201      	movs	r2, #1
 8009d2a:	409a      	lsls	r2, r3
 8009d2c:	4b17      	ldr	r3, [pc, #92]	@ (8009d8c <xTaskRemoveFromEventList+0xbc>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	4a16      	ldr	r2, [pc, #88]	@ (8009d8c <xTaskRemoveFromEventList+0xbc>)
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4a13      	ldr	r2, [pc, #76]	@ (8009d90 <xTaskRemoveFromEventList+0xc0>)
 8009d44:	441a      	add	r2, r3
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	f7fe fb60 	bl	8008412 <vListInsertEnd>
 8009d52:	e005      	b.n	8009d60 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	3318      	adds	r3, #24
 8009d58:	4619      	mov	r1, r3
 8009d5a:	480e      	ldr	r0, [pc, #56]	@ (8009d94 <xTaskRemoveFromEventList+0xc4>)
 8009d5c:	f7fe fb59 	bl	8008412 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d64:	4b0c      	ldr	r3, [pc, #48]	@ (8009d98 <xTaskRemoveFromEventList+0xc8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d905      	bls.n	8009d7a <xTaskRemoveFromEventList+0xaa>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d72:	4b0a      	ldr	r3, [pc, #40]	@ (8009d9c <xTaskRemoveFromEventList+0xcc>)
 8009d74:	2201      	movs	r2, #1
 8009d76:	601a      	str	r2, [r3, #0]
 8009d78:	e001      	b.n	8009d7e <xTaskRemoveFromEventList+0xae>
	}
	else
	{
		xReturn = pdFALSE;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009d7e:	697b      	ldr	r3, [r7, #20]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	20002a5c 	.word	0x20002a5c
 8009d8c:	20002a3c 	.word	0x20002a3c
 8009d90:	20002938 	.word	0x20002938
 8009d94:	200029f4 	.word	0x200029f4
 8009d98:	20002934 	.word	0x20002934
 8009d9c:	20002a48 	.word	0x20002a48

08009da0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009da8:	4b06      	ldr	r3, [pc, #24]	@ (8009dc4 <vTaskInternalSetTimeOutState+0x24>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009db0:	4b05      	ldr	r3, [pc, #20]	@ (8009dc8 <vTaskInternalSetTimeOutState+0x28>)
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	605a      	str	r2, [r3, #4]
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	20002a4c 	.word	0x20002a4c
 8009dc8:	20002a38 	.word	0x20002a38

08009dcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10b      	bne.n	8009df4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	613b      	str	r3, [r7, #16]
}
 8009dee:	bf00      	nop
 8009df0:	bf00      	nop
 8009df2:	e7fd      	b.n	8009df0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10b      	bne.n	8009e12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	60fb      	str	r3, [r7, #12]
}
 8009e0c:	bf00      	nop
 8009e0e:	bf00      	nop
 8009e10:	e7fd      	b.n	8009e0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009e12:	f000 fe9b 	bl	800ab4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e16:	4b1d      	ldr	r3, [pc, #116]	@ (8009e8c <xTaskCheckForTimeOut+0xc0>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	69ba      	ldr	r2, [r7, #24]
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2e:	d102      	bne.n	8009e36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e30:	2300      	movs	r3, #0
 8009e32:	61fb      	str	r3, [r7, #28]
 8009e34:	e023      	b.n	8009e7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	4b15      	ldr	r3, [pc, #84]	@ (8009e90 <xTaskCheckForTimeOut+0xc4>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d007      	beq.n	8009e52 <xTaskCheckForTimeOut+0x86>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	69ba      	ldr	r2, [r7, #24]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d302      	bcc.n	8009e52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	61fb      	str	r3, [r7, #28]
 8009e50:	e015      	b.n	8009e7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d20b      	bcs.n	8009e74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	1ad2      	subs	r2, r2, r3
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff ff99 	bl	8009da0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	e004      	b.n	8009e7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2200      	movs	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e7e:	f000 fe97 	bl	800abb0 <vPortExitCritical>

	return xReturn;
 8009e82:	69fb      	ldr	r3, [r7, #28]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3720      	adds	r7, #32
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20002a38 	.word	0x20002a38
 8009e90:	20002a4c 	.word	0x20002a4c

08009e94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e94:	b480      	push	{r7}
 8009e96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e98:	4b03      	ldr	r3, [pc, #12]	@ (8009ea8 <vTaskMissedYield+0x14>)
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]
}
 8009e9e:	bf00      	nop
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	20002a48 	.word	0x20002a48

08009eac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009eb4:	f000 f852 	bl	8009f5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009eb8:	4b06      	ldr	r3, [pc, #24]	@ (8009ed4 <prvIdleTask+0x28>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d9f9      	bls.n	8009eb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ec0:	4b05      	ldr	r3, [pc, #20]	@ (8009ed8 <prvIdleTask+0x2c>)
 8009ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ed0:	e7f0      	b.n	8009eb4 <prvIdleTask+0x8>
 8009ed2:	bf00      	nop
 8009ed4:	20002938 	.word	0x20002938
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	607b      	str	r3, [r7, #4]
 8009ee6:	e00c      	b.n	8009f02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	4613      	mov	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4a12      	ldr	r2, [pc, #72]	@ (8009f3c <prvInitialiseTaskLists+0x60>)
 8009ef4:	4413      	add	r3, r2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fa5e 	bl	80083b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3301      	adds	r3, #1
 8009f00:	607b      	str	r3, [r7, #4]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b06      	cmp	r3, #6
 8009f06:	d9ef      	bls.n	8009ee8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f08:	480d      	ldr	r0, [pc, #52]	@ (8009f40 <prvInitialiseTaskLists+0x64>)
 8009f0a:	f7fe fa55 	bl	80083b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f0e:	480d      	ldr	r0, [pc, #52]	@ (8009f44 <prvInitialiseTaskLists+0x68>)
 8009f10:	f7fe fa52 	bl	80083b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f14:	480c      	ldr	r0, [pc, #48]	@ (8009f48 <prvInitialiseTaskLists+0x6c>)
 8009f16:	f7fe fa4f 	bl	80083b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f1a:	480c      	ldr	r0, [pc, #48]	@ (8009f4c <prvInitialiseTaskLists+0x70>)
 8009f1c:	f7fe fa4c 	bl	80083b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f20:	480b      	ldr	r0, [pc, #44]	@ (8009f50 <prvInitialiseTaskLists+0x74>)
 8009f22:	f7fe fa49 	bl	80083b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f26:	4b0b      	ldr	r3, [pc, #44]	@ (8009f54 <prvInitialiseTaskLists+0x78>)
 8009f28:	4a05      	ldr	r2, [pc, #20]	@ (8009f40 <prvInitialiseTaskLists+0x64>)
 8009f2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f58 <prvInitialiseTaskLists+0x7c>)
 8009f2e:	4a05      	ldr	r2, [pc, #20]	@ (8009f44 <prvInitialiseTaskLists+0x68>)
 8009f30:	601a      	str	r2, [r3, #0]
}
 8009f32:	bf00      	nop
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20002938 	.word	0x20002938
 8009f40:	200029c4 	.word	0x200029c4
 8009f44:	200029d8 	.word	0x200029d8
 8009f48:	200029f4 	.word	0x200029f4
 8009f4c:	20002a08 	.word	0x20002a08
 8009f50:	20002a20 	.word	0x20002a20
 8009f54:	200029ec 	.word	0x200029ec
 8009f58:	200029f0 	.word	0x200029f0

08009f5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f62:	e019      	b.n	8009f98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f64:	f000 fdf2 	bl	800ab4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f68:	4b10      	ldr	r3, [pc, #64]	@ (8009fac <prvCheckTasksWaitingTermination+0x50>)
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	3304      	adds	r3, #4
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe faa9 	bl	80084cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb0 <prvCheckTasksWaitingTermination+0x54>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	4a0b      	ldr	r2, [pc, #44]	@ (8009fb0 <prvCheckTasksWaitingTermination+0x54>)
 8009f82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f84:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb4 <prvCheckTasksWaitingTermination+0x58>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8009fb4 <prvCheckTasksWaitingTermination+0x58>)
 8009f8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f8e:	f000 fe0f 	bl	800abb0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f810 	bl	8009fb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f98:	4b06      	ldr	r3, [pc, #24]	@ (8009fb4 <prvCheckTasksWaitingTermination+0x58>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1e1      	bne.n	8009f64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20002a08 	.word	0x20002a08
 8009fb0:	20002a34 	.word	0x20002a34
 8009fb4:	20002a1c 	.word	0x20002a1c

08009fb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3354      	adds	r3, #84	@ 0x54
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f001 f9b9 	bl	800b33c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 ffca 	bl	800af68 <vPortFree>
			vPortFree( pxTCB );
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 ffc7 	bl	800af68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
	...

08009fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fea:	4b0c      	ldr	r3, [pc, #48]	@ (800a01c <prvResetNextTaskUnblockTime+0x38>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d104      	bne.n	8009ffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ff4:	4b0a      	ldr	r3, [pc, #40]	@ (800a020 <prvResetNextTaskUnblockTime+0x3c>)
 8009ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8009ffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ffc:	e008      	b.n	800a010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ffe:	4b07      	ldr	r3, [pc, #28]	@ (800a01c <prvResetNextTaskUnblockTime+0x38>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	4a04      	ldr	r2, [pc, #16]	@ (800a020 <prvResetNextTaskUnblockTime+0x3c>)
 800a00e:	6013      	str	r3, [r2, #0]
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	200029ec 	.word	0x200029ec
 800a020:	20002a54 	.word	0x20002a54

0800a024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a02a:	4b0b      	ldr	r3, [pc, #44]	@ (800a058 <xTaskGetSchedulerState+0x34>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d102      	bne.n	800a038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a032:	2301      	movs	r3, #1
 800a034:	607b      	str	r3, [r7, #4]
 800a036:	e008      	b.n	800a04a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a038:	4b08      	ldr	r3, [pc, #32]	@ (800a05c <xTaskGetSchedulerState+0x38>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d102      	bne.n	800a046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a040:	2302      	movs	r3, #2
 800a042:	607b      	str	r3, [r7, #4]
 800a044:	e001      	b.n	800a04a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a046:	2300      	movs	r3, #0
 800a048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a04a:	687b      	ldr	r3, [r7, #4]
	}
 800a04c:	4618      	mov	r0, r3
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	20002a40 	.word	0x20002a40
 800a05c:	20002a5c 	.word	0x20002a5c

0800a060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a06c:	2300      	movs	r3, #0
 800a06e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d07c      	beq.n	800a170 <xTaskPriorityDisinherit+0x110>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a076:	4b41      	ldr	r3, [pc, #260]	@ (800a17c <xTaskPriorityDisinherit+0x11c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	693a      	ldr	r2, [r7, #16]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d00b      	beq.n	800a098 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	60fb      	str	r3, [r7, #12]
}
 800a092:	bf00      	nop
 800a094:	bf00      	nop
 800a096:	e7fd      	b.n	800a094 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10b      	bne.n	800a0b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	60bb      	str	r3, [r7, #8]
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0bc:	1e5a      	subs	r2, r3, #1
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d050      	beq.n	800a170 <xTaskPriorityDisinherit+0x110>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d14c      	bne.n	800a170 <xTaskPriorityDisinherit+0x110>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe f9f6 	bl	80084cc <uxListRemove>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d115      	bne.n	800a112 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ea:	4925      	ldr	r1, [pc, #148]	@ (800a180 <xTaskPriorityDisinherit+0x120>)
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10a      	bne.n	800a112 <xTaskPriorityDisinherit+0xb2>
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a100:	2201      	movs	r2, #1
 800a102:	fa02 f303 	lsl.w	r3, r2, r3
 800a106:	43da      	mvns	r2, r3
 800a108:	4b1e      	ldr	r3, [pc, #120]	@ (800a184 <xTaskPriorityDisinherit+0x124>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4013      	ands	r3, r2
 800a10e:	4a1d      	ldr	r2, [pc, #116]	@ (800a184 <xTaskPriorityDisinherit+0x124>)
 800a110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a112:	6939      	ldr	r1, [r7, #16]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a118:	461a      	mov	r2, r3
 800a11a:	2006      	movs	r0, #6
 800a11c:	f7f7 fe22 	bl	8001d64 <xTraceEventCreate2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12c:	f1c3 0207 	rsb	r2, r3, #7
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	4619      	mov	r1, r3
 800a138:	2030      	movs	r0, #48	@ 0x30
 800a13a:	f7f7 fd9b 	bl	8001c74 <xTraceEventCreate1>
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a142:	2201      	movs	r2, #1
 800a144:	409a      	lsls	r2, r3
 800a146:	4b0f      	ldr	r3, [pc, #60]	@ (800a184 <xTaskPriorityDisinherit+0x124>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	4a0d      	ldr	r2, [pc, #52]	@ (800a184 <xTaskPriorityDisinherit+0x124>)
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a154:	4613      	mov	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4a08      	ldr	r2, [pc, #32]	@ (800a180 <xTaskPriorityDisinherit+0x120>)
 800a15e:	441a      	add	r2, r3
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	3304      	adds	r3, #4
 800a164:	4619      	mov	r1, r3
 800a166:	4610      	mov	r0, r2
 800a168:	f7fe f953 	bl	8008412 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a16c:	2301      	movs	r3, #1
 800a16e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a170:	697b      	ldr	r3, [r7, #20]
	}
 800a172:	4618      	mov	r0, r3
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	20002934 	.word	0x20002934
 800a180:	20002938 	.word	0x20002938
 800a184:	20002a3c 	.word	0x20002a3c

0800a188 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a192:	4b29      	ldr	r3, [pc, #164]	@ (800a238 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a198:	4b28      	ldr	r3, [pc, #160]	@ (800a23c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe f994 	bl	80084cc <uxListRemove>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10b      	bne.n	800a1c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a1aa:	4b24      	ldr	r3, [pc, #144]	@ (800a23c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b6:	43da      	mvns	r2, r3
 800a1b8:	4b21      	ldr	r3, [pc, #132]	@ (800a240 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	4a20      	ldr	r2, [pc, #128]	@ (800a240 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a1c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c8:	d10a      	bne.n	800a1e0 <prvAddCurrentTaskToDelayedList+0x58>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d007      	beq.n	800a1e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a23c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	481a      	ldr	r0, [pc, #104]	@ (800a244 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a1da:	f7fe f91a 	bl	8008412 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1de:	e026      	b.n	800a22e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1e8:	4b14      	ldr	r3, [pc, #80]	@ (800a23c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d209      	bcs.n	800a20c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1f8:	4b13      	ldr	r3, [pc, #76]	@ (800a248 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a23c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3304      	adds	r3, #4
 800a202:	4619      	mov	r1, r3
 800a204:	4610      	mov	r0, r2
 800a206:	f7fe f928 	bl	800845a <vListInsert>
}
 800a20a:	e010      	b.n	800a22e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a20c:	4b0f      	ldr	r3, [pc, #60]	@ (800a24c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	4b0a      	ldr	r3, [pc, #40]	@ (800a23c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3304      	adds	r3, #4
 800a216:	4619      	mov	r1, r3
 800a218:	4610      	mov	r0, r2
 800a21a:	f7fe f91e 	bl	800845a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a21e:	4b0c      	ldr	r3, [pc, #48]	@ (800a250 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	429a      	cmp	r2, r3
 800a226:	d202      	bcs.n	800a22e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a228:	4a09      	ldr	r2, [pc, #36]	@ (800a250 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6013      	str	r3, [r2, #0]
}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20002a38 	.word	0x20002a38
 800a23c:	20002934 	.word	0x20002934
 800a240:	20002a3c 	.word	0x20002a3c
 800a244:	20002a20 	.word	0x20002a20
 800a248:	200029f0 	.word	0x200029f0
 800a24c:	200029ec 	.word	0x200029ec
 800a250:	20002a54 	.word	0x20002a54

0800a254 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a25e:	f000 fafd 	bl	800a85c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a262:	4b12      	ldr	r3, [pc, #72]	@ (800a2ac <xTimerCreateTimerTask+0x58>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00b      	beq.n	800a282 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800a26a:	4b11      	ldr	r3, [pc, #68]	@ (800a2b0 <xTimerCreateTimerTask+0x5c>)
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	2305      	movs	r3, #5
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	2300      	movs	r3, #0
 800a274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a278:	490e      	ldr	r1, [pc, #56]	@ (800a2b4 <xTimerCreateTimerTask+0x60>)
 800a27a:	480f      	ldr	r0, [pc, #60]	@ (800a2b8 <xTimerCreateTimerTask+0x64>)
 800a27c:	f7ff f8c1 	bl	8009402 <xTaskCreate>
 800a280:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10b      	bne.n	800a2a0 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	603b      	str	r3, [r7, #0]
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	e7fd      	b.n	800a29c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800a2a0:	687b      	ldr	r3, [r7, #4]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20002a90 	.word	0x20002a90
 800a2b0:	20002a94 	.word	0x20002a94
 800a2b4:	0800b748 	.word	0x0800b748
 800a2b8:	0800a3f5 	.word	0x0800a3f5

0800a2bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08a      	sub	sp, #40	@ 0x28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10b      	bne.n	800a2ec <xTimerGenericCommand+0x30>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	623b      	str	r3, [r7, #32]
}
 800a2e6:	bf00      	nop
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a2ec:	4b19      	ldr	r3, [pc, #100]	@ (800a354 <xTimerGenericCommand+0x98>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d02a      	beq.n	800a34a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2b05      	cmp	r3, #5
 800a304:	dc18      	bgt.n	800a338 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a306:	f7ff fe8d 	bl	800a024 <xTaskGetSchedulerState>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d109      	bne.n	800a324 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a310:	4b10      	ldr	r3, [pc, #64]	@ (800a354 <xTimerGenericCommand+0x98>)
 800a312:	6818      	ldr	r0, [r3, #0]
 800a314:	f107 0110 	add.w	r1, r7, #16
 800a318:	2300      	movs	r3, #0
 800a31a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a31c:	f7fe fa20 	bl	8008760 <xQueueGenericSend>
 800a320:	6278      	str	r0, [r7, #36]	@ 0x24
 800a322:	e012      	b.n	800a34a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a324:	4b0b      	ldr	r3, [pc, #44]	@ (800a354 <xTimerGenericCommand+0x98>)
 800a326:	6818      	ldr	r0, [r3, #0]
 800a328:	f107 0110 	add.w	r1, r7, #16
 800a32c:	2300      	movs	r3, #0
 800a32e:	2200      	movs	r2, #0
 800a330:	f7fe fa16 	bl	8008760 <xQueueGenericSend>
 800a334:	6278      	str	r0, [r7, #36]	@ 0x24
 800a336:	e008      	b.n	800a34a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a338:	4b06      	ldr	r3, [pc, #24]	@ (800a354 <xTimerGenericCommand+0x98>)
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	f107 0110 	add.w	r1, r7, #16
 800a340:	2300      	movs	r3, #0
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	f7fe fbe4 	bl	8008b10 <xQueueGenericSendFromISR>
 800a348:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3728      	adds	r7, #40	@ 0x28
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20002a90 	.word	0x20002a90

0800a358 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a362:	4b23      	ldr	r3, [pc, #140]	@ (800a3f0 <prvProcessExpiredTimer+0x98>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	3304      	adds	r3, #4
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe f8ab 	bl	80084cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d023      	beq.n	800a3cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	699a      	ldr	r2, [r3, #24]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	18d1      	adds	r1, r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	6978      	ldr	r0, [r7, #20]
 800a392:	f000 f8d5 	bl	800a540 <prvInsertTimerInActiveList>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d020      	beq.n	800a3de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a39c:	2300      	movs	r3, #0
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	6978      	ldr	r0, [r7, #20]
 800a3a8:	f7ff ff88 	bl	800a2bc <xTimerGenericCommand>
 800a3ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d114      	bne.n	800a3de <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	60fb      	str	r3, [r7, #12]
}
 800a3c6:	bf00      	nop
 800a3c8:	bf00      	nop
 800a3ca:	e7fd      	b.n	800a3c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3d2:	f023 0301 	bic.w	r3, r3, #1
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	6978      	ldr	r0, [r7, #20]
 800a3e4:	4798      	blx	r3
}
 800a3e6:	bf00      	nop
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20002a88 	.word	0x20002a88

0800a3f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3fc:	f107 0308 	add.w	r3, r7, #8
 800a400:	4618      	mov	r0, r3
 800a402:	f000 f859 	bl	800a4b8 <prvGetNextExpireTime>
 800a406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	4619      	mov	r1, r3
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f000 f805 	bl	800a41c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a412:	f000 f8d7 	bl	800a5c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a416:	bf00      	nop
 800a418:	e7f0      	b.n	800a3fc <prvTimerTask+0x8>
	...

0800a41c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a426:	f7ff f9f3 	bl	8009810 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a42a:	f107 0308 	add.w	r3, r7, #8
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 f866 	bl	800a500 <prvSampleTimeNow>
 800a434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d130      	bne.n	800a49e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10a      	bne.n	800a458 <prvProcessTimerOrBlockTask+0x3c>
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	429a      	cmp	r2, r3
 800a448:	d806      	bhi.n	800a458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a44a:	f7ff f9ef 	bl	800982c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a44e:	68f9      	ldr	r1, [r7, #12]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff ff81 	bl	800a358 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a456:	e024      	b.n	800a4a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d008      	beq.n	800a470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a45e:	4b13      	ldr	r3, [pc, #76]	@ (800a4ac <prvProcessTimerOrBlockTask+0x90>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <prvProcessTimerOrBlockTask+0x50>
 800a468:	2301      	movs	r3, #1
 800a46a:	e000      	b.n	800a46e <prvProcessTimerOrBlockTask+0x52>
 800a46c:	2300      	movs	r3, #0
 800a46e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a470:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b0 <prvProcessTimerOrBlockTask+0x94>)
 800a472:	6818      	ldr	r0, [r3, #0]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	4619      	mov	r1, r3
 800a47e:	f7fe ff29 	bl	80092d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a482:	f7ff f9d3 	bl	800982c <xTaskResumeAll>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a48c:	4b09      	ldr	r3, [pc, #36]	@ (800a4b4 <prvProcessTimerOrBlockTask+0x98>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
}
 800a49c:	e001      	b.n	800a4a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a49e:	f7ff f9c5 	bl	800982c <xTaskResumeAll>
}
 800a4a2:	bf00      	nop
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20002a8c 	.word	0x20002a8c
 800a4b0:	20002a90 	.word	0x20002a90
 800a4b4:	e000ed04 	.word	0xe000ed04

0800a4b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a4fc <prvGetNextExpireTime+0x44>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <prvGetNextExpireTime+0x16>
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	e000      	b.n	800a4d0 <prvGetNextExpireTime+0x18>
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d105      	bne.n	800a4e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4dc:	4b07      	ldr	r3, [pc, #28]	@ (800a4fc <prvGetNextExpireTime+0x44>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	60fb      	str	r3, [r7, #12]
 800a4e6:	e001      	b.n	800a4ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20002a88 	.word	0x20002a88

0800a500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a508:	f7ff fa32 	bl	8009970 <xTaskGetTickCount>
 800a50c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a50e:	4b0b      	ldr	r3, [pc, #44]	@ (800a53c <prvSampleTimeNow+0x3c>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	429a      	cmp	r2, r3
 800a516:	d205      	bcs.n	800a524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a518:	f000 f93a 	bl	800a790 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	e002      	b.n	800a52a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a52a:	4a04      	ldr	r2, [pc, #16]	@ (800a53c <prvSampleTimeNow+0x3c>)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a530:	68fb      	ldr	r3, [r7, #12]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20002a98 	.word	0x20002a98

0800a540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
 800a54c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a54e:	2300      	movs	r3, #0
 800a550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	429a      	cmp	r2, r3
 800a564:	d812      	bhi.n	800a58c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	1ad2      	subs	r2, r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	429a      	cmp	r2, r3
 800a572:	d302      	bcc.n	800a57a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a574:	2301      	movs	r3, #1
 800a576:	617b      	str	r3, [r7, #20]
 800a578:	e01b      	b.n	800a5b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a57a:	4b10      	ldr	r3, [pc, #64]	@ (800a5bc <prvInsertTimerInActiveList+0x7c>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3304      	adds	r3, #4
 800a582:	4619      	mov	r1, r3
 800a584:	4610      	mov	r0, r2
 800a586:	f7fd ff68 	bl	800845a <vListInsert>
 800a58a:	e012      	b.n	800a5b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	429a      	cmp	r2, r3
 800a592:	d206      	bcs.n	800a5a2 <prvInsertTimerInActiveList+0x62>
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d302      	bcc.n	800a5a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a59c:	2301      	movs	r3, #1
 800a59e:	617b      	str	r3, [r7, #20]
 800a5a0:	e007      	b.n	800a5b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5a2:	4b07      	ldr	r3, [pc, #28]	@ (800a5c0 <prvInsertTimerInActiveList+0x80>)
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	f7fd ff54 	bl	800845a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5b2:	697b      	ldr	r3, [r7, #20]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20002a8c 	.word	0x20002a8c
 800a5c0:	20002a88 	.word	0x20002a88

0800a5c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b08e      	sub	sp, #56	@ 0x38
 800a5c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5ca:	e0ce      	b.n	800a76a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	da19      	bge.n	800a606 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5d2:	1d3b      	adds	r3, r7, #4
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10b      	bne.n	800a5f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	61fb      	str	r3, [r7, #28]
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	e7fd      	b.n	800a5f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5fc:	6850      	ldr	r0, [r2, #4]
 800a5fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a600:	6892      	ldr	r2, [r2, #8]
 800a602:	4611      	mov	r1, r2
 800a604:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f2c0 80ae 	blt.w	800a76a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d004      	beq.n	800a624 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61c:	3304      	adds	r3, #4
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fd ff54 	bl	80084cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a624:	463b      	mov	r3, r7
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff ff6a 	bl	800a500 <prvSampleTimeNow>
 800a62c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b09      	cmp	r3, #9
 800a632:	f200 8097 	bhi.w	800a764 <prvProcessReceivedCommands+0x1a0>
 800a636:	a201      	add	r2, pc, #4	@ (adr r2, 800a63c <prvProcessReceivedCommands+0x78>)
 800a638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63c:	0800a665 	.word	0x0800a665
 800a640:	0800a665 	.word	0x0800a665
 800a644:	0800a665 	.word	0x0800a665
 800a648:	0800a6db 	.word	0x0800a6db
 800a64c:	0800a6ef 	.word	0x0800a6ef
 800a650:	0800a73b 	.word	0x0800a73b
 800a654:	0800a665 	.word	0x0800a665
 800a658:	0800a665 	.word	0x0800a665
 800a65c:	0800a6db 	.word	0x0800a6db
 800a660:	0800a6ef 	.word	0x0800a6ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a666:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a66a:	f043 0301 	orr.w	r3, r3, #1
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a672:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67a:	699b      	ldr	r3, [r3, #24]
 800a67c:	18d1      	adds	r1, r2, r3
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a684:	f7ff ff5c 	bl	800a540 <prvInsertTimerInActiveList>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d06c      	beq.n	800a768 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	6a1b      	ldr	r3, [r3, #32]
 800a692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a698:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a69c:	f003 0304 	and.w	r3, r3, #4
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d061      	beq.n	800a768 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	441a      	add	r2, r3
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6b6:	f7ff fe01 	bl	800a2bc <xTimerGenericCommand>
 800a6ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a6bc:	6a3b      	ldr	r3, [r7, #32]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d152      	bne.n	800a768 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	61bb      	str	r3, [r7, #24]
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop
 800a6d8:	e7fd      	b.n	800a6d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6e0:	f023 0301 	bic.w	r3, r3, #1
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a6ec:	e03d      	b.n	800a76a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6f4:	f043 0301 	orr.w	r3, r3, #1
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a704:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10b      	bne.n	800a726 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	617b      	str	r3, [r7, #20]
}
 800a720:	bf00      	nop
 800a722:	bf00      	nop
 800a724:	e7fd      	b.n	800a722 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a728:	699a      	ldr	r2, [r3, #24]
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	18d1      	adds	r1, r2, r3
 800a72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a734:	f7ff ff04 	bl	800a540 <prvInsertTimerInActiveList>
					break;
 800a738:	e017      	b.n	800a76a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a73c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a740:	f003 0302 	and.w	r3, r3, #2
 800a744:	2b00      	cmp	r3, #0
 800a746:	d103      	bne.n	800a750 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a74a:	f000 fc0d 	bl	800af68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a74e:	e00c      	b.n	800a76a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a752:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a762:	e002      	b.n	800a76a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a764:	bf00      	nop
 800a766:	e000      	b.n	800a76a <prvProcessReceivedCommands+0x1a6>
					break;
 800a768:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a76a:	4b08      	ldr	r3, [pc, #32]	@ (800a78c <prvProcessReceivedCommands+0x1c8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	1d39      	adds	r1, r7, #4
 800a770:	2200      	movs	r2, #0
 800a772:	4618      	mov	r0, r3
 800a774:	f7fe fac2 	bl	8008cfc <xQueueReceive>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f47f af26 	bne.w	800a5cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a780:	bf00      	nop
 800a782:	bf00      	nop
 800a784:	3730      	adds	r7, #48	@ 0x30
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	20002a90 	.word	0x20002a90

0800a790 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a796:	e049      	b.n	800a82c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a798:	4b2e      	ldr	r3, [pc, #184]	@ (800a854 <prvSwitchTimerLists+0xc4>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a854 <prvSwitchTimerLists+0xc4>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fd fe8b 	bl	80084cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d02f      	beq.n	800a82c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d90e      	bls.n	800a7fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7ea:	4b1a      	ldr	r3, [pc, #104]	@ (800a854 <prvSwitchTimerLists+0xc4>)
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	f7fd fe30 	bl	800845a <vListInsert>
 800a7fa:	e017      	b.n	800a82c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	2300      	movs	r3, #0
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	2100      	movs	r1, #0
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7ff fd58 	bl	800a2bc <xTimerGenericCommand>
 800a80c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10b      	bne.n	800a82c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	603b      	str	r3, [r7, #0]
}
 800a826:	bf00      	nop
 800a828:	bf00      	nop
 800a82a:	e7fd      	b.n	800a828 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a82c:	4b09      	ldr	r3, [pc, #36]	@ (800a854 <prvSwitchTimerLists+0xc4>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1b0      	bne.n	800a798 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a836:	4b07      	ldr	r3, [pc, #28]	@ (800a854 <prvSwitchTimerLists+0xc4>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a83c:	4b06      	ldr	r3, [pc, #24]	@ (800a858 <prvSwitchTimerLists+0xc8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a04      	ldr	r2, [pc, #16]	@ (800a854 <prvSwitchTimerLists+0xc4>)
 800a842:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a844:	4a04      	ldr	r2, [pc, #16]	@ (800a858 <prvSwitchTimerLists+0xc8>)
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	6013      	str	r3, [r2, #0]
}
 800a84a:	bf00      	nop
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	20002a88 	.word	0x20002a88
 800a858:	20002a8c 	.word	0x20002a8c

0800a85c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a860:	f000 f974 	bl	800ab4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a864:	4b12      	ldr	r3, [pc, #72]	@ (800a8b0 <prvCheckForValidListAndQueue+0x54>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d11d      	bne.n	800a8a8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a86c:	4811      	ldr	r0, [pc, #68]	@ (800a8b4 <prvCheckForValidListAndQueue+0x58>)
 800a86e:	f7fd fda3 	bl	80083b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a872:	4811      	ldr	r0, [pc, #68]	@ (800a8b8 <prvCheckForValidListAndQueue+0x5c>)
 800a874:	f7fd fda0 	bl	80083b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a878:	4b10      	ldr	r3, [pc, #64]	@ (800a8bc <prvCheckForValidListAndQueue+0x60>)
 800a87a:	4a0e      	ldr	r2, [pc, #56]	@ (800a8b4 <prvCheckForValidListAndQueue+0x58>)
 800a87c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a87e:	4b10      	ldr	r3, [pc, #64]	@ (800a8c0 <prvCheckForValidListAndQueue+0x64>)
 800a880:	4a0d      	ldr	r2, [pc, #52]	@ (800a8b8 <prvCheckForValidListAndQueue+0x5c>)
 800a882:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a884:	2200      	movs	r2, #0
 800a886:	2110      	movs	r1, #16
 800a888:	2014      	movs	r0, #20
 800a88a:	f7fd feb3 	bl	80085f4 <xQueueGenericCreate>
 800a88e:	4603      	mov	r3, r0
 800a890:	4a07      	ldr	r2, [pc, #28]	@ (800a8b0 <prvCheckForValidListAndQueue+0x54>)
 800a892:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a894:	4b06      	ldr	r3, [pc, #24]	@ (800a8b0 <prvCheckForValidListAndQueue+0x54>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d005      	beq.n	800a8a8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a89c:	4b04      	ldr	r3, [pc, #16]	@ (800a8b0 <prvCheckForValidListAndQueue+0x54>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4908      	ldr	r1, [pc, #32]	@ (800a8c4 <prvCheckForValidListAndQueue+0x68>)
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe fcea 	bl	800927c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8a8:	f000 f982 	bl	800abb0 <vPortExitCritical>
}
 800a8ac:	bf00      	nop
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	20002a90 	.word	0x20002a90
 800a8b4:	20002a60 	.word	0x20002a60
 800a8b8:	20002a74 	.word	0x20002a74
 800a8bc:	20002a88 	.word	0x20002a88
 800a8c0:	20002a8c 	.word	0x20002a8c
 800a8c4:	0800b750 	.word	0x0800b750

0800a8c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	3b04      	subs	r3, #4
 800a8d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a8e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	3b04      	subs	r3, #4
 800a8e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	f023 0201 	bic.w	r2, r3, #1
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3b04      	subs	r3, #4
 800a8f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8f8:	4a0c      	ldr	r2, [pc, #48]	@ (800a92c <pxPortInitialiseStack+0x64>)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3b14      	subs	r3, #20
 800a902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3b04      	subs	r3, #4
 800a90e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f06f 0202 	mvn.w	r2, #2
 800a916:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	3b20      	subs	r3, #32
 800a91c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a91e:	68fb      	ldr	r3, [r7, #12]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	0800a931 	.word	0x0800a931

0800a930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a93a:	4b13      	ldr	r3, [pc, #76]	@ (800a988 <prvTaskExitError+0x58>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a942:	d00b      	beq.n	800a95c <prvTaskExitError+0x2c>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	60fb      	str	r3, [r7, #12]
}
 800a956:	bf00      	nop
 800a958:	bf00      	nop
 800a95a:	e7fd      	b.n	800a958 <prvTaskExitError+0x28>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	60bb      	str	r3, [r7, #8]
}
 800a96e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a970:	bf00      	nop
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0fc      	beq.n	800a972 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	20000010 	.word	0x20000010
 800a98c:	00000000 	.word	0x00000000

0800a990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a990:	4b07      	ldr	r3, [pc, #28]	@ (800a9b0 <pxCurrentTCBConst2>)
 800a992:	6819      	ldr	r1, [r3, #0]
 800a994:	6808      	ldr	r0, [r1, #0]
 800a996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99a:	f380 8809 	msr	PSP, r0
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f04f 0000 	mov.w	r0, #0
 800a9a6:	f380 8811 	msr	BASEPRI, r0
 800a9aa:	4770      	bx	lr
 800a9ac:	f3af 8000 	nop.w

0800a9b0 <pxCurrentTCBConst2>:
 800a9b0:	20002934 	.word	0x20002934
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop

0800a9b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9b8:	4808      	ldr	r0, [pc, #32]	@ (800a9dc <prvPortStartFirstTask+0x24>)
 800a9ba:	6800      	ldr	r0, [r0, #0]
 800a9bc:	6800      	ldr	r0, [r0, #0]
 800a9be:	f380 8808 	msr	MSP, r0
 800a9c2:	f04f 0000 	mov.w	r0, #0
 800a9c6:	f380 8814 	msr	CONTROL, r0
 800a9ca:	b662      	cpsie	i
 800a9cc:	b661      	cpsie	f
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	df00      	svc	0
 800a9d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9da:	bf00      	nop
 800a9dc:	e000ed08 	.word	0xe000ed08

0800a9e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a9e6:	4b50      	ldr	r3, [pc, #320]	@ (800ab28 <xPortStartScheduler+0x148>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a50      	ldr	r2, [pc, #320]	@ (800ab2c <xPortStartScheduler+0x14c>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d10b      	bne.n	800aa08 <xPortStartScheduler+0x28>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	61bb      	str	r3, [r7, #24]
}
 800aa02:	bf00      	nop
 800aa04:	bf00      	nop
 800aa06:	e7fd      	b.n	800aa04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa08:	4b47      	ldr	r3, [pc, #284]	@ (800ab28 <xPortStartScheduler+0x148>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a48      	ldr	r2, [pc, #288]	@ (800ab30 <xPortStartScheduler+0x150>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d10b      	bne.n	800aa2a <xPortStartScheduler+0x4a>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	617b      	str	r3, [r7, #20]
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop
 800aa28:	e7fd      	b.n	800aa26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa2a:	4b42      	ldr	r3, [pc, #264]	@ (800ab34 <xPortStartScheduler+0x154>)
 800aa2c:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	22ff      	movs	r2, #255	@ 0xff
 800aa3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa44:	79fb      	ldrb	r3, [r7, #7]
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	4b3a      	ldr	r3, [pc, #232]	@ (800ab38 <xPortStartScheduler+0x158>)
 800aa50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa52:	4b3a      	ldr	r3, [pc, #232]	@ (800ab3c <xPortStartScheduler+0x15c>)
 800aa54:	2207      	movs	r2, #7
 800aa56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa58:	e009      	b.n	800aa6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800aa5a:	4b38      	ldr	r3, [pc, #224]	@ (800ab3c <xPortStartScheduler+0x15c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	4a36      	ldr	r2, [pc, #216]	@ (800ab3c <xPortStartScheduler+0x15c>)
 800aa62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa64:	79fb      	ldrb	r3, [r7, #7]
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa6e:	79fb      	ldrb	r3, [r7, #7]
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa76:	2b80      	cmp	r3, #128	@ 0x80
 800aa78:	d0ef      	beq.n	800aa5a <xPortStartScheduler+0x7a>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800aa7a:	4b30      	ldr	r3, [pc, #192]	@ (800ab3c <xPortStartScheduler+0x15c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f1c3 0307 	rsb	r3, r3, #7
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	d00b      	beq.n	800aa9e <xPortStartScheduler+0xbe>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	613b      	str	r3, [r7, #16]
}
 800aa98:	bf00      	nop
 800aa9a:	bf00      	nop
 800aa9c:	e7fd      	b.n	800aa9a <xPortStartScheduler+0xba>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa9e:	4b27      	ldr	r3, [pc, #156]	@ (800ab3c <xPortStartScheduler+0x15c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f1c3 0307 	rsb	r3, r3, #7
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d00b      	beq.n	800aac2 <xPortStartScheduler+0xe2>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	60fb      	str	r3, [r7, #12]
}
 800aabc:	bf00      	nop
 800aabe:	bf00      	nop
 800aac0:	e7fd      	b.n	800aabe <xPortStartScheduler+0xde>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aac2:	4b1e      	ldr	r3, [pc, #120]	@ (800ab3c <xPortStartScheduler+0x15c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	021b      	lsls	r3, r3, #8
 800aac8:	4a1c      	ldr	r2, [pc, #112]	@ (800ab3c <xPortStartScheduler+0x15c>)
 800aaca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aacc:	4b1b      	ldr	r3, [pc, #108]	@ (800ab3c <xPortStartScheduler+0x15c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aad4:	4a19      	ldr	r2, [pc, #100]	@ (800ab3c <xPortStartScheduler+0x15c>)
 800aad6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aae0:	4b17      	ldr	r3, [pc, #92]	@ (800ab40 <xPortStartScheduler+0x160>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a16      	ldr	r2, [pc, #88]	@ (800ab40 <xPortStartScheduler+0x160>)
 800aae6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aaea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aaec:	4b14      	ldr	r3, [pc, #80]	@ (800ab40 <xPortStartScheduler+0x160>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a13      	ldr	r2, [pc, #76]	@ (800ab40 <xPortStartScheduler+0x160>)
 800aaf2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aaf6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aaf8:	f000 f8e0 	bl	800acbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aafc:	4b11      	ldr	r3, [pc, #68]	@ (800ab44 <xPortStartScheduler+0x164>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab02:	f000 f8ff 	bl	800ad04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab06:	4b10      	ldr	r3, [pc, #64]	@ (800ab48 <xPortStartScheduler+0x168>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a0f      	ldr	r2, [pc, #60]	@ (800ab48 <xPortStartScheduler+0x168>)
 800ab0c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ab10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab12:	f7ff ff51 	bl	800a9b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab16:	f7ff f815 	bl	8009b44 <vTaskSwitchContext>
	prvTaskExitError();
 800ab1a:	f7ff ff09 	bl	800a930 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3720      	adds	r7, #32
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	e000ed00 	.word	0xe000ed00
 800ab2c:	410fc271 	.word	0x410fc271
 800ab30:	410fc270 	.word	0x410fc270
 800ab34:	e000e400 	.word	0xe000e400
 800ab38:	20002a9c 	.word	0x20002a9c
 800ab3c:	20002aa0 	.word	0x20002aa0
 800ab40:	e000ed20 	.word	0xe000ed20
 800ab44:	20000010 	.word	0x20000010
 800ab48:	e000ef34 	.word	0xe000ef34

0800ab4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	607b      	str	r3, [r7, #4]
}
 800ab64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab66:	4b10      	ldr	r3, [pc, #64]	@ (800aba8 <vPortEnterCritical+0x5c>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	4a0e      	ldr	r2, [pc, #56]	@ (800aba8 <vPortEnterCritical+0x5c>)
 800ab6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab70:	4b0d      	ldr	r3, [pc, #52]	@ (800aba8 <vPortEnterCritical+0x5c>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d110      	bne.n	800ab9a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab78:	4b0c      	ldr	r3, [pc, #48]	@ (800abac <vPortEnterCritical+0x60>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00b      	beq.n	800ab9a <vPortEnterCritical+0x4e>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	603b      	str	r3, [r7, #0]
}
 800ab94:	bf00      	nop
 800ab96:	bf00      	nop
 800ab98:	e7fd      	b.n	800ab96 <vPortEnterCritical+0x4a>
	}
}
 800ab9a:	bf00      	nop
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	20000010 	.word	0x20000010
 800abac:	e000ed04 	.word	0xe000ed04

0800abb0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abb6:	4b12      	ldr	r3, [pc, #72]	@ (800ac00 <vPortExitCritical+0x50>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10b      	bne.n	800abd6 <vPortExitCritical+0x26>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	607b      	str	r3, [r7, #4]
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	e7fd      	b.n	800abd2 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ac00 <vPortExitCritical+0x50>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3b01      	subs	r3, #1
 800abdc:	4a08      	ldr	r2, [pc, #32]	@ (800ac00 <vPortExitCritical+0x50>)
 800abde:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abe0:	4b07      	ldr	r3, [pc, #28]	@ (800ac00 <vPortExitCritical+0x50>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d105      	bne.n	800abf4 <vPortExitCritical+0x44>
 800abe8:	2300      	movs	r3, #0
 800abea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	f383 8811 	msr	BASEPRI, r3
}
 800abf2:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	20000010 	.word	0x20000010
	...

0800ac10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac10:	f3ef 8009 	mrs	r0, PSP
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	4b15      	ldr	r3, [pc, #84]	@ (800ac70 <pxCurrentTCBConst>)
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	f01e 0f10 	tst.w	lr, #16
 800ac20:	bf08      	it	eq
 800ac22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2a:	6010      	str	r0, [r2, #0]
 800ac2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ac34:	f380 8811 	msr	BASEPRI, r0
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f7fe ff80 	bl	8009b44 <vTaskSwitchContext>
 800ac44:	f04f 0000 	mov.w	r0, #0
 800ac48:	f380 8811 	msr	BASEPRI, r0
 800ac4c:	bc09      	pop	{r0, r3}
 800ac4e:	6819      	ldr	r1, [r3, #0]
 800ac50:	6808      	ldr	r0, [r1, #0]
 800ac52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac56:	f01e 0f10 	tst.w	lr, #16
 800ac5a:	bf08      	it	eq
 800ac5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac60:	f380 8809 	msr	PSP, r0
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	f3af 8000 	nop.w

0800ac70 <pxCurrentTCBConst>:
 800ac70:	20002934 	.word	0x20002934
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac74:	bf00      	nop
 800ac76:	bf00      	nop

0800ac78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	607b      	str	r3, [r7, #4]
}
 800ac90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac92:	f7fe fe7d 	bl	8009990 <xTaskIncrementTick>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d003      	beq.n	800aca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac9c:	4b06      	ldr	r3, [pc, #24]	@ (800acb8 <SysTick_Handler+0x40>)
 800ac9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aca2:	601a      	str	r2, [r3, #0]
 800aca4:	2300      	movs	r3, #0
 800aca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	f383 8811 	msr	BASEPRI, r3
}
 800acae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	e000ed04 	.word	0xe000ed04

0800acbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acbc:	b480      	push	{r7}
 800acbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acc0:	4b0b      	ldr	r3, [pc, #44]	@ (800acf0 <vPortSetupTimerInterrupt+0x34>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acc6:	4b0b      	ldr	r3, [pc, #44]	@ (800acf4 <vPortSetupTimerInterrupt+0x38>)
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800accc:	4b0a      	ldr	r3, [pc, #40]	@ (800acf8 <vPortSetupTimerInterrupt+0x3c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a0a      	ldr	r2, [pc, #40]	@ (800acfc <vPortSetupTimerInterrupt+0x40>)
 800acd2:	fba2 2303 	umull	r2, r3, r2, r3
 800acd6:	099b      	lsrs	r3, r3, #6
 800acd8:	4a09      	ldr	r2, [pc, #36]	@ (800ad00 <vPortSetupTimerInterrupt+0x44>)
 800acda:	3b01      	subs	r3, #1
 800acdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acde:	4b04      	ldr	r3, [pc, #16]	@ (800acf0 <vPortSetupTimerInterrupt+0x34>)
 800ace0:	2207      	movs	r2, #7
 800ace2:	601a      	str	r2, [r3, #0]
}
 800ace4:	bf00      	nop
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	e000e010 	.word	0xe000e010
 800acf4:	e000e018 	.word	0xe000e018
 800acf8:	20000004 	.word	0x20000004
 800acfc:	10624dd3 	.word	0x10624dd3
 800ad00:	e000e014 	.word	0xe000e014

0800ad04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ad14 <vPortEnableVFP+0x10>
 800ad08:	6801      	ldr	r1, [r0, #0]
 800ad0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ad0e:	6001      	str	r1, [r0, #0]
 800ad10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad12:	bf00      	nop
 800ad14:	e000ed88 	.word	0xe000ed88

0800ad18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad1e:	f3ef 8305 	mrs	r3, IPSR
 800ad22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2b0f      	cmp	r3, #15
 800ad28:	d915      	bls.n	800ad56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad2a:	4a18      	ldr	r2, [pc, #96]	@ (800ad8c <vPortValidateInterruptPriority+0x74>)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	4413      	add	r3, r2
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad34:	4b16      	ldr	r3, [pc, #88]	@ (800ad90 <vPortValidateInterruptPriority+0x78>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	7afa      	ldrb	r2, [r7, #11]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d20b      	bcs.n	800ad56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	607b      	str	r3, [r7, #4]
}
 800ad50:	bf00      	nop
 800ad52:	bf00      	nop
 800ad54:	e7fd      	b.n	800ad52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad56:	4b0f      	ldr	r3, [pc, #60]	@ (800ad94 <vPortValidateInterruptPriority+0x7c>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ad5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad98 <vPortValidateInterruptPriority+0x80>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d90b      	bls.n	800ad7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	603b      	str	r3, [r7, #0]
}
 800ad78:	bf00      	nop
 800ad7a:	bf00      	nop
 800ad7c:	e7fd      	b.n	800ad7a <vPortValidateInterruptPriority+0x62>
	}
 800ad7e:	bf00      	nop
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	e000e3f0 	.word	0xe000e3f0
 800ad90:	20002a9c 	.word	0x20002a9c
 800ad94:	e000ed0c 	.word	0xe000ed0c
 800ad98:	20002aa0 	.word	0x20002aa0

0800ad9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08a      	sub	sp, #40	@ 0x28
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ada4:	2300      	movs	r3, #0
 800ada6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ada8:	f7fe fd32 	bl	8009810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800adac:	4b66      	ldr	r3, [pc, #408]	@ (800af48 <pvPortMalloc+0x1ac>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800adb4:	f000 f952 	bl	800b05c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800adb8:	4b64      	ldr	r3, [pc, #400]	@ (800af4c <pvPortMalloc+0x1b0>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4013      	ands	r3, r2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f040 8095 	bne.w	800aef0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01e      	beq.n	800ae0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800adcc:	2208      	movs	r2, #8
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4413      	add	r3, r2
 800add2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	2b00      	cmp	r3, #0
 800addc:	d015      	beq.n	800ae0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f023 0307 	bic.w	r3, r3, #7
 800ade4:	3308      	adds	r3, #8
 800ade6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f003 0307 	and.w	r3, r3, #7
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00b      	beq.n	800ae0a <pvPortMalloc+0x6e>
	__asm volatile
 800adf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	617b      	str	r3, [r7, #20]
}
 800ae04:	bf00      	nop
 800ae06:	bf00      	nop
 800ae08:	e7fd      	b.n	800ae06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d06f      	beq.n	800aef0 <pvPortMalloc+0x154>
 800ae10:	4b4f      	ldr	r3, [pc, #316]	@ (800af50 <pvPortMalloc+0x1b4>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d86a      	bhi.n	800aef0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae1a:	4b4e      	ldr	r3, [pc, #312]	@ (800af54 <pvPortMalloc+0x1b8>)
 800ae1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae1e:	4b4d      	ldr	r3, [pc, #308]	@ (800af54 <pvPortMalloc+0x1b8>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae24:	e004      	b.n	800ae30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ae26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d903      	bls.n	800ae42 <pvPortMalloc+0xa6>
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1f1      	bne.n	800ae26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae42:	4b41      	ldr	r3, [pc, #260]	@ (800af48 <pvPortMalloc+0x1ac>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d051      	beq.n	800aef0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2208      	movs	r2, #8
 800ae52:	4413      	add	r3, r2
 800ae54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	1ad2      	subs	r2, r2, r3
 800ae66:	2308      	movs	r3, #8
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d920      	bls.n	800aeb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4413      	add	r3, r2
 800ae74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	f003 0307 	and.w	r3, r3, #7
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00b      	beq.n	800ae98 <pvPortMalloc+0xfc>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	613b      	str	r3, [r7, #16]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	1ad2      	subs	r2, r2, r3
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aeaa:	69b8      	ldr	r0, [r7, #24]
 800aeac:	f000 f938 	bl	800b120 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aeb0:	4b27      	ldr	r3, [pc, #156]	@ (800af50 <pvPortMalloc+0x1b4>)
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	4a25      	ldr	r2, [pc, #148]	@ (800af50 <pvPortMalloc+0x1b4>)
 800aebc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aebe:	4b24      	ldr	r3, [pc, #144]	@ (800af50 <pvPortMalloc+0x1b4>)
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	4b25      	ldr	r3, [pc, #148]	@ (800af58 <pvPortMalloc+0x1bc>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d203      	bcs.n	800aed2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aeca:	4b21      	ldr	r3, [pc, #132]	@ (800af50 <pvPortMalloc+0x1b4>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a22      	ldr	r2, [pc, #136]	@ (800af58 <pvPortMalloc+0x1bc>)
 800aed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	4b1d      	ldr	r3, [pc, #116]	@ (800af4c <pvPortMalloc+0x1b0>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	431a      	orrs	r2, r3
 800aedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee2:	2200      	movs	r2, #0
 800aee4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aee6:	4b1d      	ldr	r3, [pc, #116]	@ (800af5c <pvPortMalloc+0x1c0>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3301      	adds	r3, #1
 800aeec:	4a1b      	ldr	r2, [pc, #108]	@ (800af5c <pvPortMalloc+0x1c0>)
 800aeee:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800aef0:	4b1b      	ldr	r3, [pc, #108]	@ (800af60 <pvPortMalloc+0x1c4>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00c      	beq.n	800af16 <pvPortMalloc+0x17a>
 800aefc:	4b19      	ldr	r3, [pc, #100]	@ (800af64 <pvPortMalloc+0x1c8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d007      	beq.n	800af16 <pvPortMalloc+0x17a>
 800af06:	f7f7 fe7f 	bl	8002c08 <xTraceKernelPortGetSystemHeapHandle>
 800af0a:	4603      	mov	r3, r0
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	69f9      	ldr	r1, [r7, #28]
 800af10:	4618      	mov	r0, r3
 800af12:	f7f7 fd79 	bl	8002a08 <xTraceHeapAlloc>
	}
	( void ) xTaskResumeAll();
 800af16:	f7fe fc89 	bl	800982c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	f003 0307 	and.w	r3, r3, #7
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00b      	beq.n	800af3c <pvPortMalloc+0x1a0>
	__asm volatile
 800af24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	60fb      	str	r3, [r7, #12]
}
 800af36:	bf00      	nop
 800af38:	bf00      	nop
 800af3a:	e7fd      	b.n	800af38 <pvPortMalloc+0x19c>
	return pvReturn;
 800af3c:	69fb      	ldr	r3, [r7, #28]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3728      	adds	r7, #40	@ 0x28
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	200066ac 	.word	0x200066ac
 800af4c:	200066c0 	.word	0x200066c0
 800af50:	200066b0 	.word	0x200066b0
 800af54:	200066a4 	.word	0x200066a4
 800af58:	200066b4 	.word	0x200066b4
 800af5c:	200066b8 	.word	0x200066b8
 800af60:	200028e4 	.word	0x200028e4
 800af64:	200028dc 	.word	0x200028dc

0800af68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d062      	beq.n	800b040 <vPortFree+0xd8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af7a:	2308      	movs	r3, #8
 800af7c:	425b      	negs	r3, r3
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	4413      	add	r3, r2
 800af82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	4b2e      	ldr	r3, [pc, #184]	@ (800b048 <vPortFree+0xe0>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4013      	ands	r3, r2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10b      	bne.n	800afae <vPortFree+0x46>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	60fb      	str	r3, [r7, #12]
}
 800afa8:	bf00      	nop
 800afaa:	bf00      	nop
 800afac:	e7fd      	b.n	800afaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00b      	beq.n	800afce <vPortFree+0x66>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	60bb      	str	r3, [r7, #8]
}
 800afc8:	bf00      	nop
 800afca:	bf00      	nop
 800afcc:	e7fd      	b.n	800afca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	4b1d      	ldr	r3, [pc, #116]	@ (800b048 <vPortFree+0xe0>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4013      	ands	r3, r2
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d031      	beq.n	800b040 <vPortFree+0xd8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d12d      	bne.n	800b040 <vPortFree+0xd8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	4b17      	ldr	r3, [pc, #92]	@ (800b048 <vPortFree+0xe0>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	43db      	mvns	r3, r3
 800afee:	401a      	ands	r2, r3
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aff4:	f7fe fc0c 	bl	8009810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	4b13      	ldr	r3, [pc, #76]	@ (800b04c <vPortFree+0xe4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4413      	add	r3, r2
 800b002:	4a12      	ldr	r2, [pc, #72]	@ (800b04c <vPortFree+0xe4>)
 800b004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800b006:	4b12      	ldr	r3, [pc, #72]	@ (800b050 <vPortFree+0xe8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00c      	beq.n	800b02c <vPortFree+0xc4>
 800b012:	4b10      	ldr	r3, [pc, #64]	@ (800b054 <vPortFree+0xec>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d007      	beq.n	800b02c <vPortFree+0xc4>
 800b01c:	f7f7 fdf4 	bl	8002c08 <xTraceKernelPortGetSystemHeapHandle>
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	461a      	mov	r2, r3
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	f7f7 fd22 	bl	8002a70 <xTraceHeapFree>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b02c:	6938      	ldr	r0, [r7, #16]
 800b02e:	f000 f877 	bl	800b120 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b032:	4b09      	ldr	r3, [pc, #36]	@ (800b058 <vPortFree+0xf0>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	3301      	adds	r3, #1
 800b038:	4a07      	ldr	r2, [pc, #28]	@ (800b058 <vPortFree+0xf0>)
 800b03a:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b03c:	f7fe fbf6 	bl	800982c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b040:	bf00      	nop
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	200066c0 	.word	0x200066c0
 800b04c:	200066b0 	.word	0x200066b0
 800b050:	200028e4 	.word	0x200028e4
 800b054:	200028dc 	.word	0x200028dc
 800b058:	200066bc 	.word	0x200066bc

0800b05c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b062:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b066:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b068:	4b27      	ldr	r3, [pc, #156]	@ (800b108 <prvHeapInit+0xac>)
 800b06a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f003 0307 	and.w	r3, r3, #7
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00c      	beq.n	800b090 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	3307      	adds	r3, #7
 800b07a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f023 0307 	bic.w	r3, r3, #7
 800b082:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	4a1f      	ldr	r2, [pc, #124]	@ (800b108 <prvHeapInit+0xac>)
 800b08c:	4413      	add	r3, r2
 800b08e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b094:	4a1d      	ldr	r2, [pc, #116]	@ (800b10c <prvHeapInit+0xb0>)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b09a:	4b1c      	ldr	r3, [pc, #112]	@ (800b10c <prvHeapInit+0xb0>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0a8:	2208      	movs	r2, #8
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	1a9b      	subs	r3, r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f023 0307 	bic.w	r3, r3, #7
 800b0b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	4a15      	ldr	r2, [pc, #84]	@ (800b110 <prvHeapInit+0xb4>)
 800b0bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0be:	4b14      	ldr	r3, [pc, #80]	@ (800b110 <prvHeapInit+0xb4>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0c6:	4b12      	ldr	r3, [pc, #72]	@ (800b110 <prvHeapInit+0xb4>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	1ad2      	subs	r2, r2, r3
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b110 <prvHeapInit+0xb4>)
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	4a0a      	ldr	r2, [pc, #40]	@ (800b114 <prvHeapInit+0xb8>)
 800b0ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4a09      	ldr	r2, [pc, #36]	@ (800b118 <prvHeapInit+0xbc>)
 800b0f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0f4:	4b09      	ldr	r3, [pc, #36]	@ (800b11c <prvHeapInit+0xc0>)
 800b0f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b0fa:	601a      	str	r2, [r3, #0]
}
 800b0fc:	bf00      	nop
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	20002aa4 	.word	0x20002aa4
 800b10c:	200066a4 	.word	0x200066a4
 800b110:	200066ac 	.word	0x200066ac
 800b114:	200066b4 	.word	0x200066b4
 800b118:	200066b0 	.word	0x200066b0
 800b11c:	200066c0 	.word	0x200066c0

0800b120 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b128:	4b28      	ldr	r3, [pc, #160]	@ (800b1cc <prvInsertBlockIntoFreeList+0xac>)
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	e002      	b.n	800b134 <prvInsertBlockIntoFreeList+0x14>
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d8f7      	bhi.n	800b12e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	4413      	add	r3, r2
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d108      	bne.n	800b162 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	441a      	add	r2, r3
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	441a      	add	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d118      	bne.n	800b1a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	4b15      	ldr	r3, [pc, #84]	@ (800b1d0 <prvInsertBlockIntoFreeList+0xb0>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d00d      	beq.n	800b19e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	441a      	add	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	601a      	str	r2, [r3, #0]
 800b19c:	e008      	b.n	800b1b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b19e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d0 <prvInsertBlockIntoFreeList+0xb0>)
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	e003      	b.n	800b1b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d002      	beq.n	800b1be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1be:	bf00      	nop
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	200066a4 	.word	0x200066a4
 800b1d0:	200066ac 	.word	0x200066ac

0800b1d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fc ffba 	bl	800815c <USBH_LL_IncTimer>
}
 800b1e8:	bf00      	nop
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fc fffe 	bl	8008200 <USBH_LL_Connect>
}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fd f813 	bl	8008246 <USBH_LL_Disconnect>
}
 800b220:	bf00      	nop
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	70fb      	strb	r3, [r7, #3]
 800b234:	4613      	mov	r3, r2
 800b236:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fd f833 	bl	80082aa <USBH_LL_NotifyURBChange>
#endif
}
 800b244:	bf00      	nop
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fc ffa8 	bl	80081b0 <USBH_LL_PortEnabled>
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b276:	4618      	mov	r0, r3
 800b278:	f7fc ffb4 	bl	80081e4 <USBH_LL_PortDisabled>
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b290:	2300      	movs	r3, #0
 800b292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7f9 f8b5 	bl	800440a <HAL_HCD_Stop>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f808 	bl	800b2bc <USBH_Get_USB_Status>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
	...

0800b2bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2ca:	79fb      	ldrb	r3, [r7, #7]
 800b2cc:	2b03      	cmp	r3, #3
 800b2ce:	d817      	bhi.n	800b300 <USBH_Get_USB_Status+0x44>
 800b2d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b2d8 <USBH_Get_USB_Status+0x1c>)
 800b2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d6:	bf00      	nop
 800b2d8:	0800b2e9 	.word	0x0800b2e9
 800b2dc:	0800b2ef 	.word	0x0800b2ef
 800b2e0:	0800b2f5 	.word	0x0800b2f5
 800b2e4:	0800b2fb 	.word	0x0800b2fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ec:	e00b      	b.n	800b306 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f2:	e008      	b.n	800b306 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f8:	e005      	b.n	800b306 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b2fe:	e002      	b.n	800b306 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b300:	2302      	movs	r3, #2
 800b302:	73fb      	strb	r3, [r7, #15]
    break;
 800b304:	bf00      	nop
  }
  return usb_status;
 800b306:	7bfb      	ldrb	r3, [r7, #15]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <__malloc_lock>:
 800b314:	4801      	ldr	r0, [pc, #4]	@ (800b31c <__malloc_lock+0x8>)
 800b316:	f000 b88b 	b.w	800b430 <__retarget_lock_acquire_recursive>
 800b31a:	bf00      	nop
 800b31c:	20006be0 	.word	0x20006be0

0800b320 <__malloc_unlock>:
 800b320:	4801      	ldr	r0, [pc, #4]	@ (800b328 <__malloc_unlock+0x8>)
 800b322:	f000 b886 	b.w	800b432 <__retarget_lock_release_recursive>
 800b326:	bf00      	nop
 800b328:	20006be0 	.word	0x20006be0

0800b32c <memset>:
 800b32c:	4402      	add	r2, r0
 800b32e:	4603      	mov	r3, r0
 800b330:	4293      	cmp	r3, r2
 800b332:	d100      	bne.n	800b336 <memset+0xa>
 800b334:	4770      	bx	lr
 800b336:	f803 1b01 	strb.w	r1, [r3], #1
 800b33a:	e7f9      	b.n	800b330 <memset+0x4>

0800b33c <_reclaim_reent>:
 800b33c:	4b29      	ldr	r3, [pc, #164]	@ (800b3e4 <_reclaim_reent+0xa8>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4283      	cmp	r3, r0
 800b342:	b570      	push	{r4, r5, r6, lr}
 800b344:	4604      	mov	r4, r0
 800b346:	d04b      	beq.n	800b3e0 <_reclaim_reent+0xa4>
 800b348:	69c3      	ldr	r3, [r0, #28]
 800b34a:	b1ab      	cbz	r3, 800b378 <_reclaim_reent+0x3c>
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	b16b      	cbz	r3, 800b36c <_reclaim_reent+0x30>
 800b350:	2500      	movs	r5, #0
 800b352:	69e3      	ldr	r3, [r4, #28]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	5959      	ldr	r1, [r3, r5]
 800b358:	2900      	cmp	r1, #0
 800b35a:	d13b      	bne.n	800b3d4 <_reclaim_reent+0x98>
 800b35c:	3504      	adds	r5, #4
 800b35e:	2d80      	cmp	r5, #128	@ 0x80
 800b360:	d1f7      	bne.n	800b352 <_reclaim_reent+0x16>
 800b362:	69e3      	ldr	r3, [r4, #28]
 800b364:	4620      	mov	r0, r4
 800b366:	68d9      	ldr	r1, [r3, #12]
 800b368:	f000 f872 	bl	800b450 <_free_r>
 800b36c:	69e3      	ldr	r3, [r4, #28]
 800b36e:	6819      	ldr	r1, [r3, #0]
 800b370:	b111      	cbz	r1, 800b378 <_reclaim_reent+0x3c>
 800b372:	4620      	mov	r0, r4
 800b374:	f000 f86c 	bl	800b450 <_free_r>
 800b378:	6961      	ldr	r1, [r4, #20]
 800b37a:	b111      	cbz	r1, 800b382 <_reclaim_reent+0x46>
 800b37c:	4620      	mov	r0, r4
 800b37e:	f000 f867 	bl	800b450 <_free_r>
 800b382:	69e1      	ldr	r1, [r4, #28]
 800b384:	b111      	cbz	r1, 800b38c <_reclaim_reent+0x50>
 800b386:	4620      	mov	r0, r4
 800b388:	f000 f862 	bl	800b450 <_free_r>
 800b38c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b38e:	b111      	cbz	r1, 800b396 <_reclaim_reent+0x5a>
 800b390:	4620      	mov	r0, r4
 800b392:	f000 f85d 	bl	800b450 <_free_r>
 800b396:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b398:	b111      	cbz	r1, 800b3a0 <_reclaim_reent+0x64>
 800b39a:	4620      	mov	r0, r4
 800b39c:	f000 f858 	bl	800b450 <_free_r>
 800b3a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b3a2:	b111      	cbz	r1, 800b3aa <_reclaim_reent+0x6e>
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 f853 	bl	800b450 <_free_r>
 800b3aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b3ac:	b111      	cbz	r1, 800b3b4 <_reclaim_reent+0x78>
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f000 f84e 	bl	800b450 <_free_r>
 800b3b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b3b6:	b111      	cbz	r1, 800b3be <_reclaim_reent+0x82>
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 f849 	bl	800b450 <_free_r>
 800b3be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b3c0:	b111      	cbz	r1, 800b3c8 <_reclaim_reent+0x8c>
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 f844 	bl	800b450 <_free_r>
 800b3c8:	6a23      	ldr	r3, [r4, #32]
 800b3ca:	b14b      	cbz	r3, 800b3e0 <_reclaim_reent+0xa4>
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3d2:	4718      	bx	r3
 800b3d4:	680e      	ldr	r6, [r1, #0]
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 f83a 	bl	800b450 <_free_r>
 800b3dc:	4631      	mov	r1, r6
 800b3de:	e7bb      	b.n	800b358 <_reclaim_reent+0x1c>
 800b3e0:	bd70      	pop	{r4, r5, r6, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20000014 	.word	0x20000014

0800b3e8 <__libc_init_array>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	4d0d      	ldr	r5, [pc, #52]	@ (800b420 <__libc_init_array+0x38>)
 800b3ec:	4c0d      	ldr	r4, [pc, #52]	@ (800b424 <__libc_init_array+0x3c>)
 800b3ee:	1b64      	subs	r4, r4, r5
 800b3f0:	10a4      	asrs	r4, r4, #2
 800b3f2:	2600      	movs	r6, #0
 800b3f4:	42a6      	cmp	r6, r4
 800b3f6:	d109      	bne.n	800b40c <__libc_init_array+0x24>
 800b3f8:	4d0b      	ldr	r5, [pc, #44]	@ (800b428 <__libc_init_array+0x40>)
 800b3fa:	4c0c      	ldr	r4, [pc, #48]	@ (800b42c <__libc_init_array+0x44>)
 800b3fc:	f000 f872 	bl	800b4e4 <_init>
 800b400:	1b64      	subs	r4, r4, r5
 800b402:	10a4      	asrs	r4, r4, #2
 800b404:	2600      	movs	r6, #0
 800b406:	42a6      	cmp	r6, r4
 800b408:	d105      	bne.n	800b416 <__libc_init_array+0x2e>
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b410:	4798      	blx	r3
 800b412:	3601      	adds	r6, #1
 800b414:	e7ee      	b.n	800b3f4 <__libc_init_array+0xc>
 800b416:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41a:	4798      	blx	r3
 800b41c:	3601      	adds	r6, #1
 800b41e:	e7f2      	b.n	800b406 <__libc_init_array+0x1e>
 800b420:	0800b78c 	.word	0x0800b78c
 800b424:	0800b78c 	.word	0x0800b78c
 800b428:	0800b78c 	.word	0x0800b78c
 800b42c:	0800b790 	.word	0x0800b790

0800b430 <__retarget_lock_acquire_recursive>:
 800b430:	4770      	bx	lr

0800b432 <__retarget_lock_release_recursive>:
 800b432:	4770      	bx	lr

0800b434 <memcpy>:
 800b434:	440a      	add	r2, r1
 800b436:	4291      	cmp	r1, r2
 800b438:	f100 33ff 	add.w	r3, r0, #4294967295
 800b43c:	d100      	bne.n	800b440 <memcpy+0xc>
 800b43e:	4770      	bx	lr
 800b440:	b510      	push	{r4, lr}
 800b442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b44a:	4291      	cmp	r1, r2
 800b44c:	d1f9      	bne.n	800b442 <memcpy+0xe>
 800b44e:	bd10      	pop	{r4, pc}

0800b450 <_free_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4605      	mov	r5, r0
 800b454:	2900      	cmp	r1, #0
 800b456:	d041      	beq.n	800b4dc <_free_r+0x8c>
 800b458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b45c:	1f0c      	subs	r4, r1, #4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	bfb8      	it	lt
 800b462:	18e4      	addlt	r4, r4, r3
 800b464:	f7ff ff56 	bl	800b314 <__malloc_lock>
 800b468:	4a1d      	ldr	r2, [pc, #116]	@ (800b4e0 <_free_r+0x90>)
 800b46a:	6813      	ldr	r3, [r2, #0]
 800b46c:	b933      	cbnz	r3, 800b47c <_free_r+0x2c>
 800b46e:	6063      	str	r3, [r4, #4]
 800b470:	6014      	str	r4, [r2, #0]
 800b472:	4628      	mov	r0, r5
 800b474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b478:	f7ff bf52 	b.w	800b320 <__malloc_unlock>
 800b47c:	42a3      	cmp	r3, r4
 800b47e:	d908      	bls.n	800b492 <_free_r+0x42>
 800b480:	6820      	ldr	r0, [r4, #0]
 800b482:	1821      	adds	r1, r4, r0
 800b484:	428b      	cmp	r3, r1
 800b486:	bf01      	itttt	eq
 800b488:	6819      	ldreq	r1, [r3, #0]
 800b48a:	685b      	ldreq	r3, [r3, #4]
 800b48c:	1809      	addeq	r1, r1, r0
 800b48e:	6021      	streq	r1, [r4, #0]
 800b490:	e7ed      	b.n	800b46e <_free_r+0x1e>
 800b492:	461a      	mov	r2, r3
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	b10b      	cbz	r3, 800b49c <_free_r+0x4c>
 800b498:	42a3      	cmp	r3, r4
 800b49a:	d9fa      	bls.n	800b492 <_free_r+0x42>
 800b49c:	6811      	ldr	r1, [r2, #0]
 800b49e:	1850      	adds	r0, r2, r1
 800b4a0:	42a0      	cmp	r0, r4
 800b4a2:	d10b      	bne.n	800b4bc <_free_r+0x6c>
 800b4a4:	6820      	ldr	r0, [r4, #0]
 800b4a6:	4401      	add	r1, r0
 800b4a8:	1850      	adds	r0, r2, r1
 800b4aa:	4283      	cmp	r3, r0
 800b4ac:	6011      	str	r1, [r2, #0]
 800b4ae:	d1e0      	bne.n	800b472 <_free_r+0x22>
 800b4b0:	6818      	ldr	r0, [r3, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	6053      	str	r3, [r2, #4]
 800b4b6:	4408      	add	r0, r1
 800b4b8:	6010      	str	r0, [r2, #0]
 800b4ba:	e7da      	b.n	800b472 <_free_r+0x22>
 800b4bc:	d902      	bls.n	800b4c4 <_free_r+0x74>
 800b4be:	230c      	movs	r3, #12
 800b4c0:	602b      	str	r3, [r5, #0]
 800b4c2:	e7d6      	b.n	800b472 <_free_r+0x22>
 800b4c4:	6820      	ldr	r0, [r4, #0]
 800b4c6:	1821      	adds	r1, r4, r0
 800b4c8:	428b      	cmp	r3, r1
 800b4ca:	bf04      	itt	eq
 800b4cc:	6819      	ldreq	r1, [r3, #0]
 800b4ce:	685b      	ldreq	r3, [r3, #4]
 800b4d0:	6063      	str	r3, [r4, #4]
 800b4d2:	bf04      	itt	eq
 800b4d4:	1809      	addeq	r1, r1, r0
 800b4d6:	6021      	streq	r1, [r4, #0]
 800b4d8:	6054      	str	r4, [r2, #4]
 800b4da:	e7ca      	b.n	800b472 <_free_r+0x22>
 800b4dc:	bd38      	pop	{r3, r4, r5, pc}
 800b4de:	bf00      	nop
 800b4e0:	20006aa4 	.word	0x20006aa4

0800b4e4 <_init>:
 800b4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e6:	bf00      	nop
 800b4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ea:	bc08      	pop	{r3}
 800b4ec:	469e      	mov	lr, r3
 800b4ee:	4770      	bx	lr

0800b4f0 <_fini>:
 800b4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f2:	bf00      	nop
 800b4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f6:	bc08      	pop	{r3}
 800b4f8:	469e      	mov	lr, r3
 800b4fa:	4770      	bx	lr
