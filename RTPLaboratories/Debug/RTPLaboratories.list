
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a958  0800a958  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a958  0800a958  0001a958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a960  0800a960  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a960  0800a960  0001a960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a964  0800a964  0001a964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800a968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00005e78  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005ee4  20005ee4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000217a0  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000504a  00000000  00000000  0004187f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ec0  00000000  00000000  000468d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017d8  00000000  00000000  00048790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027b86  00000000  00000000  00049f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027f14  00000000  00000000  00071aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e99c2  00000000  00000000  00099a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008610  00000000  00000000  001833c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0018b9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a180 	.word	0x0800a180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a180 	.word	0x0800a180

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vTask1>:
#define BLUE_LED LD6_Pin
#define RED_LED LD5_Pin
#define ORANGE_LED LD3_Pin

void vTask1(void *pvParameters)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	/* As per most tasks, this task is implemented in an infinite loop. */
	for (;;)
	{
		/* Toggle green led. */
		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 80004d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d8:	4807      	ldr	r0, [pc, #28]	; (80004f8 <vTask1+0x2c>)
 80004da:	f002 fb1e 	bl	8002b1a <HAL_GPIO_TogglePin>

		/* Delay for a period. */
		for (ul = 0; ul < mainDELAY_LOOP_COUNT; ul++)
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	e002      	b.n	80004ea <vTask1+0x1e>
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	3301      	adds	r3, #1
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d3f7      	bcc.n	80004e4 <vTask1+0x18>
		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 80004f4:	e7ee      	b.n	80004d4 <vTask1+0x8>
 80004f6:	bf00      	nop
 80004f8:	40020c00 	.word	0x40020c00

080004fc <vTask2>:
	}
}
/*-----------------------------------------------------------*/

void vTask2(void *pvParameters)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

	/* As per most tasks, this task is implemented in an infinite loop. */
	for (;;)
	{
		/* Toggle blue led. */
		HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 8000504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <vTask2+0x2c>)
 800050a:	f002 fb06 	bl	8002b1a <HAL_GPIO_TogglePin>

		/* Delay for a period. */
		for (ul = 0; ul < mainDELAY_LOOP_COUNT; ul++)
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	e002      	b.n	800051a <vTask2+0x1e>
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3301      	adds	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000520:	4293      	cmp	r3, r2
 8000522:	d3f7      	bcc.n	8000514 <vTask2+0x18>
		HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 8000524:	e7ee      	b.n	8000504 <vTask2+0x8>
 8000526:	bf00      	nop
 8000528:	40020c00 	.word	0x40020c00

0800052c <application1>:
		}
	}
}

void application1(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af02      	add	r7, sp, #8


	/* Create one of the two tasks. */
	xTaskCreate(vTask1,		/* Pointer to the function that implements the task. */
 8000532:	2300      	movs	r3, #0
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000540:	4908      	ldr	r1, [pc, #32]	; (8000564 <application1+0x38>)
 8000542:	4809      	ldr	r0, [pc, #36]	; (8000568 <application1+0x3c>)
 8000544:	f007 fcb2 	bl	8007eac <xTaskCreate>
		NULL,		/* We are not using the task parameter. */
		1,			/* This task will run at priority 1. */
		NULL);		/* We are not using the task handle. */

	/* Create the other task in exactly the same way. */
	xTaskCreate(vTask2, "Task 2", 1000, NULL, 1, NULL);
 8000548:	2300      	movs	r3, #0
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	2301      	movs	r3, #1
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2300      	movs	r3, #0
 8000552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000556:	4905      	ldr	r1, [pc, #20]	; (800056c <application1+0x40>)
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <application1+0x44>)
 800055a:	f007 fca7 	bl	8007eac <xTaskCreate>

}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	0800a198 	.word	0x0800a198
 8000568:	080004cd 	.word	0x080004cd
 800056c:	0800a1a0 	.word	0x0800a1a0
 8000570:	080004fd 	.word	0x080004fd

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f001 fff6 	bl	8002568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f812 	bl	80005a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  vTraceEnable(TRC_START);
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fee9 	bl	8001358 <xTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f92f 	bl	80007e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800058a:	f000 f875 	bl	8000678 <MX_I2C1_Init>
  MX_I2S3_Init();
 800058e:	f000 f8a1 	bl	80006d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000592:	f000 f8cf 	bl	8000734 <MX_SPI1_Init>
  MX_TIM11_Init();
 8000596:	f000 f903 	bl	80007a0 <MX_TIM11_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application1();
 800059a:	f7ff ffc7 	bl	800052c <application1>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 800059e:	f007 fe55 	bl	800824c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005a2:	e7fe      	b.n	80005a2 <main+0x2e>

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f009 fd06 	bl	8009fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000618:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fe00 	bl	8005230 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000636:	f000 f9ef 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2105      	movs	r1, #5
 8000658:	4618      	mov	r0, r3
 800065a:	f005 f861 	bl	8005720 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000664:	f000 f9d8 	bl	8000a18 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_I2C1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b6:	f003 ffd7 	bl	8004668 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f9aa 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000088 	.word	0x20000088
 80006cc:	40005400 	.word	0x40005400
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_I2S3_Init+0x54>)
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <MX_I2S3_Init+0x58>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2S3_Init+0x54>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_I2S3_Init+0x54>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2S3_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_I2S3_Init+0x54>)
 80006f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_I2S3_Init+0x54>)
 80006fc:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <MX_I2S3_Init+0x5c>)
 80006fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_I2S3_Init+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2S3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_I2S3_Init+0x54>)
 8000714:	f004 f8ec 	bl	80048f0 <HAL_I2S_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800071e:	f000 f97b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000dc 	.word	0x200000dc
 800072c:	40003c00 	.word	0x40003c00
 8000730:	00017700 	.word	0x00017700

08000734 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_SPI1_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_SPI1_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_SPI1_Init+0x64>)
 8000740:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000744:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_SPI1_Init+0x64>)
 8000780:	220a      	movs	r2, #10
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_SPI1_Init+0x64>)
 8000786:	f005 fb5f 	bl	8005e48 <HAL_SPI_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f942 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000124 	.word	0x20000124
 800079c:	40013000 	.word	0x40013000

080007a0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_TIM11_Init+0x40>)
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <MX_TIM11_Init+0x44>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_TIM11_Init+0x40>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_TIM11_Init+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_TIM11_Init+0x40>)
 80007b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007bc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_TIM11_Init+0x40>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_TIM11_Init+0x40>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_TIM11_Init+0x40>)
 80007cc:	f005 fbc5 	bl	8005f5a <HAL_TIM_Base_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80007d6:	f000 f91f 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000017c 	.word	0x2000017c
 80007e4:	40014800 	.word	0x40014800

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	4b76      	ldr	r3, [pc, #472]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a75      	ldr	r2, [pc, #468]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a6e      	ldr	r2, [pc, #440]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <MX_GPIO_Init+0x1f4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b68      	ldr	r3, [pc, #416]	; (80009dc <MX_GPIO_Init+0x1f4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a67      	ldr	r2, [pc, #412]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b61      	ldr	r3, [pc, #388]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a60      	ldr	r2, [pc, #384]	; (80009dc <MX_GPIO_Init+0x1f4>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a59      	ldr	r2, [pc, #356]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b53      	ldr	r3, [pc, #332]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a52      	ldr	r2, [pc, #328]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <MX_GPIO_Init+0x1f4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	484d      	ldr	r0, [pc, #308]	; (80009e0 <MX_GPIO_Init+0x1f8>)
 80008ac:	f002 f91c 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	484b      	ldr	r0, [pc, #300]	; (80009e4 <MX_GPIO_Init+0x1fc>)
 80008b6:	f002 f917 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ba:	2200      	movs	r2, #0
 80008bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008c0:	4849      	ldr	r0, [pc, #292]	; (80009e8 <MX_GPIO_Init+0x200>)
 80008c2:	f002 f911 	bl	8002ae8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4840      	ldr	r0, [pc, #256]	; (80009e0 <MX_GPIO_Init+0x1f8>)
 80008de:	f001 ff67 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	483a      	ldr	r0, [pc, #232]	; (80009e4 <MX_GPIO_Init+0x1fc>)
 80008fa:	f001 ff59 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008fe:	2308      	movs	r3, #8
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4832      	ldr	r0, [pc, #200]	; (80009e4 <MX_GPIO_Init+0x1fc>)
 800091a:	f001 ff49 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	482e      	ldr	r0, [pc, #184]	; (80009ec <MX_GPIO_Init+0x204>)
 8000934:	f001 ff3c 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000938:	2304      	movs	r3, #4
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4829      	ldr	r0, [pc, #164]	; (80009f0 <MX_GPIO_Init+0x208>)
 800094c:	f001 ff30 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000962:	2305      	movs	r3, #5
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4820      	ldr	r0, [pc, #128]	; (80009f0 <MX_GPIO_Init+0x208>)
 800096e:	f001 ff1f 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000976:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <MX_GPIO_Init+0x200>)
 800098c:	f001 ff10 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000990:	2320      	movs	r3, #32
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_GPIO_Init+0x200>)
 80009a4:	f001 ff04 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_GPIO_Init+0x1f8>)
 80009be:	f001 fef7 	bl	80027b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	2006      	movs	r0, #6
 80009c8:	f001 fec8 	bl	800275c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009cc:	2006      	movs	r0, #6
 80009ce:	f001 fee1 	bl	8002794 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	; 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020400 	.word	0x40020400

080009f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a06:	f001 fdd1 	bl	80025ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010000 	.word	0x40010000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_MspInit+0x54>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <HAL_MspInit+0x54>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_MspInit+0x54>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_MspInit+0x54>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_MspInit+0x54>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_MspInit+0x54>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	210f      	movs	r1, #15
 8000a66:	f06f 0001 	mvn.w	r0, #1
 8000a6a:	f001 fe77 	bl	800275c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_I2C_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12c      	bne.n	8000af8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac0:	2312      	movs	r3, #18
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000acc:	2304      	movs	r3, #4
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <HAL_I2C_MspInit+0x8c>)
 8000ad8:	f001 fe6a 	bl	80027b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40005400 	.word	0x40005400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400

08000b0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <HAL_I2S_MspInit+0xf0>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d15a      	bne.n	8000bf2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b40:	23c0      	movs	r3, #192	; 0xc0
 8000b42:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f005 f839 	bl	8005bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b58:	f7ff ff5e 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <HAL_I2S_MspInit+0xf4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <HAL_I2S_MspInit+0xf4>)
 8000b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <HAL_I2S_MspInit+0xf4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a1f      	ldr	r2, [pc, #124]	; (8000c00 <HAL_I2S_MspInit+0xf4>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_I2S_MspInit+0xf4>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <HAL_I2S_MspInit+0xf4>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_I2S_MspInit+0xf4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480e      	ldr	r0, [pc, #56]	; (8000c04 <HAL_I2S_MspInit+0xf8>)
 8000bcc:	f001 fdf0 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bd0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be2:	2306      	movs	r3, #6
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	4806      	ldr	r0, [pc, #24]	; (8000c08 <HAL_I2S_MspInit+0xfc>)
 8000bee:	f001 fddf 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3738      	adds	r7, #56	; 0x38
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40003c00 	.word	0x40003c00
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020800 	.word	0x40020800

08000c0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_SPI_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12b      	bne.n	8000c86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c66:	23e0      	movs	r3, #224	; 0xe0
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c76:	2305      	movs	r3, #5
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_SPI_MspInit+0x8c>)
 8000c82:	f001 fd95 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40013000 	.word	0x40013000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10d      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_TIM_Base_MspInit+0x40>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_TIM_Base_MspInit+0x40>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_TIM_Base_MspInit+0x40>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40014800 	.word	0x40014800
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <HAL_InitTick+0xd4>)
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf8:	4a2e      	ldr	r2, [pc, #184]	; (8000db4 <HAL_InitTick+0xd4>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6453      	str	r3, [r2, #68]	; 0x44
 8000d00:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <HAL_InitTick+0xd4>)
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 ff22 	bl	8005b60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d1c:	f004 ff0c 	bl	8005b38 <HAL_RCC_GetPCLK2Freq>
 8000d20:	4603      	mov	r3, r0
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d28:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <HAL_InitTick+0xd8>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	0c9b      	lsrs	r3, r3, #18
 8000d30:	3b01      	subs	r3, #1
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_InitTick+0xdc>)
 8000d36:	4a22      	ldr	r2, [pc, #136]	; (8000dc0 <HAL_InitTick+0xe0>)
 8000d38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_InitTick+0xdc>)
 8000d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d42:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <HAL_InitTick+0xdc>)
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_InitTick+0xdc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_InitTick+0xdc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_InitTick+0xdc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d5a:	4818      	ldr	r0, [pc, #96]	; (8000dbc <HAL_InitTick+0xdc>)
 8000d5c:	f005 f8fd 	bl	8005f5a <HAL_TIM_Base_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d11b      	bne.n	8000da6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d6e:	4813      	ldr	r0, [pc, #76]	; (8000dbc <HAL_InitTick+0xdc>)
 8000d70:	f005 f942 	bl	8005ff8 <HAL_TIM_Base_Start_IT>
 8000d74:	4603      	mov	r3, r0
 8000d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d111      	bne.n	8000da6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d82:	2019      	movs	r0, #25
 8000d84:	f001 fd06 	bl	8002794 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	d808      	bhi.n	8000da0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	2019      	movs	r0, #25
 8000d94:	f001 fce2 	bl	800275c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_InitTick+0xe4>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e002      	b.n	8000da6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3730      	adds	r7, #48	; 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	431bde83 	.word	0x431bde83
 8000dbc:	200001c4 	.word	0x200001c4
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	20000010 	.word	0x20000010

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dfa:	f005 f96d 	bl	80060d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200001c4 	.word	0x200001c4

08000e08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <OTG_FS_IRQHandler+0x10>)
 8000e0e:	f001 fe9e 	bl	8002b4e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200059c4 	.word	0x200059c4

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e44:	f7ff ffea 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f009 f907 	bl	800a080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fb7f 	bl	8000574 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e84:	0800a968 	.word	0x0800a968
  ldr r2, =_sbss
 8000e88:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e8c:	20005ee4 	.word	0x20005ee4

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>

08000e92 <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f006 fe60 	bl	8007b60 <uxQueueGetQueueNumber>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(pvQueue);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f006 fe6e 	bl	8007b94 <ucQueueGetQueueType>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(pvTask));
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f007 fdfe 	bl	8008acc <uxTaskGetTaskNumber>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29b      	uxth	r3, r3
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(pvTask));
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f007 fdf1 	bl	8008acc <uxTaskGetTaskNumber>
 8000eea:	4603      	mov	r3, r0
 8000eec:	0c1b      	lsrs	r3, r3, #16
 8000eee:	b29b      	uxth	r3, r3
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber(pvTask), uiValue));
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f007 fde1 	bl	8008acc <uxTaskGetTaskNumber>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	0c1b      	lsrs	r3, r3, #16
 8000f0e:	041b      	lsls	r3, r3, #16
 8000f10:	887a      	ldrh	r2, [r7, #2]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f007 fdee 	bl	8008af8 <vTaskSetTaskNumber>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber(pvTask), uiValue));
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f007 fdcb 	bl	8008acc <uxTaskGetTaskNumber>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	041b      	lsls	r3, r3, #16
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f007 fdd8 	bl	8008af8 <vTaskSetTaskNumber>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff9a 	bl	8000e92 <prvTraceGetQueueNumber>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29b      	uxth	r3, r3
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff8d 	bl	8000e92 <prvTraceGetQueueNumber>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	b29b      	uxth	r3, r3
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff7d 	bl	8000e92 <prvTraceGetQueueNumber>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	0c1b      	lsrs	r3, r3, #16
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f006 fde7 	bl	8007b78 <vQueueSetQueueNumber>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff67 	bl	8000e92 <prvTraceGetQueueNumber>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	041b      	lsls	r3, r3, #16
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f006 fdd1 	bl	8007b78 <vQueueSetQueueNumber>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8000fe2:	f007 fe59 	bl	8008c98 <xTaskGetCurrentTaskHandle>
 8000fe6:	4603      	mov	r3, r0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	bd80      	pop	{r7, pc}

08000fec <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8001018:	4b64      	ldr	r3, [pc, #400]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2209      	movs	r2, #9
 800101e:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8001020:	4b62      	ldr	r3, [pc, #392]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	220a      	movs	r2, #10
 8001026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 800102a:	4b60      	ldr	r3, [pc, #384]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	220a      	movs	r2, #10
 8001030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8001034:	4b5d      	ldr	r3, [pc, #372]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	220a      	movs	r2, #10
 800103a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 800103e:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	220f      	movs	r2, #15
 8001044:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8001048:	4b58      	ldr	r3, [pc, #352]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2205      	movs	r2, #5
 800104e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8001052:	4b56      	ldr	r3, [pc, #344]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2205      	movs	r2, #5
 8001058:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2205      	movs	r2, #5
 8001062:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8001066:	4b51      	ldr	r3, [pc, #324]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2205      	movs	r2, #5
 800106c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8001070:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2205      	movs	r2, #5
 8001076:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 800107a:	4b4c      	ldr	r3, [pc, #304]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	220f      	movs	r2, #15
 8001080:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8001084:	4b49      	ldr	r3, [pc, #292]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	220f      	movs	r2, #15
 800108a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800108e:	4b47      	ldr	r3, [pc, #284]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	220f      	movs	r2, #15
 8001094:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8001098:	4b44      	ldr	r3, [pc, #272]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	220f      	movs	r2, #15
 800109e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 80010a2:	4b42      	ldr	r3, [pc, #264]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	220f      	movs	r2, #15
 80010a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 80010ac:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	220f      	movs	r2, #15
 80010b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	220f      	movs	r2, #15
 80010bc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	220f      	movs	r2, #15
 80010c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	220f      	movs	r2, #15
 80010d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2210      	movs	r2, #16
 80010da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2210      	movs	r2, #16
 80010e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2210      	movs	r2, #16
 80010ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 80010f2:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2213      	movs	r2, #19
 80010f8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2211      	movs	r2, #17
 8001102:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2210      	movs	r2, #16
 800110c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2213      	movs	r2, #19
 8001116:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2213      	movs	r2, #19
 8001120:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2213      	movs	r2, #19
 800112a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	22a0      	movs	r2, #160	; 0xa0
 800113e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800114a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001156:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f240 22fd 	movw	r2, #765	; 0x2fd
 8001162:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f240 3252 	movw	r2, #850	; 0x352
 800116e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f240 32a2 	movw	r2, #930	; 0x3a2
 800117a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f240 4201 	movw	r2, #1025	; 0x401
 8001186:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001192:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800119e:	64da      	str	r2, [r3, #76]	; 0x4c

	return TRC_SUCCESS;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20001bd4 	.word	0x20001bd4

080011b0 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	825a      	strh	r2, [r3, #18]
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011c2:	8a5a      	ldrh	r2, [r3, #18]
 80011c4:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011c6:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 80011c8:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011ca:	220a      	movs	r2, #10
 80011cc:	829a      	strh	r2, [r3, #20]
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011d0:	8a9a      	ldrh	r2, [r3, #20]
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011d4:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011d8:	2214      	movs	r2, #20
 80011da:	82da      	strh	r2, [r3, #22]
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011de:	8ada      	ldrh	r2, [r3, #22]
 80011e0:	4b36      	ldr	r3, [pc, #216]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011e2:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011e6:	221e      	movs	r2, #30
 80011e8:	831a      	strh	r2, [r3, #24]
 80011ea:	4b34      	ldr	r3, [pc, #208]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011ec:	8b1a      	ldrh	r2, [r3, #24]
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011f0:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011f4:	222d      	movs	r2, #45	; 0x2d
 80011f6:	835a      	strh	r2, [r3, #26]
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011fa:	8b5a      	ldrh	r2, [r3, #26]
 80011fc:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80011fe:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001202:	2232      	movs	r2, #50	; 0x32
 8001204:	839a      	strh	r2, [r3, #28]
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001208:	8b9a      	ldrh	r2, [r3, #28]
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800120c:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001210:	2237      	movs	r2, #55	; 0x37
 8001212:	83da      	strh	r2, [r3, #30]
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001216:	8bda      	ldrh	r2, [r3, #30]
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800121a:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800121e:	223c      	movs	r2, #60	; 0x3c
 8001220:	841a      	strh	r2, [r3, #32]
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001224:	8c1a      	ldrh	r2, [r3, #32]
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001228:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800122c:	2241      	movs	r2, #65	; 0x41
 800122e:	845a      	strh	r2, [r3, #34]	; 0x22
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001232:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001236:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800123a:	2209      	movs	r2, #9
 800123c:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001240:	2213      	movs	r2, #19
 8001242:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001246:	221d      	movs	r2, #29
 8001248:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800124c:	222c      	movs	r2, #44	; 0x2c
 800124e:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001252:	2231      	movs	r2, #49	; 0x31
 8001254:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001258:	2236      	movs	r2, #54	; 0x36
 800125a:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800125e:	223b      	movs	r2, #59	; 0x3b
 8001260:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001264:	2240      	movs	r2, #64	; 0x40
 8001266:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800126a:	2245      	movs	r2, #69	; 0x45
 800126c:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e009      	b.n	8001288 <xTraceKernelPortInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8001274:	4a11      	ldr	r2, [pc, #68]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3318      	adds	r3, #24
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	2200      	movs	r2, #0
 8001280:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3301      	adds	r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b08      	cmp	r3, #8
 800128c:	d9f2      	bls.n	8001274 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	e008      	b.n	80012a6 <xTraceKernelPortInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8001294:	4a09      	ldr	r2, [pc, #36]	; (80012bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	3348      	adds	r3, #72	; 0x48
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b45      	cmp	r3, #69	; 0x45
 80012aa:	d9f3      	bls.n	8001294 <xTraceKernelPortInitObjectHandleStack+0xe4>
	}

	return TRC_SUCCESS;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000023c 	.word	0x2000023c

080012c0 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d827      	bhi.n	8001320 <pszTraceGetErrorNotEnoughHandles+0x60>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <pszTraceGetErrorNotEnoughHandles+0x18>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	0800130d 	.word	0x0800130d
 80012dc:	08001305 	.word	0x08001305
 80012e0:	08001309 	.word	0x08001309
 80012e4:	080012fd 	.word	0x080012fd
 80012e8:	08001301 	.word	0x08001301
 80012ec:	08001311 	.word	0x08001311
 80012f0:	08001315 	.word	0x08001315
 80012f4:	08001319 	.word	0x08001319
 80012f8:	0800131d 	.word	0x0800131d
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <pszTraceGetErrorNotEnoughHandles+0x70>)
 80012fe:	e010      	b.n	8001322 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <pszTraceGetErrorNotEnoughHandles+0x74>)
 8001302:	e00e      	b.n	8001322 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <pszTraceGetErrorNotEnoughHandles+0x78>)
 8001306:	e00c      	b.n	8001322 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <pszTraceGetErrorNotEnoughHandles+0x7c>)
 800130a:	e00a      	b.n	8001322 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <pszTraceGetErrorNotEnoughHandles+0x80>)
 800130e:	e008      	b.n	8001322 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <pszTraceGetErrorNotEnoughHandles+0x84>)
 8001312:	e006      	b.n	8001322 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8001316:	e004      	b.n	8001322 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <pszTraceGetErrorNotEnoughHandles+0x8c>)
 800131a:	e002      	b.n	8001322 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <pszTraceGetErrorNotEnoughHandles+0x90>)
 800131e:	e000      	b.n	8001322 <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	0800a1a8 	.word	0x0800a1a8
 8001334:	0800a1f0 	.word	0x0800a1f0
 8001338:	0800a238 	.word	0x0800a238
 800133c:	0800a28c 	.word	0x0800a28c
 8001340:	0800a2d8 	.word	0x0800a2d8
 8001344:	0800a324 	.word	0x0800a324
 8001348:	0800a370 	.word	0x0800a370
 800134c:	0800a3c4 	.word	0x0800a3c4
 8001350:	0800a41c 	.word	0x0800a41c
 8001354:	0800a478 	.word	0x0800a478

08001358 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 8001360:	f000 f8be 	bl	80014e0 <xTraceInitialize>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 800136a:	2301      	movs	r3, #1
 800136c:	e01f      	b.n	80013ae <xTraceEnable+0x56>
	}

	if (uiStartOption == TRC_START)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d10b      	bne.n	800138c <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 8001374:	f7ff fe45 	bl	8001002 <xTraceKernelPortEnable>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 800137e:	2301      	movs	r3, #1
 8001380:	e015      	b.n	80013ae <xTraceEnable+0x56>
		}
		
		prvTraceInitTimestamps();
 8001382:	f000 f89d 	bl	80014c0 <prvTraceInitTimestamps>

		prvTraceStart();
 8001386:	f000 f823 	bl	80013d0 <prvTraceStart>
 800138a:	e00f      	b.n	80013ac <xTraceEnable+0x54>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d104      	bne.n	800139c <xTraceEnable+0x44>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <xTraceEnable+0x60>)
 8001394:	f000 fec0 	bl	8002118 <prvTraceError>

		return TRC_FAIL;
 8001398:	2301      	movs	r3, #1
 800139a:	e008      	b.n	80013ae <xTraceEnable+0x56>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <xTraceEnable+0x54>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <xTraceEnable+0x64>)
 80013a4:	f000 feb8 	bl	8002118 <prvTraceError>

		return TRC_FAIL;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <xTraceEnable+0x56>
	}

	return TRC_SUCCESS;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	0800a4a8 	.word	0x0800a4a8
 80013bc:	0800a4e8 	.word	0x0800a4e8

080013c0 <xTraceDisable>:


traceResult xTraceDisable(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	prvTraceStop();
 80013c4:	f000 f864 	bl	8001490 <prvTraceStop>

	return TRC_SUCCESS;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == (void*)0)
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <prvTraceStart+0xb0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d047      	beq.n	8001472 <prvTraceStart+0xa2>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <prvTraceStart+0xb0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d044      	beq.n	8001476 <prvTraceStart+0xa6>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <prvTraceStart+0xb4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d141      	bne.n	8001478 <prvTraceStart+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80013f4:	f3ef 8310 	mrs	r3, PRIMASK
 80013f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80013fa:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f383 8810 	msr	PRIMASK, r3
}
 8001408:	bf00      	nop
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <prvTraceStart+0xb8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <prvTraceStart+0xb8>)
 8001412:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <prvTraceStart+0xb0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 800141c:	f7ff fddf 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8001420:	4603      	mov	r3, r0
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd4d 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 8001428:	4603      	mov	r3, r0
 800142a:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d110      	bne.n	8001454 <prvTraceStart+0x84>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8001432:	2003      	movs	r0, #3
 8001434:	f000 fd3a 	bl	8001eac <prvTraceGetObjectHandle>
 8001438:	4603      	mov	r3, r0
 800143a:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	4a13      	ldr	r2, [pc, #76]	; (800148c <prvTraceStart+0xbc>)
 8001440:	4619      	mov	r1, r3
 8001442:	2003      	movs	r0, #3
 8001444:	f000 fe0e 	bl	8002064 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2200      	movs	r2, #0
 800144c:	4619      	mov	r1, r3
 800144e:	2003      	movs	r0, #3
 8001450:	f000 fc1e 	bl	8001c90 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fbb0 	bl	8001bbc <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <prvTraceStart+0xb8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	4a09      	ldr	r2, [pc, #36]	; (8001488 <prvTraceStart+0xb8>)
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f383 8810 	msr	PRIMASK, r3
}
 8001470:	e002      	b.n	8001478 <prvTraceStart+0xa8>
		return;
 8001472:	bf00      	nop
 8001474:	e000      	b.n	8001478 <prvTraceStart+0xa8>
		return; /* Already running */
 8001476:	bf00      	nop
	}
}
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20001bd4 	.word	0x20001bd4
 8001484:	200002cc 	.word	0x200002cc
 8001488:	20000224 	.word	0x20000224
 800148c:	0800a528 	.word	0x0800a528

08001490 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <prvTraceStop+0x28>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <prvTraceStop+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <prvTraceStop+0x2c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <prvTraceStop+0x2c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4798      	blx	r3
	}
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20001bd4 	.word	0x20001bd4
 80014bc:	20000230 	.word	0x20000230

080014c0 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <prvTraceInitTimestamps+0x18>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <prvTraceInitTimestamps+0x1c>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e0001004 	.word	0xe0001004
 80014dc:	20000234 	.word	0x20000234

080014e0 <xTraceInitialize>:
	return trcStr;
}
#endif

traceResult xTraceInitialize(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 80014e4:	4b8a      	ldr	r3, [pc, #552]	; (8001710 <xTraceInitialize+0x230>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e10d      	b.n	800170c <xTraceInitialize+0x22c>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 80014f0:	4b88      	ldr	r3, [pc, #544]	; (8001714 <xTraceInitialize+0x234>)
 80014f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f6:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 80014f8:	4b87      	ldr	r3, [pc, #540]	; (8001718 <xTraceInitialize+0x238>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 80014fe:	4b87      	ldr	r3, [pc, #540]	; (800171c <xTraceInitialize+0x23c>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8001504:	4b86      	ldr	r3, [pc, #536]	; (8001720 <xTraceInitialize+0x240>)
 8001506:	4a87      	ldr	r2, [pc, #540]	; (8001724 <xTraceInitialize+0x244>)
 8001508:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 800150a:	4b87      	ldr	r3, [pc, #540]	; (8001728 <xTraceInitialize+0x248>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a87      	ldr	r2, [pc, #540]	; (800172c <xTraceInitialize+0x24c>)
 8001510:	6013      	str	r3, [r2, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 8001512:	4887      	ldr	r0, [pc, #540]	; (8001730 <xTraceInitialize+0x250>)
 8001514:	f7ff fd6a 	bl	8000fec <xTraceKernelPortInitialize>
 8001518:	4603      	mov	r3, r0
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <xTraceInitialize+0x42>
	{
		return TRC_FAIL;
 800151e:	2301      	movs	r3, #1
 8001520:	e0f4      	b.n	800170c <xTraceInitialize+0x22c>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8001522:	4b7f      	ldr	r3, [pc, #508]	; (8001720 <xTraceInitialize+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f641 1204 	movw	r2, #6404	; 0x1904
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f008 fd49 	bl	8009fc4 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8001532:	4b7b      	ldr	r3, [pc, #492]	; (8001720 <xTraceInitialize+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 800153a:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 800153c:	4b78      	ldr	r3, [pc, #480]	; (8001720 <xTraceInitialize+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2207      	movs	r2, #7
 8001542:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8001544:	4b76      	ldr	r3, [pc, #472]	; (8001720 <xTraceInitialize+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 800154c:	4b74      	ldr	r3, [pc, #464]	; (8001720 <xTraceInitialize+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f641 1204 	movw	r2, #6404	; 0x1904
 8001554:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8001556:	4b72      	ldr	r3, [pc, #456]	; (8001720 <xTraceInitialize+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800155e:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8001560:	4b6f      	ldr	r3, [pc, #444]	; (8001720 <xTraceInitialize+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 800156a:	4b6d      	ldr	r3, [pc, #436]	; (8001720 <xTraceInitialize+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8001572:	4b6b      	ldr	r3, [pc, #428]	; (8001720 <xTraceInitialize+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 800157a:	f7ff fd4b 	bl	8001014 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 800157e:	4b68      	ldr	r3, [pc, #416]	; (8001720 <xTraceInitialize+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 8001586:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 800158a:	4b65      	ldr	r3, [pc, #404]	; (8001720 <xTraceInitialize+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001592:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8001596:	4b62      	ldr	r3, [pc, #392]	; (8001720 <xTraceInitialize+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80015a0:	4b5f      	ldr	r3, [pc, #380]	; (8001720 <xTraceInitialize+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 80015a8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80015ac:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <xTraceInitialize+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b4:	2250      	movs	r2, #80	; 0x50
 80015b6:	495f      	ldr	r1, [pc, #380]	; (8001734 <xTraceInitialize+0x254>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fd2d 	bl	8002018 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 80015be:	4b58      	ldr	r3, [pc, #352]	; (8001720 <xTraceInitialize+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 80015c6:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 80015ca:	4b55      	ldr	r3, [pc, #340]	; (8001720 <xTraceInitialize+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d2:	220a      	movs	r2, #10
 80015d4:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
	RecorderDataPtr->endmarker1 = 0x0B;
 80015d8:	4b51      	ldr	r3, [pc, #324]	; (8001720 <xTraceInitialize+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e0:	220b      	movs	r2, #11
 80015e2:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
	RecorderDataPtr->endmarker2 = 0x0C;
 80015e6:	4b4e      	ldr	r3, [pc, #312]	; (8001720 <xTraceInitialize+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ee:	220c      	movs	r2, #12
 80015f0:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
	RecorderDataPtr->endmarker3 = 0x0D;
 80015f4:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <xTraceInitialize+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fc:	220d      	movs	r2, #13
 80015fe:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
	RecorderDataPtr->endmarker4 = 0x71;
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <xTraceInitialize+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160a:	2271      	movs	r2, #113	; 0x71
 800160c:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
	RecorderDataPtr->endmarker5 = 0x72;
 8001610:	4b43      	ldr	r3, [pc, #268]	; (8001720 <xTraceInitialize+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001618:	2272      	movs	r2, #114	; 0x72
 800161a:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
	RecorderDataPtr->endmarker6 = 0x73;
 800161e:	4b40      	ldr	r3, [pc, #256]	; (8001720 <xTraceInitialize+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001626:	2273      	movs	r2, #115	; 0x73
 8001628:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
	RecorderDataPtr->endmarker7 = 0x74;
 800162c:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <xTraceInitialize+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001634:	2274      	movs	r2, #116	; 0x74
 8001636:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
	RecorderDataPtr->endmarker8 = 0xF1;
 800163a:	4b39      	ldr	r3, [pc, #228]	; (8001720 <xTraceInitialize+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	22f1      	movs	r2, #241	; 0xf1
 8001644:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
	RecorderDataPtr->endmarker9 = 0xF2;
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <xTraceInitialize+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001650:	22f2      	movs	r2, #242	; 0xf2
 8001652:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
	RecorderDataPtr->endmarker10 = 0xF3;
 8001656:	4b32      	ldr	r3, [pc, #200]	; (8001720 <xTraceInitialize+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165e:	22f3      	movs	r2, #243	; 0xf3
 8001660:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
	RecorderDataPtr->endmarker11 = 0xF4;
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <xTraceInitialize+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166c:	22f4      	movs	r2, #244	; 0xf4
 800166e:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 8001672:	f7ff fd9d 	bl	80011b0 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <xTraceInitialize+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	22f4      	movs	r2, #244	; 0xf4
 800167c:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 800167e:	4b28      	ldr	r3, [pc, #160]	; (8001720 <xTraceInitialize+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	22f3      	movs	r2, #243	; 0xf3
 8001684:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <xTraceInitialize+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	22f2      	movs	r2, #242	; 0xf2
 800168c:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <xTraceInitialize+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	22f1      	movs	r2, #241	; 0xf1
 8001694:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <xTraceInitialize+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2274      	movs	r2, #116	; 0x74
 800169c:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <xTraceInitialize+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2273      	movs	r2, #115	; 0x73
 80016a4:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80016a6:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <xTraceInitialize+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2272      	movs	r2, #114	; 0x72
 80016ac:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <xTraceInitialize+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2271      	movs	r2, #113	; 0x71
 80016b4:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <xTraceInitialize+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2204      	movs	r2, #4
 80016bc:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <xTraceInitialize+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2203      	movs	r2, #3
 80016c4:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <xTraceInitialize+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2202      	movs	r2, #2
 80016cc:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <xTraceInitialize+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <xTraceInitialize+0x23c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d010      	beq.n	8001700 <xTraceInitialize+0x220>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <xTraceInitialize+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e6:	4a0d      	ldr	r2, [pc, #52]	; (800171c <xTraceInitialize+0x23c>)
 80016e8:	6811      	ldr	r1, [r2, #0]
 80016ea:	2250      	movs	r2, #80	; 0x50
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fc93 	bl	8002018 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <xTraceInitialize+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		prvTraceStop();
 80016fc:	f7ff fec8 	bl	8001490 <prvTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 8001700:	f000 feb0 	bl	8002464 <xTraceHardwarePortInitCortexM>
#endif

	RecorderInitialized = 1;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <xTraceInitialize+0x230>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20001bd8 	.word	0x20001bd8
 8001714:	20000238 	.word	0x20000238
 8001718:	2000023a 	.word	0x2000023a
 800171c:	200002cc 	.word	0x200002cc
 8001720:	20001bd4 	.word	0x20001bd4
 8001724:	200002d0 	.word	0x200002d0
 8001728:	e0001004 	.word	0xe0001004
 800172c:	20000234 	.word	0x20000234
 8001730:	2000020c 	.word	0x2000020c
 8001734:	0800a674 	.word	0x0800a674

08001738 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d044      	beq.n	80017d2 <prvTraceStoreTaskReady+0x9a>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <prvTraceStoreTaskReady+0xa8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d042      	beq.n	80017d6 <prvTraceStoreTaskReady+0x9e>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <prvTraceStoreTaskReady+0xac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <prvTraceStoreTaskReady+0x28>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8001758:	4823      	ldr	r0, [pc, #140]	; (80017e8 <prvTraceStoreTaskReady+0xb0>)
 800175a:	f000 fcdd 	bl	8002118 <prvTraceError>
		return;
 800175e:	e03b      	b.n	80017d8 <prvTraceStoreTaskReady+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001760:	f3ef 8310 	mrs	r3, PRIMASK
 8001764:	60fb      	str	r3, [r7, #12]
  return(result);
 8001766:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	2301      	movs	r3, #1
 800176c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f383 8810 	msr	PRIMASK, r3
}
 8001774:	bf00      	nop
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <prvTraceStoreTaskReady+0xac>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <prvTraceStoreTaskReady+0xac>)
 800177e:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <prvTraceStoreTaskReady+0xb4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	2b00      	cmp	r3, #0
 8001788:	d018      	beq.n	80017bc <prvTraceStoreTaskReady+0x84>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800178a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800178e:	f000 fd9f 	bl	80022d0 <prvTraceGetDTS>
 8001792:	4603      	mov	r3, r0
 8001794:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 800179a:	f000 fb27 	bl	8001dec <prvTraceNextFreeEventBufferSlot>
 800179e:	6178      	str	r0, [r7, #20]
		if (tr != (void*)0)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00a      	beq.n	80017bc <prvTraceStoreTaskReady+0x84>
		{
			tr->type = DIV_TASK_READY;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	8b7a      	ldrh	r2, [r7, #26]
 80017b0:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	7e7a      	ldrb	r2, [r7, #25]
 80017b6:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80017b8:	f000 fd62 	bl	8002280 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <prvTraceStoreTaskReady+0xac>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <prvTraceStoreTaskReady+0xac>)
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f383 8810 	msr	PRIMASK, r3
}
 80017d0:	e002      	b.n	80017d8 <prvTraceStoreTaskReady+0xa0>
		return;
 80017d2:	bf00      	nop
 80017d4:	e000      	b.n	80017d8 <prvTraceStoreTaskReady+0xa0>
		return;
 80017d6:	bf00      	nop
}
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000000c 	.word	0x2000000c
 80017e4:	20000224 	.word	0x20000224
 80017e8:	0800a688 	.word	0x0800a688
 80017ec:	20001bd4 	.word	0x20001bd4

080017f0 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08e      	sub	sp, #56	; 0x38
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 80017fc:	4b46      	ldr	r3, [pc, #280]	; (8001918 <vTraceStoreMemMangEvent+0x128>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8084 	beq.w	800190e <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	da03      	bge.n	8001814 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	425b      	negs	r3, r3
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
 8001812:	e001      	b.n	8001818 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001818:	f3ef 8310 	mrs	r3, PRIMASK
 800181c:	61bb      	str	r3, [r7, #24]
  return(result);
 800181e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
 8001822:	2301      	movs	r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f383 8810 	msr	PRIMASK, r3
}
 800182c:	bf00      	nop
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <vTraceStoreMemMangEvent+0x12c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	4a39      	ldr	r2, [pc, #228]	; (800191c <vTraceStoreMemMangEvent+0x12c>)
 8001836:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d015      	beq.n	800186a <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <vTraceStoreMemMangEvent+0x128>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <vTraceStoreMemMangEvent+0x128>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	440a      	add	r2, r1
 800184c:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <vTraceStoreMemMangEvent+0x128>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001854:	4b30      	ldr	r3, [pc, #192]	; (8001918 <vTraceStoreMemMangEvent+0x128>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185a:	429a      	cmp	r2, r3
 800185c:	d905      	bls.n	800186a <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <vTraceStoreMemMangEvent+0x128>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <vTraceStoreMemMangEvent+0x128>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <vTraceStoreMemMangEvent+0x128>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	2b00      	cmp	r3, #0
 8001872:	d041      	beq.n	80018f8 <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8001874:	20ff      	movs	r0, #255	; 0xff
 8001876:	f000 fd2b 	bl	80022d0 <prvTraceGetDTS>
 800187a:	4603      	mov	r3, r0
 800187c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8001880:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001882:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001886:	f000 f90f 	bl	8001aa8 <prvTraceGetParam>
 800188a:	4603      	mov	r3, r0
 800188c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 800188e:	f000 faad 	bl	8001dec <prvTraceNextFreeEventBufferSlot>
 8001892:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != (void*)0)
 8001894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001896:	2b00      	cmp	r3, #0
 8001898:	d02e      	beq.n	80018f8 <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 800189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80018a0:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80018ac:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80018ae:	f000 fce7 	bl	8002280 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018b8:	f000 f8f6 	bl	8001aa8 <prvTraceGetParam>
 80018bc:	4603      	mov	r3, r0
 80018be:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 80018c6:	f000 fa91 	bl	8001dec <prvTraceNextFreeEventBufferSlot>
 80018ca:	6238      	str	r0, [r7, #32]
			if (ma != (void*)0)
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d012      	beq.n	80018f8 <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018d6:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80018de:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f2:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 80018f4:	f000 fcc4 	bl	8002280 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <vTraceStoreMemMangEvent+0x12c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	4a07      	ldr	r2, [pc, #28]	; (800191c <vTraceStoreMemMangEvent+0x12c>)
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f383 8810 	msr	PRIMASK, r3
}
 800190c:	e000      	b.n	8001910 <vTraceStoreMemMangEvent+0x120>
		return;
 800190e:	bf00      	nop
}
 8001910:	3738      	adds	r7, #56	; 0x38
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20001bd4 	.word	0x20001bd4
 800191c:	20000224 	.word	0x20000224

08001920 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	460b      	mov	r3, r1
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <prvTraceStoreKernelCall+0xa8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <prvTraceStoreKernelCall+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8001936:	4825      	ldr	r0, [pc, #148]	; (80019cc <prvTraceStoreKernelCall+0xac>)
 8001938:	f000 fbee 	bl	8002118 <prvTraceError>
		return;
 800193c:	e040      	b.n	80019c0 <prvTraceStoreKernelCall+0xa0>
	}

	if (handle_of_last_logged_task == 0)
 800193e:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <prvTraceStoreKernelCall+0xb0>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d03b      	beq.n	80019be <prvTraceStoreKernelCall+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001946:	f3ef 8310 	mrs	r3, PRIMASK
 800194a:	617b      	str	r3, [r7, #20]
  return(result);
 800194c:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	2301      	movs	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f383 8810 	msr	PRIMASK, r3
}
 800195a:	bf00      	nop
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <prvTraceStoreKernelCall+0xa8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <prvTraceStoreKernelCall+0xa8>)
 8001964:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <prvTraceStoreKernelCall+0xb4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01b      	beq.n	80019a8 <prvTraceStoreKernelCall+0x88>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001970:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001974:	f000 fcac 	bl	80022d0 <prvTraceGetDTS>
 8001978:	4603      	mov	r3, r0
 800197a:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8001982:	f000 fa33 	bl	8001dec <prvTraceNextFreeEventBufferSlot>
 8001986:	61f8      	str	r0, [r7, #28]
		if (kse != (void*)0)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00c      	beq.n	80019a8 <prvTraceStoreKernelCall+0x88>
		{
			kse->dts = dts1;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001992:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80019a2:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80019a4:	f000 fc6c 	bl	8002280 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <prvTraceStoreKernelCall+0xa8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <prvTraceStoreKernelCall+0xa8>)
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f383 8810 	msr	PRIMASK, r3
}
 80019bc:	e000      	b.n	80019c0 <prvTraceStoreKernelCall+0xa0>
		return;
 80019be:	bf00      	nop
}
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000224 	.word	0x20000224
 80019cc:	0800a6c0 	.word	0x0800a6c0
 80019d0:	2000022c 	.word	0x2000022c
 80019d4:	20001bd4 	.word	0x20001bd4

080019d8 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	460b      	mov	r3, r1
 80019e6:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <prvTraceStoreKernelCallWithParam+0xc0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <prvTraceStoreKernelCallWithParam+0x20>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 80019f0:	482a      	ldr	r0, [pc, #168]	; (8001a9c <prvTraceStoreKernelCallWithParam+0xc4>)
 80019f2:	f000 fb91 	bl	8002118 <prvTraceError>
		return;
 80019f6:	e04b      	b.n	8001a90 <prvTraceStoreKernelCallWithParam+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80019f8:	f3ef 8310 	mrs	r3, PRIMASK
 80019fc:	617b      	str	r3, [r7, #20]
  return(result);
 80019fe:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	2301      	movs	r3, #1
 8001a04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f383 8810 	msr	PRIMASK, r3
}
 8001a0c:	bf00      	nop
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	4a20      	ldr	r2, [pc, #128]	; (8001a98 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a16:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <prvTraceStoreKernelCallWithParam+0xc8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d02b      	beq.n	8001a7a <prvTraceStoreKernelCallWithParam+0xa2>
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <prvTraceStoreKernelCallWithParam+0xcc>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d027      	beq.n	8001a7a <prvTraceStoreKernelCallWithParam+0xa2>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8001a2a:	20ff      	movs	r0, #255	; 0xff
 8001a2c:	f000 fc50 	bl	80022d0 <prvTraceGetDTS>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8001a36:	6839      	ldr	r1, [r7, #0]
 8001a38:	20ff      	movs	r0, #255	; 0xff
 8001a3a:	f000 f835 	bl	8001aa8 <prvTraceGetParam>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8001a4a:	f000 f9cf 	bl	8001dec <prvTraceNextFreeEventBufferSlot>
 8001a4e:	61f8      	str	r0, [r7, #28]
		if (kse != (void*)0)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d011      	beq.n	8001a7a <prvTraceStoreKernelCallWithParam+0xa2>
		{
			kse->dts = dts2;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a5c:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001a6c:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001a74:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001a76:	f000 fc03 	bl	8002280 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f383 8810 	msr	PRIMASK, r3
}
 8001a8e:	bf00      	nop
}
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000224 	.word	0x20000224
 8001a9c:	0800a6f8 	.word	0x0800a6f8
 8001aa0:	20001bd4 	.word	0x20001bd4
 8001aa4:	2000022c 	.word	0x2000022c

08001aa8 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d801      	bhi.n	8001abe <prvTraceGetParam+0x16>
	{
		return param;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	e01d      	b.n	8001afa <prvTraceGetParam+0x52>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8001abe:	f000 f995 	bl	8001dec <prvTraceNextFreeEventBufferSlot>
 8001ac2:	60f8      	str	r0, [r7, #12]
		if (xps != (void*)0)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d014      	beq.n	8001af4 <prvTraceGetParam+0x4c>
		{
			xps->type = DIV_XPS;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001af0:	f000 fbc6 	bl	8002280 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4013      	ands	r3, r2
	}
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <prvTraceStoreKernelCallWithNumericParamOnly+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8001b1a:	4825      	ldr	r0, [pc, #148]	; (8001bb0 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>)
 8001b1c:	f000 fafc 	bl	8002118 <prvTraceError>
		return;
 8001b20:	e041      	b.n	8001ba6 <prvTraceStoreKernelCallWithNumericParamOnly+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001b22:	f3ef 8310 	mrs	r3, PRIMASK
 8001b26:	613b      	str	r3, [r7, #16]
  return(result);
 8001b28:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001b2a:	623b      	str	r3, [r7, #32]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f383 8810 	msr	PRIMASK, r3
}
 8001b36:	bf00      	nop
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b40:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d021      	beq.n	8001b90 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01d      	beq.n	8001b90 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8001b54:	20ff      	movs	r0, #255	; 0xff
 8001b56:	f000 fbbb 	bl	80022d0 <prvTraceGetDTS>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8001b5e:	6839      	ldr	r1, [r7, #0]
 8001b60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b64:	f7ff ffa0 	bl	8001aa8 <prvTraceGetParam>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8001b6c:	f000 f93e 	bl	8001dec <prvTraceNextFreeEventBufferSlot>
 8001b70:	61b8      	str	r0, [r7, #24]
		if (kse != (void*)0)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
		{
			kse->dts = dts6;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	7ffa      	ldrb	r2, [r7, #31]
 8001b7c:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b8a:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001b8c:	f000 fb78 	bl	8002280 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f383 8810 	msr	PRIMASK, r3
}
 8001ba4:	bf00      	nop
}
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000224 	.word	0x20000224
 8001bb0:	0800a730 	.word	0x0800a730
 8001bb4:	20001bd4 	.word	0x20001bd4
 8001bb8:	2000022c 	.word	0x2000022c

08001bbc <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8001bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	f383 8810 	msr	PRIMASK, r3
}
 8001bda:	bf00      	nop
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <prvTraceStoreTaskswitch+0xc4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <prvTraceStoreTaskswitch+0xc4>)
 8001be4:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <prvTraceStoreTaskswitch+0xc8>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	79fa      	ldrb	r2, [r7, #7]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d038      	beq.n	8001c62 <prvTraceStoreTaskswitch+0xa6>
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <prvTraceStoreTaskswitch+0xcc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d033      	beq.n	8001c62 <prvTraceStoreTaskswitch+0xa6>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <prvTraceStoreTaskswitch+0xd0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001c00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c04:	f000 fb64 	bl	80022d0 <prvTraceGetDTS>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <prvTraceStoreTaskswitch+0xc8>)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <prvTraceStoreTaskswitch+0xc8>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8001c18:	f000 f8e8 	bl	8001dec <prvTraceNextFreeEventBufferSlot>
 8001c1c:	6178      	str	r0, [r7, #20]

		if (ts != (void*)0)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01e      	beq.n	8001c62 <prvTraceStoreTaskswitch+0xa6>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <prvTraceStoreTaskswitch+0xc8>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	f000 f89e 	bl	8001d6c <prvTraceGetObjectState>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d103      	bne.n	8001c3e <prvTraceStoreTaskswitch+0x82>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2207      	movs	r2, #7
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	e002      	b.n	8001c44 <prvTraceStoreTaskswitch+0x88>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2206      	movs	r2, #6
 8001c42:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	8b7a      	ldrh	r2, [r7, #26]
 8001c48:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	7e7a      	ldrb	r2, [r7, #25]
 8001c4e:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <prvTraceStoreTaskswitch+0xc8>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	4619      	mov	r1, r3
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 f863 	bl	8001d24 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8001c5e:	f000 fb0f 	bl	8002280 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <prvTraceStoreTaskswitch+0xc4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <prvTraceStoreTaskswitch+0xc4>)
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f383 8810 	msr	PRIMASK, r3
}
 8001c76:	bf00      	nop
}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000224 	.word	0x20000224
 8001c84:	2000022c 	.word	0x2000022c
 8001c88:	20001bd4 	.word	0x20001bd4
 8001c8c:	20000210 	.word	0x20000210

08001c90 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	71bb      	strb	r3, [r7, #6]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <prvTraceSetPriorityProperty+0x48>)
 8001ca4:	681c      	ldr	r4, [r3, #0]
 8001ca6:	79fa      	ldrb	r2, [r7, #7]
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f8c1 	bl	8001e34 <uiIndexOfObject>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <prvTraceSetPriorityProperty+0x48>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4423      	add	r3, r4
 8001cc8:	797a      	ldrb	r2, [r7, #5]
 8001cca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20001bd4 	.word	0x20001bd4

08001cdc <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <prvTraceGetPriorityProperty+0x44>)
 8001cee:	681c      	ldr	r4, [r3, #0]
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f89c 	bl	8001e34 <uiIndexOfObject>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <prvTraceGetPriorityProperty+0x44>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	4413      	add	r3, r2
 8001d08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4423      	add	r3, r4
 8001d12:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20001bd4 	.word	0x20001bd4

08001d24 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	71bb      	strb	r3, [r7, #6]
 8001d32:	4613      	mov	r3, r2
 8001d34:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <prvTraceSetObjectState+0x44>)
 8001d38:	681c      	ldr	r4, [r3, #0]
 8001d3a:	79fa      	ldrb	r2, [r7, #7]
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f877 	bl	8001e34 <uiIndexOfObject>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <prvTraceSetObjectState+0x44>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4413      	add	r3, r2
 8001d52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d56:	440b      	add	r3, r1
 8001d58:	4423      	add	r3, r4
 8001d5a:	797a      	ldrb	r2, [r7, #5]
 8001d5c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd90      	pop	{r4, r7, pc}
 8001d68:	20001bd4 	.word	0x20001bd4

08001d6c <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	460a      	mov	r2, r1
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <prvTraceGetObjectState+0x40>)
 8001d7e:	681c      	ldr	r4, [r3, #0]
 8001d80:	79fa      	ldrb	r2, [r7, #7]
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f854 	bl	8001e34 <uiIndexOfObject>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <prvTraceGetObjectState+0x40>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4413      	add	r3, r2
 8001d98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d9c:	440b      	add	r3, r1
 8001d9e:	4423      	add	r3, r4
 8001da0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	20001bd4 	.word	0x20001bd4

08001db0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <prvTraceSetTaskInstanceFinished+0x38>)
 8001dbc:	681c      	ldr	r4, [r3, #0]
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f836 	bl	8001e34 <uiIndexOfObject>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <prvTraceSetTaskInstanceFinished+0x38>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4423      	add	r3, r4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20001bd4 	.word	0x20001bd4

08001dec <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <prvTraceNextFreeEventBufferSlot+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e014      	b.n	8001e28 <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e08:	d304      	bcc.n	8001e14 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8001e0a:	4809      	ldr	r0, [pc, #36]	; (8001e30 <prvTraceNextFreeEventBufferSlot+0x44>)
 8001e0c:	f000 f984 	bl	8002118 <prvTraceError>
		return (void*)0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e009      	b.n	8001e28 <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20001bd4 	.word	0x20001bd4
 8001e30:	0800a768 	.word	0x0800a768

08001e34 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d823      	bhi.n	8001e92 <uiIndexOfObject+0x5e>
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <uiIndexOfObject+0x5e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <uiIndexOfObject+0x70>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	4413      	add	r3, r2
 8001e58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8001e5c:	79fa      	ldrb	r2, [r7, #7]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d817      	bhi.n	8001e92 <uiIndexOfObject+0x5e>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <uiIndexOfObject+0x70>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	79bb      	ldrb	r3, [r7, #6]
 8001e68:	3338      	adds	r3, #56	; 0x38
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <uiIndexOfObject+0x70>)
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	440b      	add	r3, r1
 8001e78:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001e7c:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	fb11 f303 	smulbb	r3, r1, r3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	81fb      	strh	r3, [r7, #14]
		return index;
 8001e8e:	89fb      	ldrh	r3, [r7, #14]
 8001e90:	e003      	b.n	8001e9a <uiIndexOfObject+0x66>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <uiIndexOfObject+0x74>)
 8001e94:	f000 f940 	bl	8002118 <prvTraceError>
	return 0;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20001bd4 	.word	0x20001bd4
 8001ea8:	0800a790 	.word	0x0800a790

08001eac <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eba:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f383 8810 	msr	PRIMASK, r3
}
 8001eca:	bf00      	nop
 8001ecc:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <prvTraceGetObjectHandle+0x124>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4a3f      	ldr	r2, [pc, #252]	; (8001fd0 <prvTraceGetObjectHandle+0x124>)
 8001ed4:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	4a3e      	ldr	r2, [pc, #248]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <prvTraceGetObjectHandle+0x12c>)
 8001ee2:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <prvTraceGetObjectHandle+0x12c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001eea:	4413      	add	r3, r2
 8001eec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d114      	bne.n	8001f1e <prvTraceGetObjectHandle+0x72>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8001ef4:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <prvTraceGetObjectHandle+0x12c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4935      	ldr	r1, [pc, #212]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001efe:	3308      	adds	r3, #8
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	440b      	add	r3, r1
 8001f04:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <prvTraceGetObjectHandle+0x12c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8001f10:	3201      	adds	r2, #1
 8001f12:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8001f14:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001f16:	4413      	add	r3, r2
 8001f18:	460a      	mov	r2, r1
 8001f1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <prvTraceGetObjectHandle+0x12c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2c      	ldr	r2, [pc, #176]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001f24:	4413      	add	r3, r2
 8001f26:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f2a:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001f30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	4927      	ldr	r1, [pc, #156]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001f38:	3310      	adds	r3, #16
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	440b      	add	r3, r1
 8001f3e:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d90a      	bls.n	8001f5a <prvTraceGetObjectHandle+0xae>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f9ba 	bl	80012c0 <pszTraceGetErrorNotEnoughHandles>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f8e2 	bl	8002118 <prvTraceError>
		handle = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	77fb      	strb	r3, [r7, #31]
 8001f58:	e029      	b.n	8001fae <prvTraceGetObjectHandle+0x102>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001f5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f62:	3201      	adds	r2, #1
 8001f64:	b291      	uxth	r1, r2
 8001f66:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001f68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f74:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001f7a:	3308      	adds	r3, #8
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001f82:	1acb      	subs	r3, r1, r3
 8001f84:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001f8a:	3318      	adds	r3, #24
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	88db      	ldrh	r3, [r3, #6]
 8001f92:	461a      	mov	r2, r3
		if (hndCount >
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	4293      	cmp	r3, r2
 8001f98:	dd09      	ble.n	8001fae <prvTraceGetObjectHandle+0x102>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8001fa0:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <prvTraceGetObjectHandle+0x128>)
 8001fa4:	3318      	adds	r3, #24
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	460a      	mov	r2, r1
 8001fac:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <prvTraceGetObjectHandle+0x124>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <prvTraceGetObjectHandle+0x124>)
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f383 8810 	msr	PRIMASK, r3
}
 8001fc2:	bf00      	nop

	return handle;
 8001fc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000224 	.word	0x20000224
 8001fd4:	2000023c 	.word	0x2000023c
 8001fd8:	20001bdc 	.word	0x20001bdc

08001fdc <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8001fec:	79fa      	ldrb	r2, [r7, #7]
 8001fee:	79bb      	ldrb	r3, [r7, #6]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff1e 	bl	8001e34 <uiIndexOfObject>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <prvMarkObjectAsUsed+0x38>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	89fb      	ldrh	r3, [r7, #14]
 8002002:	4413      	add	r3, r2
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20001bd4 	.word	0x20001bd4

08002018 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e010      	b.n	800204c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	441a      	add	r2, r3
 8002030:	68f9      	ldr	r1, [r7, #12]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	440b      	add	r3, r1
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	429a      	cmp	r2, r3
 8002052:	d3ea      	bcc.n	800202a <prvStrncpy+0x12>
			break;
	}
}
 8002054:	e000      	b.n	8002058 <prvStrncpy+0x40>
			break;
 8002056:	bf00      	nop
}
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	603a      	str	r2, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
 8002070:	460b      	mov	r3, r1
 8002072:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == (void*)0)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <prvTraceSetObjectName+0x1a>
	{
		name = "";
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <prvTraceSetObjectName+0x9c>)
 800207c:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d903      	bls.n	800208c <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8002084:	481f      	ldr	r0, [pc, #124]	; (8002104 <prvTraceSetObjectName+0xa0>)
 8002086:	f000 f847 	bl	8002118 <prvTraceError>
		return;
 800208a:	e036      	b.n	80020fa <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 800208c:	79bb      	ldrb	r3, [r7, #6]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8002092:	481d      	ldr	r0, [pc, #116]	; (8002108 <prvTraceSetObjectName+0xa4>)
 8002094:	f000 f840 	bl	8002118 <prvTraceError>
		return;
 8002098:	e02f      	b.n	80020fa <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <prvTraceSetObjectName+0xa8>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	4413      	add	r3, r2
 80020a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020a6:	79ba      	ldrb	r2, [r7, #6]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d908      	bls.n	80020be <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f906 	bl	80012c0 <pszTraceGetErrorNotEnoughHandles>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f82e 	bl	8002118 <prvTraceError>
 80020bc:	e01d      	b.n	80020fa <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 80020be:	79fa      	ldrb	r2, [r7, #7]
 80020c0:	79bb      	ldrb	r3, [r7, #6]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff feb5 	bl	8001e34 <uiIndexOfObject>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <prvTraceSetObjectName+0xac>)
 80020d0:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <prvTraceSetObjectName+0xb0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <prvTraceSetObjectName+0xa8>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <prvTraceSetObjectName+0xac>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	3388      	adds	r3, #136	; 0x88
 80020e4:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <prvTraceSetObjectName+0xa8>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4413      	add	r3, r2
 80020ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80020f2:	461a      	mov	r2, r3
 80020f4:	6839      	ldr	r1, [r7, #0]
 80020f6:	f7ff ff8f 	bl	8002018 <prvStrncpy>
		}
	}
}
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	0800a800 	.word	0x0800a800
 8002104:	0800a804 	.word	0x0800a804
 8002108:	0800a834 	.word	0x0800a834
 800210c:	20001bd4 	.word	0x20001bd4
 8002110:	20001be0 	.word	0x20001be0
 8002114:	200002cc 	.word	0x200002cc

08002118 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <prvTraceError+0x50>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <prvTraceError+0x14>
	{
		xTraceDisable();
 8002128:	f7ff f94a 	bl	80013c0 <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <prvTraceError+0x54>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d115      	bne.n	8002160 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <prvTraceError+0x54>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != (void*)0)
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <prvTraceError+0x50>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00e      	beq.n	8002160 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <prvTraceError+0x50>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <prvTraceError+0x54>)
 800214c:	6811      	ldr	r1, [r2, #0]
 800214e:	2250      	movs	r2, #80	; 0x50
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff61 	bl	8002018 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <prvTraceError+0x50>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2201      	movs	r2, #1
 800215c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20001bd4 	.word	0x20001bd4
 800216c:	200002cc 	.word	0x200002cc

08002170 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 8002182:	e071      	b.n	8002268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8002184:	4b3d      	ldr	r3, [pc, #244]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4413      	add	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8002190:	4b3a      	ldr	r3, [pc, #232]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800219e:	2b98      	cmp	r3, #152	; 0x98
 80021a0:	d929      	bls.n	80021f6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 80021a2:	4b36      	ldr	r3, [pc, #216]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80021b0:	2ba7      	cmp	r3, #167	; 0xa7
 80021b2:	d820      	bhi.n	80021f6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 80021c2:	3368      	adds	r3, #104	; 0x68
 80021c4:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	441a      	add	r2, r3
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d244      	bcs.n	8002260 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80021e2:	4413      	add	r3, r2
 80021e4:	1d18      	adds	r0, r3, #4
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	3301      	adds	r3, #1
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	461a      	mov	r2, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	f007 fee8 	bl	8009fc4 <memset>
		{
 80021f4:	e034      	b.n	8002260 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 80021f6:	4b21      	ldr	r3, [pc, #132]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8002204:	2b01      	cmp	r3, #1
 8002206:	d12c      	bne.n	8002262 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	429a      	cmp	r2, r3
 8002214:	d20d      	bcs.n	8002232 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	2208      	movs	r2, #8
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f007 feca 	bl	8009fc4 <memset>
 8002230:	e017      	b.n	8002262 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f603 1354 	addw	r3, r3, #2388	; 0x954
 800223a:	2204      	movs	r2, #4
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f007 fec0 	bl	8009fc4 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002250:	4413      	add	r3, r2
 8002252:	3304      	adds	r3, #4
 8002254:	2204      	movs	r2, #4
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f007 feb3 	bl	8009fc4 <memset>
 800225e:	e000      	b.n	8002262 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
 8002260:	bf00      	nop
			}
		}
		i++;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3301      	adds	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	d389      	bcc.n	8002184 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14>
	}
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20001bd4 	.word	0x20001bd4

08002280 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <prvTraceUpdateCounters+0x4c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	2b00      	cmp	r3, #0
 800228c:	d01b      	beq.n	80022c6 <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <prvTraceUpdateCounters+0x4c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	3201      	adds	r2, #1
 8002296:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <prvTraceUpdateCounters+0x4c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	3201      	adds	r2, #1
 80022a0:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <prvTraceUpdateCounters+0x4c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ac:	d307      	bcc.n	80022be <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <prvTraceUpdateCounters+0x4c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2201      	movs	r2, #1
 80022b4:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <prvTraceUpdateCounters+0x4c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 80022be:	2001      	movs	r0, #1
 80022c0:	f7ff ff56 	bl	8002170 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 80022c4:	e000      	b.n	80022c8 <prvTraceUpdateCounters+0x48>
		return;
 80022c6:	bf00      	nop
#endif
}
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20001bd4 	.word	0x20001bd4

080022d0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 80022e6:	4b58      	ldr	r3, [pc, #352]	; (8002448 <prvTraceGetDTS+0x178>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d116      	bne.n	800231e <prvTraceGetDTS+0x4e>
	{	
		if (timestampFrequency != 0)
 80022f0:	4b56      	ldr	r3, [pc, #344]	; (800244c <prvTraceGetDTS+0x17c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <prvTraceGetDTS+0x36>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 80022f8:	4b54      	ldr	r3, [pc, #336]	; (800244c <prvTraceGetDTS+0x17c>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b52      	ldr	r3, [pc, #328]	; (8002448 <prvTraceGetDTS+0x178>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0892      	lsrs	r2, r2, #2
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
 8002304:	e00b      	b.n	800231e <prvTraceGetDTS+0x4e>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8002306:	4b52      	ldr	r3, [pc, #328]	; (8002450 <prvTraceGetDTS+0x180>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4b52      	ldr	r3, [pc, #328]	; (8002454 <prvTraceGetDTS+0x184>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d005      	beq.n	800231e <prvTraceGetDTS+0x4e>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8002312:	4b51      	ldr	r3, [pc, #324]	; (8002458 <prvTraceGetDTS+0x188>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <prvTraceGetDTS+0x178>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0892      	lsrs	r2, r2, #2
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f8d6 	bl	80024d4 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4b4c      	ldr	r3, [pc, #304]	; (800245c <prvTraceGetDTS+0x18c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a49      	ldr	r2, [pc, #292]	; (800245c <prvTraceGetDTS+0x18c>)
 8002336:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8002338:	4b43      	ldr	r3, [pc, #268]	; (8002448 <prvTraceGetDTS+0x178>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2b00      	cmp	r3, #0
 8002340:	d043      	beq.n	80023ca <prvTraceGetDTS+0xfa>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <prvTraceGetDTS+0x178>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	429a      	cmp	r2, r3
 800234c:	d91d      	bls.n	800238a <prvTraceGetDTS+0xba>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 800234e:	4b3e      	ldr	r3, [pc, #248]	; (8002448 <prvTraceGetDTS+0x178>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002354:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <prvTraceGetDTS+0x178>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002360:	4b39      	ldr	r3, [pc, #228]	; (8002448 <prvTraceGetDTS+0x178>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	440a      	add	r2, r1
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8002368:	4b37      	ldr	r3, [pc, #220]	; (8002448 <prvTraceGetDTS+0x178>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <prvTraceGetDTS+0x178>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	fbb3 f0f2 	udiv	r0, r3, r2
 800237a:	fb00 f202 	mul.w	r2, r0, r2
 800237e:	1a9a      	subs	r2, r3, r2
 8002380:	4b31      	ldr	r3, [pc, #196]	; (8002448 <prvTraceGetDTS+0x178>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	440a      	add	r2, r1
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
 8002388:	e007      	b.n	800239a <prvTraceGetDTS+0xca>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 800238a:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <prvTraceGetDTS+0x178>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002390:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <prvTraceGetDTS+0x178>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	440a      	add	r2, r1
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <prvTraceGetDTS+0x178>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <prvTraceGetDTS+0x178>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d313      	bcc.n	80023d2 <prvTraceGetDTS+0x102>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 80023aa:	4b27      	ldr	r3, [pc, #156]	; (8002448 <prvTraceGetDTS+0x178>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	3201      	adds	r2, #1
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <prvTraceGetDTS+0x178>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <prvTraceGetDTS+0x178>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <prvTraceGetDTS+0x178>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	1a8a      	subs	r2, r1, r2
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28
 80023c8:	e003      	b.n	80023d2 <prvTraceGetDTS+0x102>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <prvTraceGetDTS+0x178>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d92c      	bls.n	8002434 <prvTraceGetDTS+0x164>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 80023da:	f7ff fd07 	bl	8001dec <prvTraceNextFreeEventBufferSlot>
 80023de:	6178      	str	r0, [r7, #20]

		if (xts != (void*)0)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d026      	beq.n	8002434 <prvTraceGetDTS+0x164>
		{
			if (param_maxDTS == 0xFFFF)
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d10b      	bne.n	8002408 <prvTraceGetDTS+0x138>
			{
				xts->type = (uint8_t)XTS16;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	22a9      	movs	r2, #169	; 0xa9
 80023f4:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2200      	movs	r2, #0
 8002404:	705a      	strb	r2, [r3, #1]
 8002406:	e013      	b.n	8002430 <prvTraceGetDTS+0x160>
			}
			else if (param_maxDTS == 0xFF)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	2bff      	cmp	r3, #255	; 0xff
 800240c:	d10d      	bne.n	800242a <prvTraceGetDTS+0x15a>
			{
				xts->type = (uint8_t)XTS8;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	22a8      	movs	r2, #168	; 0xa8
 8002412:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	b29a      	uxth	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	0e1b      	lsrs	r3, r3, #24
 8002422:	b2da      	uxtb	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	705a      	strb	r2, [r3, #1]
 8002428:	e002      	b.n	8002430 <prvTraceGetDTS+0x160>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 800242a:	480d      	ldr	r0, [pc, #52]	; (8002460 <prvTraceGetDTS+0x190>)
 800242c:	f7ff fe74 	bl	8002118 <prvTraceError>
			}
			prvTraceUpdateCounters();
 8002430:	f7ff ff26 	bl	8002280 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	b29a      	uxth	r2, r3
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	4013      	ands	r3, r2
 800243c:	b29b      	uxth	r3, r3
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20001bd4 	.word	0x20001bd4
 800244c:	20000228 	.word	0x20000228
 8002450:	e0001004 	.word	0xe0001004
 8002454:	20000234 	.word	0x20000234
 8002458:	20000000 	.word	0x20000000
 800245c:	20001be4 	.word	0x20001be4
 8002460:	0800a864 	.word	0x0800a864

08002464 <xTraceHardwarePortInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if (((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) || (TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M_NRF_SD)) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void xTraceHardwarePortInitCortexM(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <xTraceHardwarePortInitCortexM+0x54>)
 800246a:	4a14      	ldr	r2, [pc, #80]	; (80024bc <xTraceHardwarePortInitCortexM+0x58>)
 800246c:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <xTraceHardwarePortInitCortexM+0x5c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <xTraceHardwarePortInitCortexM+0x5c>)
 8002474:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002478:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <xTraceHardwarePortInitCortexM+0x5c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8002482:	4810      	ldr	r0, [pc, #64]	; (80024c4 <xTraceHardwarePortInitCortexM+0x60>)
 8002484:	f7ff fe48 	bl	8002118 <prvTraceError>
			break;
 8002488:	e013      	b.n	80024b2 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <xTraceHardwarePortInitCortexM+0x64>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <xTraceHardwarePortInitCortexM+0x68>)
 8002498:	f7ff fe3e 	bl	8002118 <prvTraceError>
			break;
 800249c:	e009      	b.n	80024b2 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <xTraceHardwarePortInitCortexM+0x6c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <xTraceHardwarePortInitCortexM+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <xTraceHardwarePortInitCortexM+0x64>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e0001fb0 	.word	0xe0001fb0
 80024bc:	c5acce55 	.word	0xc5acce55
 80024c0:	e000edfc 	.word	0xe000edfc
 80024c4:	0800a8d0 	.word	0x0800a8d0
 80024c8:	e0001000 	.word	0xe0001000
 80024cc:	0800a8fc 	.word	0x0800a8fc
 80024d0:	e0001004 	.word	0xe0001004

080024d4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <prvTracePortGetTimeStamp+0x80>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d107      	bne.n	8002500 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d028      	beq.n	8002548 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <prvTracePortGetTimeStamp+0x84>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]
		return;
 80024fe:	e023      	b.n	8002548 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <prvTracePortGetTimeStamp+0x88>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <prvTracePortGetTimeStamp+0x8c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	1ad2      	subs	r2, r2, r3
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <prvTracePortGetTimeStamp+0x90>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <prvTracePortGetTimeStamp+0x90>)
 8002524:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <prvTracePortGetTimeStamp+0x84>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <prvTracePortGetTimeStamp+0x84>)
 8002530:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <prvTracePortGetTimeStamp+0x84>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8002540:	4a07      	ldr	r2, [pc, #28]	; (8002560 <prvTracePortGetTimeStamp+0x8c>)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e000      	b.n	800254a <prvTracePortGetTimeStamp+0x76>
		return;
 8002548:	bf00      	nop
}
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	20000218 	.word	0x20000218
 8002558:	2000021c 	.word	0x2000021c
 800255c:	e0001004 	.word	0xe0001004
 8002560:	20001be8 	.word	0x20001be8
 8002564:	20001bec 	.word	0x20001bec

08002568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_Init+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <HAL_Init+0x40>)
 8002572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002576:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <HAL_Init+0x40>)
 800257e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002582:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_Init+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <HAL_Init+0x40>)
 800258a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002590:	2003      	movs	r0, #3
 8002592:	f000 f8d8 	bl	8002746 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002596:	200f      	movs	r0, #15
 8002598:	f7fe fba2 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800259c:	f7fe fa42 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023c00 	.word	0x40023c00

080025ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_IncTick+0x20>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_IncTick+0x24>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <HAL_IncTick+0x24>)
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000014 	.word	0x20000014
 80025d0:	20001bf0 	.word	0x20001bf0

080025d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return uwTick;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_GetTick+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20001bf0 	.word	0x20001bf0

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff4c 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800276e:	f7ff ff61 	bl	8002634 <__NVIC_GetPriorityGrouping>
 8002772:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	6978      	ldr	r0, [r7, #20]
 800277a:	f7ff ffb1 	bl	80026e0 <NVIC_EncodePriority>
 800277e:	4602      	mov	r2, r0
 8002780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff ff80 	bl	800268c <__NVIC_SetPriority>
}
 800278c:	bf00      	nop
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff54 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	e16b      	b.n	8002aa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	f040 815a 	bne.w	8002a9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d005      	beq.n	8002802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d130      	bne.n	8002864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	2203      	movs	r2, #3
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 0201 	and.w	r2, r3, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b03      	cmp	r3, #3
 800286e:	d017      	beq.n	80028a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d123      	bne.n	80028f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	08da      	lsrs	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3208      	adds	r2, #8
 80028b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	69b9      	ldr	r1, [r7, #24]
 80028f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0203 	and.w	r2, r3, #3
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80b4 	beq.w	8002a9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b60      	ldr	r3, [pc, #384]	; (8002abc <HAL_GPIO_Init+0x30c>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4a5f      	ldr	r2, [pc, #380]	; (8002abc <HAL_GPIO_Init+0x30c>)
 8002940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002944:	6453      	str	r3, [r2, #68]	; 0x44
 8002946:	4b5d      	ldr	r3, [pc, #372]	; (8002abc <HAL_GPIO_Init+0x30c>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002952:	4a5b      	ldr	r2, [pc, #364]	; (8002ac0 <HAL_GPIO_Init+0x310>)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_GPIO_Init+0x314>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d02b      	beq.n	80029d6 <HAL_GPIO_Init+0x226>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a51      	ldr	r2, [pc, #324]	; (8002ac8 <HAL_GPIO_Init+0x318>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d025      	beq.n	80029d2 <HAL_GPIO_Init+0x222>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a50      	ldr	r2, [pc, #320]	; (8002acc <HAL_GPIO_Init+0x31c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01f      	beq.n	80029ce <HAL_GPIO_Init+0x21e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <HAL_GPIO_Init+0x320>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d019      	beq.n	80029ca <HAL_GPIO_Init+0x21a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4e      	ldr	r2, [pc, #312]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_GPIO_Init+0x216>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <HAL_GPIO_Init+0x328>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00d      	beq.n	80029c2 <HAL_GPIO_Init+0x212>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4c      	ldr	r2, [pc, #304]	; (8002adc <HAL_GPIO_Init+0x32c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <HAL_GPIO_Init+0x20e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4b      	ldr	r2, [pc, #300]	; (8002ae0 <HAL_GPIO_Init+0x330>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_GPIO_Init+0x20a>
 80029b6:	2307      	movs	r3, #7
 80029b8:	e00e      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029ba:	2308      	movs	r3, #8
 80029bc:	e00c      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029be:	2306      	movs	r3, #6
 80029c0:	e00a      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029c2:	2305      	movs	r3, #5
 80029c4:	e008      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029c6:	2304      	movs	r3, #4
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029ca:	2303      	movs	r3, #3
 80029cc:	e004      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029d6:	2300      	movs	r3, #0
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f002 0203 	and.w	r2, r2, #3
 80029de:	0092      	lsls	r2, r2, #2
 80029e0:	4093      	lsls	r3, r2
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e8:	4935      	ldr	r1, [pc, #212]	; (8002ac0 <HAL_GPIO_Init+0x310>)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1a:	4a32      	ldr	r2, [pc, #200]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a44:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a98:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	f67f ae90 	bls.w	80027cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020c00 	.word	0x40020c00
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40021400 	.word	0x40021400
 8002adc:	40021800 	.word	0x40021800
 8002ae0:	40021c00 	.word	0x40021c00
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
 8002af4:	4613      	mov	r3, r2
 8002af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b04:	e003      	b.n	8002b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	041a      	lsls	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	619a      	str	r2, [r3, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b2c:	887a      	ldrh	r2, [r7, #2]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4013      	ands	r3, r2
 8002b32:	041a      	lsls	r2, r3, #16
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	43d9      	mvns	r1, r3
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fd9d 	bl	80066a4 <USB_GetMode>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	f040 80fb 	bne.w	8002d68 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fd60 	bl	800663c <USB_ReadInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80f1 	beq.w	8002d66 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fd57 	bl	800663c <USB_ReadInterrupts>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b98:	d104      	bne.n	8002ba4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ba2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fd47 	bl	800663c <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb8:	d104      	bne.n	8002bc4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bc2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 fd37 	bl	800663c <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd8:	d104      	bne.n	8002be4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002be2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 fd27 	bl	800663c <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d103      	bne.n	8002c00 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f003 fd19 	bl	800663c <USB_ReadInterrupts>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c14:	d120      	bne.n	8002c58 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c1e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d113      	bne.n	8002c58 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c30:	2110      	movs	r1, #16
 8002c32:	6938      	ldr	r0, [r7, #16]
 8002c34:	f003 fc4a 	bl	80064cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c38:	6938      	ldr	r0, [r7, #16]
 8002c3a:	f003 fc79 	bl	8006530 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7a5b      	ldrb	r3, [r3, #9]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d105      	bne.n	8002c52 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f003 fd37 	bl	80066c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f007 f926 	bl	8009ea4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 fced 	bl	800663c <USB_ReadInterrupts>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6c:	d102      	bne.n	8002c74 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f001 fc87 	bl	8004582 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fcdf 	bl	800663c <USB_ReadInterrupts>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d106      	bne.n	8002c96 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f007 f8ef 	bl	8009e6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2208      	movs	r2, #8
 8002c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fcce 	bl	800663c <USB_ReadInterrupts>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002caa:	d139      	bne.n	8002d20 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 fd42 	bl	800673a <USB_HC_ReadInterrupt>
 8002cb6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e025      	b.n	8002d0a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d018      	beq.n	8002d04 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce8:	d106      	bne.n	8002cf8 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f859 	bl	8002da8 <HCD_HC_IN_IRQHandler>
 8002cf6:	e005      	b.n	8002d04 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 febb 	bl	8003a7a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	795b      	ldrb	r3, [r3, #5]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d3d3      	bcc.n	8002cbe <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 fc89 	bl	800663c <USB_ReadInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d101      	bne.n	8002d38 <HAL_HCD_IRQHandler+0x1ea>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_HCD_IRQHandler+0x1ec>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d014      	beq.n	8002d68 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699a      	ldr	r2, [r3, #24]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0210 	bic.w	r2, r2, #16
 8002d4c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f001 fb38 	bl	80043c4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0210 	orr.w	r2, r2, #16
 8002d62:	619a      	str	r2, [r3, #24]
 8002d64:	e000      	b.n	8002d68 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d66:	bf00      	nop
    }
  }
}
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_HCD_Stop+0x16>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e00d      	b.n	8002da0 <HAL_HCD_Stop+0x32>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 fe03 	bl	800699c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 fc4b 	bl	8006662 <USB_ReadChInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d11a      	bne.n	8002e0c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	461a      	mov	r2, r3
 8002de4:	2304      	movs	r3, #4
 8002de6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	334d      	adds	r3, #77	; 0x4d
 8002df8:	2207      	movs	r2, #7
 8002dfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 fca9 	bl	800675c <USB_HC_Halt>
 8002e0a:	e09e      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fc24 	bl	8006662 <USB_ReadChInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e24:	d11b      	bne.n	8002e5e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e32:	461a      	mov	r2, r3
 8002e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	334d      	adds	r3, #77	; 0x4d
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 fc80 	bl	800675c <USB_HC_Halt>
 8002e5c:	e075      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fbfb 	bl	8006662 <USB_ReadChInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d11a      	bne.n	8002eac <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	461a      	mov	r2, r3
 8002e84:	2308      	movs	r3, #8
 8002e86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	334d      	adds	r3, #77	; 0x4d
 8002e98:	2206      	movs	r2, #6
 8002e9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f003 fc59 	bl	800675c <USB_HC_Halt>
 8002eaa:	e04e      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 fbd4 	bl	8006662 <USB_ReadChInterrupts>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec4:	d11b      	bne.n	8002efe <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334d      	adds	r3, #77	; 0x4d
 8002eea:	2209      	movs	r2, #9
 8002eec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 fc30 	bl	800675c <USB_HC_Halt>
 8002efc:	e025      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fbab 	bl	8006662 <USB_ReadChInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	d119      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	461a      	mov	r2, r3
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	334d      	adds	r3, #77	; 0x4d
 8002f38:	2207      	movs	r2, #7
 8002f3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 fc09 	bl	800675c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fb85 	bl	8006662 <USB_ReadChInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f62:	d112      	bne.n	8002f8a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fbf5 	bl	800675c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f84:	6093      	str	r3, [r2, #8]
 8002f86:	f000 bd75 	b.w	8003a74 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f003 fb65 	bl	8006662 <USB_ReadChInterrupts>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	f040 8128 	bne.w	80031f4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	331b      	adds	r3, #27
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d119      	bne.n	8003000 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	331b      	adds	r3, #27
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	0151      	lsls	r1, r2, #5
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	440a      	add	r2, r1
 8002ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffe:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	799b      	ldrb	r3, [r3, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01b      	beq.n	8003040 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3330      	adds	r3, #48	; 0x30
 8003018:	6819      	ldr	r1, [r3, #0]
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	1ac9      	subs	r1, r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4403      	add	r3, r0
 800303c:	3338      	adds	r3, #56	; 0x38
 800303e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	334d      	adds	r3, #77	; 0x4d
 8003050:	2201      	movs	r2, #1
 8003052:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	3344      	adds	r3, #68	; 0x44
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	461a      	mov	r2, r3
 8003076:	2301      	movs	r3, #1
 8003078:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3326      	adds	r3, #38	; 0x26
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3326      	adds	r3, #38	; 0x26
 80030a0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d110      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fb54 	bl	800675c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	461a      	mov	r2, r3
 80030c2:	2310      	movs	r3, #16
 80030c4:	6093      	str	r3, [r2, #8]
 80030c6:	e03d      	b.n	8003144 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3326      	adds	r3, #38	; 0x26
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d00a      	beq.n	80030f4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3326      	adds	r3, #38	; 0x26
 80030ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d127      	bne.n	8003144 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	0151      	lsls	r1, r2, #5
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	440a      	add	r2, r1
 800310a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800310e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003112:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	334c      	adds	r3, #76	; 0x4c
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	334c      	adds	r3, #76	; 0x4c
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	4619      	mov	r1, r3
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f006 febe 	bl	8009ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	799b      	ldrb	r3, [r3, #6]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d13b      	bne.n	80031c4 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	3338      	adds	r3, #56	; 0x38
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4403      	add	r3, r0
 800316c:	3328      	adds	r3, #40	; 0x28
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	440b      	add	r3, r1
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4403      	add	r3, r0
 8003182:	3328      	adds	r3, #40	; 0x28
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	fbb1 f3f3 	udiv	r3, r1, r3
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8470 	beq.w	8003a74 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	333c      	adds	r3, #60	; 0x3c
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	f083 0301 	eor.w	r3, r3, #1
 80031ac:	b2d8      	uxtb	r0, r3
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	333c      	adds	r3, #60	; 0x3c
 80031bc:	4602      	mov	r2, r0
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	f000 bc58 	b.w	8003a74 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	333c      	adds	r3, #60	; 0x3c
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	f083 0301 	eor.w	r3, r3, #1
 80031dc:	b2d8      	uxtb	r0, r3
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	333c      	adds	r3, #60	; 0x3c
 80031ec:	4602      	mov	r2, r0
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	f000 bc40 	b.w	8003a74 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 fa30 	bl	8006662 <USB_ReadChInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b20      	cmp	r3, #32
 800320a:	d131      	bne.n	8003270 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	2320      	movs	r3, #32
 800321c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	331a      	adds	r3, #26
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b01      	cmp	r3, #1
 8003232:	f040 841f 	bne.w	8003a74 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	331b      	adds	r3, #27
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	334d      	adds	r3, #77	; 0x4d
 800325a:	2203      	movs	r2, #3
 800325c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fa78 	bl	800675c <USB_HC_Halt>
 800326c:	f000 bc02 	b.w	8003a74 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f003 f9f2 	bl	8006662 <USB_ReadChInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	f040 8305 	bne.w	8003894 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003296:	461a      	mov	r2, r3
 8003298:	2302      	movs	r3, #2
 800329a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	334d      	adds	r3, #77	; 0x4d
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d114      	bne.n	80032dc <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	334d      	adds	r3, #77	; 0x4d
 80032c2:	2202      	movs	r2, #2
 80032c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	334c      	adds	r3, #76	; 0x4c
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e2cc      	b.n	8003876 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	334d      	adds	r3, #77	; 0x4d
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d114      	bne.n	800331c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	334d      	adds	r3, #77	; 0x4d
 8003302:	2202      	movs	r2, #2
 8003304:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	334c      	adds	r3, #76	; 0x4c
 8003316:	2205      	movs	r2, #5
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	e2ac      	b.n	8003876 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	334d      	adds	r3, #77	; 0x4d
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b07      	cmp	r3, #7
 8003330:	d00b      	beq.n	800334a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	334d      	adds	r3, #77	; 0x4d
 8003342:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003344:	2b09      	cmp	r3, #9
 8003346:	f040 80a6 	bne.w	8003496 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	334d      	adds	r3, #77	; 0x4d
 800335a:	2202      	movs	r2, #2
 800335c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3344      	adds	r3, #68	; 0x44
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	1c59      	adds	r1, r3, #1
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4403      	add	r3, r0
 800337e:	3344      	adds	r3, #68	; 0x44
 8003380:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3344      	adds	r3, #68	; 0x44
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d943      	bls.n	8003420 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3344      	adds	r3, #68	; 0x44
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	331a      	adds	r3, #26
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d123      	bne.n	800340a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	331b      	adds	r3, #27
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	331c      	adds	r3, #28
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	0151      	lsls	r1, r2, #5
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	440a      	add	r2, r1
 8003400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003408:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	334c      	adds	r3, #76	; 0x4c
 800341a:	2204      	movs	r2, #4
 800341c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800341e:	e229      	b.n	8003874 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	334c      	adds	r3, #76	; 0x4c
 8003430:	2202      	movs	r2, #2
 8003432:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	3326      	adds	r3, #38	; 0x26
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3326      	adds	r3, #38	; 0x26
 800345a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800345c:	2b02      	cmp	r3, #2
 800345e:	f040 8209 	bne.w	8003874 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003478:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003480:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003494:	e1ee      	b.n	8003874 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	334d      	adds	r3, #77	; 0x4d
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	f040 80c8 	bne.w	800363e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	334d      	adds	r3, #77	; 0x4d
 80034be:	2202      	movs	r2, #2
 80034c0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	331b      	adds	r3, #27
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	f040 81ce 	bne.w	8003876 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3326      	adds	r3, #38	; 0x26
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d16b      	bne.n	80035c8 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3348      	adds	r3, #72	; 0x48
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	1c59      	adds	r1, r3, #1
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4403      	add	r3, r0
 8003510:	3348      	adds	r3, #72	; 0x48
 8003512:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	3348      	adds	r3, #72	; 0x48
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d943      	bls.n	80035b2 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3348      	adds	r3, #72	; 0x48
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	331b      	adds	r3, #27
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3344      	adds	r3, #68	; 0x44
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d809      	bhi.n	800357c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	331c      	adds	r3, #28
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	0151      	lsls	r1, r2, #5
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	440a      	add	r2, r1
 8003592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	334c      	adds	r3, #76	; 0x4c
 80035ac:	2204      	movs	r2, #4
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	e014      	b.n	80035dc <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	334c      	adds	r3, #76	; 0x4c
 80035c2:	2202      	movs	r2, #2
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e009      	b.n	80035dc <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	334c      	adds	r3, #76	; 0x4c
 80035d8:	2202      	movs	r2, #2
 80035da:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	3326      	adds	r3, #38	; 0x26
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	3326      	adds	r3, #38	; 0x26
 8003602:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003604:	2b02      	cmp	r3, #2
 8003606:	f040 8136 	bne.w	8003876 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4413      	add	r3, r2
 8003612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003620:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003628:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e11b      	b.n	8003876 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	334d      	adds	r3, #77	; 0x4d
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b03      	cmp	r3, #3
 8003652:	f040 8081 	bne.w	8003758 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	334d      	adds	r3, #77	; 0x4d
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	331b      	adds	r3, #27
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 80fa 	bne.w	8003876 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	334c      	adds	r3, #76	; 0x4c
 8003692:	2202      	movs	r2, #2
 8003694:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	0151      	lsls	r1, r2, #5
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	440a      	add	r2, r1
 80036ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d4:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	0151      	lsls	r1, r2, #5
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	440a      	add	r2, r1
 80036ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036f0:	f023 0320 	bic.w	r3, r3, #32
 80036f4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3326      	adds	r3, #38	; 0x26
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00b      	beq.n	8003724 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3326      	adds	r3, #38	; 0x26
 800371c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800371e:	2b02      	cmp	r3, #2
 8003720:	f040 80a9 	bne.w	8003876 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800373a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003742:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	461a      	mov	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e08e      	b.n	8003876 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	334d      	adds	r3, #77	; 0x4d
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b04      	cmp	r3, #4
 800376c:	d143      	bne.n	80037f6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	334d      	adds	r3, #77	; 0x4d
 800377e:	2202      	movs	r2, #2
 8003780:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	334c      	adds	r3, #76	; 0x4c
 8003792:	2202      	movs	r2, #2
 8003794:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	3326      	adds	r3, #38	; 0x26
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	3326      	adds	r3, #38	; 0x26
 80037bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d159      	bne.n	8003876 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037d8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037e0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e03f      	b.n	8003876 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	334d      	adds	r3, #77	; 0x4d
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d126      	bne.n	800385a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	334d      	adds	r3, #77	; 0x4d
 800381c:	2202      	movs	r2, #2
 800381e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	3344      	adds	r3, #68	; 0x44
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	1c59      	adds	r1, r3, #1
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4403      	add	r3, r0
 8003840:	3344      	adds	r3, #68	; 0x44
 8003842:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	334c      	adds	r3, #76	; 0x4c
 8003854:	2204      	movs	r2, #4
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e00d      	b.n	8003876 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	334d      	adds	r3, #77	; 0x4d
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b02      	cmp	r3, #2
 800386e:	f000 8100 	beq.w	8003a72 <HCD_HC_IN_IRQHandler+0xcca>
 8003872:	e000      	b.n	8003876 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003874:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	334c      	adds	r3, #76	; 0x4c
 8003886:	781a      	ldrb	r2, [r3, #0]
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f006 fb17 	bl	8009ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003892:	e0ef      	b.n	8003a74 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f002 fee0 	bl	8006662 <USB_ReadChInterrupts>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d12f      	bne.n	800390c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	461a      	mov	r2, r3
 80038ba:	2340      	movs	r3, #64	; 0x40
 80038bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	334d      	adds	r3, #77	; 0x4d
 80038ce:	2205      	movs	r2, #5
 80038d0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	331a      	adds	r3, #26
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3344      	adds	r3, #68	; 0x44
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f002 ff29 	bl	800675c <USB_HC_Halt>
 800390a:	e0b3      	b.n	8003a74 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f002 fea4 	bl	8006662 <USB_ReadChInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b10      	cmp	r3, #16
 8003922:	f040 80a7 	bne.w	8003a74 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3326      	adds	r3, #38	; 0x26
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d11b      	bne.n	8003974 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3344      	adds	r3, #68	; 0x44
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	334d      	adds	r3, #77	; 0x4d
 8003960:	2204      	movs	r2, #4
 8003962:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f002 fef5 	bl	800675c <USB_HC_Halt>
 8003972:	e03f      	b.n	80039f4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3326      	adds	r3, #38	; 0x26
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	3326      	adds	r3, #38	; 0x26
 800399a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800399c:	2b02      	cmp	r3, #2
 800399e:	d129      	bne.n	80039f4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3344      	adds	r3, #68	; 0x44
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	799b      	ldrb	r3, [r3, #6]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HCD_HC_IN_IRQHandler+0xc2a>
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	331b      	adds	r3, #27
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d110      	bne.n	80039f4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	334d      	adds	r3, #77	; 0x4d
 80039e2:	2204      	movs	r2, #4
 80039e4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f002 feb4 	bl	800675c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	331b      	adds	r3, #27
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d129      	bne.n	8003a5e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	331b      	adds	r3, #27
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	0151      	lsls	r1, r2, #5
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	440a      	add	r2, r1
 8003a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	0151      	lsls	r1, r2, #5
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	440a      	add	r2, r1
 8003a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a58:	f043 0320 	orr.w	r3, r3, #32
 8003a5c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	6093      	str	r3, [r2, #8]
 8003a70:	e000      	b.n	8003a74 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003a72:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f002 fde2 	bl	8006662 <USB_ReadChInterrupts>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d11b      	bne.n	8003ae0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	334d      	adds	r3, #77	; 0x4d
 8003aca:	2207      	movs	r2, #7
 8003acc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 fe40 	bl	800675c <USB_HC_Halt>
 8003adc:	f000 bc6f 	b.w	80043be <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f002 fdba 	bl	8006662 <USB_ReadChInterrupts>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	f040 8082 	bne.w	8003bfe <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b06:	461a      	mov	r2, r3
 8003b08:	2320      	movs	r3, #32
 8003b0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	3319      	adds	r3, #25
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d124      	bne.n	8003b6c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	3319      	adds	r3, #25
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	334c      	adds	r3, #76	; 0x4c
 8003b46:	2202      	movs	r2, #2
 8003b48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	334d      	adds	r3, #77	; 0x4d
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 fdf8 	bl	800675c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	331a      	adds	r3, #26
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	f040 841d 	bne.w	80043be <HCD_HC_OUT_IRQHandler+0x944>
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	331b      	adds	r3, #27
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 8411 	bne.w	80043be <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	3326      	adds	r3, #38	; 0x26
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d009      	beq.n	8003bc6 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	331b      	adds	r3, #27
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	334d      	adds	r3, #77	; 0x4d
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	4611      	mov	r1, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f002 fdba 	bl	800675c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3344      	adds	r3, #68	; 0x44
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e3df      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f002 fd2b 	bl	8006662 <USB_ReadChInterrupts>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c16:	d111      	bne.n	8003c3c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	461a      	mov	r2, r3
 8003c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c2a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f002 fd91 	bl	800675c <USB_HC_Halt>
 8003c3a:	e3c0      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f002 fd0c 	bl	8006662 <USB_ReadChInterrupts>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d168      	bne.n	8003d26 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	3344      	adds	r3, #68	; 0x44
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f002 fcf6 	bl	8006662 <USB_ReadChInterrupts>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d112      	bne.n	8003ca6 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3319      	adds	r3, #25
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2340      	movs	r3, #64	; 0x40
 8003ca4:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	331b      	adds	r3, #27
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d019      	beq.n	8003cf0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	331b      	adds	r3, #27
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cee:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2301      	movs	r3, #1
 8003d00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	334d      	adds	r3, #77	; 0x4d
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f002 fd1c 	bl	800675c <USB_HC_Halt>
 8003d24:	e34b      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 fc97 	bl	8006662 <USB_ReadChInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d139      	bne.n	8003db2 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	334d      	adds	r3, #77	; 0x4d
 8003d4e:	2205      	movs	r2, #5
 8003d50:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	331a      	adds	r3, #26
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	3319      	adds	r3, #25
 8003d78:	2201      	movs	r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3344      	adds	r3, #68	; 0x44
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f002 fcdf 	bl	800675c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003daa:	461a      	mov	r2, r3
 8003dac:	2340      	movs	r3, #64	; 0x40
 8003dae:	6093      	str	r3, [r2, #8]
 8003db0:	e305      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 fc51 	bl	8006662 <USB_ReadChInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d11a      	bne.n	8003e00 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2308      	movs	r3, #8
 8003dda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	334d      	adds	r3, #77	; 0x4d
 8003dec:	2206      	movs	r2, #6
 8003dee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f002 fcaf 	bl	800675c <USB_HC_Halt>
 8003dfe:	e2de      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f002 fc2a 	bl	8006662 <USB_ReadChInterrupts>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d144      	bne.n	8003ea2 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	3344      	adds	r3, #68	; 0x44
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	334d      	adds	r3, #77	; 0x4d
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3319      	adds	r3, #25
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d114      	bne.n	8003e80 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	3318      	adds	r3, #24
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3319      	adds	r3, #25
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f002 fc67 	bl	800675c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	6093      	str	r3, [r2, #8]
 8003ea0:	e28d      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f002 fbd9 	bl	8006662 <USB_ReadChInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d169      	bne.n	8003f8e <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	799b      	ldrb	r3, [r3, #6]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d111      	bne.n	8003ee6 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	334d      	adds	r3, #77	; 0x4d
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f002 fc3c 	bl	800675c <USB_HC_Halt>
 8003ee4:	e049      	b.n	8003f7a <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3344      	adds	r3, #68	; 0x44
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	1c59      	adds	r1, r3, #1
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4403      	add	r3, r0
 8003f06:	3344      	adds	r3, #68	; 0x44
 8003f08:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	3344      	adds	r3, #68	; 0x44
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d922      	bls.n	8003f66 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3344      	adds	r3, #68	; 0x44
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	334c      	adds	r3, #76	; 0x4c
 8003f44:	2204      	movs	r2, #4
 8003f46:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	334c      	adds	r3, #76	; 0x4c
 8003f58:	781a      	ldrb	r2, [r3, #0]
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f005 ffae 	bl	8009ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f64:	e009      	b.n	8003f7a <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	334c      	adds	r3, #76	; 0x4c
 8003f76:	2202      	movs	r2, #2
 8003f78:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f86:	461a      	mov	r2, r3
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	6093      	str	r3, [r2, #8]
 8003f8c:	e217      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f002 fb63 	bl	8006662 <USB_ReadChInterrupts>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa6:	d11b      	bne.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	334d      	adds	r3, #77	; 0x4d
 8003fb8:	2209      	movs	r2, #9
 8003fba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f002 fbc9 	bl	800675c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fdc:	6093      	str	r3, [r2, #8]
 8003fde:	e1ee      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f002 fb3a 	bl	8006662 <USB_ReadChInterrupts>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	f040 81df 	bne.w	80043b8 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004006:	461a      	mov	r2, r3
 8004008:	2302      	movs	r3, #2
 800400a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	334d      	adds	r3, #77	; 0x4d
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b01      	cmp	r3, #1
 8004020:	f040 8093 	bne.w	800414a <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	334d      	adds	r3, #77	; 0x4d
 8004034:	2202      	movs	r2, #2
 8004036:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	334c      	adds	r3, #76	; 0x4c
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	3326      	adds	r3, #38	; 0x26
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d00b      	beq.n	800407a <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	3326      	adds	r3, #38	; 0x26
 8004072:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004074:	2b03      	cmp	r3, #3
 8004076:	f040 8190 	bne.w	800439a <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	799b      	ldrb	r3, [r3, #6]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d115      	bne.n	80040ae <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	333d      	adds	r3, #61	; 0x3d
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	f083 0301 	eor.w	r3, r3, #1
 800409a:	b2d8      	uxtb	r0, r3
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	333d      	adds	r3, #61	; 0x3d
 80040aa:	4602      	mov	r2, r0
 80040ac:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	799b      	ldrb	r3, [r3, #6]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	f040 8171 	bne.w	800439a <HCD_HC_OUT_IRQHandler+0x920>
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	3334      	adds	r3, #52	; 0x34
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8165 	beq.w	800439a <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	3334      	adds	r3, #52	; 0x34
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4403      	add	r3, r0
 80040f0:	3328      	adds	r3, #40	; 0x28
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	440b      	add	r3, r1
 80040f6:	1e59      	subs	r1, r3, #1
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4403      	add	r3, r0
 8004106:	3328      	adds	r3, #40	; 0x28
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	fbb1 f3f3 	udiv	r3, r1, r3
 800410e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 813f 	beq.w	800439a <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	333d      	adds	r3, #61	; 0x3d
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	f083 0301 	eor.w	r3, r3, #1
 8004134:	b2d8      	uxtb	r0, r3
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	333d      	adds	r3, #61	; 0x3d
 8004144:	4602      	mov	r2, r0
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e127      	b.n	800439a <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	334d      	adds	r3, #77	; 0x4d
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d120      	bne.n	80041a2 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	334d      	adds	r3, #77	; 0x4d
 8004170:	2202      	movs	r2, #2
 8004172:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	331b      	adds	r3, #27
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b01      	cmp	r3, #1
 8004188:	f040 8107 	bne.w	800439a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	334c      	adds	r3, #76	; 0x4c
 800419c:	2202      	movs	r2, #2
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	e0fb      	b.n	800439a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	334d      	adds	r3, #77	; 0x4d
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d13a      	bne.n	800422e <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	334d      	adds	r3, #77	; 0x4d
 80041c8:	2202      	movs	r2, #2
 80041ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	334c      	adds	r3, #76	; 0x4c
 80041dc:	2202      	movs	r2, #2
 80041de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	331b      	adds	r3, #27
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	f040 80d1 	bne.w	800439a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	331b      	adds	r3, #27
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	440a      	add	r2, r1
 8004222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	6053      	str	r3, [r2, #4]
 800422c:	e0b5      	b.n	800439a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	334d      	adds	r3, #77	; 0x4d
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b05      	cmp	r3, #5
 8004242:	d114      	bne.n	800426e <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	334d      	adds	r3, #77	; 0x4d
 8004254:	2202      	movs	r2, #2
 8004256:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	334c      	adds	r3, #76	; 0x4c
 8004268:	2202      	movs	r2, #2
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	e095      	b.n	800439a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	334d      	adds	r3, #77	; 0x4d
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b06      	cmp	r3, #6
 8004282:	d114      	bne.n	80042ae <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	334d      	adds	r3, #77	; 0x4d
 8004294:	2202      	movs	r2, #2
 8004296:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	334c      	adds	r3, #76	; 0x4c
 80042a8:	2205      	movs	r2, #5
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	e075      	b.n	800439a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	334d      	adds	r3, #77	; 0x4d
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b07      	cmp	r3, #7
 80042c2:	d00a      	beq.n	80042da <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	334d      	adds	r3, #77	; 0x4d
 80042d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042d6:	2b09      	cmp	r3, #9
 80042d8:	d170      	bne.n	80043bc <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042da:	78fa      	ldrb	r2, [r7, #3]
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	334d      	adds	r3, #77	; 0x4d
 80042ea:	2202      	movs	r2, #2
 80042ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	3344      	adds	r3, #68	; 0x44
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	1c59      	adds	r1, r3, #1
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4403      	add	r3, r0
 800430e:	3344      	adds	r3, #68	; 0x44
 8004310:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004312:	78fa      	ldrb	r2, [r7, #3]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	3344      	adds	r3, #68	; 0x44
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d914      	bls.n	8004352 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	3344      	adds	r3, #68	; 0x44
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	334c      	adds	r3, #76	; 0x4c
 800434c:	2204      	movs	r2, #4
 800434e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004350:	e022      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	334c      	adds	r3, #76	; 0x4c
 8004362:	2202      	movs	r2, #2
 8004364:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800437c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004384:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004398:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	334c      	adds	r3, #76	; 0x4c
 80043aa:	781a      	ldrb	r2, [r3, #0]
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f005 fd85 	bl	8009ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80043b6:	e002      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80043b8:	bf00      	nop
 80043ba:	e000      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80043bc:	bf00      	nop
  }
}
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08a      	sub	sp, #40	; 0x28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	0c5b      	lsrs	r3, r3, #17
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043f8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d004      	beq.n	800440a <HCD_RXQLVL_IRQHandler+0x46>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b05      	cmp	r3, #5
 8004404:	f000 80b6 	beq.w	8004574 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004408:	e0b7      	b.n	800457a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80b3 	beq.w	8004578 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	332c      	adds	r3, #44	; 0x2c
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80a7 	beq.w	8004578 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	3338      	adds	r3, #56	; 0x38
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	18d1      	adds	r1, r2, r3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4613      	mov	r3, r2
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4403      	add	r3, r0
 800444e:	3334      	adds	r3, #52	; 0x34
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4299      	cmp	r1, r3
 8004454:	f200 8083 	bhi.w	800455e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	332c      	adds	r3, #44	; 0x2c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	b292      	uxth	r2, r2
 8004472:	4619      	mov	r1, r3
 8004474:	f002 f88a 	bl	800658c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	332c      	adds	r3, #44	; 0x2c
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	18d1      	adds	r1, r2, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4403      	add	r3, r0
 800449c:	332c      	adds	r3, #44	; 0x2c
 800449e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4613      	mov	r3, r2
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	3338      	adds	r3, #56	; 0x38
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	18d1      	adds	r1, r2, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4403      	add	r3, r0
 80044c4:	3338      	adds	r3, #56	; 0x38
 80044c6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	0cdb      	lsrs	r3, r3, #19
 80044d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044dc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	3328      	adds	r3, #40	; 0x28
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d13f      	bne.n	8004578 <HCD_RXQLVL_IRQHandler+0x1b4>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d03c      	beq.n	8004578 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	4413      	add	r3, r2
 8004506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004514:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800451c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4613      	mov	r3, r2
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	333c      	adds	r3, #60	; 0x3c
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	f083 0301 	eor.w	r3, r3, #1
 8004546:	b2d8      	uxtb	r0, r3
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	333c      	adds	r3, #60	; 0x3c
 8004558:	4602      	mov	r2, r0
 800455a:	701a      	strb	r2, [r3, #0]
      break;
 800455c:	e00c      	b.n	8004578 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4613      	mov	r3, r2
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	334c      	adds	r3, #76	; 0x4c
 800456e:	2204      	movs	r2, #4
 8004570:	701a      	strb	r2, [r3, #0]
      break;
 8004572:	e001      	b.n	8004578 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004574:	bf00      	nop
 8004576:	e000      	b.n	800457a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004578:	bf00      	nop
  }
}
 800457a:	bf00      	nop
 800457c:	3728      	adds	r7, #40	; 0x28
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b086      	sub	sp, #24
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80045ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d10b      	bne.n	80045d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d102      	bne.n	80045ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f005 fc5f 	bl	8009e88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f043 0302 	orr.w	r3, r3, #2
 80045d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d132      	bne.n	8004642 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f043 0308 	orr.w	r3, r3, #8
 80045e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d126      	bne.n	800463c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	7a5b      	ldrb	r3, [r3, #9]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d113      	bne.n	800461e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80045fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004600:	d106      	bne.n	8004610 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2102      	movs	r1, #2
 8004608:	4618      	mov	r0, r3
 800460a:	f002 f859 	bl	80066c0 <USB_InitFSLSPClkSel>
 800460e:	e011      	b.n	8004634 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2101      	movs	r1, #1
 8004616:	4618      	mov	r0, r3
 8004618:	f002 f852 	bl	80066c0 <USB_InitFSLSPClkSel>
 800461c:	e00a      	b.n	8004634 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	79db      	ldrb	r3, [r3, #7]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d106      	bne.n	8004634 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800462c:	461a      	mov	r2, r3
 800462e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004632:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f005 fc55 	bl	8009ee4 <HAL_HCD_PortEnabled_Callback>
 800463a:	e002      	b.n	8004642 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f005 fc5f 	bl	8009f00 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b20      	cmp	r3, #32
 800464a:	d103      	bne.n	8004654 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f043 0320 	orr.w	r3, r3, #32
 8004652:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800465a:	461a      	mov	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	6013      	str	r3, [r2, #0]
}
 8004660:	bf00      	nop
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e12b      	b.n	80048d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fc f9f4 	bl	8000a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2224      	movs	r2, #36	; 0x24
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046cc:	f001 fa20 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 80046d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4a81      	ldr	r2, [pc, #516]	; (80048dc <HAL_I2C_Init+0x274>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d807      	bhi.n	80046ec <HAL_I2C_Init+0x84>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a80      	ldr	r2, [pc, #512]	; (80048e0 <HAL_I2C_Init+0x278>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	bf94      	ite	ls
 80046e4:	2301      	movls	r3, #1
 80046e6:	2300      	movhi	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	e006      	b.n	80046fa <HAL_I2C_Init+0x92>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a7d      	ldr	r2, [pc, #500]	; (80048e4 <HAL_I2C_Init+0x27c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bf94      	ite	ls
 80046f4:	2301      	movls	r3, #1
 80046f6:	2300      	movhi	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0e7      	b.n	80048d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a78      	ldr	r2, [pc, #480]	; (80048e8 <HAL_I2C_Init+0x280>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	0c9b      	lsrs	r3, r3, #18
 800470c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	4a6a      	ldr	r2, [pc, #424]	; (80048dc <HAL_I2C_Init+0x274>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d802      	bhi.n	800473c <HAL_I2C_Init+0xd4>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3301      	adds	r3, #1
 800473a:	e009      	b.n	8004750 <HAL_I2C_Init+0xe8>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	4a69      	ldr	r2, [pc, #420]	; (80048ec <HAL_I2C_Init+0x284>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	099b      	lsrs	r3, r3, #6
 800474e:	3301      	adds	r3, #1
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	430b      	orrs	r3, r1
 8004756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004762:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	495c      	ldr	r1, [pc, #368]	; (80048dc <HAL_I2C_Init+0x274>)
 800476c:	428b      	cmp	r3, r1
 800476e:	d819      	bhi.n	80047a4 <HAL_I2C_Init+0x13c>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1e59      	subs	r1, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	fbb1 f3f3 	udiv	r3, r1, r3
 800477e:	1c59      	adds	r1, r3, #1
 8004780:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004784:	400b      	ands	r3, r1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_I2C_Init+0x138>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1e59      	subs	r1, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	fbb1 f3f3 	udiv	r3, r1, r3
 8004798:	3301      	adds	r3, #1
 800479a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479e:	e051      	b.n	8004844 <HAL_I2C_Init+0x1dc>
 80047a0:	2304      	movs	r3, #4
 80047a2:	e04f      	b.n	8004844 <HAL_I2C_Init+0x1dc>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d111      	bne.n	80047d0 <HAL_I2C_Init+0x168>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1e58      	subs	r0, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	440b      	add	r3, r1
 80047ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e012      	b.n	80047f6 <HAL_I2C_Init+0x18e>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1e58      	subs	r0, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	0099      	lsls	r1, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047e6:	3301      	adds	r3, #1
 80047e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_Init+0x196>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e022      	b.n	8004844 <HAL_I2C_Init+0x1dc>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10e      	bne.n	8004824 <HAL_I2C_Init+0x1bc>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1e58      	subs	r0, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6859      	ldr	r1, [r3, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	440b      	add	r3, r1
 8004814:	fbb0 f3f3 	udiv	r3, r0, r3
 8004818:	3301      	adds	r3, #1
 800481a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	e00f      	b.n	8004844 <HAL_I2C_Init+0x1dc>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1e58      	subs	r0, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	0099      	lsls	r1, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	fbb0 f3f3 	udiv	r3, r0, r3
 800483a:	3301      	adds	r3, #1
 800483c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	6809      	ldr	r1, [r1, #0]
 8004848:	4313      	orrs	r3, r2
 800484a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69da      	ldr	r2, [r3, #28]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6911      	ldr	r1, [r2, #16]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68d2      	ldr	r2, [r2, #12]
 800487e:	4311      	orrs	r1, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	430b      	orrs	r3, r1
 8004886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	000186a0 	.word	0x000186a0
 80048e0:	001e847f 	.word	0x001e847f
 80048e4:	003d08ff 	.word	0x003d08ff
 80048e8:	431bde83 	.word	0x431bde83
 80048ec:	10624dd3 	.word	0x10624dd3

080048f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e128      	b.n	8004b54 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a90      	ldr	r2, [pc, #576]	; (8004b5c <HAL_I2S_Init+0x26c>)
 800491a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fc f8f5 	bl	8000b0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004938:	f023 030f 	bic.w	r3, r3, #15
 800493c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2202      	movs	r2, #2
 8004944:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d060      	beq.n	8004a10 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004956:	2310      	movs	r3, #16
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e001      	b.n	8004960 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800495c:	2320      	movs	r3, #32
 800495e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b20      	cmp	r3, #32
 8004966:	d802      	bhi.n	800496e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800496e:	2001      	movs	r0, #1
 8004970:	f001 fa0a 	bl	8005d88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004974:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800497e:	d125      	bne.n	80049cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	461a      	mov	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	3305      	adds	r3, #5
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e01f      	b.n	80049ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	461a      	mov	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	3305      	adds	r3, #5
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	e00e      	b.n	80049ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	461a      	mov	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e6:	3305      	adds	r3, #5
 80049e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4a5c      	ldr	r2, [pc, #368]	; (8004b60 <HAL_I2S_Init+0x270>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	08db      	lsrs	r3, r3, #3
 80049f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	e003      	b.n	8004a18 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004a10:	2302      	movs	r3, #2
 8004a12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d902      	bls.n	8004a24 <HAL_I2S_Init+0x134>
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	2bff      	cmp	r3, #255	; 0xff
 8004a22:	d907      	bls.n	8004a34 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	f043 0210 	orr.w	r2, r3, #16
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e08f      	b.n	8004b54 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	ea42 0103 	orr.w	r1, r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a52:	f023 030f 	bic.w	r3, r3, #15
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6851      	ldr	r1, [r2, #4]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	68d2      	ldr	r2, [r2, #12]
 8004a64:	4311      	orrs	r1, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6992      	ldr	r2, [r2, #24]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a76:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d161      	bne.n	8004b44 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a38      	ldr	r2, [pc, #224]	; (8004b64 <HAL_I2S_Init+0x274>)
 8004a84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a37      	ldr	r2, [pc, #220]	; (8004b68 <HAL_I2S_Init+0x278>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_I2S_Init+0x1a4>
 8004a90:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <HAL_I2S_Init+0x27c>)
 8004a92:	e001      	b.n	8004a98 <HAL_I2S_Init+0x1a8>
 8004a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	4932      	ldr	r1, [pc, #200]	; (8004b68 <HAL_I2S_Init+0x278>)
 8004aa0:	428a      	cmp	r2, r1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_I2S_Init+0x1b8>
 8004aa4:	4a31      	ldr	r2, [pc, #196]	; (8004b6c <HAL_I2S_Init+0x27c>)
 8004aa6:	e001      	b.n	8004aac <HAL_I2S_Init+0x1bc>
 8004aa8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004aac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ab0:	f023 030f 	bic.w	r3, r3, #15
 8004ab4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2b      	ldr	r2, [pc, #172]	; (8004b68 <HAL_I2S_Init+0x278>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_I2S_Init+0x1d4>
 8004ac0:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <HAL_I2S_Init+0x27c>)
 8004ac2:	e001      	b.n	8004ac8 <HAL_I2S_Init+0x1d8>
 8004ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac8:	2202      	movs	r2, #2
 8004aca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a25      	ldr	r2, [pc, #148]	; (8004b68 <HAL_I2S_Init+0x278>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d101      	bne.n	8004ada <HAL_I2S_Init+0x1ea>
 8004ad6:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <HAL_I2S_Init+0x27c>)
 8004ad8:	e001      	b.n	8004ade <HAL_I2S_Init+0x1ee>
 8004ada:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aea:	d003      	beq.n	8004af4 <HAL_I2S_Init+0x204>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d103      	bne.n	8004afc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	e001      	b.n	8004b00 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b14:	4313      	orrs	r3, r2
 8004b16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	897b      	ldrh	r3, [r7, #10]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b2c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <HAL_I2S_Init+0x278>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d101      	bne.n	8004b3c <HAL_I2S_Init+0x24c>
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_I2S_Init+0x27c>)
 8004b3a:	e001      	b.n	8004b40 <HAL_I2S_Init+0x250>
 8004b3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b40:	897a      	ldrh	r2, [r7, #10]
 8004b42:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	08004c67 	.word	0x08004c67
 8004b60:	cccccccd 	.word	0xcccccccd
 8004b64:	08004d7d 	.word	0x08004d7d
 8004b68:	40003800 	.word	0x40003800
 8004b6c:	40003400 	.word	0x40003400

08004b70 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	881a      	ldrh	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	1c9a      	adds	r2, r3, #2
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10e      	bne.n	8004c00 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bf0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ffb8 	bl	8004b70 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	1c9a      	adds	r2, r3, #2
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10e      	bne.n	8004c5e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c4e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff ff93 	bl	8004b84 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b086      	sub	sp, #24
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d13a      	bne.n	8004cf8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d109      	bne.n	8004ca0 <I2S_IRQHandler+0x3a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	d102      	bne.n	8004ca0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff ffb4 	bl	8004c08 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d126      	bne.n	8004cf8 <I2S_IRQHandler+0x92>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d11f      	bne.n	8004cf8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cc6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	f043 0202 	orr.w	r2, r3, #2
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff ff50 	bl	8004b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d136      	bne.n	8004d72 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d109      	bne.n	8004d22 <I2S_IRQHandler+0xbc>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d18:	2b80      	cmp	r3, #128	; 0x80
 8004d1a:	d102      	bne.n	8004d22 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ff45 	bl	8004bac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d122      	bne.n	8004d72 <I2S_IRQHandler+0x10c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d11b      	bne.n	8004d72 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d48:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	f043 0204 	orr.w	r2, r3, #4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff13 	bl	8004b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d72:	bf00      	nop
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a92      	ldr	r2, [pc, #584]	; (8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d101      	bne.n	8004d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004d96:	4b92      	ldr	r3, [pc, #584]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d98:	e001      	b.n	8004d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a8b      	ldr	r2, [pc, #556]	; (8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d101      	bne.n	8004db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004db4:	4b8a      	ldr	r3, [pc, #552]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004db6:	e001      	b.n	8004dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc8:	d004      	beq.n	8004dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 8099 	bne.w	8004f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d107      	bne.n	8004dee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f925 	bl	8005038 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d107      	bne.n	8004e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f9c8 	bl	8005198 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d13a      	bne.n	8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d035      	beq.n	8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a6e      	ldr	r2, [pc, #440]	; (8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004e26:	4b6e      	ldr	r3, [pc, #440]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e28:	e001      	b.n	8004e2e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4969      	ldr	r1, [pc, #420]	; (8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e36:	428b      	cmp	r3, r1
 8004e38:	d101      	bne.n	8004e3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004e3a:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e3c:	e001      	b.n	8004e42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004e3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e46:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	f043 0202 	orr.w	r2, r3, #2
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff fe88 	bl	8004b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	f040 80c3 	bne.w	800501a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80bd 	beq.w	800501a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a49      	ldr	r2, [pc, #292]	; (8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004eba:	4b49      	ldr	r3, [pc, #292]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ebc:	e001      	b.n	8004ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4944      	ldr	r1, [pc, #272]	; (8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eca:	428b      	cmp	r3, r1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004ece:	4b44      	ldr	r3, [pc, #272]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ed0:	e001      	b.n	8004ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004eda:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004edc:	2300      	movs	r3, #0
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	f043 0204 	orr.w	r2, r3, #4
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fe4a 	bl	8004b98 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f04:	e089      	b.n	800501a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d107      	bne.n	8004f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f8be 	bl	800509c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d107      	bne.n	8004f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8fd 	bl	8005134 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d12f      	bne.n	8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d02a      	beq.n	8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f5c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d101      	bne.n	8004f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f6a:	e001      	b.n	8004f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4919      	ldr	r1, [pc, #100]	; (8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f78:	428b      	cmp	r3, r1
 8004f7a:	d101      	bne.n	8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004f7c:	4b18      	ldr	r3, [pc, #96]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f7e:	e001      	b.n	8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	f043 0202 	orr.w	r2, r3, #2
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff fdfa 	bl	8004b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d136      	bne.n	800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d031      	beq.n	800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a07      	ldr	r2, [pc, #28]	; (8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fc4:	e001      	b.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4902      	ldr	r1, [pc, #8]	; (8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fd2:	428b      	cmp	r3, r1
 8004fd4:	d106      	bne.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004fd6:	4b02      	ldr	r3, [pc, #8]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fd8:	e006      	b.n	8004fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004fda:	bf00      	nop
 8004fdc:	40003800 	.word	0x40003800
 8004fe0:	40003400 	.word	0x40003400
 8004fe4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fec:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ffc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	f043 0204 	orr.w	r2, r3, #4
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff fdc0 	bl	8004b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005018:	e000      	b.n	800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800501a:	bf00      	nop
}
 800501c:	bf00      	nop
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c99      	adds	r1, r3, #2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6251      	str	r1, [r2, #36]	; 0x24
 800504a:	881a      	ldrh	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d113      	bne.n	8005092 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005078:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff ffc9 	bl	8005024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	1c99      	adds	r1, r3, #2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6251      	str	r1, [r2, #36]	; 0x24
 80050ae:	8819      	ldrh	r1, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <I2SEx_TxISR_I2SExt+0x90>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d101      	bne.n	80050be <I2SEx_TxISR_I2SExt+0x22>
 80050ba:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <I2SEx_TxISR_I2SExt+0x94>)
 80050bc:	e001      	b.n	80050c2 <I2SEx_TxISR_I2SExt+0x26>
 80050be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050c2:	460a      	mov	r2, r1
 80050c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d121      	bne.n	8005122 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a12      	ldr	r2, [pc, #72]	; (800512c <I2SEx_TxISR_I2SExt+0x90>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d101      	bne.n	80050ec <I2SEx_TxISR_I2SExt+0x50>
 80050e8:	4b11      	ldr	r3, [pc, #68]	; (8005130 <I2SEx_TxISR_I2SExt+0x94>)
 80050ea:	e001      	b.n	80050f0 <I2SEx_TxISR_I2SExt+0x54>
 80050ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	490d      	ldr	r1, [pc, #52]	; (800512c <I2SEx_TxISR_I2SExt+0x90>)
 80050f8:	428b      	cmp	r3, r1
 80050fa:	d101      	bne.n	8005100 <I2SEx_TxISR_I2SExt+0x64>
 80050fc:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <I2SEx_TxISR_I2SExt+0x94>)
 80050fe:	e001      	b.n	8005104 <I2SEx_TxISR_I2SExt+0x68>
 8005100:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ff81 	bl	8005024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40003800 	.word	0x40003800
 8005130:	40003400 	.word	0x40003400

08005134 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68d8      	ldr	r0, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	1c99      	adds	r1, r3, #2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800514c:	b282      	uxth	r2, r0
 800514e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d113      	bne.n	8005190 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005176:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff ff4a 	bl	8005024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a20      	ldr	r2, [pc, #128]	; (8005228 <I2SEx_RxISR_I2SExt+0x90>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d101      	bne.n	80051ae <I2SEx_RxISR_I2SExt+0x16>
 80051aa:	4b20      	ldr	r3, [pc, #128]	; (800522c <I2SEx_RxISR_I2SExt+0x94>)
 80051ac:	e001      	b.n	80051b2 <I2SEx_RxISR_I2SExt+0x1a>
 80051ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b2:	68d8      	ldr	r0, [r3, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	1c99      	adds	r1, r3, #2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051be:	b282      	uxth	r2, r0
 80051c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d121      	bne.n	800521e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a12      	ldr	r2, [pc, #72]	; (8005228 <I2SEx_RxISR_I2SExt+0x90>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d101      	bne.n	80051e8 <I2SEx_RxISR_I2SExt+0x50>
 80051e4:	4b11      	ldr	r3, [pc, #68]	; (800522c <I2SEx_RxISR_I2SExt+0x94>)
 80051e6:	e001      	b.n	80051ec <I2SEx_RxISR_I2SExt+0x54>
 80051e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	490d      	ldr	r1, [pc, #52]	; (8005228 <I2SEx_RxISR_I2SExt+0x90>)
 80051f4:	428b      	cmp	r3, r1
 80051f6:	d101      	bne.n	80051fc <I2SEx_RxISR_I2SExt+0x64>
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <I2SEx_RxISR_I2SExt+0x94>)
 80051fa:	e001      	b.n	8005200 <I2SEx_RxISR_I2SExt+0x68>
 80051fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005200:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005204:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff ff03 	bl	8005024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40003800 	.word	0x40003800
 800522c:	40003400 	.word	0x40003400

08005230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e267      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d075      	beq.n	800533a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800524e:	4b88      	ldr	r3, [pc, #544]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
 8005256:	2b04      	cmp	r3, #4
 8005258:	d00c      	beq.n	8005274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800525a:	4b85      	ldr	r3, [pc, #532]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005262:	2b08      	cmp	r3, #8
 8005264:	d112      	bne.n	800528c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005266:	4b82      	ldr	r3, [pc, #520]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005272:	d10b      	bne.n	800528c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005274:	4b7e      	ldr	r3, [pc, #504]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d05b      	beq.n	8005338 <HAL_RCC_OscConfig+0x108>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d157      	bne.n	8005338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e242      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005294:	d106      	bne.n	80052a4 <HAL_RCC_OscConfig+0x74>
 8005296:	4b76      	ldr	r3, [pc, #472]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a75      	ldr	r2, [pc, #468]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 800529c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e01d      	b.n	80052e0 <HAL_RCC_OscConfig+0xb0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCC_OscConfig+0x98>
 80052ae:	4b70      	ldr	r3, [pc, #448]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a6f      	ldr	r2, [pc, #444]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80052b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4b6d      	ldr	r3, [pc, #436]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a6c      	ldr	r2, [pc, #432]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	e00b      	b.n	80052e0 <HAL_RCC_OscConfig+0xb0>
 80052c8:	4b69      	ldr	r3, [pc, #420]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a68      	ldr	r2, [pc, #416]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80052ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	4b66      	ldr	r3, [pc, #408]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a65      	ldr	r2, [pc, #404]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80052da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d013      	beq.n	8005310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fd f974 	bl	80025d4 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f0:	f7fd f970 	bl	80025d4 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	; 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e207      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005302:	4b5b      	ldr	r3, [pc, #364]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0xc0>
 800530e:	e014      	b.n	800533a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005310:	f7fd f960 	bl	80025d4 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005318:	f7fd f95c 	bl	80025d4 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	; 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e1f3      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532a:	4b51      	ldr	r3, [pc, #324]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0xe8>
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d063      	beq.n	800540e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005346:	4b4a      	ldr	r3, [pc, #296]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005352:	4b47      	ldr	r3, [pc, #284]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800535a:	2b08      	cmp	r3, #8
 800535c:	d11c      	bne.n	8005398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800535e:	4b44      	ldr	r3, [pc, #272]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d116      	bne.n	8005398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536a:	4b41      	ldr	r3, [pc, #260]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_RCC_OscConfig+0x152>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d001      	beq.n	8005382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e1c7      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005382:	4b3b      	ldr	r3, [pc, #236]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4937      	ldr	r1, [pc, #220]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005396:	e03a      	b.n	800540e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d020      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053a0:	4b34      	ldr	r3, [pc, #208]	; (8005474 <HAL_RCC_OscConfig+0x244>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a6:	f7fd f915 	bl	80025d4 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ae:	f7fd f911 	bl	80025d4 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e1a8      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c0:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053cc:	4b28      	ldr	r3, [pc, #160]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	4925      	ldr	r1, [pc, #148]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	600b      	str	r3, [r1, #0]
 80053e0:	e015      	b.n	800540e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053e2:	4b24      	ldr	r3, [pc, #144]	; (8005474 <HAL_RCC_OscConfig+0x244>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fd f8f4 	bl	80025d4 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f0:	f7fd f8f0 	bl	80025d4 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e187      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005402:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d036      	beq.n	8005488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d016      	beq.n	8005450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <HAL_RCC_OscConfig+0x248>)
 8005424:	2201      	movs	r2, #1
 8005426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005428:	f7fd f8d4 	bl	80025d4 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005430:	f7fd f8d0 	bl	80025d4 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e167      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <HAL_RCC_OscConfig+0x240>)
 8005444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0x200>
 800544e:	e01b      	b.n	8005488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005450:	4b09      	ldr	r3, [pc, #36]	; (8005478 <HAL_RCC_OscConfig+0x248>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005456:	f7fd f8bd 	bl	80025d4 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800545c:	e00e      	b.n	800547c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800545e:	f7fd f8b9 	bl	80025d4 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d907      	bls.n	800547c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e150      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
 8005470:	40023800 	.word	0x40023800
 8005474:	42470000 	.word	0x42470000
 8005478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800547c:	4b88      	ldr	r3, [pc, #544]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 800547e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1ea      	bne.n	800545e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8097 	beq.w	80055c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005496:	2300      	movs	r3, #0
 8005498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800549a:	4b81      	ldr	r3, [pc, #516]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10f      	bne.n	80054c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	4b7d      	ldr	r3, [pc, #500]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	4a7c      	ldr	r2, [pc, #496]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 80054b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b4:	6413      	str	r3, [r2, #64]	; 0x40
 80054b6:	4b7a      	ldr	r3, [pc, #488]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054c2:	2301      	movs	r3, #1
 80054c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c6:	4b77      	ldr	r3, [pc, #476]	; (80056a4 <HAL_RCC_OscConfig+0x474>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d118      	bne.n	8005504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054d2:	4b74      	ldr	r3, [pc, #464]	; (80056a4 <HAL_RCC_OscConfig+0x474>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a73      	ldr	r2, [pc, #460]	; (80056a4 <HAL_RCC_OscConfig+0x474>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054de:	f7fd f879 	bl	80025d4 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e6:	f7fd f875 	bl	80025d4 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e10c      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f8:	4b6a      	ldr	r3, [pc, #424]	; (80056a4 <HAL_RCC_OscConfig+0x474>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d106      	bne.n	800551a <HAL_RCC_OscConfig+0x2ea>
 800550c:	4b64      	ldr	r3, [pc, #400]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 800550e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005510:	4a63      	ldr	r2, [pc, #396]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	6713      	str	r3, [r2, #112]	; 0x70
 8005518:	e01c      	b.n	8005554 <HAL_RCC_OscConfig+0x324>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b05      	cmp	r3, #5
 8005520:	d10c      	bne.n	800553c <HAL_RCC_OscConfig+0x30c>
 8005522:	4b5f      	ldr	r3, [pc, #380]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	4a5e      	ldr	r2, [pc, #376]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 8005528:	f043 0304 	orr.w	r3, r3, #4
 800552c:	6713      	str	r3, [r2, #112]	; 0x70
 800552e:	4b5c      	ldr	r3, [pc, #368]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	4a5b      	ldr	r2, [pc, #364]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	6713      	str	r3, [r2, #112]	; 0x70
 800553a:	e00b      	b.n	8005554 <HAL_RCC_OscConfig+0x324>
 800553c:	4b58      	ldr	r3, [pc, #352]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	4a57      	ldr	r2, [pc, #348]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	6713      	str	r3, [r2, #112]	; 0x70
 8005548:	4b55      	ldr	r3, [pc, #340]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	4a54      	ldr	r2, [pc, #336]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 800554e:	f023 0304 	bic.w	r3, r3, #4
 8005552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d015      	beq.n	8005588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555c:	f7fd f83a 	bl	80025d4 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005562:	e00a      	b.n	800557a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fd f836 	bl	80025d4 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e0cb      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557a:	4b49      	ldr	r3, [pc, #292]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0ee      	beq.n	8005564 <HAL_RCC_OscConfig+0x334>
 8005586:	e014      	b.n	80055b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005588:	f7fd f824 	bl	80025d4 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005590:	f7fd f820 	bl	80025d4 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e0b5      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a6:	4b3e      	ldr	r3, [pc, #248]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1ee      	bne.n	8005590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d105      	bne.n	80055c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b8:	4b39      	ldr	r3, [pc, #228]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	4a38      	ldr	r2, [pc, #224]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 80055be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80a1 	beq.w	8005710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055ce:	4b34      	ldr	r3, [pc, #208]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 030c 	and.w	r3, r3, #12
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d05c      	beq.n	8005694 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d141      	bne.n	8005666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e2:	4b31      	ldr	r3, [pc, #196]	; (80056a8 <HAL_RCC_OscConfig+0x478>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e8:	f7fc fff4 	bl	80025d4 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fc fff0 	bl	80025d4 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e087      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005602:	4b27      	ldr	r3, [pc, #156]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69da      	ldr	r2, [r3, #28]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	019b      	lsls	r3, r3, #6
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	3b01      	subs	r3, #1
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	061b      	lsls	r3, r3, #24
 8005632:	491b      	ldr	r1, [pc, #108]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 8005634:	4313      	orrs	r3, r2
 8005636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005638:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <HAL_RCC_OscConfig+0x478>)
 800563a:	2201      	movs	r2, #1
 800563c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563e:	f7fc ffc9 	bl	80025d4 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005646:	f7fc ffc5 	bl	80025d4 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e05c      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005658:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0f0      	beq.n	8005646 <HAL_RCC_OscConfig+0x416>
 8005664:	e054      	b.n	8005710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005666:	4b10      	ldr	r3, [pc, #64]	; (80056a8 <HAL_RCC_OscConfig+0x478>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566c:	f7fc ffb2 	bl	80025d4 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005674:	f7fc ffae 	bl	80025d4 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e045      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_RCC_OscConfig+0x470>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0x444>
 8005692:	e03d      	b.n	8005710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d107      	bne.n	80056ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e038      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40007000 	.word	0x40007000
 80056a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056ac:	4b1b      	ldr	r3, [pc, #108]	; (800571c <HAL_RCC_OscConfig+0x4ec>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d028      	beq.n	800570c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d121      	bne.n	800570c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d11a      	bne.n	800570c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056dc:	4013      	ands	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d111      	bne.n	800570c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	3b01      	subs	r3, #1
 80056f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d107      	bne.n	800570c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005708:	429a      	cmp	r2, r3
 800570a:	d001      	beq.n	8005710 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40023800 	.word	0x40023800

08005720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0cc      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005734:	4b68      	ldr	r3, [pc, #416]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d90c      	bls.n	800575c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005742:	4b65      	ldr	r3, [pc, #404]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800574a:	4b63      	ldr	r3, [pc, #396]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d001      	beq.n	800575c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e0b8      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d020      	beq.n	80057aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005774:	4b59      	ldr	r3, [pc, #356]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a58      	ldr	r2, [pc, #352]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800577e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800578c:	4b53      	ldr	r3, [pc, #332]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	4a52      	ldr	r2, [pc, #328]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005798:	4b50      	ldr	r3, [pc, #320]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	494d      	ldr	r1, [pc, #308]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d044      	beq.n	8005840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057be:	4b47      	ldr	r3, [pc, #284]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d119      	bne.n	80057fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e07f      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d003      	beq.n	80057de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d107      	bne.n	80057ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057de:	4b3f      	ldr	r3, [pc, #252]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e06f      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ee:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e067      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057fe:	4b37      	ldr	r3, [pc, #220]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 0203 	bic.w	r2, r3, #3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	4934      	ldr	r1, [pc, #208]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	4313      	orrs	r3, r2
 800580e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005810:	f7fc fee0 	bl	80025d4 <HAL_GetTick>
 8005814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	e00a      	b.n	800582e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005818:	f7fc fedc 	bl	80025d4 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f241 3288 	movw	r2, #5000	; 0x1388
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e04f      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582e:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 020c 	and.w	r2, r3, #12
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	429a      	cmp	r2, r3
 800583e:	d1eb      	bne.n	8005818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005840:	4b25      	ldr	r3, [pc, #148]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d20c      	bcs.n	8005868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584e:	4b22      	ldr	r3, [pc, #136]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005856:	4b20      	ldr	r3, [pc, #128]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d001      	beq.n	8005868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e032      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005874:	4b19      	ldr	r3, [pc, #100]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4916      	ldr	r1, [pc, #88]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	490e      	ldr	r1, [pc, #56]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058a6:	f000 f821 	bl	80058ec <HAL_RCC_GetSysClockFreq>
 80058aa:	4602      	mov	r2, r0
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	490a      	ldr	r1, [pc, #40]	; (80058e0 <HAL_RCC_ClockConfig+0x1c0>)
 80058b8:	5ccb      	ldrb	r3, [r1, r3]
 80058ba:	fa22 f303 	lsr.w	r3, r2, r3
 80058be:	4a09      	ldr	r2, [pc, #36]	; (80058e4 <HAL_RCC_ClockConfig+0x1c4>)
 80058c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <HAL_RCC_ClockConfig+0x1c8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fb fa0a 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40023c00 	.word	0x40023c00
 80058dc:	40023800 	.word	0x40023800
 80058e0:	0800a940 	.word	0x0800a940
 80058e4:	20000000 	.word	0x20000000
 80058e8:	20000010 	.word	0x20000010

080058ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f0:	b094      	sub	sp, #80	; 0x50
 80058f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	647b      	str	r3, [r7, #68]	; 0x44
 80058f8:	2300      	movs	r3, #0
 80058fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058fc:	2300      	movs	r3, #0
 80058fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005904:	4b79      	ldr	r3, [pc, #484]	; (8005aec <HAL_RCC_GetSysClockFreq+0x200>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 030c 	and.w	r3, r3, #12
 800590c:	2b08      	cmp	r3, #8
 800590e:	d00d      	beq.n	800592c <HAL_RCC_GetSysClockFreq+0x40>
 8005910:	2b08      	cmp	r3, #8
 8005912:	f200 80e1 	bhi.w	8005ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_RCC_GetSysClockFreq+0x34>
 800591a:	2b04      	cmp	r3, #4
 800591c:	d003      	beq.n	8005926 <HAL_RCC_GetSysClockFreq+0x3a>
 800591e:	e0db      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005920:	4b73      	ldr	r3, [pc, #460]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005922:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005924:	e0db      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005926:	4b73      	ldr	r3, [pc, #460]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800592a:	e0d8      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800592c:	4b6f      	ldr	r3, [pc, #444]	; (8005aec <HAL_RCC_GetSysClockFreq+0x200>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005934:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005936:	4b6d      	ldr	r3, [pc, #436]	; (8005aec <HAL_RCC_GetSysClockFreq+0x200>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d063      	beq.n	8005a0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005942:	4b6a      	ldr	r3, [pc, #424]	; (8005aec <HAL_RCC_GetSysClockFreq+0x200>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	099b      	lsrs	r3, r3, #6
 8005948:	2200      	movs	r2, #0
 800594a:	63bb      	str	r3, [r7, #56]	; 0x38
 800594c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005954:	633b      	str	r3, [r7, #48]	; 0x30
 8005956:	2300      	movs	r3, #0
 8005958:	637b      	str	r3, [r7, #52]	; 0x34
 800595a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800595e:	4622      	mov	r2, r4
 8005960:	462b      	mov	r3, r5
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	f04f 0100 	mov.w	r1, #0
 800596a:	0159      	lsls	r1, r3, #5
 800596c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005970:	0150      	lsls	r0, r2, #5
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4621      	mov	r1, r4
 8005978:	1a51      	subs	r1, r2, r1
 800597a:	6139      	str	r1, [r7, #16]
 800597c:	4629      	mov	r1, r5
 800597e:	eb63 0301 	sbc.w	r3, r3, r1
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005990:	4659      	mov	r1, fp
 8005992:	018b      	lsls	r3, r1, #6
 8005994:	4651      	mov	r1, sl
 8005996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800599a:	4651      	mov	r1, sl
 800599c:	018a      	lsls	r2, r1, #6
 800599e:	4651      	mov	r1, sl
 80059a0:	ebb2 0801 	subs.w	r8, r2, r1
 80059a4:	4659      	mov	r1, fp
 80059a6:	eb63 0901 	sbc.w	r9, r3, r1
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059be:	4690      	mov	r8, r2
 80059c0:	4699      	mov	r9, r3
 80059c2:	4623      	mov	r3, r4
 80059c4:	eb18 0303 	adds.w	r3, r8, r3
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	462b      	mov	r3, r5
 80059cc:	eb49 0303 	adc.w	r3, r9, r3
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059de:	4629      	mov	r1, r5
 80059e0:	024b      	lsls	r3, r1, #9
 80059e2:	4621      	mov	r1, r4
 80059e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059e8:	4621      	mov	r1, r4
 80059ea:	024a      	lsls	r2, r1, #9
 80059ec:	4610      	mov	r0, r2
 80059ee:	4619      	mov	r1, r3
 80059f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f2:	2200      	movs	r2, #0
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059fc:	f7fa fbe8 	bl	80001d0 <__aeabi_uldivmod>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4613      	mov	r3, r2
 8005a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a08:	e058      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a0a:	4b38      	ldr	r3, [pc, #224]	; (8005aec <HAL_RCC_GetSysClockFreq+0x200>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	099b      	lsrs	r3, r3, #6
 8005a10:	2200      	movs	r2, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	4611      	mov	r1, r2
 8005a16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a1a:	623b      	str	r3, [r7, #32]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a24:	4642      	mov	r2, r8
 8005a26:	464b      	mov	r3, r9
 8005a28:	f04f 0000 	mov.w	r0, #0
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	0159      	lsls	r1, r3, #5
 8005a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a36:	0150      	lsls	r0, r2, #5
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4641      	mov	r1, r8
 8005a3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a42:	4649      	mov	r1, r9
 8005a44:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8005a60:	eb63 050b 	sbc.w	r5, r3, fp
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	00eb      	lsls	r3, r5, #3
 8005a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a72:	00e2      	lsls	r2, r4, #3
 8005a74:	4614      	mov	r4, r2
 8005a76:	461d      	mov	r5, r3
 8005a78:	4643      	mov	r3, r8
 8005a7a:	18e3      	adds	r3, r4, r3
 8005a7c:	603b      	str	r3, [r7, #0]
 8005a7e:	464b      	mov	r3, r9
 8005a80:	eb45 0303 	adc.w	r3, r5, r3
 8005a84:	607b      	str	r3, [r7, #4]
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a92:	4629      	mov	r1, r5
 8005a94:	028b      	lsls	r3, r1, #10
 8005a96:	4621      	mov	r1, r4
 8005a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	028a      	lsls	r2, r1, #10
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	61fa      	str	r2, [r7, #28]
 8005aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab0:	f7fa fb8e 	bl	80001d0 <__aeabi_uldivmod>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4613      	mov	r3, r2
 8005aba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <HAL_RCC_GetSysClockFreq+0x200>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	0c1b      	lsrs	r3, r3, #16
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ad6:	e002      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ada:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3750      	adds	r7, #80	; 0x50
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800
 8005af0:	00f42400 	.word	0x00f42400
 8005af4:	007a1200 	.word	0x007a1200

08005af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005afc:	4b03      	ldr	r3, [pc, #12]	; (8005b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000000 	.word	0x20000000

08005b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b14:	f7ff fff0 	bl	8005af8 <HAL_RCC_GetHCLKFreq>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	0a9b      	lsrs	r3, r3, #10
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	4903      	ldr	r1, [pc, #12]	; (8005b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b26:	5ccb      	ldrb	r3, [r1, r3]
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40023800 	.word	0x40023800
 8005b34:	0800a950 	.word	0x0800a950

08005b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b3c:	f7ff ffdc 	bl	8005af8 <HAL_RCC_GetHCLKFreq>
 8005b40:	4602      	mov	r2, r0
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	0b5b      	lsrs	r3, r3, #13
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	4903      	ldr	r1, [pc, #12]	; (8005b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b4e:	5ccb      	ldrb	r3, [r1, r3]
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	0800a950 	.word	0x0800a950

08005b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	220f      	movs	r2, #15
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b70:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <HAL_RCC_GetClockConfig+0x5c>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f003 0203 	and.w	r2, r3, #3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b7c:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <HAL_RCC_GetClockConfig+0x5c>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <HAL_RCC_GetClockConfig+0x5c>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b94:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <HAL_RCC_GetClockConfig+0x5c>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	08db      	lsrs	r3, r3, #3
 8005b9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ba2:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <HAL_RCC_GetClockConfig+0x60>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0207 	and.w	r2, r3, #7
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	601a      	str	r2, [r3, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	40023c00 	.word	0x40023c00

08005bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d035      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bec:	4b62      	ldr	r3, [pc, #392]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bf2:	f7fc fcef 	bl	80025d4 <HAL_GetTick>
 8005bf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bfa:	f7fc fceb 	bl	80025d4 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e0b0      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c0c:	4b5b      	ldr	r3, [pc, #364]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f0      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	019a      	lsls	r2, r3, #6
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	071b      	lsls	r3, r3, #28
 8005c24:	4955      	ldr	r1, [pc, #340]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c2c:	4b52      	ldr	r3, [pc, #328]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c32:	f7fc fccf 	bl	80025d4 <HAL_GetTick>
 8005c36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c38:	e008      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c3a:	f7fc fccb 	bl	80025d4 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e090      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c4c:	4b4b      	ldr	r3, [pc, #300]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8083 	beq.w	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	4b44      	ldr	r3, [pc, #272]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	4a43      	ldr	r2, [pc, #268]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6413      	str	r3, [r2, #64]	; 0x40
 8005c76:	4b41      	ldr	r3, [pc, #260]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c82:	4b3f      	ldr	r3, [pc, #252]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a3e      	ldr	r2, [pc, #248]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c8e:	f7fc fca1 	bl	80025d4 <HAL_GetTick>
 8005c92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c96:	f7fc fc9d 	bl	80025d4 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e062      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ca8:	4b35      	ldr	r3, [pc, #212]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0f0      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cb4:	4b31      	ldr	r3, [pc, #196]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cbc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d02f      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d028      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cd2:	4b2a      	ldr	r3, [pc, #168]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cdc:	4b29      	ldr	r3, [pc, #164]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ce2:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ce8:	4a24      	ldr	r2, [pc, #144]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cee:	4b23      	ldr	r3, [pc, #140]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d114      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cfa:	f7fc fc6b 	bl	80025d4 <HAL_GetTick>
 8005cfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d00:	e00a      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d02:	f7fc fc67 	bl	80025d4 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e02a      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d18:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0ee      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d30:	d10d      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d46:	490d      	ldr	r1, [pc, #52]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	608b      	str	r3, [r1, #8]
 8005d4c:	e005      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	4a0a      	ldr	r2, [pc, #40]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d58:	6093      	str	r3, [r2, #8]
 8005d5a:	4b08      	ldr	r3, [pc, #32]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d66:	4905      	ldr	r1, [pc, #20]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	42470068 	.word	0x42470068
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	40007000 	.word	0x40007000
 8005d84:	42470e40 	.word	0x42470e40

08005d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d13f      	bne.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005da6:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dbc:	d12f      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005dbe:	4b1f      	ldr	r3, [pc, #124]	; (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005dc0:	617b      	str	r3, [r7, #20]
          break;
 8005dc2:	e02f      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005dc4:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dd0:	d108      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005dd2:	4b19      	ldr	r3, [pc, #100]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dda:	4a19      	ldr	r2, [pc, #100]	; (8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	e007      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005de4:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dec:	4a15      	ldr	r2, [pc, #84]	; (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005df4:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfa:	099b      	lsrs	r3, r3, #6
 8005dfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e08:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0e:	0f1b      	lsrs	r3, r3, #28
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	617b      	str	r3, [r7, #20]
          break;
 8005e1c:	e002      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]
          break;
 8005e22:	bf00      	nop
        }
      }
      break;
 8005e24:	e000      	b.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005e26:	bf00      	nop
    }
  }
  return frequency;
 8005e28:	697b      	ldr	r3, [r7, #20]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	00bb8000 	.word	0x00bb8000
 8005e40:	007a1200 	.word	0x007a1200
 8005e44:	00f42400 	.word	0x00f42400

08005e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e07b      	b.n	8005f52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d108      	bne.n	8005e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e6a:	d009      	beq.n	8005e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	61da      	str	r2, [r3, #28]
 8005e72:	e005      	b.n	8005e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fa feb6 	bl	8000c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f04:	ea42 0103 	orr.w	r1, r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	0c1b      	lsrs	r3, r3, #16
 8005f1e:	f003 0104 	and.w	r1, r3, #4
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f003 0210 	and.w	r2, r3, #16
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e041      	b.n	8005ff0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d106      	bne.n	8005f86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7fa fe8b 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3304      	adds	r3, #4
 8005f96:	4619      	mov	r1, r3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	f000 f9b5 	bl	8006308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d001      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e04e      	b.n	80060ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a23      	ldr	r2, [pc, #140]	; (80060bc <HAL_TIM_Base_Start_IT+0xc4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d022      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603a:	d01d      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1e      	ldr	r2, [pc, #120]	; (80060c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <HAL_TIM_Base_Start_IT+0xd4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a19      	ldr	r2, [pc, #100]	; (80060d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x80>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d111      	bne.n	800609c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b06      	cmp	r3, #6
 8006088:	d010      	beq.n	80060ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0201 	orr.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609a:	e007      	b.n	80060ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40001800 	.word	0x40001800

080060d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d020      	beq.n	800613c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01b      	beq.n	800613c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0202 	mvn.w	r2, #2
 800610c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f8d2 	bl	80062cc <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f8c4 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f8d5 	bl	80062e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d020      	beq.n	8006188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01b      	beq.n	8006188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0204 	mvn.w	r2, #4
 8006158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f8ac 	bl	80062cc <HAL_TIM_IC_CaptureCallback>
 8006174:	e005      	b.n	8006182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f89e 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f8af 	bl	80062e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d020      	beq.n	80061d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01b      	beq.n	80061d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0208 	mvn.w	r2, #8
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2204      	movs	r2, #4
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f886 	bl	80062cc <HAL_TIM_IC_CaptureCallback>
 80061c0:	e005      	b.n	80061ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f878 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f889 	bl	80062e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 0310 	and.w	r3, r3, #16
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d020      	beq.n	8006220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01b      	beq.n	8006220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0210 	mvn.w	r2, #16
 80061f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2208      	movs	r2, #8
 80061f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f860 	bl	80062cc <HAL_TIM_IC_CaptureCallback>
 800620c:	e005      	b.n	800621a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f852 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f863 	bl	80062e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00c      	beq.n	8006244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0201 	mvn.w	r2, #1
 800623c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fa fbd8 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f906 	bl	8006474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00c      	beq.n	800628c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f834 	bl	80062f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00c      	beq.n	80062b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0220 	mvn.w	r2, #32
 80062a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8d8 	bl	8006460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a46      	ldr	r2, [pc, #280]	; (8006434 <TIM_Base_SetConfig+0x12c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d013      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006326:	d00f      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a43      	ldr	r2, [pc, #268]	; (8006438 <TIM_Base_SetConfig+0x130>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00b      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a42      	ldr	r2, [pc, #264]	; (800643c <TIM_Base_SetConfig+0x134>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d007      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a41      	ldr	r2, [pc, #260]	; (8006440 <TIM_Base_SetConfig+0x138>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a40      	ldr	r2, [pc, #256]	; (8006444 <TIM_Base_SetConfig+0x13c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d108      	bne.n	800635a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a35      	ldr	r2, [pc, #212]	; (8006434 <TIM_Base_SetConfig+0x12c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d02b      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d027      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a32      	ldr	r2, [pc, #200]	; (8006438 <TIM_Base_SetConfig+0x130>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d023      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a31      	ldr	r2, [pc, #196]	; (800643c <TIM_Base_SetConfig+0x134>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d01f      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a30      	ldr	r2, [pc, #192]	; (8006440 <TIM_Base_SetConfig+0x138>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d01b      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2f      	ldr	r2, [pc, #188]	; (8006444 <TIM_Base_SetConfig+0x13c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d017      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2e      	ldr	r2, [pc, #184]	; (8006448 <TIM_Base_SetConfig+0x140>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2d      	ldr	r2, [pc, #180]	; (800644c <TIM_Base_SetConfig+0x144>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00f      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a2c      	ldr	r2, [pc, #176]	; (8006450 <TIM_Base_SetConfig+0x148>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00b      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a2b      	ldr	r2, [pc, #172]	; (8006454 <TIM_Base_SetConfig+0x14c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <TIM_Base_SetConfig+0x150>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a29      	ldr	r2, [pc, #164]	; (800645c <TIM_Base_SetConfig+0x154>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d108      	bne.n	80063cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a10      	ldr	r2, [pc, #64]	; (8006434 <TIM_Base_SetConfig+0x12c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a12      	ldr	r2, [pc, #72]	; (8006444 <TIM_Base_SetConfig+0x13c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d103      	bne.n	8006408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b01      	cmp	r3, #1
 8006418:	d105      	bne.n	8006426 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f023 0201 	bic.w	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	611a      	str	r2, [r3, #16]
  }
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40010000 	.word	0x40010000
 8006438:	40000400 	.word	0x40000400
 800643c:	40000800 	.word	0x40000800
 8006440:	40000c00 	.word	0x40000c00
 8006444:	40010400 	.word	0x40010400
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800
 8006454:	40001800 	.word	0x40001800
 8006458:	40001c00 	.word	0x40001c00
 800645c:	40002000 	.word	0x40002000

08006460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f043 0201 	orr.w	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f023 0201 	bic.w	r2, r3, #1
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80064e6:	d901      	bls.n	80064ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e01b      	b.n	8006524 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	daf2      	bge.n	80064da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	019b      	lsls	r3, r3, #6
 80064fc:	f043 0220 	orr.w	r2, r3, #32
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006510:	d901      	bls.n	8006516 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e006      	b.n	8006524 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b20      	cmp	r3, #32
 8006520:	d0f0      	beq.n	8006504 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3301      	adds	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006548:	d901      	bls.n	800654e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e018      	b.n	8006580 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	daf2      	bge.n	800653c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2210      	movs	r2, #16
 800655e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800656c:	d901      	bls.n	8006572 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e006      	b.n	8006580 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0310 	and.w	r3, r3, #16
 800657a:	2b10      	cmp	r3, #16
 800657c:	d0f0      	beq.n	8006560 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800658c:	b480      	push	{r7}
 800658e:	b08b      	sub	sp, #44	; 0x2c
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065a2:	88fb      	ldrh	r3, [r7, #6]
 80065a4:	089b      	lsrs	r3, r3, #2
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065b2:	2300      	movs	r3, #0
 80065b4:	623b      	str	r3, [r7, #32]
 80065b6:	e014      	b.n	80065e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	3301      	adds	r3, #1
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	3301      	adds	r3, #1
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	3301      	adds	r3, #1
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	3301      	adds	r3, #1
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	3301      	adds	r3, #1
 80065e0:	623b      	str	r3, [r7, #32]
 80065e2:	6a3a      	ldr	r2, [r7, #32]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d3e6      	bcc.n	80065b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065ea:	8bfb      	ldrh	r3, [r7, #30]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01e      	beq.n	800662e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fa:	461a      	mov	r2, r3
 80065fc:	f107 0310 	add.w	r3, r7, #16
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
 8006610:	b2da      	uxtb	r2, r3
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	701a      	strb	r2, [r3, #0]
      i++;
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	3301      	adds	r3, #1
 800661a:	623b      	str	r3, [r7, #32]
      pDest++;
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	3301      	adds	r3, #1
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006622:	8bfb      	ldrh	r3, [r7, #30]
 8006624:	3b01      	subs	r3, #1
 8006626:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006628:	8bfb      	ldrh	r3, [r7, #30]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1ea      	bne.n	8006604 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006630:	4618      	mov	r0, r3
 8006632:	372c      	adds	r7, #44	; 0x2c
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4013      	ands	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006654:	68fb      	ldr	r3, [r7, #12]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006662:	b480      	push	{r7}
 8006664:	b085      	sub	sp, #20
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	4013      	ands	r3, r2
 8006694:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006696:	68bb      	ldr	r3, [r7, #8]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f003 0301 	and.w	r3, r3, #1
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	68f9      	ldr	r1, [r7, #12]
 80066f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80066f8:	4313      	orrs	r3, r2
 80066fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d107      	bne.n	8006712 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006708:	461a      	mov	r2, r3
 800670a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800670e:	6053      	str	r3, [r2, #4]
 8006710:	e00c      	b.n	800672c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d107      	bne.n	8006728 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671e:	461a      	mov	r2, r3
 8006720:	f241 7370 	movw	r3, #6000	; 0x1770
 8006724:	6053      	str	r3, [r2, #4]
 8006726:	e001      	b.n	800672c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	b29b      	uxth	r3, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800675c:	b480      	push	{r7}
 800675e:	b089      	sub	sp, #36	; 0x24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	0c9b      	lsrs	r3, r3, #18
 8006784:	f003 0303 	and.w	r3, r3, #3
 8006788:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4413      	add	r3, r2
 8006792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	0fdb      	lsrs	r3, r3, #31
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	0fdb      	lsrs	r3, r3, #31
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d10d      	bne.n	80067de <USB_HC_Halt+0x82>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <USB_HC_Halt+0x82>
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d002      	beq.n	80067da <USB_HC_Halt+0x7e>
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d101      	bne.n	80067de <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	e0d8      	b.n	8006990 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <USB_HC_Halt+0x8e>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d173      	bne.n	80068d2 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006808:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d14a      	bne.n	80068ac <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d133      	bne.n	800688a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	0151      	lsls	r1, r2, #5
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	440a      	add	r2, r1
 8006838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800683c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006840:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4413      	add	r3, r2
 800684a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	440a      	add	r2, r1
 8006858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800685c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006860:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	3301      	adds	r3, #1
 8006866:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800686e:	d82e      	bhi.n	80068ce <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	4413      	add	r3, r2
 8006878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006886:	d0ec      	beq.n	8006862 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006888:	e081      	b.n	800698e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	4413      	add	r3, r2
 8006892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068aa:	e070      	b.n	800698e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068cc:	e05f      	b.n	800698e <USB_HC_Halt+0x232>
            break;
 80068ce:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068d0:	e05d      	b.n	800698e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068f0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d133      	bne.n	800696a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	440a      	add	r2, r1
 8006918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800691c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006920:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	440a      	add	r2, r1
 8006938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800693c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006940:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	3301      	adds	r3, #1
 8006946:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800694e:	d81d      	bhi.n	800698c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006966:	d0ec      	beq.n	8006942 <USB_HC_Halt+0x1e6>
 8006968:	e011      	b.n	800698e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	0151      	lsls	r1, r2, #5
 800697c:	69fa      	ldr	r2, [r7, #28]
 800697e:	440a      	add	r2, r1
 8006980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	e000      	b.n	800698e <USB_HC_Halt+0x232>
          break;
 800698c:	bf00      	nop
    }
  }

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3724      	adds	r7, #36	; 0x24
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff fd7a 	bl	80064aa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069b6:	2110      	movs	r1, #16
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff fd87 	bl	80064cc <USB_FlushTxFifo>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff fdb1 	bl	8006530 <USB_FlushRxFifo>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	61bb      	str	r3, [r7, #24]
 80069dc:	e01f      	b.n	8006a1e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a12:	461a      	mov	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b0f      	cmp	r3, #15
 8006a22:	d9dc      	bls.n	80069de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	e034      	b.n	8006a94 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a40:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a50:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	461a      	mov	r2, r3
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a70:	d80c      	bhi.n	8006a8c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a88:	d0ec      	beq.n	8006a64 <USB_StopHost+0xc8>
 8006a8a:	e000      	b.n	8006a8e <USB_StopHost+0xf2>
        break;
 8006a8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	3301      	adds	r3, #1
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b0f      	cmp	r3, #15
 8006a98:	d9c7      	bls.n	8006a2a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8006aae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff fce9 	bl	8006488 <USB_EnableGlobalInt>

  return ret;
 8006ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f804 	bl	8006ae4 <USBH_HandleSof>
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b0b      	cmp	r3, #11
 8006af4:	d10a      	bne.n	8006b0c <USBH_HandleSof+0x28>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d005      	beq.n	8006b0c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	f000 f8ae 	bl	8006c9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006b40:	bf00      	nop
}
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006b58:	bf00      	nop
}
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	f000 f87e 	bl	8006c9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b082      	sub	sp, #8
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f003 f9a6 	bl	8009f1c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	791b      	ldrb	r3, [r3, #4]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f830 	bl	8006c3c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	795b      	ldrb	r3, [r3, #5]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f82a 	bl	8006c3c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	4619      	mov	r1, r3
 8006c00:	f000 f84c 	bl	8006c9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f000 f835 	bl	8006c9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006c48:	78fb      	ldrb	r3, [r7, #3]
 8006c4a:	2b0f      	cmp	r3, #15
 8006c4c:	d80d      	bhi.n	8006c6a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	33e0      	adds	r3, #224	; 0xe0
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	33e0      	adds	r3, #224	; 0xe0
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c7e:	f3ef 8305 	mrs	r3, IPSR
 8006c82:	607b      	str	r3, [r7, #4]
  return(result);
 8006c84:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bf14      	ite	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	2300      	moveq	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <osMessagePut+0x1e>
    ticks = 1;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006cba:	f7ff ffdd 	bl	8006c78 <inHandlerMode>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d018      	beq.n	8006cf6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006cc4:	f107 0210 	add.w	r2, r7, #16
 8006cc8:	f107 0108 	add.w	r1, r7, #8
 8006ccc:	2300      	movs	r3, #0
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fc38 	bl	8007544 <xQueueGenericSendFromISR>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d001      	beq.n	8006cde <osMessagePut+0x42>
      return osErrorOS;
 8006cda:	23ff      	movs	r3, #255	; 0xff
 8006cdc:	e018      	b.n	8006d10 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d014      	beq.n	8006d0e <osMessagePut+0x72>
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <osMessagePut+0x7c>)
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	e00b      	b.n	8006d0e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006cf6:	f107 0108 	add.w	r1, r7, #8
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fa12 	bl	8007128 <xQueueGenericSend>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d001      	beq.n	8006d0e <osMessagePut+0x72>
      return osErrorOS;
 8006d0a:	23ff      	movs	r3, #255	; 0xff
 8006d0c:	e000      	b.n	8006d10 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f103 0208 	add.w	r2, r3, #8
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295
 8006d34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f103 0208 	add.w	r2, r3, #8
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f103 0208 	add.w	r2, r3, #8
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	601a      	str	r2, [r3, #0]
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d103      	bne.n	8006dde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	e00c      	b.n	8006df8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3308      	adds	r3, #8
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	e002      	b.n	8006dec <vListInsert+0x2e>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d2f6      	bcs.n	8006de6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	601a      	str	r2, [r3, #0]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6892      	ldr	r2, [r2, #8]
 8006e46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6852      	ldr	r2, [r2, #4]
 8006e50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d103      	bne.n	8006e64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	1e5a      	subs	r2, r3, #1
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006eae:	f002 fcb9 	bl	8009824 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	441a      	add	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	68f9      	ldr	r1, [r7, #12]
 8006ee2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ee4:	fb01 f303 	mul.w	r3, r1, r3
 8006ee8:	441a      	add	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	22ff      	movs	r2, #255	; 0xff
 8006ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	22ff      	movs	r2, #255	; 0xff
 8006efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d114      	bne.n	8006f2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01a      	beq.n	8006f42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3310      	adds	r3, #16
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 fcdf 	bl	80088d4 <xTaskRemoveFromEventList>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d012      	beq.n	8006f42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <xQueueGenericReset+0xcc>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	e009      	b.n	8006f42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3310      	adds	r3, #16
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff fef2 	bl	8006d1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3324      	adds	r3, #36	; 0x24
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff feed 	bl	8006d1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f42:	f002 fc9f 	bl	8009884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f46:	2301      	movs	r3, #1
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	; 0x28
 8006f58:	af02      	add	r7, sp, #8
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	613b      	str	r3, [r7, #16]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	3350      	adds	r3, #80	; 0x50
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f002 fd6b 	bl	8009a68 <pvPortMalloc>
 8006f92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00e      	beq.n	8006fb8 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	3350      	adds	r3, #80	; 0x50
 8006fa2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fa4:	79fa      	ldrb	r2, [r7, #7]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	4613      	mov	r3, r2
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f825 	bl	8007000 <prvInitialiseNewQueue>
 8006fb6:	e01a      	b.n	8006fee <xQueueGenericCreate+0x9a>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8006fb8:	f7fa f811 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7f9 ff8c 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <xQueueGenericCreate+0xa4>)
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00c      	beq.n	8006fee <xQueueGenericCreate+0x9a>
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <xQueueGenericCreate+0xa8>)
 8006fd8:	5cd3      	ldrb	r3, [r2, r3]
 8006fda:	3340      	adds	r3, #64	; 0x40
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	4618      	mov	r0, r3
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	4a06      	ldr	r2, [pc, #24]	; (8006ffc <xQueueGenericCreate+0xa8>)
 8006fe4:	5cd3      	ldrb	r3, [r2, r3]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	4619      	mov	r1, r3
 8006fea:	f7fa fc99 	bl	8001920 <prvTraceStoreKernelCall>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fee:	69bb      	ldr	r3, [r7, #24]
	}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3720      	adds	r7, #32
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000238 	.word	0x20000238
 8006ffc:	20000004 	.word	0x20000004

08007000 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007000:	b5b0      	push	{r4, r5, r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d103      	bne.n	800701c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	6a3a      	ldr	r2, [r7, #32]
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	e002      	b.n	8007022 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800702e:	2101      	movs	r1, #1
 8007030:	6a38      	ldr	r0, [r7, #32]
 8007032:	f7ff ff27 	bl	8006e84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	78fa      	ldrb	r2, [r7, #3]
 800703a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800703e:	6a38      	ldr	r0, [r7, #32]
 8007040:	f7f9 ff33 	bl	8000eaa <prvTraceGetQueueType>
 8007044:	4603      	mov	r3, r0
 8007046:	461a      	mov	r2, r3
 8007048:	4b34      	ldr	r3, [pc, #208]	; (800711c <prvInitialiseNewQueue+0x11c>)
 800704a:	5c9b      	ldrb	r3, [r3, r2]
 800704c:	4618      	mov	r0, r3
 800704e:	f7fa ff2d 	bl	8001eac <prvTraceGetObjectHandle>
 8007052:	4603      	mov	r3, r0
 8007054:	b29b      	uxth	r3, r3
 8007056:	4619      	mov	r1, r3
 8007058:	6a38      	ldr	r0, [r7, #32]
 800705a:	f7f9 ff94 	bl	8000f86 <prvTraceSetQueueNumberLow16>
 800705e:	4b30      	ldr	r3, [pc, #192]	; (8007120 <prvInitialiseNewQueue+0x120>)
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	4619      	mov	r1, r3
 8007064:	6a38      	ldr	r0, [r7, #32]
 8007066:	f7f9 ffa4 	bl	8000fb2 <prvTraceSetQueueNumberHigh16>
 800706a:	6a38      	ldr	r0, [r7, #32]
 800706c:	f7f9 ff1d 	bl	8000eaa <prvTraceGetQueueType>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	4b29      	ldr	r3, [pc, #164]	; (800711c <prvInitialiseNewQueue+0x11c>)
 8007076:	5c9c      	ldrb	r4, [r3, r2]
 8007078:	6a38      	ldr	r0, [r7, #32]
 800707a:	f7f9 ff69 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 800707e:	4603      	mov	r3, r0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	4619      	mov	r1, r3
 8007084:	4620      	mov	r0, r4
 8007086:	f7fa ffa9 	bl	8001fdc <prvMarkObjectAsUsed>
 800708a:	f7f9 ffa8 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 800708e:	4603      	mov	r3, r0
 8007090:	4618      	mov	r0, r3
 8007092:	f7f9 ff23 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8007096:	4603      	mov	r3, r0
 8007098:	461a      	mov	r2, r3
 800709a:	4b22      	ldr	r3, [pc, #136]	; (8007124 <prvInitialiseNewQueue+0x124>)
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	4013      	ands	r3, r2
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d025      	beq.n	80070f2 <prvInitialiseNewQueue+0xf2>
 80070a6:	6a38      	ldr	r0, [r7, #32]
 80070a8:	f7f9 ff5f 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <prvInitialiseNewQueue+0x124>)
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	4013      	ands	r3, r2
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01a      	beq.n	80070f2 <prvInitialiseNewQueue+0xf2>
 80070bc:	6a38      	ldr	r0, [r7, #32]
 80070be:	f7f9 fef4 	bl	8000eaa <prvTraceGetQueueType>
 80070c2:	4603      	mov	r3, r0
 80070c4:	461a      	mov	r2, r3
 80070c6:	4b15      	ldr	r3, [pc, #84]	; (800711c <prvInitialiseNewQueue+0x11c>)
 80070c8:	5c9b      	ldrb	r3, [r3, r2]
 80070ca:	3318      	adds	r3, #24
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	461d      	mov	r5, r3
 80070d0:	6a38      	ldr	r0, [r7, #32]
 80070d2:	f7f9 feea 	bl	8000eaa <prvTraceGetQueueType>
 80070d6:	4603      	mov	r3, r0
 80070d8:	461a      	mov	r2, r3
 80070da:	4b10      	ldr	r3, [pc, #64]	; (800711c <prvInitialiseNewQueue+0x11c>)
 80070dc:	5c9c      	ldrb	r4, [r3, r2]
 80070de:	6a38      	ldr	r0, [r7, #32]
 80070e0:	f7f9 ff36 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 80070e4:	4603      	mov	r3, r0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	4621      	mov	r1, r4
 80070ec:	4628      	mov	r0, r5
 80070ee:	f7fa fc17 	bl	8001920 <prvTraceStoreKernelCall>
 80070f2:	6a38      	ldr	r0, [r7, #32]
 80070f4:	f7f9 fed9 	bl	8000eaa <prvTraceGetQueueType>
 80070f8:	4603      	mov	r3, r0
 80070fa:	461a      	mov	r2, r3
 80070fc:	4b07      	ldr	r3, [pc, #28]	; (800711c <prvInitialiseNewQueue+0x11c>)
 80070fe:	5c9c      	ldrb	r4, [r3, r2]
 8007100:	6a38      	ldr	r0, [r7, #32]
 8007102:	f7f9 ff25 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007106:	4603      	mov	r3, r0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2200      	movs	r2, #0
 800710c:	4619      	mov	r1, r3
 800710e:	4620      	mov	r0, r4
 8007110:	f7fa fe08 	bl	8001d24 <prvTraceSetObjectState>
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bdb0      	pop	{r4, r5, r7, pc}
 800711c:	20000004 	.word	0x20000004
 8007120:	2000023a 	.word	0x2000023a
 8007124:	20000238 	.word	0x20000238

08007128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007128:	b5b0      	push	{r4, r5, r7, lr}
 800712a:	b08e      	sub	sp, #56	; 0x38
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007136:	2300      	movs	r3, #0
 8007138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xQueueGenericSend+0x32>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d103      	bne.n	8007168 <xQueueGenericSend+0x40>
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <xQueueGenericSend+0x44>
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <xQueueGenericSend+0x46>
 800716c:	2300      	movs	r3, #0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <xQueueGenericSend+0x60>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d103      	bne.n	8007196 <xQueueGenericSend+0x6e>
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <xQueueGenericSend+0x72>
 8007196:	2301      	movs	r3, #1
 8007198:	e000      	b.n	800719c <xQueueGenericSend+0x74>
 800719a:	2300      	movs	r3, #0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	623b      	str	r3, [r7, #32]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071b6:	f001 fd7f 	bl	8008cb8 <xTaskGetSchedulerState>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <xQueueGenericSend+0x9e>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <xQueueGenericSend+0xa2>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <xQueueGenericSend+0xa4>
 80071ca:	2300      	movs	r3, #0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	61fb      	str	r3, [r7, #28]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071e6:	f002 fb1d 	bl	8009824 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d303      	bcc.n	80071fe <xQueueGenericSend+0xd6>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	f040 8084 	bne.w	8007306 <xQueueGenericSend+0x1de>
			{
				traceQUEUE_SEND( pxQueue );
 80071fe:	f7f9 feee 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8007202:	4603      	mov	r3, r0
 8007204:	4618      	mov	r0, r3
 8007206:	f7f9 fe69 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 800720a:	4603      	mov	r3, r0
 800720c:	461a      	mov	r2, r3
 800720e:	4ba6      	ldr	r3, [pc, #664]	; (80074a8 <xQueueGenericSend+0x380>)
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	4013      	ands	r3, r2
 8007214:	b29b      	uxth	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d02a      	beq.n	8007270 <xQueueGenericSend+0x148>
 800721a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800721c:	f7f9 fea5 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 8007220:	4603      	mov	r3, r0
 8007222:	461a      	mov	r2, r3
 8007224:	4ba0      	ldr	r3, [pc, #640]	; (80074a8 <xQueueGenericSend+0x380>)
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	4013      	ands	r3, r2
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01f      	beq.n	8007270 <xQueueGenericSend+0x148>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <xQueueGenericSend+0x124>
 8007236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007238:	f7f9 fe37 	bl	8000eaa <prvTraceGetQueueType>
 800723c:	4603      	mov	r3, r0
 800723e:	461a      	mov	r2, r3
 8007240:	4b9a      	ldr	r3, [pc, #616]	; (80074ac <xQueueGenericSend+0x384>)
 8007242:	5c9b      	ldrb	r3, [r3, r2]
 8007244:	3320      	adds	r3, #32
 8007246:	b2db      	uxtb	r3, r3
 8007248:	461d      	mov	r5, r3
 800724a:	e000      	b.n	800724e <xQueueGenericSend+0x126>
 800724c:	2525      	movs	r5, #37	; 0x25
 800724e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007250:	f7f9 fe2b 	bl	8000eaa <prvTraceGetQueueType>
 8007254:	4603      	mov	r3, r0
 8007256:	461a      	mov	r2, r3
 8007258:	4b94      	ldr	r3, [pc, #592]	; (80074ac <xQueueGenericSend+0x384>)
 800725a:	5c9c      	ldrb	r4, [r3, r2]
 800725c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800725e:	f7f9 fe77 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007262:	4603      	mov	r3, r0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	461a      	mov	r2, r3
 8007268:	4621      	mov	r1, r4
 800726a:	4628      	mov	r0, r5
 800726c:	f7fa fb58 	bl	8001920 <prvTraceStoreKernelCall>
 8007270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007272:	f7f9 fe1a 	bl	8000eaa <prvTraceGetQueueType>
 8007276:	4603      	mov	r3, r0
 8007278:	461a      	mov	r2, r3
 800727a:	4b8c      	ldr	r3, [pc, #560]	; (80074ac <xQueueGenericSend+0x384>)
 800727c:	5c9c      	ldrb	r4, [r3, r2]
 800727e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007280:	f7f9 fe66 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007284:	4603      	mov	r3, r0
 8007286:	b2dd      	uxtb	r5, r3
 8007288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728a:	f7f9 fe0e 	bl	8000eaa <prvTraceGetQueueType>
 800728e:	4603      	mov	r3, r0
 8007290:	461a      	mov	r2, r3
 8007292:	4b86      	ldr	r3, [pc, #536]	; (80074ac <xQueueGenericSend+0x384>)
 8007294:	5c9b      	ldrb	r3, [r3, r2]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d005      	beq.n	80072a6 <xQueueGenericSend+0x17e>
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	3301      	adds	r3, #1
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	e000      	b.n	80072a8 <xQueueGenericSend+0x180>
 80072a6:	2300      	movs	r3, #0
 80072a8:	461a      	mov	r2, r3
 80072aa:	4629      	mov	r1, r5
 80072ac:	4620      	mov	r0, r4
 80072ae:	f7fa fd39 	bl	8001d24 <prvTraceSetObjectState>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b8:	f000 fc79 	bl	8007bae <prvCopyDataToQueue>
 80072bc:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d010      	beq.n	80072e8 <xQueueGenericSend+0x1c0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	3324      	adds	r3, #36	; 0x24
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 fb02 	bl	80088d4 <xTaskRemoveFromEventList>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d013      	beq.n	80072fe <xQueueGenericSend+0x1d6>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072d6:	4b76      	ldr	r3, [pc, #472]	; (80074b0 <xQueueGenericSend+0x388>)
 80072d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	e00a      	b.n	80072fe <xQueueGenericSend+0x1d6>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d007      	beq.n	80072fe <xQueueGenericSend+0x1d6>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072ee:	4b70      	ldr	r3, [pc, #448]	; (80074b0 <xQueueGenericSend+0x388>)
 80072f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072fe:	f002 fac1 	bl	8009884 <vPortExitCritical>
				return pdPASS;
 8007302:	2301      	movs	r3, #1
 8007304:	e115      	b.n	8007532 <xQueueGenericSend+0x40a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d13c      	bne.n	8007386 <xQueueGenericSend+0x25e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800730c:	f002 faba 	bl	8009884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8007310:	f7f9 fe65 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8007314:	4603      	mov	r3, r0
 8007316:	4618      	mov	r0, r3
 8007318:	f7f9 fde0 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 800731c:	4603      	mov	r3, r0
 800731e:	461a      	mov	r2, r3
 8007320:	4b61      	ldr	r3, [pc, #388]	; (80074a8 <xQueueGenericSend+0x380>)
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	4013      	ands	r3, r2
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d02a      	beq.n	8007382 <xQueueGenericSend+0x25a>
 800732c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800732e:	f7f9 fe1c 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 8007332:	4603      	mov	r3, r0
 8007334:	461a      	mov	r2, r3
 8007336:	4b5c      	ldr	r3, [pc, #368]	; (80074a8 <xQueueGenericSend+0x380>)
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	4013      	ands	r3, r2
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d01f      	beq.n	8007382 <xQueueGenericSend+0x25a>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <xQueueGenericSend+0x236>
 8007348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800734a:	f7f9 fdae 	bl	8000eaa <prvTraceGetQueueType>
 800734e:	4603      	mov	r3, r0
 8007350:	461a      	mov	r2, r3
 8007352:	4b56      	ldr	r3, [pc, #344]	; (80074ac <xQueueGenericSend+0x384>)
 8007354:	5c9b      	ldrb	r3, [r3, r2]
 8007356:	3348      	adds	r3, #72	; 0x48
 8007358:	b2db      	uxtb	r3, r3
 800735a:	461d      	mov	r5, r3
 800735c:	e000      	b.n	8007360 <xQueueGenericSend+0x238>
 800735e:	254d      	movs	r5, #77	; 0x4d
 8007360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007362:	f7f9 fda2 	bl	8000eaa <prvTraceGetQueueType>
 8007366:	4603      	mov	r3, r0
 8007368:	461a      	mov	r2, r3
 800736a:	4b50      	ldr	r3, [pc, #320]	; (80074ac <xQueueGenericSend+0x384>)
 800736c:	5c9c      	ldrb	r4, [r3, r2]
 800736e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007370:	f7f9 fdee 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007374:	4603      	mov	r3, r0
 8007376:	b2db      	uxtb	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	4621      	mov	r1, r4
 800737c:	4628      	mov	r0, r5
 800737e:	f7fa facf 	bl	8001920 <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 8007382:	2300      	movs	r3, #0
 8007384:	e0d5      	b.n	8007532 <xQueueGenericSend+0x40a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007388:	2b00      	cmp	r3, #0
 800738a:	d106      	bne.n	800739a <xQueueGenericSend+0x272>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800738c:	f107 0314 	add.w	r3, r7, #20
 8007390:	4618      	mov	r0, r3
 8007392:	f001 fb17 	bl	80089c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007396:	2301      	movs	r3, #1
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800739a:	f002 fa73 	bl	8009884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800739e:	f000 ffcf 	bl	8008340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073a2:	f002 fa3f 	bl	8009824 <vPortEnterCritical>
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073ac:	b25b      	sxtb	r3, r3
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	d103      	bne.n	80073bc <xQueueGenericSend+0x294>
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073c2:	b25b      	sxtb	r3, r3
 80073c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c8:	d103      	bne.n	80073d2 <xQueueGenericSend+0x2aa>
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073d2:	f002 fa57 	bl	8009884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073d6:	1d3a      	adds	r2, r7, #4
 80073d8:	f107 0314 	add.w	r3, r7, #20
 80073dc:	4611      	mov	r1, r2
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fb06 	bl	80089f0 <xTaskCheckForTimeOut>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d164      	bne.n	80074b4 <xQueueGenericSend+0x38c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ec:	f000 fcd7 	bl	8007d9e <prvIsQueueFull>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d051      	beq.n	800749a <xQueueGenericSend+0x372>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80073f6:	f7f9 fdf2 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 80073fa:	4603      	mov	r3, r0
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7f9 fd6d 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8007402:	4603      	mov	r3, r0
 8007404:	461a      	mov	r2, r3
 8007406:	4b28      	ldr	r3, [pc, #160]	; (80074a8 <xQueueGenericSend+0x380>)
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	4013      	ands	r3, r2
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d02a      	beq.n	8007468 <xQueueGenericSend+0x340>
 8007412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007414:	f7f9 fda9 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 8007418:	4603      	mov	r3, r0
 800741a:	461a      	mov	r2, r3
 800741c:	4b22      	ldr	r3, [pc, #136]	; (80074a8 <xQueueGenericSend+0x380>)
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	4013      	ands	r3, r2
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01f      	beq.n	8007468 <xQueueGenericSend+0x340>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <xQueueGenericSend+0x31c>
 800742e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007430:	f7f9 fd3b 	bl	8000eaa <prvTraceGetQueueType>
 8007434:	4603      	mov	r3, r0
 8007436:	461a      	mov	r2, r3
 8007438:	4b1c      	ldr	r3, [pc, #112]	; (80074ac <xQueueGenericSend+0x384>)
 800743a:	5c9b      	ldrb	r3, [r3, r2]
 800743c:	3370      	adds	r3, #112	; 0x70
 800743e:	b2db      	uxtb	r3, r3
 8007440:	461d      	mov	r5, r3
 8007442:	e000      	b.n	8007446 <xQueueGenericSend+0x31e>
 8007444:	2575      	movs	r5, #117	; 0x75
 8007446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007448:	f7f9 fd2f 	bl	8000eaa <prvTraceGetQueueType>
 800744c:	4603      	mov	r3, r0
 800744e:	461a      	mov	r2, r3
 8007450:	4b16      	ldr	r3, [pc, #88]	; (80074ac <xQueueGenericSend+0x384>)
 8007452:	5c9c      	ldrb	r4, [r3, r2]
 8007454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007456:	f7f9 fd7b 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 800745a:	4603      	mov	r3, r0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	461a      	mov	r2, r3
 8007460:	4621      	mov	r1, r4
 8007462:	4628      	mov	r0, r5
 8007464:	f7fa fa5c 	bl	8001920 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	3310      	adds	r3, #16
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4611      	mov	r1, r2
 8007470:	4618      	mov	r0, r3
 8007472:	f001 f9a3 	bl	80087bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007478:	f000 fc29 	bl	8007cce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800747c:	f000 ff6e 	bl	800835c <xTaskResumeAll>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	f47f aeaf 	bne.w	80071e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007488:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <xQueueGenericSend+0x388>)
 800748a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	e6a5      	b.n	80071e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800749a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800749c:	f000 fc17 	bl	8007cce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074a0:	f000 ff5c 	bl	800835c <xTaskResumeAll>
 80074a4:	e69f      	b.n	80071e6 <xQueueGenericSend+0xbe>
 80074a6:	bf00      	nop
 80074a8:	20000238 	.word	0x20000238
 80074ac:	20000004 	.word	0x20000004
 80074b0:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074b6:	f000 fc0a 	bl	8007cce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074ba:	f000 ff4f 	bl	800835c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80074be:	f7f9 fd8e 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7f9 fd09 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 80074ca:	4603      	mov	r3, r0
 80074cc:	461a      	mov	r2, r3
 80074ce:	4b1b      	ldr	r3, [pc, #108]	; (800753c <xQueueGenericSend+0x414>)
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	4013      	ands	r3, r2
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d02a      	beq.n	8007530 <xQueueGenericSend+0x408>
 80074da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074dc:	f7f9 fd45 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 80074e0:	4603      	mov	r3, r0
 80074e2:	461a      	mov	r2, r3
 80074e4:	4b15      	ldr	r3, [pc, #84]	; (800753c <xQueueGenericSend+0x414>)
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	4013      	ands	r3, r2
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01f      	beq.n	8007530 <xQueueGenericSend+0x408>
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10a      	bne.n	800750c <xQueueGenericSend+0x3e4>
 80074f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f8:	f7f9 fcd7 	bl	8000eaa <prvTraceGetQueueType>
 80074fc:	4603      	mov	r3, r0
 80074fe:	461a      	mov	r2, r3
 8007500:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <xQueueGenericSend+0x418>)
 8007502:	5c9b      	ldrb	r3, [r3, r2]
 8007504:	3348      	adds	r3, #72	; 0x48
 8007506:	b2db      	uxtb	r3, r3
 8007508:	461d      	mov	r5, r3
 800750a:	e000      	b.n	800750e <xQueueGenericSend+0x3e6>
 800750c:	254d      	movs	r5, #77	; 0x4d
 800750e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007510:	f7f9 fccb 	bl	8000eaa <prvTraceGetQueueType>
 8007514:	4603      	mov	r3, r0
 8007516:	461a      	mov	r2, r3
 8007518:	4b09      	ldr	r3, [pc, #36]	; (8007540 <xQueueGenericSend+0x418>)
 800751a:	5c9c      	ldrb	r4, [r3, r2]
 800751c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800751e:	f7f9 fd17 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007522:	4603      	mov	r3, r0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	4621      	mov	r1, r4
 800752a:	4628      	mov	r0, r5
 800752c:	f7fa f9f8 	bl	8001920 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 8007530:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007532:	4618      	mov	r0, r3
 8007534:	3738      	adds	r7, #56	; 0x38
 8007536:	46bd      	mov	sp, r7
 8007538:	bdb0      	pop	{r4, r5, r7, pc}
 800753a:	bf00      	nop
 800753c:	20000238 	.word	0x20000238
 8007540:	20000004 	.word	0x20000004

08007544 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007544:	b5b0      	push	{r4, r5, r7, lr}
 8007546:	b090      	sub	sp, #64	; 0x40
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <xQueueGenericSendFromISR+0x3c>
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <xQueueGenericSendFromISR+0x40>
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <xQueueGenericSendFromISR+0x42>
 8007584:	2300      	movs	r3, #0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10a      	bne.n	80075a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d103      	bne.n	80075ae <xQueueGenericSendFromISR+0x6a>
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <xQueueGenericSendFromISR+0x6e>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <xQueueGenericSendFromISR+0x70>
 80075b2:	2300      	movs	r3, #0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80075b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	623b      	str	r3, [r7, #32]
}
 80075ca:	bf00      	nop
 80075cc:	e7fe      	b.n	80075cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075ce:	f002 fa0b 	bl	80099e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075d2:	f3ef 8211 	mrs	r2, BASEPRI
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	61fa      	str	r2, [r7, #28]
 80075e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <xQueueGenericSendFromISR+0xbc>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d16f      	bne.n	80076e0 <xQueueGenericSendFromISR+0x19c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8007610:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007612:	f7f9 fcaa 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	4b4d      	ldr	r3, [pc, #308]	; (8007750 <xQueueGenericSendFromISR+0x20c>)
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	4013      	ands	r3, r2
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d01f      	beq.n	8007666 <xQueueGenericSendFromISR+0x122>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <xQueueGenericSendFromISR+0xfe>
 800762c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800762e:	f7f9 fc3c 	bl	8000eaa <prvTraceGetQueueType>
 8007632:	4603      	mov	r3, r0
 8007634:	461a      	mov	r2, r3
 8007636:	4b47      	ldr	r3, [pc, #284]	; (8007754 <xQueueGenericSendFromISR+0x210>)
 8007638:	5c9b      	ldrb	r3, [r3, r2]
 800763a:	3330      	adds	r3, #48	; 0x30
 800763c:	b2db      	uxtb	r3, r3
 800763e:	461d      	mov	r5, r3
 8007640:	e000      	b.n	8007644 <xQueueGenericSendFromISR+0x100>
 8007642:	2535      	movs	r5, #53	; 0x35
 8007644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007646:	f7f9 fc30 	bl	8000eaa <prvTraceGetQueueType>
 800764a:	4603      	mov	r3, r0
 800764c:	461a      	mov	r2, r3
 800764e:	4b41      	ldr	r3, [pc, #260]	; (8007754 <xQueueGenericSendFromISR+0x210>)
 8007650:	5c9c      	ldrb	r4, [r3, r2]
 8007652:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007654:	f7f9 fc7c 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007658:	4603      	mov	r3, r0
 800765a:	b2db      	uxtb	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	4621      	mov	r1, r4
 8007660:	4628      	mov	r0, r5
 8007662:	f7fa f95d 	bl	8001920 <prvTraceStoreKernelCall>
 8007666:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007668:	f7f9 fc1f 	bl	8000eaa <prvTraceGetQueueType>
 800766c:	4603      	mov	r3, r0
 800766e:	461a      	mov	r2, r3
 8007670:	4b38      	ldr	r3, [pc, #224]	; (8007754 <xQueueGenericSendFromISR+0x210>)
 8007672:	5c9c      	ldrb	r4, [r3, r2]
 8007674:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007676:	f7f9 fc6b 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 800767a:	4603      	mov	r3, r0
 800767c:	b2d9      	uxtb	r1, r3
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	b2db      	uxtb	r3, r3
 8007684:	3301      	adds	r3, #1
 8007686:	b2db      	uxtb	r3, r3
 8007688:	461a      	mov	r2, r3
 800768a:	4620      	mov	r0, r4
 800768c:	f7fa fb4a 	bl	8001d24 <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007696:	f000 fa8a 	bl	8007bae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800769a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	d112      	bne.n	80076ca <xQueueGenericSendFromISR+0x186>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d016      	beq.n	80076da <xQueueGenericSendFromISR+0x196>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ae:	3324      	adds	r3, #36	; 0x24
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 f90f 	bl	80088d4 <xTaskRemoveFromEventList>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00e      	beq.n	80076da <xQueueGenericSendFromISR+0x196>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <xQueueGenericSendFromISR+0x196>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	e007      	b.n	80076da <xQueueGenericSendFromISR+0x196>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076ce:	3301      	adds	r3, #1
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	b25a      	sxtb	r2, r3
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80076da:	2301      	movs	r3, #1
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80076de:	e02c      	b.n	800773a <xQueueGenericSendFromISR+0x1f6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80076e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076e2:	f7f9 fc42 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 80076e6:	4603      	mov	r3, r0
 80076e8:	461a      	mov	r2, r3
 80076ea:	4b19      	ldr	r3, [pc, #100]	; (8007750 <xQueueGenericSendFromISR+0x20c>)
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	4013      	ands	r3, r2
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01f      	beq.n	8007736 <xQueueGenericSendFromISR+0x1f2>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <xQueueGenericSendFromISR+0x1ce>
 80076fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076fe:	f7f9 fbd4 	bl	8000eaa <prvTraceGetQueueType>
 8007702:	4603      	mov	r3, r0
 8007704:	461a      	mov	r2, r3
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <xQueueGenericSendFromISR+0x210>)
 8007708:	5c9b      	ldrb	r3, [r3, r2]
 800770a:	3358      	adds	r3, #88	; 0x58
 800770c:	b2db      	uxtb	r3, r3
 800770e:	461d      	mov	r5, r3
 8007710:	e000      	b.n	8007714 <xQueueGenericSendFromISR+0x1d0>
 8007712:	255d      	movs	r5, #93	; 0x5d
 8007714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007716:	f7f9 fbc8 	bl	8000eaa <prvTraceGetQueueType>
 800771a:	4603      	mov	r3, r0
 800771c:	461a      	mov	r2, r3
 800771e:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <xQueueGenericSendFromISR+0x210>)
 8007720:	5c9c      	ldrb	r4, [r3, r2]
 8007722:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007724:	f7f9 fc14 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007728:	4603      	mov	r3, r0
 800772a:	b2db      	uxtb	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	4621      	mov	r1, r4
 8007730:	4628      	mov	r0, r5
 8007732:	f7fa f8f5 	bl	8001920 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 8007736:	2300      	movs	r3, #0
 8007738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007744:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007748:	4618      	mov	r0, r3
 800774a:	3740      	adds	r7, #64	; 0x40
 800774c:	46bd      	mov	sp, r7
 800774e:	bdb0      	pop	{r4, r5, r7, pc}
 8007750:	20000238 	.word	0x20000238
 8007754:	20000004 	.word	0x20000004

08007758 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007758:	b5b0      	push	{r4, r5, r7, lr}
 800775a:	b08c      	sub	sp, #48	; 0x30
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007764:	2300      	movs	r3, #0
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10a      	bne.n	8007788 <xQueueReceive+0x30>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	623b      	str	r3, [r7, #32]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <xQueueReceive+0x3e>
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <xQueueReceive+0x42>
 8007796:	2301      	movs	r3, #1
 8007798:	e000      	b.n	800779c <xQueueReceive+0x44>
 800779a:	2300      	movs	r3, #0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10a      	bne.n	80077b6 <xQueueReceive+0x5e>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	61fb      	str	r3, [r7, #28]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077b6:	f001 fa7f 	bl	8008cb8 <xTaskGetSchedulerState>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <xQueueReceive+0x6e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <xQueueReceive+0x72>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <xQueueReceive+0x74>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <xQueueReceive+0x8e>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	61bb      	str	r3, [r7, #24]
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077e6:	f002 f81d 	bl	8009824 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d07b      	beq.n	80078ee <xQueueReceive+0x196>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077fa:	f000 fa42 	bl	8007c82 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80077fe:	f7f9 fbee 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8007802:	4603      	mov	r3, r0
 8007804:	4618      	mov	r0, r3
 8007806:	f7f9 fb69 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 800780a:	4603      	mov	r3, r0
 800780c:	461a      	mov	r2, r3
 800780e:	4bac      	ldr	r3, [pc, #688]	; (8007ac0 <xQueueReceive+0x368>)
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	4013      	ands	r3, r2
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d025      	beq.n	8007866 <xQueueReceive+0x10e>
 800781a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800781c:	f7f9 fba5 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 8007820:	4603      	mov	r3, r0
 8007822:	461a      	mov	r2, r3
 8007824:	4ba6      	ldr	r3, [pc, #664]	; (8007ac0 <xQueueReceive+0x368>)
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	4013      	ands	r3, r2
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01a      	beq.n	8007866 <xQueueReceive+0x10e>
 8007830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007832:	f7f9 fb3a 	bl	8000eaa <prvTraceGetQueueType>
 8007836:	4603      	mov	r3, r0
 8007838:	461a      	mov	r2, r3
 800783a:	4ba2      	ldr	r3, [pc, #648]	; (8007ac4 <xQueueReceive+0x36c>)
 800783c:	5c9b      	ldrb	r3, [r3, r2]
 800783e:	3328      	adds	r3, #40	; 0x28
 8007840:	b2db      	uxtb	r3, r3
 8007842:	461d      	mov	r5, r3
 8007844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007846:	f7f9 fb30 	bl	8000eaa <prvTraceGetQueueType>
 800784a:	4603      	mov	r3, r0
 800784c:	461a      	mov	r2, r3
 800784e:	4b9d      	ldr	r3, [pc, #628]	; (8007ac4 <xQueueReceive+0x36c>)
 8007850:	5c9c      	ldrb	r4, [r3, r2]
 8007852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007854:	f7f9 fb7c 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007858:	4603      	mov	r3, r0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	461a      	mov	r2, r3
 800785e:	4621      	mov	r1, r4
 8007860:	4628      	mov	r0, r5
 8007862:	f7fa f85d 	bl	8001920 <prvTraceStoreKernelCall>
 8007866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007868:	f7f9 fb1f 	bl	8000eaa <prvTraceGetQueueType>
 800786c:	4603      	mov	r3, r0
 800786e:	461a      	mov	r2, r3
 8007870:	4b94      	ldr	r3, [pc, #592]	; (8007ac4 <xQueueReceive+0x36c>)
 8007872:	5c9c      	ldrb	r4, [r3, r2]
 8007874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007876:	f7f9 fb6b 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 800787a:	4603      	mov	r3, r0
 800787c:	b2dd      	uxtb	r5, r3
 800787e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007880:	f7f9 fb13 	bl	8000eaa <prvTraceGetQueueType>
 8007884:	4603      	mov	r3, r0
 8007886:	461a      	mov	r2, r3
 8007888:	4b8e      	ldr	r3, [pc, #568]	; (8007ac4 <xQueueReceive+0x36c>)
 800788a:	5c9b      	ldrb	r3, [r3, r2]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d108      	bne.n	80078a2 <xQueueReceive+0x14a>
 8007890:	f7f9 fba5 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8007894:	4603      	mov	r3, r0
 8007896:	4618      	mov	r0, r3
 8007898:	f7f9 fb13 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 800789c:	4603      	mov	r3, r0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	e004      	b.n	80078ac <xQueueReceive+0x154>
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	3b01      	subs	r3, #1
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	4629      	mov	r1, r5
 80078b0:	4620      	mov	r0, r4
 80078b2:	f7fa fa37 	bl	8001d24 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	1e5a      	subs	r2, r3, #1
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00f      	beq.n	80078e6 <xQueueReceive+0x18e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	3310      	adds	r3, #16
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 f802 	bl	80088d4 <xTaskRemoveFromEventList>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d007      	beq.n	80078e6 <xQueueReceive+0x18e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078d6:	4b7c      	ldr	r3, [pc, #496]	; (8007ac8 <xQueueReceive+0x370>)
 80078d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078e6:	f001 ffcd 	bl	8009884 <vPortExitCritical>
				return pdPASS;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e12f      	b.n	8007b4e <xQueueReceive+0x3f6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d137      	bne.n	8007964 <xQueueReceive+0x20c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078f4:	f001 ffc6 	bl	8009884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80078f8:	f7f9 fb71 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 80078fc:	4603      	mov	r3, r0
 80078fe:	4618      	mov	r0, r3
 8007900:	f7f9 faec 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8007904:	4603      	mov	r3, r0
 8007906:	461a      	mov	r2, r3
 8007908:	4b6d      	ldr	r3, [pc, #436]	; (8007ac0 <xQueueReceive+0x368>)
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	4013      	ands	r3, r2
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d025      	beq.n	8007960 <xQueueReceive+0x208>
 8007914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007916:	f7f9 fb28 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 800791a:	4603      	mov	r3, r0
 800791c:	461a      	mov	r2, r3
 800791e:	4b68      	ldr	r3, [pc, #416]	; (8007ac0 <xQueueReceive+0x368>)
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	4013      	ands	r3, r2
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d01a      	beq.n	8007960 <xQueueReceive+0x208>
 800792a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800792c:	f7f9 fabd 	bl	8000eaa <prvTraceGetQueueType>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	4b63      	ldr	r3, [pc, #396]	; (8007ac4 <xQueueReceive+0x36c>)
 8007936:	5c9b      	ldrb	r3, [r3, r2]
 8007938:	3350      	adds	r3, #80	; 0x50
 800793a:	b2db      	uxtb	r3, r3
 800793c:	461d      	mov	r5, r3
 800793e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007940:	f7f9 fab3 	bl	8000eaa <prvTraceGetQueueType>
 8007944:	4603      	mov	r3, r0
 8007946:	461a      	mov	r2, r3
 8007948:	4b5e      	ldr	r3, [pc, #376]	; (8007ac4 <xQueueReceive+0x36c>)
 800794a:	5c9c      	ldrb	r4, [r3, r2]
 800794c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800794e:	f7f9 faff 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007952:	4603      	mov	r3, r0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	4621      	mov	r1, r4
 800795a:	4628      	mov	r0, r5
 800795c:	f7f9 ffe0 	bl	8001920 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8007960:	2300      	movs	r3, #0
 8007962:	e0f4      	b.n	8007b4e <xQueueReceive+0x3f6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <xQueueReceive+0x220>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800796a:	f107 0310 	add.w	r3, r7, #16
 800796e:	4618      	mov	r0, r3
 8007970:	f001 f828 	bl	80089c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007978:	f001 ff84 	bl	8009884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800797c:	f000 fce0 	bl	8008340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007980:	f001 ff50 	bl	8009824 <vPortEnterCritical>
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800798a:	b25b      	sxtb	r3, r3
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007990:	d103      	bne.n	800799a <xQueueReceive+0x242>
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079a0:	b25b      	sxtb	r3, r3
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a6:	d103      	bne.n	80079b0 <xQueueReceive+0x258>
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079b0:	f001 ff68 	bl	8009884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079b4:	1d3a      	adds	r2, r7, #4
 80079b6:	f107 0310 	add.w	r3, r7, #16
 80079ba:	4611      	mov	r1, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 f817 	bl	80089f0 <xTaskCheckForTimeOut>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f040 8081 	bne.w	8007acc <xQueueReceive+0x374>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079cc:	f000 f9d1 	bl	8007d72 <prvIsQueueEmpty>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d06e      	beq.n	8007ab4 <xQueueReceive+0x35c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80079d6:	f7f9 fb02 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 80079da:	4603      	mov	r3, r0
 80079dc:	4618      	mov	r0, r3
 80079de:	f7f9 fa7d 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 80079e2:	4603      	mov	r3, r0
 80079e4:	461a      	mov	r2, r3
 80079e6:	4b36      	ldr	r3, [pc, #216]	; (8007ac0 <xQueueReceive+0x368>)
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	4013      	ands	r3, r2
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d025      	beq.n	8007a3e <xQueueReceive+0x2e6>
 80079f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079f4:	f7f9 fab9 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 80079f8:	4603      	mov	r3, r0
 80079fa:	461a      	mov	r2, r3
 80079fc:	4b30      	ldr	r3, [pc, #192]	; (8007ac0 <xQueueReceive+0x368>)
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	4013      	ands	r3, r2
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01a      	beq.n	8007a3e <xQueueReceive+0x2e6>
 8007a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a0a:	f7f9 fa4e 	bl	8000eaa <prvTraceGetQueueType>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	461a      	mov	r2, r3
 8007a12:	4b2c      	ldr	r3, [pc, #176]	; (8007ac4 <xQueueReceive+0x36c>)
 8007a14:	5c9b      	ldrb	r3, [r3, r2]
 8007a16:	3368      	adds	r3, #104	; 0x68
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	461d      	mov	r5, r3
 8007a1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a1e:	f7f9 fa44 	bl	8000eaa <prvTraceGetQueueType>
 8007a22:	4603      	mov	r3, r0
 8007a24:	461a      	mov	r2, r3
 8007a26:	4b27      	ldr	r3, [pc, #156]	; (8007ac4 <xQueueReceive+0x36c>)
 8007a28:	5c9c      	ldrb	r4, [r3, r2]
 8007a2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a2c:	f7f9 fa90 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007a30:	4603      	mov	r3, r0
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	4621      	mov	r1, r4
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f7f9 ff71 	bl	8001920 <prvTraceStoreKernelCall>
 8007a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a40:	f7f9 fa33 	bl	8000eaa <prvTraceGetQueueType>
 8007a44:	4603      	mov	r3, r0
 8007a46:	461a      	mov	r2, r3
 8007a48:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <xQueueReceive+0x36c>)
 8007a4a:	5c9b      	ldrb	r3, [r3, r2]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d018      	beq.n	8007a82 <xQueueReceive+0x32a>
 8007a50:	f7f9 fac5 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8007a54:	4603      	mov	r3, r0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7f9 fa40 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	461a      	mov	r2, r3
 8007a60:	4b17      	ldr	r3, [pc, #92]	; (8007ac0 <xQueueReceive+0x368>)
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	4013      	ands	r3, r2
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <xQueueReceive+0x32a>
 8007a6c:	f7f9 fab7 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8007a70:	4603      	mov	r3, r0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7f9 fa25 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fa f997 	bl	8001db0 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	3324      	adds	r3, #36	; 0x24
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fe96 	bl	80087bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a92:	f000 f91c 	bl	8007cce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a96:	f000 fc61 	bl	800835c <xTaskResumeAll>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f47f aea2 	bne.w	80077e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007aa2:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <xQueueReceive+0x370>)
 8007aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	e698      	b.n	80077e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ab6:	f000 f90a 	bl	8007cce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007aba:	f000 fc4f 	bl	800835c <xTaskResumeAll>
 8007abe:	e692      	b.n	80077e6 <xQueueReceive+0x8e>
 8007ac0:	20000238 	.word	0x20000238
 8007ac4:	20000004 	.word	0x20000004
 8007ac8:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ace:	f000 f8fe 	bl	8007cce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ad2:	f000 fc43 	bl	800835c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ad8:	f000 f94b 	bl	8007d72 <prvIsQueueEmpty>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f43f ae81 	beq.w	80077e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007ae4:	f7f9 fa7b 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7f9 f9f6 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <xQueueReceive+0x400>)
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	4013      	ands	r3, r2
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d025      	beq.n	8007b4c <xQueueReceive+0x3f4>
 8007b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b02:	f7f9 fa32 	bl	8000f6a <prvTraceGetQueueNumberHigh16>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4b13      	ldr	r3, [pc, #76]	; (8007b58 <xQueueReceive+0x400>)
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01a      	beq.n	8007b4c <xQueueReceive+0x3f4>
 8007b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b18:	f7f9 f9c7 	bl	8000eaa <prvTraceGetQueueType>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	461a      	mov	r2, r3
 8007b20:	4b0e      	ldr	r3, [pc, #56]	; (8007b5c <xQueueReceive+0x404>)
 8007b22:	5c9b      	ldrb	r3, [r3, r2]
 8007b24:	3350      	adds	r3, #80	; 0x50
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	461d      	mov	r5, r3
 8007b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b2c:	f7f9 f9bd 	bl	8000eaa <prvTraceGetQueueType>
 8007b30:	4603      	mov	r3, r0
 8007b32:	461a      	mov	r2, r3
 8007b34:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <xQueueReceive+0x404>)
 8007b36:	5c9c      	ldrb	r4, [r3, r2]
 8007b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b3a:	f7f9 fa09 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	4621      	mov	r1, r4
 8007b46:	4628      	mov	r0, r5
 8007b48:	f7f9 feea 	bl	8001920 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8007b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3730      	adds	r7, #48	; 0x30
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bdb0      	pop	{r4, r5, r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000238 	.word	0x20000238
 8007b5c:	20000004 	.word	0x20000004

08007b60 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b086      	sub	sp, #24
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10d      	bne.n	8007be8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d14d      	bne.n	8007c70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 f88b 	bl	8008cf4 <xTaskPriorityDisinherit>
 8007bde:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	609a      	str	r2, [r3, #8]
 8007be6:	e043      	b.n	8007c70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d119      	bne.n	8007c22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6858      	ldr	r0, [r3, #4]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	f002 fa67 	bl	800a0cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	441a      	add	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d32b      	bcc.n	8007c70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	605a      	str	r2, [r3, #4]
 8007c20:	e026      	b.n	8007c70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68d8      	ldr	r0, [r3, #12]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	f002 fa4d 	bl	800a0cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	425b      	negs	r3, r3
 8007c3c:	441a      	add	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d207      	bcs.n	8007c5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689a      	ldr	r2, [r3, #8]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	425b      	negs	r3, r3
 8007c58:	441a      	add	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d105      	bne.n	8007c70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c78:	697b      	ldr	r3, [r7, #20]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d018      	beq.n	8007cc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9c:	441a      	add	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d303      	bcc.n	8007cb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68d9      	ldr	r1, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	6838      	ldr	r0, [r7, #0]
 8007cc2:	f002 fa03 	bl	800a0cc <memcpy>
	}
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cd6:	f001 fda5 	bl	8009824 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ce0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ce2:	e011      	b.n	8007d08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d012      	beq.n	8007d12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3324      	adds	r3, #36	; 0x24
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fdef 	bl	80088d4 <xTaskRemoveFromEventList>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cfc:	f000 feda 	bl	8008ab4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dce9      	bgt.n	8007ce4 <prvUnlockQueue+0x16>
 8007d10:	e000      	b.n	8007d14 <prvUnlockQueue+0x46>
					break;
 8007d12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	22ff      	movs	r2, #255	; 0xff
 8007d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d1c:	f001 fdb2 	bl	8009884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d20:	f001 fd80 	bl	8009824 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d2c:	e011      	b.n	8007d52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d012      	beq.n	8007d5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3310      	adds	r3, #16
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fdca 	bl	80088d4 <xTaskRemoveFromEventList>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d46:	f000 feb5 	bl	8008ab4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dce9      	bgt.n	8007d2e <prvUnlockQueue+0x60>
 8007d5a:	e000      	b.n	8007d5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	22ff      	movs	r2, #255	; 0xff
 8007d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d66:	f001 fd8d 	bl	8009884 <vPortExitCritical>
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d7a:	f001 fd53 	bl	8009824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d86:	2301      	movs	r3, #1
 8007d88:	60fb      	str	r3, [r7, #12]
 8007d8a:	e001      	b.n	8007d90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d90:	f001 fd78 	bl	8009884 <vPortExitCritical>

	return xReturn;
 8007d94:	68fb      	ldr	r3, [r7, #12]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007da6:	f001 fd3d 	bl	8009824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d102      	bne.n	8007dbc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007db6:	2301      	movs	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	e001      	b.n	8007dc0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dc0:	f001 fd60 	bl	8009884 <vPortExitCritical>

	return xReturn;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007dd0:	b590      	push	{r4, r7, lr}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	e025      	b.n	8007e2c <vQueueAddToRegistry+0x5c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007de0:	4a16      	ldr	r2, [pc, #88]	; (8007e3c <vQueueAddToRegistry+0x6c>)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d11c      	bne.n	8007e26 <vQueueAddToRegistry+0x56>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007dec:	4913      	ldr	r1, [pc, #76]	; (8007e3c <vQueueAddToRegistry+0x6c>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007df6:	4a11      	ldr	r2, [pc, #68]	; (8007e3c <vQueueAddToRegistry+0x6c>)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	4413      	add	r3, r2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7f9 f851 	bl	8000eaa <prvTraceGetQueueType>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <vQueueAddToRegistry+0x70>)
 8007e0e:	5c9c      	ldrb	r4, [r3, r2]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7f9 f89d 	bl	8000f50 <prvTraceGetQueueNumberLow16>
 8007e16:	4603      	mov	r3, r0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f7fa f920 	bl	8002064 <prvTraceSetObjectName>
				break;
 8007e24:	e006      	b.n	8007e34 <vQueueAddToRegistry+0x64>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b07      	cmp	r3, #7
 8007e30:	d9d6      	bls.n	8007de0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd90      	pop	{r4, r7, pc}
 8007e3c:	20001bf4 	.word	0x20001bf4
 8007e40:	20000004 	.word	0x20000004

08007e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e54:	f001 fce6 	bl	8009824 <vPortEnterCritical>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e5e:	b25b      	sxtb	r3, r3
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d103      	bne.n	8007e6e <vQueueWaitForMessageRestricted+0x2a>
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d103      	bne.n	8007e84 <vQueueWaitForMessageRestricted+0x40>
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e84:	f001 fcfe 	bl	8009884 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d106      	bne.n	8007e9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	3324      	adds	r3, #36	; 0x24
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 fcb3 	bl	8008804 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e9e:	6978      	ldr	r0, [r7, #20]
 8007ea0:	f7ff ff15 	bl	8007cce <prvUnlockQueue>
	}
 8007ea4:	bf00      	nop
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08c      	sub	sp, #48	; 0x30
 8007eb0:	af04      	add	r7, sp, #16
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	603b      	str	r3, [r7, #0]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ebc:	88fb      	ldrh	r3, [r7, #6]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 fdd1 	bl	8009a68 <pvPortMalloc>
 8007ec6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00e      	beq.n	8007eec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ece:	20a8      	movs	r0, #168	; 0xa8
 8007ed0:	f001 fdca 	bl	8009a68 <pvPortMalloc>
 8007ed4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8007ee2:	e005      	b.n	8007ef0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ee4:	6978      	ldr	r0, [r7, #20]
 8007ee6:	f001 fe9b 	bl	8009c20 <vPortFree>
 8007eea:	e001      	b.n	8007ef0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d013      	beq.n	8007f1e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ef6:	88fa      	ldrh	r2, [r7, #6]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9303      	str	r3, [sp, #12]
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	9302      	str	r3, [sp, #8]
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f80f 	bl	8007f30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f12:	69f8      	ldr	r0, [r7, #28]
 8007f14:	f000 f8b2 	bl	800807c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	61bb      	str	r3, [r7, #24]
 8007f1c:	e002      	b.n	8007f24 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f24:	69bb      	ldr	r3, [r7, #24]
	}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3720      	adds	r7, #32
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	461a      	mov	r2, r3
 8007f48:	21a5      	movs	r1, #165	; 0xa5
 8007f4a:	f002 f83b 	bl	8009fc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f023 0307 	bic.w	r3, r3, #7
 8007f66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	617b      	str	r3, [r7, #20]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01f      	beq.n	8007fce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	e012      	b.n	8007fba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	7819      	ldrb	r1, [r3, #0]
 8007f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	3334      	adds	r3, #52	; 0x34
 8007fa4:	460a      	mov	r2, r1
 8007fa6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	4413      	add	r3, r2
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d006      	beq.n	8007fc2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	61fb      	str	r3, [r7, #28]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b0f      	cmp	r3, #15
 8007fbe:	d9e9      	bls.n	8007f94 <prvInitialiseNewTask+0x64>
 8007fc0:	e000      	b.n	8007fc4 <prvInitialiseNewTask+0x94>
			{
				break;
 8007fc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fcc:	e003      	b.n	8007fd6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	2b06      	cmp	r3, #6
 8007fda:	d901      	bls.n	8007fe0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fdc:	2306      	movs	r3, #6
 8007fde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	2200      	movs	r2, #0
 8007ff0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe feb0 	bl	8006d5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	3318      	adds	r3, #24
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe feab 	bl	8006d5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800800a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	f1c3 0207 	rsb	r2, r3, #7
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2200      	movs	r2, #0
 8008028:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	3354      	adds	r3, #84	; 0x54
 8008030:	224c      	movs	r2, #76	; 0x4c
 8008032:	2100      	movs	r1, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f001 ffc5 	bl	8009fc4 <memset>
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	4a0c      	ldr	r2, [pc, #48]	; (8008070 <prvInitialiseNewTask+0x140>)
 800803e:	659a      	str	r2, [r3, #88]	; 0x58
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	4a0c      	ldr	r2, [pc, #48]	; (8008074 <prvInitialiseNewTask+0x144>)
 8008044:	65da      	str	r2, [r3, #92]	; 0x5c
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	4a0b      	ldr	r2, [pc, #44]	; (8008078 <prvInitialiseNewTask+0x148>)
 800804a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	68f9      	ldr	r1, [r7, #12]
 8008050:	69b8      	ldr	r0, [r7, #24]
 8008052:	f001 faab 	bl	80095ac <pxPortInitialiseStack>
 8008056:	4602      	mov	r2, r0
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008066:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008068:	bf00      	nop
 800806a:	3720      	adds	r7, #32
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20005da8 	.word	0x20005da8
 8008074:	20005e10 	.word	0x20005e10
 8008078:	20005e78 	.word	0x20005e78

0800807c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008084:	f001 fbce 	bl	8009824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008088:	4b67      	ldr	r3, [pc, #412]	; (8008228 <prvAddNewTaskToReadyList+0x1ac>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	4a66      	ldr	r2, [pc, #408]	; (8008228 <prvAddNewTaskToReadyList+0x1ac>)
 8008090:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008092:	4b66      	ldr	r3, [pc, #408]	; (800822c <prvAddNewTaskToReadyList+0x1b0>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d109      	bne.n	80080ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800809a:	4a64      	ldr	r2, [pc, #400]	; (800822c <prvAddNewTaskToReadyList+0x1b0>)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080a0:	4b61      	ldr	r3, [pc, #388]	; (8008228 <prvAddNewTaskToReadyList+0x1ac>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d110      	bne.n	80080ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080a8:	f000 fd52 	bl	8008b50 <prvInitialiseTaskLists>
 80080ac:	e00d      	b.n	80080ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080ae:	4b60      	ldr	r3, [pc, #384]	; (8008230 <prvAddNewTaskToReadyList+0x1b4>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d109      	bne.n	80080ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080b6:	4b5d      	ldr	r3, [pc, #372]	; (800822c <prvAddNewTaskToReadyList+0x1b0>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d802      	bhi.n	80080ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080c4:	4a59      	ldr	r2, [pc, #356]	; (800822c <prvAddNewTaskToReadyList+0x1b0>)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080ca:	4b5a      	ldr	r3, [pc, #360]	; (8008234 <prvAddNewTaskToReadyList+0x1b8>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3301      	adds	r3, #1
 80080d0:	4a58      	ldr	r2, [pc, #352]	; (8008234 <prvAddNewTaskToReadyList+0x1b8>)
 80080d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080d4:	4b57      	ldr	r3, [pc, #348]	; (8008234 <prvAddNewTaskToReadyList+0x1b8>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d05f      	beq.n	80081a2 <prvAddNewTaskToReadyList+0x126>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d049      	beq.n	800817c <prvAddNewTaskToReadyList+0x100>
 80080e8:	2003      	movs	r0, #3
 80080ea:	f7f9 fedf 	bl	8001eac <prvTraceGetObjectHandle>
 80080ee:	4603      	mov	r3, r0
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7f8 feff 	bl	8000ef8 <prvTraceSetTaskNumberLow16>
 80080fa:	4b4f      	ldr	r3, [pc, #316]	; (8008238 <prvAddNewTaskToReadyList+0x1bc>)
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7f8 ff0f 	bl	8000f24 <prvTraceSetTaskNumberHigh16>
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7f8 fedb 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 800810c:	4603      	mov	r3, r0
 800810e:	b2d9      	uxtb	r1, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3334      	adds	r3, #52	; 0x34
 8008114:	461a      	mov	r2, r3
 8008116:	2003      	movs	r0, #3
 8008118:	f7f9 ffa4 	bl	8002064 <prvTraceSetObjectName>
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7f8 fed0 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 8008122:	4603      	mov	r3, r0
 8008124:	b2d9      	uxtb	r1, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	b2db      	uxtb	r3, r3
 800812c:	461a      	mov	r2, r3
 800812e:	2003      	movs	r0, #3
 8008130:	f7f9 fdae 	bl	8001c90 <prvTraceSetPriorityProperty>
 8008134:	f7f8 ff53 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8008138:	4603      	mov	r3, r0
 800813a:	4618      	mov	r0, r3
 800813c:	f7f8 fece 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8008140:	4603      	mov	r3, r0
 8008142:	461a      	mov	r2, r3
 8008144:	4b3d      	ldr	r3, [pc, #244]	; (800823c <prvAddNewTaskToReadyList+0x1c0>)
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	4013      	ands	r3, r2
 800814a:	b29b      	uxth	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d028      	beq.n	80081a2 <prvAddNewTaskToReadyList+0x126>
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7f8 fec3 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8008156:	4603      	mov	r3, r0
 8008158:	461a      	mov	r2, r3
 800815a:	4b38      	ldr	r3, [pc, #224]	; (800823c <prvAddNewTaskToReadyList+0x1c0>)
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	4013      	ands	r3, r2
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d01d      	beq.n	80081a2 <prvAddNewTaskToReadyList+0x126>
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7f8 feab 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 800816c:	4603      	mov	r3, r0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	461a      	mov	r2, r3
 8008172:	2103      	movs	r1, #3
 8008174:	201b      	movs	r0, #27
 8008176:	f7f9 fbd3 	bl	8001920 <prvTraceStoreKernelCall>
 800817a:	e012      	b.n	80081a2 <prvAddNewTaskToReadyList+0x126>
 800817c:	f7f8 ff2f 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8008180:	4603      	mov	r3, r0
 8008182:	4618      	mov	r0, r3
 8008184:	f7f8 feaa 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8008188:	4603      	mov	r3, r0
 800818a:	461a      	mov	r2, r3
 800818c:	4b2b      	ldr	r3, [pc, #172]	; (800823c <prvAddNewTaskToReadyList+0x1c0>)
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	4013      	ands	r3, r2
 8008192:	b29b      	uxth	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	d004      	beq.n	80081a2 <prvAddNewTaskToReadyList+0x126>
 8008198:	2200      	movs	r2, #0
 800819a:	2103      	movs	r1, #3
 800819c:	201b      	movs	r0, #27
 800819e:	f7f9 fbbf 	bl	8001920 <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7f8 fe9a 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 80081a8:	4603      	mov	r3, r0
 80081aa:	461a      	mov	r2, r3
 80081ac:	4b23      	ldr	r3, [pc, #140]	; (800823c <prvAddNewTaskToReadyList+0x1c0>)
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	4013      	ands	r3, r2
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d007      	beq.n	80081c8 <prvAddNewTaskToReadyList+0x14c>
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7f8 fe82 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 80081be:	4603      	mov	r3, r0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7f9 fab8 	bl	8001738 <prvTraceStoreTaskReady>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	2201      	movs	r2, #1
 80081ce:	409a      	lsls	r2, r3
 80081d0:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <prvAddNewTaskToReadyList+0x1c4>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	4a1a      	ldr	r2, [pc, #104]	; (8008240 <prvAddNewTaskToReadyList+0x1c4>)
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4a17      	ldr	r2, [pc, #92]	; (8008244 <prvAddNewTaskToReadyList+0x1c8>)
 80081e8:	441a      	add	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3304      	adds	r3, #4
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f7fe fdc0 	bl	8006d76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081f6:	f001 fb45 	bl	8009884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081fa:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <prvAddNewTaskToReadyList+0x1b4>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00e      	beq.n	8008220 <prvAddNewTaskToReadyList+0x1a4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008202:	4b0a      	ldr	r3, [pc, #40]	; (800822c <prvAddNewTaskToReadyList+0x1b0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	429a      	cmp	r2, r3
 800820e:	d207      	bcs.n	8008220 <prvAddNewTaskToReadyList+0x1a4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <prvAddNewTaskToReadyList+0x1cc>)
 8008212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20001d34 	.word	0x20001d34
 800822c:	20001c34 	.word	0x20001c34
 8008230:	20001d40 	.word	0x20001d40
 8008234:	20001d50 	.word	0x20001d50
 8008238:	2000023a 	.word	0x2000023a
 800823c:	20000238 	.word	0x20000238
 8008240:	20001d3c 	.word	0x20001d3c
 8008244:	20001c38 	.word	0x20001c38
 8008248:	e000ed04 	.word	0xe000ed04

0800824c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008252:	4b31      	ldr	r3, [pc, #196]	; (8008318 <vTaskStartScheduler+0xcc>)
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	2300      	movs	r3, #0
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	2300      	movs	r3, #0
 800825c:	2280      	movs	r2, #128	; 0x80
 800825e:	492f      	ldr	r1, [pc, #188]	; (800831c <vTaskStartScheduler+0xd0>)
 8008260:	482f      	ldr	r0, [pc, #188]	; (8008320 <vTaskStartScheduler+0xd4>)
 8008262:	f7ff fe23 	bl	8007eac <xTaskCreate>
 8008266:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d102      	bne.n	8008274 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800826e:	f000 fe6f 	bl	8008f50 <xTimerCreateTimerTask>
 8008272:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d13a      	bne.n	80082f0 <vTaskStartScheduler+0xa4>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	60bb      	str	r3, [r7, #8]
}
 800828c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800828e:	4b25      	ldr	r3, [pc, #148]	; (8008324 <vTaskStartScheduler+0xd8>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3354      	adds	r3, #84	; 0x54
 8008294:	4a24      	ldr	r2, [pc, #144]	; (8008328 <vTaskStartScheduler+0xdc>)
 8008296:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008298:	4b24      	ldr	r3, [pc, #144]	; (800832c <vTaskStartScheduler+0xe0>)
 800829a:	f04f 32ff 	mov.w	r2, #4294967295
 800829e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082a0:	4b23      	ldr	r3, [pc, #140]	; (8008330 <vTaskStartScheduler+0xe4>)
 80082a2:	2201      	movs	r2, #1
 80082a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082a6:	4b23      	ldr	r3, [pc, #140]	; (8008334 <vTaskStartScheduler+0xe8>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80082ac:	4b22      	ldr	r3, [pc, #136]	; (8008338 <vTaskStartScheduler+0xec>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	f7f8 fe94 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 80082b6:	4603      	mov	r3, r0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7f8 fe0f 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 80082be:	4603      	mov	r3, r0
 80082c0:	461a      	mov	r2, r3
 80082c2:	4b1e      	ldr	r3, [pc, #120]	; (800833c <vTaskStartScheduler+0xf0>)
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	4013      	ands	r3, r2
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <vTaskStartScheduler+0x98>
 80082ce:	f7f8 fe86 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 80082d2:	4603      	mov	r3, r0
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7f8 fdf4 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 80082da:	4603      	mov	r3, r0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	4618      	mov	r0, r3
 80082e0:	f7f9 fc6c 	bl	8001bbc <prvTraceStoreTaskswitch>
 80082e4:	4b14      	ldr	r3, [pc, #80]	; (8008338 <vTaskStartScheduler+0xec>)
 80082e6:	2202      	movs	r2, #2
 80082e8:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082ea:	f001 f9e9 	bl	80096c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082ee:	e00e      	b.n	800830e <vTaskStartScheduler+0xc2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d10a      	bne.n	800830e <vTaskStartScheduler+0xc2>
	__asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	607b      	str	r3, [r7, #4]
}
 800830a:	bf00      	nop
 800830c:	e7fe      	b.n	800830c <vTaskStartScheduler+0xc0>
}
 800830e:	bf00      	nop
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20001d58 	.word	0x20001d58
 800831c:	0800a928 	.word	0x0800a928
 8008320:	08008b21 	.word	0x08008b21
 8008324:	20001c34 	.word	0x20001c34
 8008328:	20000068 	.word	0x20000068
 800832c:	20001d54 	.word	0x20001d54
 8008330:	20001d40 	.word	0x20001d40
 8008334:	20001d38 	.word	0x20001d38
 8008338:	20000220 	.word	0x20000220
 800833c:	20000238 	.word	0x20000238

08008340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <vTaskSuspendAll+0x18>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3301      	adds	r3, #1
 800834a:	4a03      	ldr	r2, [pc, #12]	; (8008358 <vTaskSuspendAll+0x18>)
 800834c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800834e:	bf00      	nop
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	20001d5c 	.word	0x20001d5c

0800835c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008366:	2300      	movs	r3, #0
 8008368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800836a:	4b4b      	ldr	r3, [pc, #300]	; (8008498 <xTaskResumeAll+0x13c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <xTaskResumeAll+0x2c>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	603b      	str	r3, [r7, #0]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008388:	f001 fa4c 	bl	8009824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800838c:	4b42      	ldr	r3, [pc, #264]	; (8008498 <xTaskResumeAll+0x13c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3b01      	subs	r3, #1
 8008392:	4a41      	ldr	r2, [pc, #260]	; (8008498 <xTaskResumeAll+0x13c>)
 8008394:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008396:	4b40      	ldr	r3, [pc, #256]	; (8008498 <xTaskResumeAll+0x13c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d174      	bne.n	8008488 <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800839e:	4b3f      	ldr	r3, [pc, #252]	; (800849c <xTaskResumeAll+0x140>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d070      	beq.n	8008488 <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083a6:	e041      	b.n	800842c <xTaskResumeAll+0xd0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a8:	4b3d      	ldr	r3, [pc, #244]	; (80084a0 <xTaskResumeAll+0x144>)
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3318      	adds	r3, #24
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fe fd3b 	bl	8006e30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3304      	adds	r3, #4
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fd36 	bl	8006e30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7f8 fd89 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 80083ca:	4603      	mov	r3, r0
 80083cc:	461a      	mov	r2, r3
 80083ce:	4b35      	ldr	r3, [pc, #212]	; (80084a4 <xTaskResumeAll+0x148>)
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	4013      	ands	r3, r2
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d007      	beq.n	80083ea <xTaskResumeAll+0x8e>
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f7f8 fd71 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 80083e0:	4603      	mov	r3, r0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7f9 f9a7 	bl	8001738 <prvTraceStoreTaskReady>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	2201      	movs	r2, #1
 80083f0:	409a      	lsls	r2, r3
 80083f2:	4b2d      	ldr	r3, [pc, #180]	; (80084a8 <xTaskResumeAll+0x14c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	4a2b      	ldr	r2, [pc, #172]	; (80084a8 <xTaskResumeAll+0x14c>)
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4a28      	ldr	r2, [pc, #160]	; (80084ac <xTaskResumeAll+0x150>)
 800840a:	441a      	add	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3304      	adds	r3, #4
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f7fe fcaf 	bl	8006d76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841c:	4b24      	ldr	r3, [pc, #144]	; (80084b0 <xTaskResumeAll+0x154>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	429a      	cmp	r2, r3
 8008424:	d302      	bcc.n	800842c <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 8008426:	4b23      	ldr	r3, [pc, #140]	; (80084b4 <xTaskResumeAll+0x158>)
 8008428:	2201      	movs	r2, #1
 800842a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800842c:	4b1c      	ldr	r3, [pc, #112]	; (80084a0 <xTaskResumeAll+0x144>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1b9      	bne.n	80083a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800843a:	f000 fc0d 	bl	8008c58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800843e:	4b1e      	ldr	r3, [pc, #120]	; (80084b8 <xTaskResumeAll+0x15c>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d010      	beq.n	800846c <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800844a:	f000 f849 	bl	80084e0 <xTaskIncrementTick>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 8008454:	4b17      	ldr	r3, [pc, #92]	; (80084b4 <xTaskResumeAll+0x158>)
 8008456:	2201      	movs	r2, #1
 8008458:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3b01      	subs	r3, #1
 800845e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f1      	bne.n	800844a <xTaskResumeAll+0xee>

						xPendedTicks = 0;
 8008466:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <xTaskResumeAll+0x15c>)
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800846c:	4b11      	ldr	r3, [pc, #68]	; (80084b4 <xTaskResumeAll+0x158>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d009      	beq.n	8008488 <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008474:	2301      	movs	r3, #1
 8008476:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008478:	4b10      	ldr	r3, [pc, #64]	; (80084bc <xTaskResumeAll+0x160>)
 800847a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008488:	f001 f9fc 	bl	8009884 <vPortExitCritical>

	return xAlreadyYielded;
 800848c:	68bb      	ldr	r3, [r7, #8]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20001d5c 	.word	0x20001d5c
 800849c:	20001d34 	.word	0x20001d34
 80084a0:	20001cf4 	.word	0x20001cf4
 80084a4:	20000238 	.word	0x20000238
 80084a8:	20001d3c 	.word	0x20001d3c
 80084ac:	20001c38 	.word	0x20001c38
 80084b0:	20001c34 	.word	0x20001c34
 80084b4:	20001d48 	.word	0x20001d48
 80084b8:	20001d44 	.word	0x20001d44
 80084bc:	e000ed04 	.word	0xe000ed04

080084c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <xTaskGetTickCount+0x1c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084cc:	687b      	ldr	r3, [r7, #4]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	20001d38 	.word	0x20001d38

080084e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 80084ea:	4b65      	ldr	r3, [pc, #404]	; (8008680 <xTaskIncrementTick+0x1a0>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d003      	beq.n	80084fa <xTaskIncrementTick+0x1a>
 80084f2:	4b64      	ldr	r3, [pc, #400]	; (8008684 <xTaskIncrementTick+0x1a4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d107      	bne.n	800850a <xTaskIncrementTick+0x2a>
 80084fa:	4b63      	ldr	r3, [pc, #396]	; (8008688 <xTaskIncrementTick+0x1a8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3301      	adds	r3, #1
 8008500:	4a61      	ldr	r2, [pc, #388]	; (8008688 <xTaskIncrementTick+0x1a8>)
 8008502:	6013      	str	r3, [r2, #0]
 8008504:	2000      	movs	r0, #0
 8008506:	f7f9 ffe5 	bl	80024d4 <prvTracePortGetTimeStamp>
 800850a:	4b5d      	ldr	r3, [pc, #372]	; (8008680 <xTaskIncrementTick+0x1a0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <xTaskIncrementTick+0x40>
 8008512:	4b5e      	ldr	r3, [pc, #376]	; (800868c <xTaskIncrementTick+0x1ac>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3301      	adds	r3, #1
 8008518:	4619      	mov	r1, r3
 800851a:	2003      	movs	r0, #3
 800851c:	f7f9 faf2 	bl	8001b04 <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008520:	4b57      	ldr	r3, [pc, #348]	; (8008680 <xTaskIncrementTick+0x1a0>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	f040 80a1 	bne.w	800866c <xTaskIncrementTick+0x18c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800852a:	4b58      	ldr	r3, [pc, #352]	; (800868c <xTaskIncrementTick+0x1ac>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3301      	adds	r3, #1
 8008530:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008532:	4a56      	ldr	r2, [pc, #344]	; (800868c <xTaskIncrementTick+0x1ac>)
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d120      	bne.n	8008580 <xTaskIncrementTick+0xa0>
		{
			taskSWITCH_DELAYED_LISTS();
 800853e:	4b54      	ldr	r3, [pc, #336]	; (8008690 <xTaskIncrementTick+0x1b0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <xTaskIncrementTick+0x7e>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	603b      	str	r3, [r7, #0]
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <xTaskIncrementTick+0x7c>
 800855e:	4b4c      	ldr	r3, [pc, #304]	; (8008690 <xTaskIncrementTick+0x1b0>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	4b4b      	ldr	r3, [pc, #300]	; (8008694 <xTaskIncrementTick+0x1b4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a49      	ldr	r2, [pc, #292]	; (8008690 <xTaskIncrementTick+0x1b0>)
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	4a49      	ldr	r2, [pc, #292]	; (8008694 <xTaskIncrementTick+0x1b4>)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6013      	str	r3, [r2, #0]
 8008572:	4b49      	ldr	r3, [pc, #292]	; (8008698 <xTaskIncrementTick+0x1b8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3301      	adds	r3, #1
 8008578:	4a47      	ldr	r2, [pc, #284]	; (8008698 <xTaskIncrementTick+0x1b8>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	f000 fb6c 	bl	8008c58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008580:	4b46      	ldr	r3, [pc, #280]	; (800869c <xTaskIncrementTick+0x1bc>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	429a      	cmp	r2, r3
 8008588:	d35b      	bcc.n	8008642 <xTaskIncrementTick+0x162>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800858a:	4b41      	ldr	r3, [pc, #260]	; (8008690 <xTaskIncrementTick+0x1b0>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d104      	bne.n	800859e <xTaskIncrementTick+0xbe>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008594:	4b41      	ldr	r3, [pc, #260]	; (800869c <xTaskIncrementTick+0x1bc>)
 8008596:	f04f 32ff 	mov.w	r2, #4294967295
 800859a:	601a      	str	r2, [r3, #0]
					break;
 800859c:	e051      	b.n	8008642 <xTaskIncrementTick+0x162>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800859e:	4b3c      	ldr	r3, [pc, #240]	; (8008690 <xTaskIncrementTick+0x1b0>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d203      	bcs.n	80085be <xTaskIncrementTick+0xde>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085b6:	4a39      	ldr	r2, [pc, #228]	; (800869c <xTaskIncrementTick+0x1bc>)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085bc:	e041      	b.n	8008642 <xTaskIncrementTick+0x162>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	3304      	adds	r3, #4
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fc34 	bl	8006e30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d004      	beq.n	80085da <xTaskIncrementTick+0xfa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	3318      	adds	r3, #24
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe fc2b 	bl	8006e30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085da:	68b8      	ldr	r0, [r7, #8]
 80085dc:	f7f8 fc7e 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 80085e0:	4603      	mov	r3, r0
 80085e2:	461a      	mov	r2, r3
 80085e4:	4b2e      	ldr	r3, [pc, #184]	; (80086a0 <xTaskIncrementTick+0x1c0>)
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	4013      	ands	r3, r2
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d007      	beq.n	8008600 <xTaskIncrementTick+0x120>
 80085f0:	68b8      	ldr	r0, [r7, #8]
 80085f2:	f7f8 fc66 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 80085f6:	4603      	mov	r3, r0
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f9 f89c 	bl	8001738 <prvTraceStoreTaskReady>
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	2201      	movs	r2, #1
 8008606:	409a      	lsls	r2, r3
 8008608:	4b26      	ldr	r3, [pc, #152]	; (80086a4 <xTaskIncrementTick+0x1c4>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4313      	orrs	r3, r2
 800860e:	4a25      	ldr	r2, [pc, #148]	; (80086a4 <xTaskIncrementTick+0x1c4>)
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4a22      	ldr	r2, [pc, #136]	; (80086a8 <xTaskIncrementTick+0x1c8>)
 8008620:	441a      	add	r2, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	3304      	adds	r3, #4
 8008626:	4619      	mov	r1, r3
 8008628:	4610      	mov	r0, r2
 800862a:	f7fe fba4 	bl	8006d76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008632:	4b1e      	ldr	r3, [pc, #120]	; (80086ac <xTaskIncrementTick+0x1cc>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008638:	429a      	cmp	r2, r3
 800863a:	d3a6      	bcc.n	800858a <xTaskIncrementTick+0xaa>
						{
							xSwitchRequired = pdTRUE;
 800863c:	2301      	movs	r3, #1
 800863e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008640:	e7a3      	b.n	800858a <xTaskIncrementTick+0xaa>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008642:	4b1a      	ldr	r3, [pc, #104]	; (80086ac <xTaskIncrementTick+0x1cc>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008648:	4917      	ldr	r1, [pc, #92]	; (80086a8 <xTaskIncrementTick+0x1c8>)
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d901      	bls.n	800865e <xTaskIncrementTick+0x17e>
			{
				xSwitchRequired = pdTRUE;
 800865a:	2301      	movs	r3, #1
 800865c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800865e:	4b14      	ldr	r3, [pc, #80]	; (80086b0 <xTaskIncrementTick+0x1d0>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <xTaskIncrementTick+0x196>
			{
				xSwitchRequired = pdTRUE;
 8008666:	2301      	movs	r3, #1
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	e004      	b.n	8008676 <xTaskIncrementTick+0x196>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <xTaskIncrementTick+0x1a4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	4a04      	ldr	r2, [pc, #16]	; (8008684 <xTaskIncrementTick+0x1a4>)
 8008674:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008676:	697b      	ldr	r3, [r7, #20]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	20001d5c 	.word	0x20001d5c
 8008684:	20001d44 	.word	0x20001d44
 8008688:	20000214 	.word	0x20000214
 800868c:	20001d38 	.word	0x20001d38
 8008690:	20001cec 	.word	0x20001cec
 8008694:	20001cf0 	.word	0x20001cf0
 8008698:	20001d4c 	.word	0x20001d4c
 800869c:	20001d54 	.word	0x20001d54
 80086a0:	20000238 	.word	0x20000238
 80086a4:	20001d3c 	.word	0x20001d3c
 80086a8:	20001c38 	.word	0x20001c38
 80086ac:	20001c34 	.word	0x20001c34
 80086b0:	20001d48 	.word	0x20001d48

080086b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086ba:	4b38      	ldr	r3, [pc, #224]	; (800879c <vTaskSwitchContext+0xe8>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086c2:	4b37      	ldr	r3, [pc, #220]	; (80087a0 <vTaskSwitchContext+0xec>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086c8:	e063      	b.n	8008792 <vTaskSwitchContext+0xde>
		xYieldPending = pdFALSE;
 80086ca:	4b35      	ldr	r3, [pc, #212]	; (80087a0 <vTaskSwitchContext+0xec>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d0:	4b34      	ldr	r3, [pc, #208]	; (80087a4 <vTaskSwitchContext+0xf0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	fab3 f383 	clz	r3, r3
 80086dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80086de:	7afb      	ldrb	r3, [r7, #11]
 80086e0:	f1c3 031f 	rsb	r3, r3, #31
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	4930      	ldr	r1, [pc, #192]	; (80087a8 <vTaskSwitchContext+0xf4>)
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	440b      	add	r3, r1
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10a      	bne.n	8008710 <vTaskSwitchContext+0x5c>
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	607b      	str	r3, [r7, #4]
}
 800870c:	bf00      	nop
 800870e:	e7fe      	b.n	800870e <vTaskSwitchContext+0x5a>
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4a23      	ldr	r2, [pc, #140]	; (80087a8 <vTaskSwitchContext+0xf4>)
 800871c:	4413      	add	r3, r2
 800871e:	613b      	str	r3, [r7, #16]
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	605a      	str	r2, [r3, #4]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3308      	adds	r3, #8
 8008732:	429a      	cmp	r2, r3
 8008734:	d104      	bne.n	8008740 <vTaskSwitchContext+0x8c>
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	605a      	str	r2, [r3, #4]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	4a19      	ldr	r2, [pc, #100]	; (80087ac <vTaskSwitchContext+0xf8>)
 8008748:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800874a:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <vTaskSwitchContext+0xfc>)
 800874c:	2201      	movs	r2, #1
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	f7f8 fc45 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8008754:	4603      	mov	r3, r0
 8008756:	4618      	mov	r0, r3
 8008758:	f7f8 fbc0 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 800875c:	4603      	mov	r3, r0
 800875e:	461a      	mov	r2, r3
 8008760:	4b14      	ldr	r3, [pc, #80]	; (80087b4 <vTaskSwitchContext+0x100>)
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	4013      	ands	r3, r2
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00a      	beq.n	8008782 <vTaskSwitchContext+0xce>
 800876c:	f7f8 fc37 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8008770:	4603      	mov	r3, r0
 8008772:	4618      	mov	r0, r3
 8008774:	f7f8 fba5 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 8008778:	4603      	mov	r3, r0
 800877a:	b2db      	uxtb	r3, r3
 800877c:	4618      	mov	r0, r3
 800877e:	f7f9 fa1d 	bl	8001bbc <prvTraceStoreTaskswitch>
 8008782:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <vTaskSwitchContext+0xfc>)
 8008784:	2202      	movs	r2, #2
 8008786:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008788:	4b08      	ldr	r3, [pc, #32]	; (80087ac <vTaskSwitchContext+0xf8>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3354      	adds	r3, #84	; 0x54
 800878e:	4a0a      	ldr	r2, [pc, #40]	; (80087b8 <vTaskSwitchContext+0x104>)
 8008790:	6013      	str	r3, [r2, #0]
}
 8008792:	bf00      	nop
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20001d5c 	.word	0x20001d5c
 80087a0:	20001d48 	.word	0x20001d48
 80087a4:	20001d3c 	.word	0x20001d3c
 80087a8:	20001c38 	.word	0x20001c38
 80087ac:	20001c34 	.word	0x20001c34
 80087b0:	20000220 	.word	0x20000220
 80087b4:	20000238 	.word	0x20000238
 80087b8:	20000068 	.word	0x20000068

080087bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10a      	bne.n	80087e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	60fb      	str	r3, [r7, #12]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087e2:	4b07      	ldr	r3, [pc, #28]	; (8008800 <vTaskPlaceOnEventList+0x44>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3318      	adds	r3, #24
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7fe fae7 	bl	8006dbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087f0:	2101      	movs	r1, #1
 80087f2:	6838      	ldr	r0, [r7, #0]
 80087f4:	f000 fb46 	bl	8008e84 <prvAddCurrentTaskToDelayedList>
}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20001c34 	.word	0x20001c34

08008804 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	617b      	str	r3, [r7, #20]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800882c:	4b26      	ldr	r3, [pc, #152]	; (80088c8 <vTaskPlaceOnEventListRestricted+0xc4>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3318      	adds	r3, #24
 8008832:	4619      	mov	r1, r3
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f7fe fa9e 	bl	8006d76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008840:	f04f 33ff 	mov.w	r3, #4294967295
 8008844:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8008846:	4b20      	ldr	r3, [pc, #128]	; (80088c8 <vTaskPlaceOnEventListRestricted+0xc4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f7f8 fb46 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8008850:	4603      	mov	r3, r0
 8008852:	461a      	mov	r2, r3
 8008854:	4b1d      	ldr	r3, [pc, #116]	; (80088cc <vTaskPlaceOnEventListRestricted+0xc8>)
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	4013      	ands	r3, r2
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d011      	beq.n	8008884 <vTaskPlaceOnEventListRestricted+0x80>
 8008860:	4b1b      	ldr	r3, [pc, #108]	; (80088d0 <vTaskPlaceOnEventListRestricted+0xcc>)
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	4413      	add	r3, r2
 8008868:	4619      	mov	r1, r3
 800886a:	2088      	movs	r0, #136	; 0x88
 800886c:	f7f9 f94a 	bl	8001b04 <prvTraceStoreKernelCallWithNumericParamOnly>
 8008870:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <vTaskPlaceOnEventListRestricted+0xc4>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4618      	mov	r0, r3
 8008876:	f7f8 fb24 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 800887a:	4603      	mov	r3, r0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	4618      	mov	r0, r3
 8008880:	f7f9 fa96 	bl	8001db0 <prvTraceSetTaskInstanceFinished>
 8008884:	f7f8 fbab 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 8008888:	4603      	mov	r3, r0
 800888a:	4618      	mov	r0, r3
 800888c:	f7f8 fb26 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8008890:	4603      	mov	r3, r0
 8008892:	461a      	mov	r2, r3
 8008894:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <vTaskPlaceOnEventListRestricted+0xc8>)
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	4013      	ands	r3, r2
 800889a:	b29b      	uxth	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00a      	beq.n	80088b6 <vTaskPlaceOnEventListRestricted+0xb2>
 80088a0:	f7f8 fb9d 	bl	8000fde <prvTraceGetCurrentTaskHandle>
 80088a4:	4603      	mov	r3, r0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f8 fb0b 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 80088ac:	4603      	mov	r3, r0
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7f9 fa7d 	bl	8001db0 <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	68b8      	ldr	r0, [r7, #8]
 80088ba:	f000 fae3 	bl	8008e84 <prvAddCurrentTaskToDelayedList>
	}
 80088be:	bf00      	nop
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20001c34 	.word	0x20001c34
 80088cc:	20000238 	.word	0x20000238
 80088d0:	20001d38 	.word	0x20001d38

080088d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	60fb      	str	r3, [r7, #12]
}
 80088fc:	bf00      	nop
 80088fe:	e7fe      	b.n	80088fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	3318      	adds	r3, #24
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe fa93 	bl	8006e30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800890a:	4b27      	ldr	r3, [pc, #156]	; (80089a8 <xTaskRemoveFromEventList+0xd4>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d12f      	bne.n	8008972 <xTaskRemoveFromEventList+0x9e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	3304      	adds	r3, #4
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe fa8a 	bl	8006e30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800891c:	6938      	ldr	r0, [r7, #16]
 800891e:	f7f8 fadd 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8008922:	4603      	mov	r3, r0
 8008924:	461a      	mov	r2, r3
 8008926:	4b21      	ldr	r3, [pc, #132]	; (80089ac <xTaskRemoveFromEventList+0xd8>)
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	4013      	ands	r3, r2
 800892c:	b29b      	uxth	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d007      	beq.n	8008942 <xTaskRemoveFromEventList+0x6e>
 8008932:	6938      	ldr	r0, [r7, #16]
 8008934:	f7f8 fac5 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 8008938:	4603      	mov	r3, r0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	4618      	mov	r0, r3
 800893e:	f7f8 fefb 	bl	8001738 <prvTraceStoreTaskReady>
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	2201      	movs	r2, #1
 8008948:	409a      	lsls	r2, r3
 800894a:	4b19      	ldr	r3, [pc, #100]	; (80089b0 <xTaskRemoveFromEventList+0xdc>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4313      	orrs	r3, r2
 8008950:	4a17      	ldr	r2, [pc, #92]	; (80089b0 <xTaskRemoveFromEventList+0xdc>)
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4a14      	ldr	r2, [pc, #80]	; (80089b4 <xTaskRemoveFromEventList+0xe0>)
 8008962:	441a      	add	r2, r3
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	3304      	adds	r3, #4
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe fa03 	bl	8006d76 <vListInsertEnd>
 8008970:	e005      	b.n	800897e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	3318      	adds	r3, #24
 8008976:	4619      	mov	r1, r3
 8008978:	480f      	ldr	r0, [pc, #60]	; (80089b8 <xTaskRemoveFromEventList+0xe4>)
 800897a:	f7fe f9fc 	bl	8006d76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008982:	4b0e      	ldr	r3, [pc, #56]	; (80089bc <xTaskRemoveFromEventList+0xe8>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	429a      	cmp	r2, r3
 800898a:	d905      	bls.n	8008998 <xTaskRemoveFromEventList+0xc4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800898c:	2301      	movs	r3, #1
 800898e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008990:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <xTaskRemoveFromEventList+0xec>)
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	e001      	b.n	800899c <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		xReturn = pdFALSE;
 8008998:	2300      	movs	r3, #0
 800899a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800899c:	697b      	ldr	r3, [r7, #20]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20001d5c 	.word	0x20001d5c
 80089ac:	20000238 	.word	0x20000238
 80089b0:	20001d3c 	.word	0x20001d3c
 80089b4:	20001c38 	.word	0x20001c38
 80089b8:	20001cf4 	.word	0x20001cf4
 80089bc:	20001c34 	.word	0x20001c34
 80089c0:	20001d48 	.word	0x20001d48

080089c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <vTaskInternalSetTimeOutState+0x24>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089d4:	4b05      	ldr	r3, [pc, #20]	; (80089ec <vTaskInternalSetTimeOutState+0x28>)
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	605a      	str	r2, [r3, #4]
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	20001d4c 	.word	0x20001d4c
 80089ec:	20001d38 	.word	0x20001d38

080089f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	613b      	str	r3, [r7, #16]
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	60fb      	str	r3, [r7, #12]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008a32:	f000 fef7 	bl	8009824 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a36:	4b1d      	ldr	r3, [pc, #116]	; (8008aac <xTaskCheckForTimeOut+0xbc>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4e:	d102      	bne.n	8008a56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a50:	2300      	movs	r3, #0
 8008a52:	61fb      	str	r3, [r7, #28]
 8008a54:	e023      	b.n	8008a9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	4b15      	ldr	r3, [pc, #84]	; (8008ab0 <xTaskCheckForTimeOut+0xc0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d007      	beq.n	8008a72 <xTaskCheckForTimeOut+0x82>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d302      	bcc.n	8008a72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	61fb      	str	r3, [r7, #28]
 8008a70:	e015      	b.n	8008a9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d20b      	bcs.n	8008a94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	1ad2      	subs	r2, r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff ff9b 	bl	80089c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]
 8008a92:	e004      	b.n	8008a9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a9e:	f000 fef1 	bl	8009884 <vPortExitCritical>

	return xReturn;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3720      	adds	r7, #32
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20001d38 	.word	0x20001d38
 8008ab0:	20001d4c 	.word	0x20001d4c

08008ab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ab8:	4b03      	ldr	r3, [pc, #12]	; (8008ac8 <vTaskMissedYield+0x14>)
 8008aba:	2201      	movs	r2, #1
 8008abc:	601a      	str	r2, [r3, #0]
}
 8008abe:	bf00      	nop
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	20001d48 	.word	0x20001d48

08008acc <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e001      	b.n	8008aea <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8008aea:	68fb      	ldr	r3, [r7, #12]
	}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d004      	beq.n	8008b12 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8008b12:	bf00      	nop
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
	...

08008b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b28:	f000 f852 	bl	8008bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <prvIdleTask+0x28>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d9f9      	bls.n	8008b28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b34:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <prvIdleTask+0x2c>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b44:	e7f0      	b.n	8008b28 <prvIdleTask+0x8>
 8008b46:	bf00      	nop
 8008b48:	20001c38 	.word	0x20001c38
 8008b4c:	e000ed04 	.word	0xe000ed04

08008b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b56:	2300      	movs	r3, #0
 8008b58:	607b      	str	r3, [r7, #4]
 8008b5a:	e00c      	b.n	8008b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4a12      	ldr	r2, [pc, #72]	; (8008bb0 <prvInitialiseTaskLists+0x60>)
 8008b68:	4413      	add	r3, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe f8d6 	bl	8006d1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3301      	adds	r3, #1
 8008b74:	607b      	str	r3, [r7, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b06      	cmp	r3, #6
 8008b7a:	d9ef      	bls.n	8008b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b7c:	480d      	ldr	r0, [pc, #52]	; (8008bb4 <prvInitialiseTaskLists+0x64>)
 8008b7e:	f7fe f8cd 	bl	8006d1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b82:	480d      	ldr	r0, [pc, #52]	; (8008bb8 <prvInitialiseTaskLists+0x68>)
 8008b84:	f7fe f8ca 	bl	8006d1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b88:	480c      	ldr	r0, [pc, #48]	; (8008bbc <prvInitialiseTaskLists+0x6c>)
 8008b8a:	f7fe f8c7 	bl	8006d1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b8e:	480c      	ldr	r0, [pc, #48]	; (8008bc0 <prvInitialiseTaskLists+0x70>)
 8008b90:	f7fe f8c4 	bl	8006d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b94:	480b      	ldr	r0, [pc, #44]	; (8008bc4 <prvInitialiseTaskLists+0x74>)
 8008b96:	f7fe f8c1 	bl	8006d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b9a:	4b0b      	ldr	r3, [pc, #44]	; (8008bc8 <prvInitialiseTaskLists+0x78>)
 8008b9c:	4a05      	ldr	r2, [pc, #20]	; (8008bb4 <prvInitialiseTaskLists+0x64>)
 8008b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <prvInitialiseTaskLists+0x7c>)
 8008ba2:	4a05      	ldr	r2, [pc, #20]	; (8008bb8 <prvInitialiseTaskLists+0x68>)
 8008ba4:	601a      	str	r2, [r3, #0]
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20001c38 	.word	0x20001c38
 8008bb4:	20001cc4 	.word	0x20001cc4
 8008bb8:	20001cd8 	.word	0x20001cd8
 8008bbc:	20001cf4 	.word	0x20001cf4
 8008bc0:	20001d08 	.word	0x20001d08
 8008bc4:	20001d20 	.word	0x20001d20
 8008bc8:	20001cec 	.word	0x20001cec
 8008bcc:	20001cf0 	.word	0x20001cf0

08008bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bd6:	e019      	b.n	8008c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008bd8:	f000 fe24 	bl	8009824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bdc:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <prvCheckTasksWaitingTermination+0x50>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe f921 	bl	8006e30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bee:	4b0d      	ldr	r3, [pc, #52]	; (8008c24 <prvCheckTasksWaitingTermination+0x54>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	4a0b      	ldr	r2, [pc, #44]	; (8008c24 <prvCheckTasksWaitingTermination+0x54>)
 8008bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bf8:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <prvCheckTasksWaitingTermination+0x58>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	4a0a      	ldr	r2, [pc, #40]	; (8008c28 <prvCheckTasksWaitingTermination+0x58>)
 8008c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c02:	f000 fe3f 	bl	8009884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f810 	bl	8008c2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <prvCheckTasksWaitingTermination+0x58>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e1      	bne.n	8008bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20001d08 	.word	0x20001d08
 8008c24:	20001d34 	.word	0x20001d34
 8008c28:	20001d1c 	.word	0x20001d1c

08008c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3354      	adds	r3, #84	; 0x54
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 f9cb 	bl	8009fd4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 ffec 	bl	8009c20 <vPortFree>
			vPortFree( pxTCB );
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 ffe9 	bl	8009c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <prvResetNextTaskUnblockTime+0x38>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d104      	bne.n	8008c72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <prvResetNextTaskUnblockTime+0x3c>)
 8008c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c70:	e008      	b.n	8008c84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c72:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <prvResetNextTaskUnblockTime+0x38>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	4a04      	ldr	r2, [pc, #16]	; (8008c94 <prvResetNextTaskUnblockTime+0x3c>)
 8008c82:	6013      	str	r3, [r2, #0]
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	20001cec 	.word	0x20001cec
 8008c94:	20001d54 	.word	0x20001d54

08008c98 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008c9e:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <xTaskGetCurrentTaskHandle+0x1c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008ca4:	687b      	ldr	r3, [r7, #4]
	}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20001c34 	.word	0x20001c34

08008cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <xTaskGetSchedulerState+0x34>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d102      	bne.n	8008ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	607b      	str	r3, [r7, #4]
 8008cca:	e008      	b.n	8008cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ccc:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <xTaskGetSchedulerState+0x38>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	607b      	str	r3, [r7, #4]
 8008cd8:	e001      	b.n	8008cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cde:	687b      	ldr	r3, [r7, #4]
	}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	20001d40 	.word	0x20001d40
 8008cf0:	20001d5c 	.word	0x20001d5c

08008cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cf4:	b590      	push	{r4, r7, lr}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d00:	2300      	movs	r3, #0
 8008d02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 80af 	beq.w	8008e6a <xTaskPriorityDisinherit+0x176>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d0c:	4b59      	ldr	r3, [pc, #356]	; (8008e74 <xTaskPriorityDisinherit+0x180>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d00a      	beq.n	8008d2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	60fb      	str	r3, [r7, #12]
}
 8008d28:	bf00      	nop
 8008d2a:	e7fe      	b.n	8008d2a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <xTaskPriorityDisinherit+0x56>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	60bb      	str	r3, [r7, #8]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4e:	1e5a      	subs	r2, r3, #1
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	f000 8084 	beq.w	8008e6a <xTaskPriorityDisinherit+0x176>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d17f      	bne.n	8008e6a <xTaskPriorityDisinherit+0x176>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe f85e 	bl	8006e30 <uxListRemove>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d115      	bne.n	8008da6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7e:	493e      	ldr	r1, [pc, #248]	; (8008e78 <xTaskPriorityDisinherit+0x184>)
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <xTaskPriorityDisinherit+0xb2>
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	2201      	movs	r2, #1
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	43da      	mvns	r2, r3
 8008d9c:	4b37      	ldr	r3, [pc, #220]	; (8008e7c <xTaskPriorityDisinherit+0x188>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4013      	ands	r3, r2
 8008da2:	4a36      	ldr	r2, [pc, #216]	; (8008e7c <xTaskPriorityDisinherit+0x188>)
 8008da4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8008da6:	6938      	ldr	r0, [r7, #16]
 8008da8:	f7f8 f898 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8008dac:	4603      	mov	r3, r0
 8008dae:	461a      	mov	r2, r3
 8008db0:	4b33      	ldr	r3, [pc, #204]	; (8008e80 <xTaskPriorityDisinherit+0x18c>)
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	4013      	ands	r3, r2
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d020      	beq.n	8008dfe <xTaskPriorityDisinherit+0x10a>
 8008dbc:	6938      	ldr	r0, [r7, #16]
 8008dbe:	f7f8 f880 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	461c      	mov	r4, r3
 8008dc8:	6938      	ldr	r0, [r7, #16]
 8008dca:	f7f8 f87a 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	2003      	movs	r0, #3
 8008dd6:	f7f8 ff81 	bl	8001cdc <prvTraceGetPriorityProperty>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	4622      	mov	r2, r4
 8008dde:	2103      	movs	r1, #3
 8008de0:	208f      	movs	r0, #143	; 0x8f
 8008de2:	f7f8 fdf9 	bl	80019d8 <prvTraceStoreKernelCallWithParam>
 8008de6:	6938      	ldr	r0, [r7, #16]
 8008de8:	f7f8 f86b 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 8008dec:	4603      	mov	r3, r0
 8008dee:	b2d9      	uxtb	r1, r3
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	461a      	mov	r2, r3
 8008df8:	2003      	movs	r0, #3
 8008dfa:	f7f8 ff49 	bl	8001c90 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	f1c3 0207 	rsb	r2, r3, #7
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e12:	6938      	ldr	r0, [r7, #16]
 8008e14:	f7f8 f862 	bl	8000edc <prvTraceGetTaskNumberHigh16>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4b18      	ldr	r3, [pc, #96]	; (8008e80 <xTaskPriorityDisinherit+0x18c>)
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	4013      	ands	r3, r2
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d007      	beq.n	8008e38 <xTaskPriorityDisinherit+0x144>
 8008e28:	6938      	ldr	r0, [r7, #16]
 8008e2a:	f7f8 f84a 	bl	8000ec2 <prvTraceGetTaskNumberLow16>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7f8 fc80 	bl	8001738 <prvTraceStoreTaskReady>
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	409a      	lsls	r2, r3
 8008e40:	4b0e      	ldr	r3, [pc, #56]	; (8008e7c <xTaskPriorityDisinherit+0x188>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	4a0d      	ldr	r2, [pc, #52]	; (8008e7c <xTaskPriorityDisinherit+0x188>)
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4a08      	ldr	r2, [pc, #32]	; (8008e78 <xTaskPriorityDisinherit+0x184>)
 8008e58:	441a      	add	r2, r3
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4610      	mov	r0, r2
 8008e62:	f7fd ff88 	bl	8006d76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e66:	2301      	movs	r3, #1
 8008e68:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e6a:	697b      	ldr	r3, [r7, #20]
	}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	371c      	adds	r7, #28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd90      	pop	{r4, r7, pc}
 8008e74:	20001c34 	.word	0x20001c34
 8008e78:	20001c38 	.word	0x20001c38
 8008e7c:	20001d3c 	.word	0x20001d3c
 8008e80:	20000238 	.word	0x20000238

08008e84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e8e:	4b29      	ldr	r3, [pc, #164]	; (8008f34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e94:	4b28      	ldr	r3, [pc, #160]	; (8008f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3304      	adds	r3, #4
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fd ffc8 	bl	8006e30 <uxListRemove>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10b      	bne.n	8008ebe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008ea6:	4b24      	ldr	r3, [pc, #144]	; (8008f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	2201      	movs	r2, #1
 8008eae:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb2:	43da      	mvns	r2, r3
 8008eb4:	4b21      	ldr	r3, [pc, #132]	; (8008f3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	4a20      	ldr	r2, [pc, #128]	; (8008f3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ebc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec4:	d10a      	bne.n	8008edc <prvAddCurrentTaskToDelayedList+0x58>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d007      	beq.n	8008edc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ecc:	4b1a      	ldr	r3, [pc, #104]	; (8008f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	481a      	ldr	r0, [pc, #104]	; (8008f40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008ed6:	f7fd ff4e 	bl	8006d76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008eda:	e026      	b.n	8008f2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ee4:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d209      	bcs.n	8008f08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ef4:	4b13      	ldr	r3, [pc, #76]	; (8008f44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3304      	adds	r3, #4
 8008efe:	4619      	mov	r1, r3
 8008f00:	4610      	mov	r0, r2
 8008f02:	f7fd ff5c 	bl	8006dbe <vListInsert>
}
 8008f06:	e010      	b.n	8008f2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f08:	4b0f      	ldr	r3, [pc, #60]	; (8008f48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3304      	adds	r3, #4
 8008f12:	4619      	mov	r1, r3
 8008f14:	4610      	mov	r0, r2
 8008f16:	f7fd ff52 	bl	8006dbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d202      	bcs.n	8008f2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f24:	4a09      	ldr	r2, [pc, #36]	; (8008f4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6013      	str	r3, [r2, #0]
}
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20001d38 	.word	0x20001d38
 8008f38:	20001c34 	.word	0x20001c34
 8008f3c:	20001d3c 	.word	0x20001d3c
 8008f40:	20001d20 	.word	0x20001d20
 8008f44:	20001cf0 	.word	0x20001cf0
 8008f48:	20001cec 	.word	0x20001cec
 8008f4c:	20001d54 	.word	0x20001d54

08008f50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f5a:	f000 faf1 	bl	8009540 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f5e:	4b11      	ldr	r3, [pc, #68]	; (8008fa4 <xTimerCreateTimerTask+0x54>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00b      	beq.n	8008f7e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8008f66:	4b10      	ldr	r3, [pc, #64]	; (8008fa8 <xTimerCreateTimerTask+0x58>)
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	2305      	movs	r3, #5
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f74:	490d      	ldr	r1, [pc, #52]	; (8008fac <xTimerCreateTimerTask+0x5c>)
 8008f76:	480e      	ldr	r0, [pc, #56]	; (8008fb0 <xTimerCreateTimerTask+0x60>)
 8008f78:	f7fe ff98 	bl	8007eac <xTaskCreate>
 8008f7c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10a      	bne.n	8008f9a <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	603b      	str	r3, [r7, #0]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8008f9a:	687b      	ldr	r3, [r7, #4]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20001d90 	.word	0x20001d90
 8008fa8:	20001d94 	.word	0x20001d94
 8008fac:	0800a930 	.word	0x0800a930
 8008fb0:	080090e9 	.word	0x080090e9

08008fb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b08a      	sub	sp, #40	; 0x28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	623b      	str	r3, [r7, #32]
}
 8008fde:	bf00      	nop
 8008fe0:	e7fe      	b.n	8008fe0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fe2:	4b1a      	ldr	r3, [pc, #104]	; (800904c <xTimerGenericCommand+0x98>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d02a      	beq.n	8009040 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b05      	cmp	r3, #5
 8008ffa:	dc18      	bgt.n	800902e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ffc:	f7ff fe5c 	bl	8008cb8 <xTaskGetSchedulerState>
 8009000:	4603      	mov	r3, r0
 8009002:	2b02      	cmp	r3, #2
 8009004:	d109      	bne.n	800901a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009006:	4b11      	ldr	r3, [pc, #68]	; (800904c <xTimerGenericCommand+0x98>)
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	f107 0110 	add.w	r1, r7, #16
 800900e:	2300      	movs	r3, #0
 8009010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009012:	f7fe f889 	bl	8007128 <xQueueGenericSend>
 8009016:	6278      	str	r0, [r7, #36]	; 0x24
 8009018:	e012      	b.n	8009040 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800901a:	4b0c      	ldr	r3, [pc, #48]	; (800904c <xTimerGenericCommand+0x98>)
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	f107 0110 	add.w	r1, r7, #16
 8009022:	2300      	movs	r3, #0
 8009024:	2200      	movs	r2, #0
 8009026:	f7fe f87f 	bl	8007128 <xQueueGenericSend>
 800902a:	6278      	str	r0, [r7, #36]	; 0x24
 800902c:	e008      	b.n	8009040 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800902e:	4b07      	ldr	r3, [pc, #28]	; (800904c <xTimerGenericCommand+0x98>)
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	f107 0110 	add.w	r1, r7, #16
 8009036:	2300      	movs	r3, #0
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	f7fe fa83 	bl	8007544 <xQueueGenericSendFromISR>
 800903e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009042:	4618      	mov	r0, r3
 8009044:	3728      	adds	r7, #40	; 0x28
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	20001d90 	.word	0x20001d90

08009050 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af02      	add	r7, sp, #8
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800905a:	4b22      	ldr	r3, [pc, #136]	; (80090e4 <prvProcessExpiredTimer+0x94>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	3304      	adds	r3, #4
 8009068:	4618      	mov	r0, r3
 800906a:	f7fd fee1 	bl	8006e30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d022      	beq.n	80090c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	699a      	ldr	r2, [r3, #24]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	18d1      	adds	r1, r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	6978      	ldr	r0, [r7, #20]
 800908a:	f000 f8d1 	bl	8009230 <prvInsertTimerInActiveList>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01f      	beq.n	80090d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009094:	2300      	movs	r3, #0
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	2300      	movs	r3, #0
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	2100      	movs	r1, #0
 800909e:	6978      	ldr	r0, [r7, #20]
 80090a0:	f7ff ff88 	bl	8008fb4 <xTimerGenericCommand>
 80090a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d113      	bne.n	80090d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	60fb      	str	r3, [r7, #12]
}
 80090be:	bf00      	nop
 80090c0:	e7fe      	b.n	80090c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	6978      	ldr	r0, [r7, #20]
 80090da:	4798      	blx	r3
}
 80090dc:	bf00      	nop
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20001d88 	.word	0x20001d88

080090e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090f0:	f107 0308 	add.w	r3, r7, #8
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 f857 	bl	80091a8 <prvGetNextExpireTime>
 80090fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	4619      	mov	r1, r3
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f000 f803 	bl	800910c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009106:	f000 f8d5 	bl	80092b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800910a:	e7f1      	b.n	80090f0 <prvTimerTask+0x8>

0800910c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009116:	f7ff f913 	bl	8008340 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800911a:	f107 0308 	add.w	r3, r7, #8
 800911e:	4618      	mov	r0, r3
 8009120:	f000 f866 	bl	80091f0 <prvSampleTimeNow>
 8009124:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d130      	bne.n	800918e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <prvProcessTimerOrBlockTask+0x3c>
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	429a      	cmp	r2, r3
 8009138:	d806      	bhi.n	8009148 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800913a:	f7ff f90f 	bl	800835c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800913e:	68f9      	ldr	r1, [r7, #12]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff ff85 	bl	8009050 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009146:	e024      	b.n	8009192 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d008      	beq.n	8009160 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800914e:	4b13      	ldr	r3, [pc, #76]	; (800919c <prvProcessTimerOrBlockTask+0x90>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d101      	bne.n	800915c <prvProcessTimerOrBlockTask+0x50>
 8009158:	2301      	movs	r3, #1
 800915a:	e000      	b.n	800915e <prvProcessTimerOrBlockTask+0x52>
 800915c:	2300      	movs	r3, #0
 800915e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009160:	4b0f      	ldr	r3, [pc, #60]	; (80091a0 <prvProcessTimerOrBlockTask+0x94>)
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	4619      	mov	r1, r3
 800916e:	f7fe fe69 	bl	8007e44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009172:	f7ff f8f3 	bl	800835c <xTaskResumeAll>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800917c:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <prvProcessTimerOrBlockTask+0x98>)
 800917e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	f3bf 8f6f 	isb	sy
}
 800918c:	e001      	b.n	8009192 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800918e:	f7ff f8e5 	bl	800835c <xTaskResumeAll>
}
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20001d8c 	.word	0x20001d8c
 80091a0:	20001d90 	.word	0x20001d90
 80091a4:	e000ed04 	.word	0xe000ed04

080091a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091b0:	4b0e      	ldr	r3, [pc, #56]	; (80091ec <prvGetNextExpireTime+0x44>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <prvGetNextExpireTime+0x16>
 80091ba:	2201      	movs	r2, #1
 80091bc:	e000      	b.n	80091c0 <prvGetNextExpireTime+0x18>
 80091be:	2200      	movs	r2, #0
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d105      	bne.n	80091d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091cc:	4b07      	ldr	r3, [pc, #28]	; (80091ec <prvGetNextExpireTime+0x44>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	e001      	b.n	80091dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091dc:	68fb      	ldr	r3, [r7, #12]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	20001d88 	.word	0x20001d88

080091f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091f8:	f7ff f962 	bl	80084c0 <xTaskGetTickCount>
 80091fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091fe:	4b0b      	ldr	r3, [pc, #44]	; (800922c <prvSampleTimeNow+0x3c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	429a      	cmp	r2, r3
 8009206:	d205      	bcs.n	8009214 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009208:	f000 f936 	bl	8009478 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	e002      	b.n	800921a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800921a:	4a04      	ldr	r2, [pc, #16]	; (800922c <prvSampleTimeNow+0x3c>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009220:	68fb      	ldr	r3, [r7, #12]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20001d98 	.word	0x20001d98

08009230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	429a      	cmp	r2, r3
 8009254:	d812      	bhi.n	800927c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	1ad2      	subs	r2, r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	429a      	cmp	r2, r3
 8009262:	d302      	bcc.n	800926a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009264:	2301      	movs	r3, #1
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	e01b      	b.n	80092a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800926a:	4b10      	ldr	r3, [pc, #64]	; (80092ac <prvInsertTimerInActiveList+0x7c>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3304      	adds	r3, #4
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f7fd fda2 	bl	8006dbe <vListInsert>
 800927a:	e012      	b.n	80092a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d206      	bcs.n	8009292 <prvInsertTimerInActiveList+0x62>
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	429a      	cmp	r2, r3
 800928a:	d302      	bcc.n	8009292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800928c:	2301      	movs	r3, #1
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e007      	b.n	80092a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009292:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <prvInsertTimerInActiveList+0x80>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3304      	adds	r3, #4
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f7fd fd8e 	bl	8006dbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092a2:	697b      	ldr	r3, [r7, #20]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	20001d8c 	.word	0x20001d8c
 80092b0:	20001d88 	.word	0x20001d88

080092b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08e      	sub	sp, #56	; 0x38
 80092b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092ba:	e0ca      	b.n	8009452 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	da18      	bge.n	80092f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092c2:	1d3b      	adds	r3, r7, #4
 80092c4:	3304      	adds	r3, #4
 80092c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10a      	bne.n	80092e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	61fb      	str	r3, [r7, #28]
}
 80092e0:	bf00      	nop
 80092e2:	e7fe      	b.n	80092e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ea:	6850      	ldr	r0, [r2, #4]
 80092ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ee:	6892      	ldr	r2, [r2, #8]
 80092f0:	4611      	mov	r1, r2
 80092f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f2c0 80ab 	blt.w	8009452 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d004      	beq.n	8009312 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	3304      	adds	r3, #4
 800930c:	4618      	mov	r0, r3
 800930e:	f7fd fd8f 	bl	8006e30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009312:	463b      	mov	r3, r7
 8009314:	4618      	mov	r0, r3
 8009316:	f7ff ff6b 	bl	80091f0 <prvSampleTimeNow>
 800931a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b09      	cmp	r3, #9
 8009320:	f200 8096 	bhi.w	8009450 <prvProcessReceivedCommands+0x19c>
 8009324:	a201      	add	r2, pc, #4	; (adr r2, 800932c <prvProcessReceivedCommands+0x78>)
 8009326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932a:	bf00      	nop
 800932c:	08009355 	.word	0x08009355
 8009330:	08009355 	.word	0x08009355
 8009334:	08009355 	.word	0x08009355
 8009338:	080093c9 	.word	0x080093c9
 800933c:	080093dd 	.word	0x080093dd
 8009340:	08009427 	.word	0x08009427
 8009344:	08009355 	.word	0x08009355
 8009348:	08009355 	.word	0x08009355
 800934c:	080093c9 	.word	0x080093c9
 8009350:	080093dd 	.word	0x080093dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800935a:	f043 0301 	orr.w	r3, r3, #1
 800935e:	b2da      	uxtb	r2, r3
 8009360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	18d1      	adds	r1, r2, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009374:	f7ff ff5c 	bl	8009230 <prvInsertTimerInActiveList>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d069      	beq.n	8009452 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009384:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b00      	cmp	r3, #0
 8009392:	d05e      	beq.n	8009452 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	441a      	add	r2, r3
 800939c:	2300      	movs	r3, #0
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	2300      	movs	r3, #0
 80093a2:	2100      	movs	r1, #0
 80093a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a6:	f7ff fe05 	bl	8008fb4 <xTimerGenericCommand>
 80093aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d14f      	bne.n	8009452 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	61bb      	str	r3, [r7, #24]
}
 80093c4:	bf00      	nop
 80093c6:	e7fe      	b.n	80093c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ce:	f023 0301 	bic.w	r3, r3, #1
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80093da:	e03a      	b.n	8009452 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	617b      	str	r3, [r7, #20]
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	699a      	ldr	r2, [r3, #24]
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	18d1      	adds	r1, r2, r3
 800941a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009420:	f7ff ff06 	bl	8009230 <prvInsertTimerInActiveList>
					break;
 8009424:	e015      	b.n	8009452 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d103      	bne.n	800943c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009436:	f000 fbf3 	bl	8009c20 <vPortFree>
 800943a:	e00a      	b.n	8009452 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009442:	f023 0301 	bic.w	r3, r3, #1
 8009446:	b2da      	uxtb	r2, r3
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800944e:	e000      	b.n	8009452 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009450:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009452:	4b08      	ldr	r3, [pc, #32]	; (8009474 <prvProcessReceivedCommands+0x1c0>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	1d39      	adds	r1, r7, #4
 8009458:	2200      	movs	r2, #0
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe f97c 	bl	8007758 <xQueueReceive>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	f47f af2a 	bne.w	80092bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	3730      	adds	r7, #48	; 0x30
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	20001d90 	.word	0x20001d90

08009478 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800947e:	e048      	b.n	8009512 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009480:	4b2d      	ldr	r3, [pc, #180]	; (8009538 <prvSwitchTimerLists+0xc0>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800948a:	4b2b      	ldr	r3, [pc, #172]	; (8009538 <prvSwitchTimerLists+0xc0>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3304      	adds	r3, #4
 8009498:	4618      	mov	r0, r3
 800949a:	f7fd fcc9 	bl	8006e30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d02e      	beq.n	8009512 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	4413      	add	r3, r2
 80094bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d90e      	bls.n	80094e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094d2:	4b19      	ldr	r3, [pc, #100]	; (8009538 <prvSwitchTimerLists+0xc0>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3304      	adds	r3, #4
 80094da:	4619      	mov	r1, r3
 80094dc:	4610      	mov	r0, r2
 80094de:	f7fd fc6e 	bl	8006dbe <vListInsert>
 80094e2:	e016      	b.n	8009512 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094e4:	2300      	movs	r3, #0
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	2300      	movs	r3, #0
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	2100      	movs	r1, #0
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f7ff fd60 	bl	8008fb4 <xTimerGenericCommand>
 80094f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	603b      	str	r3, [r7, #0]
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009512:	4b09      	ldr	r3, [pc, #36]	; (8009538 <prvSwitchTimerLists+0xc0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1b1      	bne.n	8009480 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800951c:	4b06      	ldr	r3, [pc, #24]	; (8009538 <prvSwitchTimerLists+0xc0>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009522:	4b06      	ldr	r3, [pc, #24]	; (800953c <prvSwitchTimerLists+0xc4>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a04      	ldr	r2, [pc, #16]	; (8009538 <prvSwitchTimerLists+0xc0>)
 8009528:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800952a:	4a04      	ldr	r2, [pc, #16]	; (800953c <prvSwitchTimerLists+0xc4>)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	6013      	str	r3, [r2, #0]
}
 8009530:	bf00      	nop
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20001d88 	.word	0x20001d88
 800953c:	20001d8c 	.word	0x20001d8c

08009540 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009544:	f000 f96e 	bl	8009824 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009548:	4b12      	ldr	r3, [pc, #72]	; (8009594 <prvCheckForValidListAndQueue+0x54>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d11d      	bne.n	800958c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009550:	4811      	ldr	r0, [pc, #68]	; (8009598 <prvCheckForValidListAndQueue+0x58>)
 8009552:	f7fd fbe3 	bl	8006d1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009556:	4811      	ldr	r0, [pc, #68]	; (800959c <prvCheckForValidListAndQueue+0x5c>)
 8009558:	f7fd fbe0 	bl	8006d1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800955c:	4b10      	ldr	r3, [pc, #64]	; (80095a0 <prvCheckForValidListAndQueue+0x60>)
 800955e:	4a0e      	ldr	r2, [pc, #56]	; (8009598 <prvCheckForValidListAndQueue+0x58>)
 8009560:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009562:	4b10      	ldr	r3, [pc, #64]	; (80095a4 <prvCheckForValidListAndQueue+0x64>)
 8009564:	4a0d      	ldr	r2, [pc, #52]	; (800959c <prvCheckForValidListAndQueue+0x5c>)
 8009566:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009568:	2200      	movs	r2, #0
 800956a:	2110      	movs	r1, #16
 800956c:	2014      	movs	r0, #20
 800956e:	f7fd fcf1 	bl	8006f54 <xQueueGenericCreate>
 8009572:	4603      	mov	r3, r0
 8009574:	4a07      	ldr	r2, [pc, #28]	; (8009594 <prvCheckForValidListAndQueue+0x54>)
 8009576:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009578:	4b06      	ldr	r3, [pc, #24]	; (8009594 <prvCheckForValidListAndQueue+0x54>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d005      	beq.n	800958c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009580:	4b04      	ldr	r3, [pc, #16]	; (8009594 <prvCheckForValidListAndQueue+0x54>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4908      	ldr	r1, [pc, #32]	; (80095a8 <prvCheckForValidListAndQueue+0x68>)
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe fc22 	bl	8007dd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800958c:	f000 f97a 	bl	8009884 <vPortExitCritical>
}
 8009590:	bf00      	nop
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20001d90 	.word	0x20001d90
 8009598:	20001d60 	.word	0x20001d60
 800959c:	20001d74 	.word	0x20001d74
 80095a0:	20001d88 	.word	0x20001d88
 80095a4:	20001d8c 	.word	0x20001d8c
 80095a8:	0800a938 	.word	0x0800a938

080095ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3b04      	subs	r3, #4
 80095bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3b04      	subs	r3, #4
 80095ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f023 0201 	bic.w	r2, r3, #1
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3b04      	subs	r3, #4
 80095da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095dc:	4a0c      	ldr	r2, [pc, #48]	; (8009610 <pxPortInitialiseStack+0x64>)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3b14      	subs	r3, #20
 80095e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3b04      	subs	r3, #4
 80095f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f06f 0202 	mvn.w	r2, #2
 80095fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3b20      	subs	r3, #32
 8009600:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009602:	68fb      	ldr	r3, [r7, #12]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	08009615 	.word	0x08009615

08009614 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800961e:	4b12      	ldr	r3, [pc, #72]	; (8009668 <prvTaskExitError+0x54>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009626:	d00a      	beq.n	800963e <prvTaskExitError+0x2a>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	60fb      	str	r3, [r7, #12]
}
 800963a:	bf00      	nop
 800963c:	e7fe      	b.n	800963c <prvTaskExitError+0x28>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	60bb      	str	r3, [r7, #8]
}
 8009650:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009652:	bf00      	nop
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0fc      	beq.n	8009654 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800965a:	bf00      	nop
 800965c:	bf00      	nop
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	20000018 	.word	0x20000018
 800966c:	00000000 	.word	0x00000000

08009670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <pxCurrentTCBConst2>)
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	6808      	ldr	r0, [r1, #0]
 8009676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967a:	f380 8809 	msr	PSP, r0
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f04f 0000 	mov.w	r0, #0
 8009686:	f380 8811 	msr	BASEPRI, r0
 800968a:	4770      	bx	lr
 800968c:	f3af 8000 	nop.w

08009690 <pxCurrentTCBConst2>:
 8009690:	20001c34 	.word	0x20001c34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop

08009698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009698:	4808      	ldr	r0, [pc, #32]	; (80096bc <prvPortStartFirstTask+0x24>)
 800969a:	6800      	ldr	r0, [r0, #0]
 800969c:	6800      	ldr	r0, [r0, #0]
 800969e:	f380 8808 	msr	MSP, r0
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8814 	msr	CONTROL, r0
 80096aa:	b662      	cpsie	i
 80096ac:	b661      	cpsie	f
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	df00      	svc	0
 80096b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096ba:	bf00      	nop
 80096bc:	e000ed08 	.word	0xe000ed08

080096c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096c6:	4b4e      	ldr	r3, [pc, #312]	; (8009800 <xPortStartScheduler+0x140>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a4e      	ldr	r2, [pc, #312]	; (8009804 <xPortStartScheduler+0x144>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d10a      	bne.n	80096e6 <xPortStartScheduler+0x26>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	61bb      	str	r3, [r7, #24]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096e6:	4b46      	ldr	r3, [pc, #280]	; (8009800 <xPortStartScheduler+0x140>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a47      	ldr	r2, [pc, #284]	; (8009808 <xPortStartScheduler+0x148>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d10a      	bne.n	8009706 <xPortStartScheduler+0x46>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	617b      	str	r3, [r7, #20]
}
 8009702:	bf00      	nop
 8009704:	e7fe      	b.n	8009704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009706:	4b41      	ldr	r3, [pc, #260]	; (800980c <xPortStartScheduler+0x14c>)
 8009708:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	b2db      	uxtb	r3, r3
 8009710:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	22ff      	movs	r2, #255	; 0xff
 8009716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009728:	b2da      	uxtb	r2, r3
 800972a:	4b39      	ldr	r3, [pc, #228]	; (8009810 <xPortStartScheduler+0x150>)
 800972c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800972e:	4b39      	ldr	r3, [pc, #228]	; (8009814 <xPortStartScheduler+0x154>)
 8009730:	2207      	movs	r2, #7
 8009732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009734:	e009      	b.n	800974a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009736:	4b37      	ldr	r3, [pc, #220]	; (8009814 <xPortStartScheduler+0x154>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3b01      	subs	r3, #1
 800973c:	4a35      	ldr	r2, [pc, #212]	; (8009814 <xPortStartScheduler+0x154>)
 800973e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	b2db      	uxtb	r3, r3
 8009748:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	b2db      	uxtb	r3, r3
 800974e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009752:	2b80      	cmp	r3, #128	; 0x80
 8009754:	d0ef      	beq.n	8009736 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8009756:	4b2f      	ldr	r3, [pc, #188]	; (8009814 <xPortStartScheduler+0x154>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f1c3 0307 	rsb	r3, r3, #7
 800975e:	2b04      	cmp	r3, #4
 8009760:	d00a      	beq.n	8009778 <xPortStartScheduler+0xb8>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	613b      	str	r3, [r7, #16]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009778:	4b26      	ldr	r3, [pc, #152]	; (8009814 <xPortStartScheduler+0x154>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f1c3 0307 	rsb	r3, r3, #7
 8009780:	2b04      	cmp	r3, #4
 8009782:	d00a      	beq.n	800979a <xPortStartScheduler+0xda>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	60fb      	str	r3, [r7, #12]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800979a:	4b1e      	ldr	r3, [pc, #120]	; (8009814 <xPortStartScheduler+0x154>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	021b      	lsls	r3, r3, #8
 80097a0:	4a1c      	ldr	r2, [pc, #112]	; (8009814 <xPortStartScheduler+0x154>)
 80097a2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097a4:	4b1b      	ldr	r3, [pc, #108]	; (8009814 <xPortStartScheduler+0x154>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ac:	4a19      	ldr	r2, [pc, #100]	; (8009814 <xPortStartScheduler+0x154>)
 80097ae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097b8:	4b17      	ldr	r3, [pc, #92]	; (8009818 <xPortStartScheduler+0x158>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a16      	ldr	r2, [pc, #88]	; (8009818 <xPortStartScheduler+0x158>)
 80097be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097c2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097c4:	4b14      	ldr	r3, [pc, #80]	; (8009818 <xPortStartScheduler+0x158>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a13      	ldr	r2, [pc, #76]	; (8009818 <xPortStartScheduler+0x158>)
 80097ca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097ce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097d0:	f000 f8dc 	bl	800998c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097d4:	4b11      	ldr	r3, [pc, #68]	; (800981c <xPortStartScheduler+0x15c>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097da:	f000 f8fb 	bl	80099d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097de:	4b10      	ldr	r3, [pc, #64]	; (8009820 <xPortStartScheduler+0x160>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a0f      	ldr	r2, [pc, #60]	; (8009820 <xPortStartScheduler+0x160>)
 80097e4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097e8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097ea:	f7ff ff55 	bl	8009698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097ee:	f7fe ff61 	bl	80086b4 <vTaskSwitchContext>
	prvTaskExitError();
 80097f2:	f7ff ff0f 	bl	8009614 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	e000ed00 	.word	0xe000ed00
 8009804:	410fc271 	.word	0x410fc271
 8009808:	410fc270 	.word	0x410fc270
 800980c:	e000e400 	.word	0xe000e400
 8009810:	20001d9c 	.word	0x20001d9c
 8009814:	20001da0 	.word	0x20001da0
 8009818:	e000ed20 	.word	0xe000ed20
 800981c:	20000018 	.word	0x20000018
 8009820:	e000ef34 	.word	0xe000ef34

08009824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	607b      	str	r3, [r7, #4]
}
 800983c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800983e:	4b0f      	ldr	r3, [pc, #60]	; (800987c <vPortEnterCritical+0x58>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3301      	adds	r3, #1
 8009844:	4a0d      	ldr	r2, [pc, #52]	; (800987c <vPortEnterCritical+0x58>)
 8009846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009848:	4b0c      	ldr	r3, [pc, #48]	; (800987c <vPortEnterCritical+0x58>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d10f      	bne.n	8009870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009850:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <vPortEnterCritical+0x5c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00a      	beq.n	8009870 <vPortEnterCritical+0x4c>
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	603b      	str	r3, [r7, #0]
}
 800986c:	bf00      	nop
 800986e:	e7fe      	b.n	800986e <vPortEnterCritical+0x4a>
	}
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	20000018 	.word	0x20000018
 8009880:	e000ed04 	.word	0xe000ed04

08009884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800988a:	4b12      	ldr	r3, [pc, #72]	; (80098d4 <vPortExitCritical+0x50>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10a      	bne.n	80098a8 <vPortExitCritical+0x24>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	607b      	str	r3, [r7, #4]
}
 80098a4:	bf00      	nop
 80098a6:	e7fe      	b.n	80098a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098a8:	4b0a      	ldr	r3, [pc, #40]	; (80098d4 <vPortExitCritical+0x50>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	4a09      	ldr	r2, [pc, #36]	; (80098d4 <vPortExitCritical+0x50>)
 80098b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098b2:	4b08      	ldr	r3, [pc, #32]	; (80098d4 <vPortExitCritical+0x50>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d105      	bne.n	80098c6 <vPortExitCritical+0x42>
 80098ba:	2300      	movs	r3, #0
 80098bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	f383 8811 	msr	BASEPRI, r3
}
 80098c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20000018 	.word	0x20000018
	...

080098e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098e0:	f3ef 8009 	mrs	r0, PSP
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	4b15      	ldr	r3, [pc, #84]	; (8009940 <pxCurrentTCBConst>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	f01e 0f10 	tst.w	lr, #16
 80098f0:	bf08      	it	eq
 80098f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fa:	6010      	str	r0, [r2, #0]
 80098fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009904:	f380 8811 	msr	BASEPRI, r0
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f7fe fed0 	bl	80086b4 <vTaskSwitchContext>
 8009914:	f04f 0000 	mov.w	r0, #0
 8009918:	f380 8811 	msr	BASEPRI, r0
 800991c:	bc09      	pop	{r0, r3}
 800991e:	6819      	ldr	r1, [r3, #0]
 8009920:	6808      	ldr	r0, [r1, #0]
 8009922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009926:	f01e 0f10 	tst.w	lr, #16
 800992a:	bf08      	it	eq
 800992c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009930:	f380 8809 	msr	PSP, r0
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w

08009940 <pxCurrentTCBConst>:
 8009940:	20001c34 	.word	0x20001c34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop

08009948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	607b      	str	r3, [r7, #4]
}
 8009960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009962:	f7fe fdbd 	bl	80084e0 <xTaskIncrementTick>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800996c:	4b06      	ldr	r3, [pc, #24]	; (8009988 <SysTick_Handler+0x40>)
 800996e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	2300      	movs	r3, #0
 8009976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	f383 8811 	msr	BASEPRI, r3
}
 800997e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	e000ed04 	.word	0xe000ed04

0800998c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800998c:	b480      	push	{r7}
 800998e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009990:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <vPortSetupTimerInterrupt+0x34>)
 8009992:	2200      	movs	r2, #0
 8009994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009996:	4b0b      	ldr	r3, [pc, #44]	; (80099c4 <vPortSetupTimerInterrupt+0x38>)
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800999c:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <vPortSetupTimerInterrupt+0x3c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <vPortSetupTimerInterrupt+0x40>)
 80099a2:	fba2 2303 	umull	r2, r3, r2, r3
 80099a6:	099b      	lsrs	r3, r3, #6
 80099a8:	4a09      	ldr	r2, [pc, #36]	; (80099d0 <vPortSetupTimerInterrupt+0x44>)
 80099aa:	3b01      	subs	r3, #1
 80099ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ae:	4b04      	ldr	r3, [pc, #16]	; (80099c0 <vPortSetupTimerInterrupt+0x34>)
 80099b0:	2207      	movs	r2, #7
 80099b2:	601a      	str	r2, [r3, #0]
}
 80099b4:	bf00      	nop
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	e000e010 	.word	0xe000e010
 80099c4:	e000e018 	.word	0xe000e018
 80099c8:	20000000 	.word	0x20000000
 80099cc:	10624dd3 	.word	0x10624dd3
 80099d0:	e000e014 	.word	0xe000e014

080099d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099e4 <vPortEnableVFP+0x10>
 80099d8:	6801      	ldr	r1, [r0, #0]
 80099da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099de:	6001      	str	r1, [r0, #0]
 80099e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099e2:	bf00      	nop
 80099e4:	e000ed88 	.word	0xe000ed88

080099e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099ee:	f3ef 8305 	mrs	r3, IPSR
 80099f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b0f      	cmp	r3, #15
 80099f8:	d914      	bls.n	8009a24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099fa:	4a17      	ldr	r2, [pc, #92]	; (8009a58 <vPortValidateInterruptPriority+0x70>)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4413      	add	r3, r2
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a04:	4b15      	ldr	r3, [pc, #84]	; (8009a5c <vPortValidateInterruptPriority+0x74>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	7afa      	ldrb	r2, [r7, #11]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d20a      	bcs.n	8009a24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	607b      	str	r3, [r7, #4]
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a24:	4b0e      	ldr	r3, [pc, #56]	; (8009a60 <vPortValidateInterruptPriority+0x78>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a2c:	4b0d      	ldr	r3, [pc, #52]	; (8009a64 <vPortValidateInterruptPriority+0x7c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d90a      	bls.n	8009a4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	603b      	str	r3, [r7, #0]
}
 8009a46:	bf00      	nop
 8009a48:	e7fe      	b.n	8009a48 <vPortValidateInterruptPriority+0x60>
	}
 8009a4a:	bf00      	nop
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	e000e3f0 	.word	0xe000e3f0
 8009a5c:	20001d9c 	.word	0x20001d9c
 8009a60:	e000ed0c 	.word	0xe000ed0c
 8009a64:	20001da0 	.word	0x20001da0

08009a68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08a      	sub	sp, #40	; 0x28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a70:	2300      	movs	r3, #0
 8009a72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a74:	f7fe fc64 	bl	8008340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a78:	4b63      	ldr	r3, [pc, #396]	; (8009c08 <pvPortMalloc+0x1a0>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a80:	f000 f938 	bl	8009cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a84:	4b61      	ldr	r3, [pc, #388]	; (8009c0c <pvPortMalloc+0x1a4>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f040 8093 	bne.w	8009bb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01d      	beq.n	8009ad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a98:	2208      	movs	r2, #8
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f003 0307 	and.w	r3, r3, #7
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d014      	beq.n	8009ad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f023 0307 	bic.w	r3, r3, #7
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00a      	beq.n	8009ad4 <pvPortMalloc+0x6c>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	617b      	str	r3, [r7, #20]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d06e      	beq.n	8009bb8 <pvPortMalloc+0x150>
 8009ada:	4b4d      	ldr	r3, [pc, #308]	; (8009c10 <pvPortMalloc+0x1a8>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d869      	bhi.n	8009bb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ae4:	4b4b      	ldr	r3, [pc, #300]	; (8009c14 <pvPortMalloc+0x1ac>)
 8009ae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ae8:	4b4a      	ldr	r3, [pc, #296]	; (8009c14 <pvPortMalloc+0x1ac>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aee:	e004      	b.n	8009afa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d903      	bls.n	8009b0c <pvPortMalloc+0xa4>
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1f1      	bne.n	8009af0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b0c:	4b3e      	ldr	r3, [pc, #248]	; (8009c08 <pvPortMalloc+0x1a0>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d050      	beq.n	8009bb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2208      	movs	r2, #8
 8009b1c:	4413      	add	r3, r2
 8009b1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	2308      	movs	r3, #8
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d91f      	bls.n	8009b78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <pvPortMalloc+0xf8>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	613b      	str	r3, [r7, #16]
}
 8009b5c:	bf00      	nop
 8009b5e:	e7fe      	b.n	8009b5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	1ad2      	subs	r2, r2, r3
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b72:	69b8      	ldr	r0, [r7, #24]
 8009b74:	f000 f920 	bl	8009db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b78:	4b25      	ldr	r3, [pc, #148]	; (8009c10 <pvPortMalloc+0x1a8>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	4a23      	ldr	r2, [pc, #140]	; (8009c10 <pvPortMalloc+0x1a8>)
 8009b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b86:	4b22      	ldr	r3, [pc, #136]	; (8009c10 <pvPortMalloc+0x1a8>)
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	4b23      	ldr	r3, [pc, #140]	; (8009c18 <pvPortMalloc+0x1b0>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d203      	bcs.n	8009b9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b92:	4b1f      	ldr	r3, [pc, #124]	; (8009c10 <pvPortMalloc+0x1a8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a20      	ldr	r2, [pc, #128]	; (8009c18 <pvPortMalloc+0x1b0>)
 8009b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <pvPortMalloc+0x1a4>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bae:	4b1b      	ldr	r3, [pc, #108]	; (8009c1c <pvPortMalloc+0x1b4>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	4a19      	ldr	r2, [pc, #100]	; (8009c1c <pvPortMalloc+0x1b4>)
 8009bb6:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d006      	beq.n	8009bcc <pvPortMalloc+0x164>
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	2094      	movs	r0, #148	; 0x94
 8009bc6:	f7f7 fe13 	bl	80017f0 <vTraceStoreMemMangEvent>
 8009bca:	e005      	b.n	8009bd8 <pvPortMalloc+0x170>
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	20e8      	movs	r0, #232	; 0xe8
 8009bd4:	f7f7 fe0c 	bl	80017f0 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 8009bd8:	f7fe fbc0 	bl	800835c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00a      	beq.n	8009bfc <pvPortMalloc+0x194>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	60fb      	str	r3, [r7, #12]
}
 8009bf8:	bf00      	nop
 8009bfa:	e7fe      	b.n	8009bfa <pvPortMalloc+0x192>
	return pvReturn;
 8009bfc:	69fb      	ldr	r3, [r7, #28]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3728      	adds	r7, #40	; 0x28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	200059ac 	.word	0x200059ac
 8009c0c:	200059c0 	.word	0x200059c0
 8009c10:	200059b0 	.word	0x200059b0
 8009c14:	200059a4 	.word	0x200059a4
 8009c18:	200059b4 	.word	0x200059b4
 8009c1c:	200059b8 	.word	0x200059b8

08009c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d055      	beq.n	8009cde <vPortFree+0xbe>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c32:	2308      	movs	r3, #8
 8009c34:	425b      	negs	r3, r3
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	4413      	add	r3, r2
 8009c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	4b28      	ldr	r3, [pc, #160]	; (8009ce8 <vPortFree+0xc8>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <vPortFree+0x44>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	60fb      	str	r3, [r7, #12]
}
 8009c60:	bf00      	nop
 8009c62:	e7fe      	b.n	8009c62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00a      	beq.n	8009c82 <vPortFree+0x62>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	60bb      	str	r3, [r7, #8]
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	4b18      	ldr	r3, [pc, #96]	; (8009ce8 <vPortFree+0xc8>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d026      	beq.n	8009cde <vPortFree+0xbe>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d122      	bne.n	8009cde <vPortFree+0xbe>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	4b12      	ldr	r3, [pc, #72]	; (8009ce8 <vPortFree+0xc8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	43db      	mvns	r3, r3
 8009ca2:	401a      	ands	r2, r3
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ca8:	f7fe fb4a 	bl	8008340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	4b0e      	ldr	r3, [pc, #56]	; (8009cec <vPortFree+0xcc>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	4a0d      	ldr	r2, [pc, #52]	; (8009cec <vPortFree+0xcc>)
 8009cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	425b      	negs	r3, r3
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	2096      	movs	r0, #150	; 0x96
 8009cc6:	f7f7 fd93 	bl	80017f0 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cca:	6938      	ldr	r0, [r7, #16]
 8009ccc:	f000 f874 	bl	8009db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <vPortFree+0xd0>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	4a06      	ldr	r2, [pc, #24]	; (8009cf0 <vPortFree+0xd0>)
 8009cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cda:	f7fe fb3f 	bl	800835c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cde:	bf00      	nop
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200059c0 	.word	0x200059c0
 8009cec:	200059b0 	.word	0x200059b0
 8009cf0:	200059bc 	.word	0x200059bc

08009cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d00:	4b27      	ldr	r3, [pc, #156]	; (8009da0 <prvHeapInit+0xac>)
 8009d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00c      	beq.n	8009d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3307      	adds	r3, #7
 8009d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0307 	bic.w	r3, r3, #7
 8009d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	4a1f      	ldr	r2, [pc, #124]	; (8009da0 <prvHeapInit+0xac>)
 8009d24:	4413      	add	r3, r2
 8009d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <prvHeapInit+0xb0>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d32:	4b1c      	ldr	r3, [pc, #112]	; (8009da4 <prvHeapInit+0xb0>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d40:	2208      	movs	r2, #8
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <prvHeapInit+0xb4>)
 8009d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d56:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <prvHeapInit+0xb4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <prvHeapInit+0xb4>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d74:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <prvHeapInit+0xb4>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4a0a      	ldr	r2, [pc, #40]	; (8009dac <prvHeapInit+0xb8>)
 8009d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4a09      	ldr	r2, [pc, #36]	; (8009db0 <prvHeapInit+0xbc>)
 8009d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d8c:	4b09      	ldr	r3, [pc, #36]	; (8009db4 <prvHeapInit+0xc0>)
 8009d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d92:	601a      	str	r2, [r3, #0]
}
 8009d94:	bf00      	nop
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20001da4 	.word	0x20001da4
 8009da4:	200059a4 	.word	0x200059a4
 8009da8:	200059ac 	.word	0x200059ac
 8009dac:	200059b4 	.word	0x200059b4
 8009db0:	200059b0 	.word	0x200059b0
 8009db4:	200059c0 	.word	0x200059c0

08009db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dc0:	4b28      	ldr	r3, [pc, #160]	; (8009e64 <prvInsertBlockIntoFreeList+0xac>)
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e002      	b.n	8009dcc <prvInsertBlockIntoFreeList+0x14>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d8f7      	bhi.n	8009dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d108      	bne.n	8009dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	441a      	add	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	441a      	add	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d118      	bne.n	8009e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d00d      	beq.n	8009e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	441a      	add	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	e008      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e003      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d002      	beq.n	8009e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	200059a4 	.word	0x200059a4
 8009e68:	200059ac 	.word	0x200059ac

08009e6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fc fe20 	bl	8006ac0 <USBH_LL_IncTimer>
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fc fe64 	bl	8006b64 <USBH_LL_Connect>
}
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fc fe79 	bl	8006baa <USBH_LL_Disconnect>
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fc fe99 	bl	8006c0e <USBH_LL_NotifyURBChange>
#endif
}
 8009edc:	bf00      	nop
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fc fe0e 	bl	8006b14 <USBH_LL_PortEnabled>
}
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fc fe1a 	bl	8006b48 <USBH_LL_PortDisabled>
}
 8009f14:	bf00      	nop
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7f8 ff1b 	bl	8002d6e <HAL_HCD_Stop>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 f808 	bl	8009f54 <USBH_Get_USB_Status>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f62:	79fb      	ldrb	r3, [r7, #7]
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	d817      	bhi.n	8009f98 <USBH_Get_USB_Status+0x44>
 8009f68:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <USBH_Get_USB_Status+0x1c>)
 8009f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6e:	bf00      	nop
 8009f70:	08009f81 	.word	0x08009f81
 8009f74:	08009f87 	.word	0x08009f87
 8009f78:	08009f8d 	.word	0x08009f8d
 8009f7c:	08009f93 	.word	0x08009f93
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	73fb      	strb	r3, [r7, #15]
    break;
 8009f84:	e00b      	b.n	8009f9e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009f86:	2302      	movs	r3, #2
 8009f88:	73fb      	strb	r3, [r7, #15]
    break;
 8009f8a:	e008      	b.n	8009f9e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f90:	e005      	b.n	8009f9e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009f92:	2302      	movs	r3, #2
 8009f94:	73fb      	strb	r3, [r7, #15]
    break;
 8009f96:	e002      	b.n	8009f9e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009f98:	2302      	movs	r3, #2
 8009f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f9c:	bf00      	nop
  }
  return usb_status;
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <__malloc_lock>:
 8009fac:	4801      	ldr	r0, [pc, #4]	; (8009fb4 <__malloc_lock+0x8>)
 8009fae:	f000 b88b 	b.w	800a0c8 <__retarget_lock_acquire_recursive>
 8009fb2:	bf00      	nop
 8009fb4:	20005ee0 	.word	0x20005ee0

08009fb8 <__malloc_unlock>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	; (8009fc0 <__malloc_unlock+0x8>)
 8009fba:	f000 b886 	b.w	800a0ca <__retarget_lock_release_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	20005ee0 	.word	0x20005ee0

08009fc4 <memset>:
 8009fc4:	4402      	add	r2, r0
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d100      	bne.n	8009fce <memset+0xa>
 8009fcc:	4770      	bx	lr
 8009fce:	f803 1b01 	strb.w	r1, [r3], #1
 8009fd2:	e7f9      	b.n	8009fc8 <memset+0x4>

08009fd4 <_reclaim_reent>:
 8009fd4:	4b29      	ldr	r3, [pc, #164]	; (800a07c <_reclaim_reent+0xa8>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4283      	cmp	r3, r0
 8009fda:	b570      	push	{r4, r5, r6, lr}
 8009fdc:	4604      	mov	r4, r0
 8009fde:	d04b      	beq.n	800a078 <_reclaim_reent+0xa4>
 8009fe0:	69c3      	ldr	r3, [r0, #28]
 8009fe2:	b143      	cbz	r3, 8009ff6 <_reclaim_reent+0x22>
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d144      	bne.n	800a074 <_reclaim_reent+0xa0>
 8009fea:	69e3      	ldr	r3, [r4, #28]
 8009fec:	6819      	ldr	r1, [r3, #0]
 8009fee:	b111      	cbz	r1, 8009ff6 <_reclaim_reent+0x22>
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 f879 	bl	800a0e8 <_free_r>
 8009ff6:	6961      	ldr	r1, [r4, #20]
 8009ff8:	b111      	cbz	r1, 800a000 <_reclaim_reent+0x2c>
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 f874 	bl	800a0e8 <_free_r>
 800a000:	69e1      	ldr	r1, [r4, #28]
 800a002:	b111      	cbz	r1, 800a00a <_reclaim_reent+0x36>
 800a004:	4620      	mov	r0, r4
 800a006:	f000 f86f 	bl	800a0e8 <_free_r>
 800a00a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a00c:	b111      	cbz	r1, 800a014 <_reclaim_reent+0x40>
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 f86a 	bl	800a0e8 <_free_r>
 800a014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a016:	b111      	cbz	r1, 800a01e <_reclaim_reent+0x4a>
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 f865 	bl	800a0e8 <_free_r>
 800a01e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a020:	b111      	cbz	r1, 800a028 <_reclaim_reent+0x54>
 800a022:	4620      	mov	r0, r4
 800a024:	f000 f860 	bl	800a0e8 <_free_r>
 800a028:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a02a:	b111      	cbz	r1, 800a032 <_reclaim_reent+0x5e>
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 f85b 	bl	800a0e8 <_free_r>
 800a032:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a034:	b111      	cbz	r1, 800a03c <_reclaim_reent+0x68>
 800a036:	4620      	mov	r0, r4
 800a038:	f000 f856 	bl	800a0e8 <_free_r>
 800a03c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a03e:	b111      	cbz	r1, 800a046 <_reclaim_reent+0x72>
 800a040:	4620      	mov	r0, r4
 800a042:	f000 f851 	bl	800a0e8 <_free_r>
 800a046:	6a23      	ldr	r3, [r4, #32]
 800a048:	b1b3      	cbz	r3, 800a078 <_reclaim_reent+0xa4>
 800a04a:	4620      	mov	r0, r4
 800a04c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a050:	4718      	bx	r3
 800a052:	5949      	ldr	r1, [r1, r5]
 800a054:	b941      	cbnz	r1, 800a068 <_reclaim_reent+0x94>
 800a056:	3504      	adds	r5, #4
 800a058:	69e3      	ldr	r3, [r4, #28]
 800a05a:	2d80      	cmp	r5, #128	; 0x80
 800a05c:	68d9      	ldr	r1, [r3, #12]
 800a05e:	d1f8      	bne.n	800a052 <_reclaim_reent+0x7e>
 800a060:	4620      	mov	r0, r4
 800a062:	f000 f841 	bl	800a0e8 <_free_r>
 800a066:	e7c0      	b.n	8009fea <_reclaim_reent+0x16>
 800a068:	680e      	ldr	r6, [r1, #0]
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 f83c 	bl	800a0e8 <_free_r>
 800a070:	4631      	mov	r1, r6
 800a072:	e7ef      	b.n	800a054 <_reclaim_reent+0x80>
 800a074:	2500      	movs	r5, #0
 800a076:	e7ef      	b.n	800a058 <_reclaim_reent+0x84>
 800a078:	bd70      	pop	{r4, r5, r6, pc}
 800a07a:	bf00      	nop
 800a07c:	20000068 	.word	0x20000068

0800a080 <__libc_init_array>:
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	4d0d      	ldr	r5, [pc, #52]	; (800a0b8 <__libc_init_array+0x38>)
 800a084:	4c0d      	ldr	r4, [pc, #52]	; (800a0bc <__libc_init_array+0x3c>)
 800a086:	1b64      	subs	r4, r4, r5
 800a088:	10a4      	asrs	r4, r4, #2
 800a08a:	2600      	movs	r6, #0
 800a08c:	42a6      	cmp	r6, r4
 800a08e:	d109      	bne.n	800a0a4 <__libc_init_array+0x24>
 800a090:	4d0b      	ldr	r5, [pc, #44]	; (800a0c0 <__libc_init_array+0x40>)
 800a092:	4c0c      	ldr	r4, [pc, #48]	; (800a0c4 <__libc_init_array+0x44>)
 800a094:	f000 f874 	bl	800a180 <_init>
 800a098:	1b64      	subs	r4, r4, r5
 800a09a:	10a4      	asrs	r4, r4, #2
 800a09c:	2600      	movs	r6, #0
 800a09e:	42a6      	cmp	r6, r4
 800a0a0:	d105      	bne.n	800a0ae <__libc_init_array+0x2e>
 800a0a2:	bd70      	pop	{r4, r5, r6, pc}
 800a0a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0a8:	4798      	blx	r3
 800a0aa:	3601      	adds	r6, #1
 800a0ac:	e7ee      	b.n	800a08c <__libc_init_array+0xc>
 800a0ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b2:	4798      	blx	r3
 800a0b4:	3601      	adds	r6, #1
 800a0b6:	e7f2      	b.n	800a09e <__libc_init_array+0x1e>
 800a0b8:	0800a960 	.word	0x0800a960
 800a0bc:	0800a960 	.word	0x0800a960
 800a0c0:	0800a960 	.word	0x0800a960
 800a0c4:	0800a964 	.word	0x0800a964

0800a0c8 <__retarget_lock_acquire_recursive>:
 800a0c8:	4770      	bx	lr

0800a0ca <__retarget_lock_release_recursive>:
 800a0ca:	4770      	bx	lr

0800a0cc <memcpy>:
 800a0cc:	440a      	add	r2, r1
 800a0ce:	4291      	cmp	r1, r2
 800a0d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0d4:	d100      	bne.n	800a0d8 <memcpy+0xc>
 800a0d6:	4770      	bx	lr
 800a0d8:	b510      	push	{r4, lr}
 800a0da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0e2:	4291      	cmp	r1, r2
 800a0e4:	d1f9      	bne.n	800a0da <memcpy+0xe>
 800a0e6:	bd10      	pop	{r4, pc}

0800a0e8 <_free_r>:
 800a0e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0ea:	2900      	cmp	r1, #0
 800a0ec:	d044      	beq.n	800a178 <_free_r+0x90>
 800a0ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0f2:	9001      	str	r0, [sp, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f1a1 0404 	sub.w	r4, r1, #4
 800a0fa:	bfb8      	it	lt
 800a0fc:	18e4      	addlt	r4, r4, r3
 800a0fe:	f7ff ff55 	bl	8009fac <__malloc_lock>
 800a102:	4a1e      	ldr	r2, [pc, #120]	; (800a17c <_free_r+0x94>)
 800a104:	9801      	ldr	r0, [sp, #4]
 800a106:	6813      	ldr	r3, [r2, #0]
 800a108:	b933      	cbnz	r3, 800a118 <_free_r+0x30>
 800a10a:	6063      	str	r3, [r4, #4]
 800a10c:	6014      	str	r4, [r2, #0]
 800a10e:	b003      	add	sp, #12
 800a110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a114:	f7ff bf50 	b.w	8009fb8 <__malloc_unlock>
 800a118:	42a3      	cmp	r3, r4
 800a11a:	d908      	bls.n	800a12e <_free_r+0x46>
 800a11c:	6825      	ldr	r5, [r4, #0]
 800a11e:	1961      	adds	r1, r4, r5
 800a120:	428b      	cmp	r3, r1
 800a122:	bf01      	itttt	eq
 800a124:	6819      	ldreq	r1, [r3, #0]
 800a126:	685b      	ldreq	r3, [r3, #4]
 800a128:	1949      	addeq	r1, r1, r5
 800a12a:	6021      	streq	r1, [r4, #0]
 800a12c:	e7ed      	b.n	800a10a <_free_r+0x22>
 800a12e:	461a      	mov	r2, r3
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	b10b      	cbz	r3, 800a138 <_free_r+0x50>
 800a134:	42a3      	cmp	r3, r4
 800a136:	d9fa      	bls.n	800a12e <_free_r+0x46>
 800a138:	6811      	ldr	r1, [r2, #0]
 800a13a:	1855      	adds	r5, r2, r1
 800a13c:	42a5      	cmp	r5, r4
 800a13e:	d10b      	bne.n	800a158 <_free_r+0x70>
 800a140:	6824      	ldr	r4, [r4, #0]
 800a142:	4421      	add	r1, r4
 800a144:	1854      	adds	r4, r2, r1
 800a146:	42a3      	cmp	r3, r4
 800a148:	6011      	str	r1, [r2, #0]
 800a14a:	d1e0      	bne.n	800a10e <_free_r+0x26>
 800a14c:	681c      	ldr	r4, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	6053      	str	r3, [r2, #4]
 800a152:	440c      	add	r4, r1
 800a154:	6014      	str	r4, [r2, #0]
 800a156:	e7da      	b.n	800a10e <_free_r+0x26>
 800a158:	d902      	bls.n	800a160 <_free_r+0x78>
 800a15a:	230c      	movs	r3, #12
 800a15c:	6003      	str	r3, [r0, #0]
 800a15e:	e7d6      	b.n	800a10e <_free_r+0x26>
 800a160:	6825      	ldr	r5, [r4, #0]
 800a162:	1961      	adds	r1, r4, r5
 800a164:	428b      	cmp	r3, r1
 800a166:	bf04      	itt	eq
 800a168:	6819      	ldreq	r1, [r3, #0]
 800a16a:	685b      	ldreq	r3, [r3, #4]
 800a16c:	6063      	str	r3, [r4, #4]
 800a16e:	bf04      	itt	eq
 800a170:	1949      	addeq	r1, r1, r5
 800a172:	6021      	streq	r1, [r4, #0]
 800a174:	6054      	str	r4, [r2, #4]
 800a176:	e7ca      	b.n	800a10e <_free_r+0x26>
 800a178:	b003      	add	sp, #12
 800a17a:	bd30      	pop	{r4, r5, pc}
 800a17c:	20005da4 	.word	0x20005da4

0800a180 <_init>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	bf00      	nop
 800a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a186:	bc08      	pop	{r3}
 800a188:	469e      	mov	lr, r3
 800a18a:	4770      	bx	lr

0800a18c <_fini>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	bf00      	nop
 800a190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a192:	bc08      	pop	{r3}
 800a194:	469e      	mov	lr, r3
 800a196:	4770      	bx	lr
