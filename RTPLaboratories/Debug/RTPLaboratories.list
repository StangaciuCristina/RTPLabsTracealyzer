
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a698  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800a828  0800a828  0001a828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afec  0800afec  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800afec  0800afec  0001afec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aff4  0800aff4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aff4  0800aff4  0001aff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aff8  0800aff8  0001aff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800affc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00005e7c  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005ee8  20005ee8  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021a7d  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005078  00000000  00000000  00041b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ef8  00000000  00000000  00046bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001803  00000000  00000000  00048ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002826e  00000000  00000000  0004a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000281c1  00000000  00000000  00072541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ea586  00000000  00000000  0009a702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008714  00000000  00000000  00184c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0018d39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a810 	.word	0x0800a810

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a810 	.word	0x0800a810

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vHandlerTask>:
/* Stores the handle of the task to which interrupt processing is deferred. */
static TaskHandle_t xHandlerTask = NULL;


static void vHandlerTask( void *pvParameters )
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	/* xMaxExpectedBlockTime is set to be a little longer than the maximum expected
	time between events. */
	const TickType_t xMaxExpectedBlockTime = xInterruptFrequency + pdMS_TO_TICKS( 10 );
 80004d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004d8:	330a      	adds	r3, #10
 80004da:	60fb      	str	r3, [r7, #12]
		{
			/* Wait to receive a notification sent directly to this task from the
			interrupt handler.  The xClearCountOnExit parameter is now pdFALSE, so
			the task's notification will be decremented when ulTaskNotifyTake()
			returns having received a notification. */
			if( ulTaskNotifyTake( pdFALSE, xMaxExpectedBlockTime ) != 0 )
 80004dc:	68f9      	ldr	r1, [r7, #12]
 80004de:	2000      	movs	r0, #0
 80004e0:	f008 fe70 	bl	80091c4 <ulTaskNotifyTake>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f8      	beq.n	80004dc <vHandlerTask+0x10>
			{
				/* To get here the event must have occurred.  Process the event (in
				this case just print out a message). */
				HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 80004ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ee:	4802      	ldr	r0, [pc, #8]	; (80004f8 <vHandlerTask+0x2c>)
 80004f0:	f002 fb39 	bl	8002b66 <HAL_GPIO_TogglePin>
			if( ulTaskNotifyTake( pdFALSE, xMaxExpectedBlockTime ) != 0 )
 80004f4:	e7f2      	b.n	80004dc <vHandlerTask+0x10>
 80004f6:	bf00      	nop
 80004f8:	40020c00 	.word	0x40020c00

080004fc <vPeriodicTask>:
		}
}
/*-----------------------------------------------------------*/

static void vPeriodicTask( void *pvParameters )
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* This task is just used to 'simulate' an interrupt.  This is done by
		periodically generating a simulated software interrupt.  Block until it
		is time to generate the software interrupt again. */
		vTaskDelay( xInterruptFrequency );
 8000504:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000508:	4618      	mov	r0, r3
 800050a:	f007 ffd3 	bl	80084b4 <vTaskDelay>

		The syntax used to generate a software interrupt is dependent on the
		FreeRTOS port being used.  The syntax used below can only be used with
		the FreeRTOS Windows port, in which such interrupts are only
		simulated. */
		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 800050e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <vPeriodicTask+0x20>)
 8000514:	f002 fb27 	bl	8002b66 <HAL_GPIO_TogglePin>
		vTaskDelay( xInterruptFrequency );
 8000518:	e7f4      	b.n	8000504 <vPeriodicTask+0x8>
 800051a:	bf00      	nop
 800051c:	40020c00 	.word	0x40020c00

08000520 <EXTI0_IRQHandler>:
	}
}

void EXTI0_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;

	/* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
	it will get set to pdTRUE inside the interrupt safe API function if a
	context switch is required. */
	xHigherPriorityTaskWoken = pdFALSE;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]

	/* Send a notification to the handler task multiple times.  The first will
	unblock the task, the following 'gives' are to demonstrate that the
	receiving task's notification value is being used to latch events - allowing
	the task to process the events in turn. */
	vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <EXTI0_IRQHandler+0x4c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	1d3a      	adds	r2, r7, #4
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f008 ff2e 	bl	8009394 <vTaskNotifyGiveFromISR>
	vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <EXTI0_IRQHandler+0x4c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	1d3a      	adds	r2, r7, #4
 800053e:	4611      	mov	r1, r2
 8000540:	4618      	mov	r0, r3
 8000542:	f008 ff27 	bl	8009394 <vTaskNotifyGiveFromISR>
	vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <EXTI0_IRQHandler+0x4c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	1d3a      	adds	r2, r7, #4
 800054c:	4611      	mov	r1, r2
 800054e:	4618      	mov	r0, r3
 8000550:	f008 ff20 	bl	8009394 <vTaskNotifyGiveFromISR>


  HAL_GPIO_TogglePin(GPIOD, RED_LED);
 8000554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <EXTI0_IRQHandler+0x50>)
 800055a:	f002 fb04 	bl	8002b66 <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800055e:	2001      	movs	r0, #1
 8000560:	f002 fb1c 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000088 	.word	0x20000088
 8000570:	40020c00 	.word	0x40020c00

08000574 <application25>:


void application25(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af02      	add	r7, sp, #8
	processing is deferred, and so is the task that will be synchronized
	with the interrupt.  The handler task is created with a high priority to
	ensure it runs immediately after the interrupt exits.  In this case a
	priority of 3 is chosen.  The handle of the task is saved for use by the
	ISR. */
	xTaskCreate( vHandlerTask, "Handler", 1000, NULL, 3, &xHandlerTask );
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <application25+0x38>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2303      	movs	r3, #3
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000588:	4909      	ldr	r1, [pc, #36]	; (80005b0 <application25+0x3c>)
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <application25+0x40>)
 800058c:	f007 fdc2 	bl	8008114 <xTaskCreate>

	/* Create the task that will periodically generate a software interrupt.
	This is created with a priority below the handler task to ensure it will
	get preempted each time the handler task exits the Blocked state. */
	xTaskCreate( vPeriodicTask, "Periodic", 1000, NULL, 1, NULL );
 8000590:	2300      	movs	r3, #0
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2301      	movs	r3, #1
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800059e:	4906      	ldr	r1, [pc, #24]	; (80005b8 <application25+0x44>)
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <application25+0x48>)
 80005a2:	f007 fdb7 	bl	8008114 <xTaskCreate>


}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000088 	.word	0x20000088
 80005b0:	0800a828 	.word	0x0800a828
 80005b4:	080004cd 	.word	0x080004cd
 80005b8:	0800a830 	.word	0x0800a830
 80005bc:	080004fd 	.word	0x080004fd

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f001 fff6 	bl	80025b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f812 	bl	80005f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  vTraceEnable(TRC_START);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fee9 	bl	80013a4 <xTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f92f 	bl	8000834 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005d6:	f000 f875 	bl	80006c4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005da:	f000 f8a1 	bl	8000720 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005de:	f000 f8cf 	bl	8000780 <MX_SPI1_Init>
  MX_TIM11_Init();
 80005e2:	f000 f903 	bl	80007ec <MX_TIM11_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application25();
 80005e6:	f7ff ffc5 	bl	8000574 <application25>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80005ea:	f007 ffcf 	bl	800858c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0x2e>

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f00a f828 	bl	800a654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066e:	2307      	movs	r3, #7
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fe24 	bl	80052c4 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000682:	f000 f9ef 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000692:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2105      	movs	r1, #5
 80006a4:	4618      	mov	r0, r3
 80006a6:	f005 f885 	bl	80057b4 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b0:	f000 f9d8 	bl	8000a64 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <MX_I2C1_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_I2C1_Init+0x58>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_I2C1_Init+0x50>)
 80006e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_I2C1_Init+0x50>)
 8000702:	f003 fffb 	bl	80046fc <HAL_I2C_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 f9aa 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000008c 	.word	0x2000008c
 8000718:	40005400 	.word	0x40005400
 800071c:	000186a0 	.word	0x000186a0

08000720 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_I2S3_Init+0x54>)
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <MX_I2S3_Init+0x58>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2S3_Init+0x54>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_I2S3_Init+0x54>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2S3_Init+0x54>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_I2S3_Init+0x54>)
 8000740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000744:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_I2S3_Init+0x54>)
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <MX_I2S3_Init+0x5c>)
 800074a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2S3_Init+0x54>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_I2S3_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2S3_Init+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_I2S3_Init+0x54>)
 8000760:	f004 f910 	bl	8004984 <HAL_I2S_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800076a:	f000 f97b 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000e0 	.word	0x200000e0
 8000778:	40003c00 	.word	0x40003c00
 800077c:	00017700 	.word	0x00017700

08000780 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_SPI1_Init+0x64>)
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_SPI1_Init+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_SPI1_Init+0x64>)
 800078c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000790:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007cc:	220a      	movs	r2, #10
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007d2:	f005 fb83 	bl	8005edc <HAL_SPI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007dc:	f000 f942 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000128 	.word	0x20000128
 80007e8:	40013000 	.word	0x40013000

080007ec <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_TIM11_Init+0x40>)
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <MX_TIM11_Init+0x44>)
 80007f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_TIM11_Init+0x40>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_TIM11_Init+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_TIM11_Init+0x40>)
 8000804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000808:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_TIM11_Init+0x40>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_TIM11_Init+0x40>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_TIM11_Init+0x40>)
 8000818:	f005 fbe9 	bl	8005fee <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000822:	f000 f91f 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000180 	.word	0x20000180
 8000830:	40014800 	.word	0x40014800

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	4b76      	ldr	r3, [pc, #472]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a75      	ldr	r2, [pc, #468]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b73      	ldr	r3, [pc, #460]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	4b6f      	ldr	r3, [pc, #444]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a6e      	ldr	r2, [pc, #440]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b6c      	ldr	r3, [pc, #432]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a67      	ldr	r2, [pc, #412]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b65      	ldr	r3, [pc, #404]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b61      	ldr	r3, [pc, #388]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a60      	ldr	r2, [pc, #384]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b5e      	ldr	r3, [pc, #376]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b5a      	ldr	r3, [pc, #360]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a59      	ldr	r2, [pc, #356]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a52      	ldr	r2, [pc, #328]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b50      	ldr	r3, [pc, #320]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2108      	movs	r1, #8
 80008f6:	484d      	ldr	r0, [pc, #308]	; (8000a2c <MX_GPIO_Init+0x1f8>)
 80008f8:	f002 f91c 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2101      	movs	r1, #1
 8000900:	484b      	ldr	r0, [pc, #300]	; (8000a30 <MX_GPIO_Init+0x1fc>)
 8000902:	f002 f917 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000906:	2200      	movs	r2, #0
 8000908:	f24f 0110 	movw	r1, #61456	; 0xf010
 800090c:	4849      	ldr	r0, [pc, #292]	; (8000a34 <MX_GPIO_Init+0x200>)
 800090e:	f002 f911 	bl	8002b34 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000912:	2308      	movs	r3, #8
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4840      	ldr	r0, [pc, #256]	; (8000a2c <MX_GPIO_Init+0x1f8>)
 800092a:	f001 ff67 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	483a      	ldr	r0, [pc, #232]	; (8000a30 <MX_GPIO_Init+0x1fc>)
 8000946:	f001 ff59 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800094a:	2308      	movs	r3, #8
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095a:	2305      	movs	r3, #5
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4832      	ldr	r0, [pc, #200]	; (8000a30 <MX_GPIO_Init+0x1fc>)
 8000966:	f001 ff49 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800096a:	2301      	movs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	482e      	ldr	r0, [pc, #184]	; (8000a38 <MX_GPIO_Init+0x204>)
 8000980:	f001 ff3c 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000984:	2304      	movs	r3, #4
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4829      	ldr	r0, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x208>)
 8000998:	f001 ff30 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ae:	2305      	movs	r3, #5
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4820      	ldr	r0, [pc, #128]	; (8000a3c <MX_GPIO_Init+0x208>)
 80009ba:	f001 ff1f 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009be:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4817      	ldr	r0, [pc, #92]	; (8000a34 <MX_GPIO_Init+0x200>)
 80009d8:	f001 ff10 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009dc:	2320      	movs	r3, #32
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4811      	ldr	r0, [pc, #68]	; (8000a34 <MX_GPIO_Init+0x200>)
 80009f0:	f001 ff04 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4808      	ldr	r0, [pc, #32]	; (8000a2c <MX_GPIO_Init+0x1f8>)
 8000a0a:	f001 fef7 	bl	80027fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2105      	movs	r1, #5
 8000a12:	2006      	movs	r0, #6
 8000a14:	f001 fec8 	bl	80027a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a18:	2006      	movs	r0, #6
 8000a1a:	f001 fee1 	bl	80027e0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020400 	.word	0x40020400

08000a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d101      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a52:	f001 fdd1 	bl	80025f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010000 	.word	0x40010000

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_MspInit+0x54>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	f06f 0001 	mvn.w	r0, #1
 8000ab6:	f001 fe77 	bl	80027a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_I2C_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12c      	bne.n	8000b44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0c:	2312      	movs	r3, #18
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	480c      	ldr	r0, [pc, #48]	; (8000b54 <HAL_I2C_MspInit+0x8c>)
 8000b24:	f001 fe6a 	bl	80027fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400

08000b58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	; 0x38
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <HAL_I2S_MspInit+0xf0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d15a      	bne.n	8000c3e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b8c:	23c0      	movs	r3, #192	; 0xc0
 8000b8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f005 f85d 	bl	8005c58 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ba4:	f7ff ff5e 	bl	8000a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0c:	2306      	movs	r3, #6
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	480e      	ldr	r0, [pc, #56]	; (8000c50 <HAL_I2S_MspInit+0xf8>)
 8000c18:	f001 fdf0 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c1c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <HAL_I2S_MspInit+0xfc>)
 8000c3a:	f001 fddf 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	; 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40003c00 	.word	0x40003c00
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020800 	.word	0x40020800

08000c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12b      	bne.n	8000cd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cb2:	23e0      	movs	r3, #224	; 0xe0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_SPI_MspInit+0x8c>)
 8000cce:	f001 fd95 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d10d      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <HAL_TIM_Base_MspInit+0x40>)
 8000d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <HAL_TIM_Base_MspInit+0x40>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40014800 	.word	0x40014800
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <HAL_InitTick+0xd4>)
 8000d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d44:	4a2e      	ldr	r2, [pc, #184]	; (8000e00 <HAL_InitTick+0xd4>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <HAL_InitTick+0xd4>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d58:	f107 020c 	add.w	r2, r7, #12
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f004 ff46 	bl	8005bf4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d68:	f004 ff30 	bl	8005bcc <HAL_RCC_GetPCLK2Freq>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d74:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <HAL_InitTick+0xd8>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	0c9b      	lsrs	r3, r3, #18
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <HAL_InitTick+0xdc>)
 8000d82:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <HAL_InitTick+0xe0>)
 8000d84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_InitTick+0xdc>)
 8000d88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <HAL_InitTick+0xdc>)
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_InitTick+0xdc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_InitTick+0xdc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_InitTick+0xdc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000da6:	4818      	ldr	r0, [pc, #96]	; (8000e08 <HAL_InitTick+0xdc>)
 8000da8:	f005 f921 	bl	8005fee <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d11b      	bne.n	8000df2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000dba:	4813      	ldr	r0, [pc, #76]	; (8000e08 <HAL_InitTick+0xdc>)
 8000dbc:	f005 f966 	bl	800608c <HAL_TIM_Base_Start_IT>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d111      	bne.n	8000df2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dce:	2019      	movs	r0, #25
 8000dd0:	f001 fd06 	bl	80027e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	d808      	bhi.n	8000dec <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	2019      	movs	r0, #25
 8000de0:	f001 fce2 	bl	80027a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_InitTick+0xe4>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e002      	b.n	8000df2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3730      	adds	r7, #48	; 0x30
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	431bde83 	.word	0x431bde83
 8000e08:	200001c8 	.word	0x200001c8
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	20000010 	.word	0x20000010

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e46:	f005 f991 	bl	800616c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200001c8 	.word	0x200001c8

08000e54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <OTG_FS_IRQHandler+0x10>)
 8000e5a:	f001 fec2 	bl	8002be2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200059c8 	.word	0x200059c8

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e90:	f7ff ffea 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	; (8000ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f009 fc29 	bl	800a710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fb7f 	bl	80005c0 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ed0:	0800affc 	.word	0x0800affc
  ldr r2, =_sbss
 8000ed4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ed8:	20005ee8 	.word	0x20005ee8

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>

08000ede <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f006 febc 	bl	8007c64 <uxQueueGetQueueNumber>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(pvQueue);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f006 feca 	bl	8007c98 <ucQueueGetQueueType>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(pvTask));
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f007 ff78 	bl	8008e0c <uxTaskGetTaskNumber>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b29b      	uxth	r3, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(pvTask));
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f007 ff6b 	bl	8008e0c <uxTaskGetTaskNumber>
 8000f36:	4603      	mov	r3, r0
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	b29b      	uxth	r3, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber(pvTask), uiValue));
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f007 ff5b 	bl	8008e0c <uxTaskGetTaskNumber>
 8000f56:	4603      	mov	r3, r0
 8000f58:	0c1b      	lsrs	r3, r3, #16
 8000f5a:	041b      	lsls	r3, r3, #16
 8000f5c:	887a      	ldrh	r2, [r7, #2]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f007 ff68 	bl	8008e38 <vTaskSetTaskNumber>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber(pvTask), uiValue));
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f007 ff45 	bl	8008e0c <uxTaskGetTaskNumber>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f007 ff52 	bl	8008e38 <vTaskSetTaskNumber>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff9a 	bl	8000ede <prvTraceGetQueueNumber>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29b      	uxth	r3, r3
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff8d 	bl	8000ede <prvTraceGetQueueNumber>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	0c1b      	lsrs	r3, r3, #16
 8000fc8:	b29b      	uxth	r3, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff7d 	bl	8000ede <prvTraceGetQueueNumber>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	041b      	lsls	r3, r3, #16
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f006 fe43 	bl	8007c7c <vQueueSetQueueNumber>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff67 	bl	8000ede <prvTraceGetQueueNumber>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	041b      	lsls	r3, r3, #16
 8001018:	4313      	orrs	r3, r2
 800101a:	4619      	mov	r1, r3
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f006 fe2d 	bl	8007c7c <vQueueSetQueueNumber>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 800102e:	f007 ffd3 	bl	8008fd8 <xTaskGetCurrentTaskHandle>
 8001032:	4603      	mov	r3, r0
}
 8001034:	4618      	mov	r0, r3
 8001036:	bd80      	pop	{r7, pc}

08001038 <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8001064:	4b64      	ldr	r3, [pc, #400]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2209      	movs	r2, #9
 800106a:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 800106c:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	220a      	movs	r2, #10
 8001072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8001076:	4b60      	ldr	r3, [pc, #384]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	220a      	movs	r2, #10
 800107c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8001080:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	220a      	movs	r2, #10
 8001086:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 800108a:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	220f      	movs	r2, #15
 8001090:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8001094:	4b58      	ldr	r3, [pc, #352]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2205      	movs	r2, #5
 800109a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 800109e:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2205      	movs	r2, #5
 80010a4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80010a8:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2205      	movs	r2, #5
 80010ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 80010b2:	4b51      	ldr	r3, [pc, #324]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2205      	movs	r2, #5
 80010b8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 80010bc:	4b4e      	ldr	r3, [pc, #312]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2205      	movs	r2, #5
 80010c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 80010c6:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	220f      	movs	r2, #15
 80010cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	220f      	movs	r2, #15
 80010d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 80010da:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	220f      	movs	r2, #15
 80010e0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 80010e4:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	220f      	movs	r2, #15
 80010ea:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 80010ee:	4b42      	ldr	r3, [pc, #264]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	220f      	movs	r2, #15
 80010f4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 80010f8:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	220f      	movs	r2, #15
 80010fe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	220f      	movs	r2, #15
 8001108:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 800110c:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	220f      	movs	r2, #15
 8001112:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	220f      	movs	r2, #15
 800111c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2210      	movs	r2, #16
 8001126:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800112a:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2210      	movs	r2, #16
 8001130:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8001134:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2210      	movs	r2, #16
 800113a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2213      	movs	r2, #19
 8001144:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2211      	movs	r2, #17
 800114e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2210      	movs	r2, #16
 8001158:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2213      	movs	r2, #19
 8001162:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2213      	movs	r2, #19
 800116c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2213      	movs	r2, #19
 8001176:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	22a0      	movs	r2, #160	; 0xa0
 800118a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001196:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011a2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f240 22fd 	movw	r2, #765	; 0x2fd
 80011ae:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f240 3252 	movw	r2, #850	; 0x352
 80011ba:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f240 32a2 	movw	r2, #930	; 0x3a2
 80011c6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f240 4201 	movw	r2, #1025	; 0x401
 80011d2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80011de:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80011ea:	64da      	str	r2, [r3, #76]	; 0x4c

	return TRC_SUCCESS;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	20001bd8 	.word	0x20001bd8

080011fc <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8001206:	4b40      	ldr	r3, [pc, #256]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001208:	2200      	movs	r2, #0
 800120a:	825a      	strh	r2, [r3, #18]
 800120c:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800120e:	8a5a      	ldrh	r2, [r3, #18]
 8001210:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001212:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8001214:	4b3c      	ldr	r3, [pc, #240]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001216:	220a      	movs	r2, #10
 8001218:	829a      	strh	r2, [r3, #20]
 800121a:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800121c:	8a9a      	ldrh	r2, [r3, #20]
 800121e:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001220:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8001222:	4b39      	ldr	r3, [pc, #228]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001224:	2214      	movs	r2, #20
 8001226:	82da      	strh	r2, [r3, #22]
 8001228:	4b37      	ldr	r3, [pc, #220]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800122a:	8ada      	ldrh	r2, [r3, #22]
 800122c:	4b36      	ldr	r3, [pc, #216]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800122e:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8001230:	4b35      	ldr	r3, [pc, #212]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001232:	221e      	movs	r2, #30
 8001234:	831a      	strh	r2, [r3, #24]
 8001236:	4b34      	ldr	r3, [pc, #208]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001238:	8b1a      	ldrh	r2, [r3, #24]
 800123a:	4b33      	ldr	r3, [pc, #204]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800123c:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 800123e:	4b32      	ldr	r3, [pc, #200]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001240:	222d      	movs	r2, #45	; 0x2d
 8001242:	835a      	strh	r2, [r3, #26]
 8001244:	4b30      	ldr	r3, [pc, #192]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001246:	8b5a      	ldrh	r2, [r3, #26]
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800124a:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800124e:	2232      	movs	r2, #50	; 0x32
 8001250:	839a      	strh	r2, [r3, #28]
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001254:	8b9a      	ldrh	r2, [r3, #28]
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001258:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800125c:	2237      	movs	r2, #55	; 0x37
 800125e:	83da      	strh	r2, [r3, #30]
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001262:	8bda      	ldrh	r2, [r3, #30]
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001266:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8001268:	4b27      	ldr	r3, [pc, #156]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800126a:	223c      	movs	r2, #60	; 0x3c
 800126c:	841a      	strh	r2, [r3, #32]
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001270:	8c1a      	ldrh	r2, [r3, #32]
 8001272:	4b25      	ldr	r3, [pc, #148]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001274:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001278:	2241      	movs	r2, #65	; 0x41
 800127a:	845a      	strh	r2, [r3, #34]	; 0x22
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800127e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001282:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001286:	2209      	movs	r2, #9
 8001288:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800128c:	2213      	movs	r2, #19
 800128e:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001292:	221d      	movs	r2, #29
 8001294:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001298:	222c      	movs	r2, #44	; 0x2c
 800129a:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800129e:	2231      	movs	r2, #49	; 0x31
 80012a0:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012a4:	2236      	movs	r2, #54	; 0x36
 80012a6:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012aa:	223b      	movs	r2, #59	; 0x3b
 80012ac:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012b0:	2240      	movs	r2, #64	; 0x40
 80012b2:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012b6:	2245      	movs	r2, #69	; 0x45
 80012b8:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	e009      	b.n	80012d4 <xTraceKernelPortInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3318      	adds	r3, #24
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	2200      	movs	r2, #0
 80012cc:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3301      	adds	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d9f2      	bls.n	80012c0 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	e008      	b.n	80012f2 <xTraceKernelPortInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 80012e0:	4a09      	ldr	r2, [pc, #36]	; (8001308 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	3348      	adds	r3, #72	; 0x48
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b45      	cmp	r3, #69	; 0x45
 80012f6:	d9f3      	bls.n	80012e0 <xTraceKernelPortInitObjectHandleStack+0xe4>
	}

	return TRC_SUCCESS;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000240 	.word	0x20000240

0800130c <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b08      	cmp	r3, #8
 800131a:	d827      	bhi.n	800136c <pszTraceGetErrorNotEnoughHandles+0x60>
 800131c:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <pszTraceGetErrorNotEnoughHandles+0x18>)
 800131e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001322:	bf00      	nop
 8001324:	08001359 	.word	0x08001359
 8001328:	08001351 	.word	0x08001351
 800132c:	08001355 	.word	0x08001355
 8001330:	08001349 	.word	0x08001349
 8001334:	0800134d 	.word	0x0800134d
 8001338:	0800135d 	.word	0x0800135d
 800133c:	08001361 	.word	0x08001361
 8001340:	08001365 	.word	0x08001365
 8001344:	08001369 	.word	0x08001369
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <pszTraceGetErrorNotEnoughHandles+0x70>)
 800134a:	e010      	b.n	800136e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <pszTraceGetErrorNotEnoughHandles+0x74>)
 800134e:	e00e      	b.n	800136e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <pszTraceGetErrorNotEnoughHandles+0x78>)
 8001352:	e00c      	b.n	800136e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8001356:	e00a      	b.n	800136e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <pszTraceGetErrorNotEnoughHandles+0x80>)
 800135a:	e008      	b.n	800136e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <pszTraceGetErrorNotEnoughHandles+0x84>)
 800135e:	e006      	b.n	800136e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8001362:	e004      	b.n	800136e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8001366:	e002      	b.n	800136e <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <pszTraceGetErrorNotEnoughHandles+0x90>)
 800136a:	e000      	b.n	800136e <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	0800a83c 	.word	0x0800a83c
 8001380:	0800a884 	.word	0x0800a884
 8001384:	0800a8cc 	.word	0x0800a8cc
 8001388:	0800a920 	.word	0x0800a920
 800138c:	0800a96c 	.word	0x0800a96c
 8001390:	0800a9b8 	.word	0x0800a9b8
 8001394:	0800aa04 	.word	0x0800aa04
 8001398:	0800aa58 	.word	0x0800aa58
 800139c:	0800aab0 	.word	0x0800aab0
 80013a0:	0800ab0c 	.word	0x0800ab0c

080013a4 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 80013ac:	f000 f8be 	bl	800152c <xTraceInitialize>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d101      	bne.n	80013ba <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e01f      	b.n	80013fa <xTraceEnable+0x56>
	}

	if (uiStartOption == TRC_START)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d10b      	bne.n	80013d8 <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 80013c0:	f7ff fe45 	bl	800104e <xTraceKernelPortEnable>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e015      	b.n	80013fa <xTraceEnable+0x56>
		}
		
		prvTraceInitTimestamps();
 80013ce:	f000 f89d 	bl	800150c <prvTraceInitTimestamps>

		prvTraceStart();
 80013d2:	f000 f823 	bl	800141c <prvTraceStart>
 80013d6:	e00f      	b.n	80013f8 <xTraceEnable+0x54>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d104      	bne.n	80013e8 <xTraceEnable+0x44>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 80013de:	4809      	ldr	r0, [pc, #36]	; (8001404 <xTraceEnable+0x60>)
 80013e0:	f000 fec0 	bl	8002164 <prvTraceError>

		return TRC_FAIL;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e008      	b.n	80013fa <xTraceEnable+0x56>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <xTraceEnable+0x54>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <xTraceEnable+0x64>)
 80013f0:	f000 feb8 	bl	8002164 <prvTraceError>

		return TRC_FAIL;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <xTraceEnable+0x56>
	}

	return TRC_SUCCESS;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	0800ab3c 	.word	0x0800ab3c
 8001408:	0800ab7c 	.word	0x0800ab7c

0800140c <xTraceDisable>:


traceResult xTraceDisable(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	prvTraceStop();
 8001410:	f000 f864 	bl	80014dc <prvTraceStop>

	return TRC_SUCCESS;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == (void*)0)
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <prvTraceStart+0xb0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d047      	beq.n	80014be <prvTraceStart+0xa2>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 800142e:	4b27      	ldr	r3, [pc, #156]	; (80014cc <prvTraceStart+0xb0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	2b01      	cmp	r3, #1
 8001436:	d044      	beq.n	80014c2 <prvTraceStart+0xa6>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <prvTraceStart+0xb4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d141      	bne.n	80014c4 <prvTraceStart+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001440:	f3ef 8310 	mrs	r3, PRIMASK
 8001444:	60bb      	str	r3, [r7, #8]
  return(result);
 8001446:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	2301      	movs	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f383 8810 	msr	PRIMASK, r3
}
 8001454:	bf00      	nop
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <prvTraceStart+0xb8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <prvTraceStart+0xb8>)
 800145e:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <prvTraceStart+0xb0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8001468:	f7ff fddf 	bl	800102a <prvTraceGetCurrentTaskHandle>
 800146c:	4603      	mov	r3, r0
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fd4d 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8001474:	4603      	mov	r3, r0
 8001476:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d110      	bne.n	80014a0 <prvTraceStart+0x84>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 fd3a 	bl	8001ef8 <prvTraceGetObjectHandle>
 8001484:	4603      	mov	r3, r0
 8001486:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <prvTraceStart+0xbc>)
 800148c:	4619      	mov	r1, r3
 800148e:	2003      	movs	r0, #3
 8001490:	f000 fe0e 	bl	80020b0 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	2003      	movs	r0, #3
 800149c:	f000 fc1e 	bl	8001cdc <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fbb0 	bl	8001c08 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <prvTraceStart+0xb8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <prvTraceStart+0xb8>)
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f383 8810 	msr	PRIMASK, r3
}
 80014bc:	e002      	b.n	80014c4 <prvTraceStart+0xa8>
		return;
 80014be:	bf00      	nop
 80014c0:	e000      	b.n	80014c4 <prvTraceStart+0xa8>
		return; /* Already running */
 80014c2:	bf00      	nop
	}
}
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20001bd8 	.word	0x20001bd8
 80014d0:	200002d0 	.word	0x200002d0
 80014d4:	20000228 	.word	0x20000228
 80014d8:	0800abbc 	.word	0x0800abbc

080014dc <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <prvTraceStop+0x28>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <prvTraceStop+0x28>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <prvTraceStop+0x2c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <prvTraceStop+0x2c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4798      	blx	r3
	}
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20001bd8 	.word	0x20001bd8
 8001508:	20000234 	.word	0x20000234

0800150c <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <prvTraceInitTimestamps+0x18>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <prvTraceInitTimestamps+0x1c>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e0001004 	.word	0xe0001004
 8001528:	20000238 	.word	0x20000238

0800152c <xTraceInitialize>:
	return trcStr;
}
#endif

traceResult xTraceInitialize(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8001530:	4b8a      	ldr	r3, [pc, #552]	; (800175c <xTraceInitialize+0x230>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 8001538:	2300      	movs	r3, #0
 800153a:	e10d      	b.n	8001758 <xTraceInitialize+0x22c>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 800153c:	4b88      	ldr	r3, [pc, #544]	; (8001760 <xTraceInitialize+0x234>)
 800153e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001542:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8001544:	4b87      	ldr	r3, [pc, #540]	; (8001764 <xTraceInitialize+0x238>)
 8001546:	2201      	movs	r2, #1
 8001548:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 800154a:	4b87      	ldr	r3, [pc, #540]	; (8001768 <xTraceInitialize+0x23c>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8001550:	4b86      	ldr	r3, [pc, #536]	; (800176c <xTraceInitialize+0x240>)
 8001552:	4a87      	ldr	r2, [pc, #540]	; (8001770 <xTraceInitialize+0x244>)
 8001554:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8001556:	4b87      	ldr	r3, [pc, #540]	; (8001774 <xTraceInitialize+0x248>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a87      	ldr	r2, [pc, #540]	; (8001778 <xTraceInitialize+0x24c>)
 800155c:	6013      	str	r3, [r2, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 800155e:	4887      	ldr	r0, [pc, #540]	; (800177c <xTraceInitialize+0x250>)
 8001560:	f7ff fd6a 	bl	8001038 <xTraceKernelPortInitialize>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <xTraceInitialize+0x42>
	{
		return TRC_FAIL;
 800156a:	2301      	movs	r3, #1
 800156c:	e0f4      	b.n	8001758 <xTraceInitialize+0x22c>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 800156e:	4b7f      	ldr	r3, [pc, #508]	; (800176c <xTraceInitialize+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f641 1204 	movw	r2, #6404	; 0x1904
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f009 f86b 	bl	800a654 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800157e:	4b7b      	ldr	r3, [pc, #492]	; (800176c <xTraceInitialize+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8001586:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8001588:	4b78      	ldr	r3, [pc, #480]	; (800176c <xTraceInitialize+0x240>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2207      	movs	r2, #7
 800158e:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8001590:	4b76      	ldr	r3, [pc, #472]	; (800176c <xTraceInitialize+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2200      	movs	r2, #0
 8001596:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8001598:	4b74      	ldr	r3, [pc, #464]	; (800176c <xTraceInitialize+0x240>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f641 1204 	movw	r2, #6404	; 0x1904
 80015a0:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 80015a2:	4b72      	ldr	r3, [pc, #456]	; (800176c <xTraceInitialize+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015aa:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 80015ac:	4b6f      	ldr	r3, [pc, #444]	; (800176c <xTraceInitialize+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80015b6:	4b6d      	ldr	r3, [pc, #436]	; (800176c <xTraceInitialize+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80015be:	4b6b      	ldr	r3, [pc, #428]	; (800176c <xTraceInitialize+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 80015c6:	f7ff fd4b 	bl	8001060 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80015ca:	4b68      	ldr	r3, [pc, #416]	; (800176c <xTraceInitialize+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 80015d2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80015d6:	4b65      	ldr	r3, [pc, #404]	; (800176c <xTraceInitialize+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f44f 7248 	mov.w	r2, #800	; 0x320
 80015de:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80015e2:	4b62      	ldr	r3, [pc, #392]	; (800176c <xTraceInitialize+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80015ec:	4b5f      	ldr	r3, [pc, #380]	; (800176c <xTraceInitialize+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 80015f4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80015f8:	4b5c      	ldr	r3, [pc, #368]	; (800176c <xTraceInitialize+0x240>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001600:	2250      	movs	r2, #80	; 0x50
 8001602:	495f      	ldr	r1, [pc, #380]	; (8001780 <xTraceInitialize+0x254>)
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fd2d 	bl	8002064 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 800160a:	4b58      	ldr	r3, [pc, #352]	; (800176c <xTraceInitialize+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 8001612:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 8001616:	4b55      	ldr	r3, [pc, #340]	; (800176c <xTraceInitialize+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800161e:	220a      	movs	r2, #10
 8001620:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
	RecorderDataPtr->endmarker1 = 0x0B;
 8001624:	4b51      	ldr	r3, [pc, #324]	; (800176c <xTraceInitialize+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162c:	220b      	movs	r2, #11
 800162e:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
	RecorderDataPtr->endmarker2 = 0x0C;
 8001632:	4b4e      	ldr	r3, [pc, #312]	; (800176c <xTraceInitialize+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163a:	220c      	movs	r2, #12
 800163c:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
	RecorderDataPtr->endmarker3 = 0x0D;
 8001640:	4b4a      	ldr	r3, [pc, #296]	; (800176c <xTraceInitialize+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001648:	220d      	movs	r2, #13
 800164a:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
	RecorderDataPtr->endmarker4 = 0x71;
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <xTraceInitialize+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001656:	2271      	movs	r2, #113	; 0x71
 8001658:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
	RecorderDataPtr->endmarker5 = 0x72;
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <xTraceInitialize+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001664:	2272      	movs	r2, #114	; 0x72
 8001666:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
	RecorderDataPtr->endmarker6 = 0x73;
 800166a:	4b40      	ldr	r3, [pc, #256]	; (800176c <xTraceInitialize+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001672:	2273      	movs	r2, #115	; 0x73
 8001674:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
	RecorderDataPtr->endmarker7 = 0x74;
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <xTraceInitialize+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	2274      	movs	r2, #116	; 0x74
 8001682:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
	RecorderDataPtr->endmarker8 = 0xF1;
 8001686:	4b39      	ldr	r3, [pc, #228]	; (800176c <xTraceInitialize+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168e:	22f1      	movs	r2, #241	; 0xf1
 8001690:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
	RecorderDataPtr->endmarker9 = 0xF2;
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <xTraceInitialize+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	22f2      	movs	r2, #242	; 0xf2
 800169e:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
	RecorderDataPtr->endmarker10 = 0xF3;
 80016a2:	4b32      	ldr	r3, [pc, #200]	; (800176c <xTraceInitialize+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016aa:	22f3      	movs	r2, #243	; 0xf3
 80016ac:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
	RecorderDataPtr->endmarker11 = 0xF4;
 80016b0:	4b2e      	ldr	r3, [pc, #184]	; (800176c <xTraceInitialize+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b8:	22f4      	movs	r2, #244	; 0xf4
 80016ba:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 80016be:	f7ff fd9d 	bl	80011fc <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <xTraceInitialize+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	22f4      	movs	r2, #244	; 0xf4
 80016c8:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <xTraceInitialize+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	22f3      	movs	r2, #243	; 0xf3
 80016d0:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <xTraceInitialize+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	22f2      	movs	r2, #242	; 0xf2
 80016d8:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <xTraceInitialize+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	22f1      	movs	r2, #241	; 0xf1
 80016e0:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <xTraceInitialize+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2274      	movs	r2, #116	; 0x74
 80016e8:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <xTraceInitialize+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2273      	movs	r2, #115	; 0x73
 80016f0:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <xTraceInitialize+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2272      	movs	r2, #114	; 0x72
 80016f8:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <xTraceInitialize+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2271      	movs	r2, #113	; 0x71
 8001700:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <xTraceInitialize+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2204      	movs	r2, #4
 8001708:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <xTraceInitialize+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2203      	movs	r2, #3
 8001710:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <xTraceInitialize+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2202      	movs	r2, #2
 8001718:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <xTraceInitialize+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <xTraceInitialize+0x23c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d010      	beq.n	800174c <xTraceInitialize+0x220>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <xTraceInitialize+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001732:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <xTraceInitialize+0x23c>)
 8001734:	6811      	ldr	r1, [r2, #0]
 8001736:	2250      	movs	r2, #80	; 0x50
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fc93 	bl	8002064 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <xTraceInitialize+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2201      	movs	r2, #1
 8001744:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		prvTraceStop();
 8001748:	f7ff fec8 	bl	80014dc <prvTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 800174c:	f000 feb0 	bl	80024b0 <xTraceHardwarePortInitCortexM>
#endif

	RecorderInitialized = 1;
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <xTraceInitialize+0x230>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20001bdc 	.word	0x20001bdc
 8001760:	2000023c 	.word	0x2000023c
 8001764:	2000023e 	.word	0x2000023e
 8001768:	200002d0 	.word	0x200002d0
 800176c:	20001bd8 	.word	0x20001bd8
 8001770:	200002d4 	.word	0x200002d4
 8001774:	e0001004 	.word	0xe0001004
 8001778:	20000238 	.word	0x20000238
 800177c:	20000210 	.word	0x20000210
 8001780:	0800ad08 	.word	0x0800ad08

08001784 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d044      	beq.n	800181e <prvTraceStoreTaskReady+0x9a>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <prvTraceStoreTaskReady+0xa8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d042      	beq.n	8001822 <prvTraceStoreTaskReady+0x9e>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <prvTraceStoreTaskReady+0xac>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <prvTraceStoreTaskReady+0x28>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80017a4:	4823      	ldr	r0, [pc, #140]	; (8001834 <prvTraceStoreTaskReady+0xb0>)
 80017a6:	f000 fcdd 	bl	8002164 <prvTraceError>
		return;
 80017aa:	e03b      	b.n	8001824 <prvTraceStoreTaskReady+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80017ac:	f3ef 8310 	mrs	r3, PRIMASK
 80017b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80017b2:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	2301      	movs	r3, #1
 80017b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	f383 8810 	msr	PRIMASK, r3
}
 80017c0:	bf00      	nop
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <prvTraceStoreTaskReady+0xac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <prvTraceStoreTaskReady+0xac>)
 80017ca:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <prvTraceStoreTaskReady+0xb4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d018      	beq.n	8001808 <prvTraceStoreTaskReady+0x84>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80017d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017da:	f000 fd9f 	bl	800231c <prvTraceGetDTS>
 80017de:	4603      	mov	r3, r0
 80017e0:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 80017e6:	f000 fb27 	bl	8001e38 <prvTraceNextFreeEventBufferSlot>
 80017ea:	6178      	str	r0, [r7, #20]
		if (tr != (void*)0)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00a      	beq.n	8001808 <prvTraceStoreTaskReady+0x84>
		{
			tr->type = DIV_TASK_READY;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2202      	movs	r2, #2
 80017f6:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	8b7a      	ldrh	r2, [r7, #26]
 80017fc:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	7e7a      	ldrb	r2, [r7, #25]
 8001802:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8001804:	f000 fd62 	bl	80022cc <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <prvTraceStoreTaskReady+0xac>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3b01      	subs	r3, #1
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <prvTraceStoreTaskReady+0xac>)
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f383 8810 	msr	PRIMASK, r3
}
 800181c:	e002      	b.n	8001824 <prvTraceStoreTaskReady+0xa0>
		return;
 800181e:	bf00      	nop
 8001820:	e000      	b.n	8001824 <prvTraceStoreTaskReady+0xa0>
		return;
 8001822:	bf00      	nop
}
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000000c 	.word	0x2000000c
 8001830:	20000228 	.word	0x20000228
 8001834:	0800ad1c 	.word	0x0800ad1c
 8001838:	20001bd8 	.word	0x20001bd8

0800183c <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08e      	sub	sp, #56	; 0x38
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 8001848:	4b46      	ldr	r3, [pc, #280]	; (8001964 <vTraceStoreMemMangEvent+0x128>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8084 	beq.w	800195a <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da03      	bge.n	8001860 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	425b      	negs	r3, r3
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
 800185e:	e001      	b.n	8001864 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001864:	f3ef 8310 	mrs	r3, PRIMASK
 8001868:	61bb      	str	r3, [r7, #24]
  return(result);
 800186a:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
 800186e:	2301      	movs	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f383 8810 	msr	PRIMASK, r3
}
 8001878:	bf00      	nop
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <vTraceStoreMemMangEvent+0x12c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a39      	ldr	r2, [pc, #228]	; (8001968 <vTraceStoreMemMangEvent+0x12c>)
 8001882:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d015      	beq.n	80018b6 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 800188a:	4b36      	ldr	r3, [pc, #216]	; (8001964 <vTraceStoreMemMangEvent+0x128>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	4b34      	ldr	r3, [pc, #208]	; (8001964 <vTraceStoreMemMangEvent+0x128>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	440a      	add	r2, r1
 8001898:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <vTraceStoreMemMangEvent+0x128>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018a0:	4b30      	ldr	r3, [pc, #192]	; (8001964 <vTraceStoreMemMangEvent+0x128>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d905      	bls.n	80018b6 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 80018aa:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <vTraceStoreMemMangEvent+0x128>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <vTraceStoreMemMangEvent+0x128>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018b4:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <vTraceStoreMemMangEvent+0x128>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d041      	beq.n	8001944 <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 80018c0:	20ff      	movs	r0, #255	; 0xff
 80018c2:	f000 fd2b 	bl	800231c <prvTraceGetDTS>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 80018cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018d2:	f000 f90f 	bl	8001af4 <prvTraceGetParam>
 80018d6:	4603      	mov	r3, r0
 80018d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 80018da:	f000 faad 	bl	8001e38 <prvTraceNextFreeEventBufferSlot>
 80018de:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != (void*)0)
 80018e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d02e      	beq.n	8001944 <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80018ec:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 80018ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80018f8:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80018fa:	f000 fce7 	bl	80022cc <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001904:	f000 f8f6 	bl	8001af4 <prvTraceGetParam>
 8001908:	4603      	mov	r3, r0
 800190a:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8001912:	f000 fa91 	bl	8001e38 <prvTraceNextFreeEventBufferSlot>
 8001916:	6238      	str	r0, [r7, #32]
			if (ma != (void*)0)
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d012      	beq.n	8001944 <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001922:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800192a:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	3301      	adds	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8001940:	f000 fcc4 	bl	80022cc <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <vTraceStoreMemMangEvent+0x12c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3b01      	subs	r3, #1
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <vTraceStoreMemMangEvent+0x12c>)
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001950:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f383 8810 	msr	PRIMASK, r3
}
 8001958:	e000      	b.n	800195c <vTraceStoreMemMangEvent+0x120>
		return;
 800195a:	bf00      	nop
}
 800195c:	3738      	adds	r7, #56	; 0x38
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20001bd8 	.word	0x20001bd8
 8001968:	20000228 	.word	0x20000228

0800196c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	460b      	mov	r3, r1
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <prvTraceStoreKernelCall+0xa8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <prvTraceStoreKernelCall+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8001982:	4825      	ldr	r0, [pc, #148]	; (8001a18 <prvTraceStoreKernelCall+0xac>)
 8001984:	f000 fbee 	bl	8002164 <prvTraceError>
		return;
 8001988:	e040      	b.n	8001a0c <prvTraceStoreKernelCall+0xa0>
	}

	if (handle_of_last_logged_task == 0)
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <prvTraceStoreKernelCall+0xb0>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d03b      	beq.n	8001a0a <prvTraceStoreKernelCall+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001992:	f3ef 8310 	mrs	r3, PRIMASK
 8001996:	617b      	str	r3, [r7, #20]
  return(result);
 8001998:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	2301      	movs	r3, #1
 800199e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	f383 8810 	msr	PRIMASK, r3
}
 80019a6:	bf00      	nop
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <prvTraceStoreKernelCall+0xa8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <prvTraceStoreKernelCall+0xa8>)
 80019b0:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <prvTraceStoreKernelCall+0xb4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01b      	beq.n	80019f4 <prvTraceStoreKernelCall+0x88>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80019bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019c0:	f000 fcac 	bl	800231c <prvTraceGetDTS>
 80019c4:	4603      	mov	r3, r0
 80019c6:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 80019ce:	f000 fa33 	bl	8001e38 <prvTraceNextFreeEventBufferSlot>
 80019d2:	61f8      	str	r0, [r7, #28]
		if (kse != (void*)0)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00c      	beq.n	80019f4 <prvTraceStoreKernelCall+0x88>
		{
			kse->dts = dts1;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80019de:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80019ee:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80019f0:	f000 fc6c 	bl	80022cc <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <prvTraceStoreKernelCall+0xa8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <prvTraceStoreKernelCall+0xa8>)
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f383 8810 	msr	PRIMASK, r3
}
 8001a08:	e000      	b.n	8001a0c <prvTraceStoreKernelCall+0xa0>
		return;
 8001a0a:	bf00      	nop
}
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000228 	.word	0x20000228
 8001a18:	0800ad54 	.word	0x0800ad54
 8001a1c:	20000230 	.word	0x20000230
 8001a20:	20001bd8 	.word	0x20001bd8

08001a24 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	460b      	mov	r3, r1
 8001a32:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8001a34:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <prvTraceStoreKernelCallWithParam+0x20>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8001a3c:	482a      	ldr	r0, [pc, #168]	; (8001ae8 <prvTraceStoreKernelCallWithParam+0xc4>)
 8001a3e:	f000 fb91 	bl	8002164 <prvTraceError>
		return;
 8001a42:	e04b      	b.n	8001adc <prvTraceStoreKernelCallWithParam+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001a44:	f3ef 8310 	mrs	r3, PRIMASK
 8001a48:	617b      	str	r3, [r7, #20]
  return(result);
 8001a4a:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f383 8810 	msr	PRIMASK, r3
}
 8001a58:	bf00      	nop
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a62:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <prvTraceStoreKernelCallWithParam+0xc8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d02b      	beq.n	8001ac6 <prvTraceStoreKernelCallWithParam+0xa2>
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <prvTraceStoreKernelCallWithParam+0xcc>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d027      	beq.n	8001ac6 <prvTraceStoreKernelCallWithParam+0xa2>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8001a76:	20ff      	movs	r0, #255	; 0xff
 8001a78:	f000 fc50 	bl	800231c <prvTraceGetDTS>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8001a82:	6839      	ldr	r1, [r7, #0]
 8001a84:	20ff      	movs	r0, #255	; 0xff
 8001a86:	f000 f835 	bl	8001af4 <prvTraceGetParam>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8001a96:	f000 f9cf 	bl	8001e38 <prvTraceNextFreeEventBufferSlot>
 8001a9a:	61f8      	str	r0, [r7, #28]
		if (kse != (void*)0)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d011      	beq.n	8001ac6 <prvTraceStoreKernelCallWithParam+0xa2>
		{
			kse->dts = dts2;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001aa8:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001ab8:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001ac0:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001ac2:	f000 fc03 	bl	80022cc <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <prvTraceStoreKernelCallWithParam+0xc0>)
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f383 8810 	msr	PRIMASK, r3
}
 8001ada:	bf00      	nop
}
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000228 	.word	0x20000228
 8001ae8:	0800ad8c 	.word	0x0800ad8c
 8001aec:	20001bd8 	.word	0x20001bd8
 8001af0:	20000230 	.word	0x20000230

08001af4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d801      	bhi.n	8001b0a <prvTraceGetParam+0x16>
	{
		return param;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	e01d      	b.n	8001b46 <prvTraceGetParam+0x52>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8001b0a:	f000 f995 	bl	8001e38 <prvTraceNextFreeEventBufferSlot>
 8001b0e:	60f8      	str	r0, [r7, #12]
		if (xps != (void*)0)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d014      	beq.n	8001b40 <prvTraceGetParam+0x4c>
		{
			xps->type = DIV_XPS;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4013      	ands	r3, r2
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4013      	ands	r3, r2
 8001b34:	0c1b      	lsrs	r3, r3, #16
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001b3c:	f000 fbc6 	bl	80022cc <prvTraceUpdateCounters>
		}

		return param & param_max;
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4013      	ands	r3, r2
	}
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <prvTraceStoreKernelCallWithNumericParamOnly+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8001b66:	4825      	ldr	r0, [pc, #148]	; (8001bfc <prvTraceStoreKernelCallWithNumericParamOnly+0xac>)
 8001b68:	f000 fafc 	bl	8002164 <prvTraceError>
		return;
 8001b6c:	e041      	b.n	8001bf2 <prvTraceStoreKernelCallWithNumericParamOnly+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b72:	613b      	str	r3, [r7, #16]
  return(result);
 8001b74:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001b76:	623b      	str	r3, [r7, #32]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f383 8810 	msr	PRIMASK, r3
}
 8001b82:	bf00      	nop
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b8c:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d021      	beq.n	8001bdc <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01d      	beq.n	8001bdc <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8001ba0:	20ff      	movs	r0, #255	; 0xff
 8001ba2:	f000 fbbb 	bl	800231c <prvTraceGetDTS>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bb0:	f7ff ffa0 	bl	8001af4 <prvTraceGetParam>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8001bb8:	f000 f93e 	bl	8001e38 <prvTraceNextFreeEventBufferSlot>
 8001bbc:	61b8      	str	r0, [r7, #24]
		if (kse != (void*)0)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00b      	beq.n	8001bdc <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
		{
			kse->dts = dts6;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	7ffa      	ldrb	r2, [r7, #31]
 8001bc8:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001bd6:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001bd8:	f000 fb78 	bl	80022cc <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f383 8810 	msr	PRIMASK, r3
}
 8001bf0:	bf00      	nop
}
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000228 	.word	0x20000228
 8001bfc:	0800adc4 	.word	0x0800adc4
 8001c00:	20001bd8 	.word	0x20001bd8
 8001c04:	20000230 	.word	0x20000230

08001c08 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c12:	f3ef 8310 	mrs	r3, PRIMASK
 8001c16:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c18:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f383 8810 	msr	PRIMASK, r3
}
 8001c26:	bf00      	nop
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <prvTraceStoreTaskswitch+0xc4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <prvTraceStoreTaskswitch+0xc4>)
 8001c30:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8001c32:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <prvTraceStoreTaskswitch+0xc8>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d038      	beq.n	8001cae <prvTraceStoreTaskswitch+0xa6>
 8001c3c:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <prvTraceStoreTaskswitch+0xcc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d033      	beq.n	8001cae <prvTraceStoreTaskswitch+0xa6>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8001c46:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <prvTraceStoreTaskswitch+0xd0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001c4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c50:	f000 fb64 	bl	800231c <prvTraceGetDTS>
 8001c54:	4603      	mov	r3, r0
 8001c56:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <prvTraceStoreTaskswitch+0xc8>)
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <prvTraceStoreTaskswitch+0xc8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8001c64:	f000 f8e8 	bl	8001e38 <prvTraceNextFreeEventBufferSlot>
 8001c68:	6178      	str	r0, [r7, #20]

		if (ts != (void*)0)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01e      	beq.n	8001cae <prvTraceStoreTaskswitch+0xa6>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <prvTraceStoreTaskswitch+0xc8>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	2003      	movs	r0, #3
 8001c78:	f000 f89e 	bl	8001db8 <prvTraceGetObjectState>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d103      	bne.n	8001c8a <prvTraceStoreTaskswitch+0x82>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2207      	movs	r2, #7
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e002      	b.n	8001c90 <prvTraceStoreTaskswitch+0x88>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2206      	movs	r2, #6
 8001c8e:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	8b7a      	ldrh	r2, [r7, #26]
 8001c94:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	7e7a      	ldrb	r2, [r7, #25]
 8001c9a:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <prvTraceStoreTaskswitch+0xc8>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f000 f863 	bl	8001d70 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8001caa:	f000 fb0f 	bl	80022cc <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <prvTraceStoreTaskswitch+0xc4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <prvTraceStoreTaskswitch+0xc4>)
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f383 8810 	msr	PRIMASK, r3
}
 8001cc2:	bf00      	nop
}
 8001cc4:	bf00      	nop
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000228 	.word	0x20000228
 8001cd0:	20000230 	.word	0x20000230
 8001cd4:	20001bd8 	.word	0x20001bd8
 8001cd8:	20000214 	.word	0x20000214

08001cdc <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	71bb      	strb	r3, [r7, #6]
 8001cea:	4613      	mov	r3, r2
 8001cec:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <prvTraceSetPriorityProperty+0x48>)
 8001cf0:	681c      	ldr	r4, [r3, #0]
 8001cf2:	79fa      	ldrb	r2, [r7, #7]
 8001cf4:	79bb      	ldrb	r3, [r7, #6]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 f8c1 	bl	8001e80 <uiIndexOfObject>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4619      	mov	r1, r3
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <prvTraceSetPriorityProperty+0x48>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d0e:	440b      	add	r3, r1
 8001d10:	3301      	adds	r3, #1
 8001d12:	4423      	add	r3, r4
 8001d14:	797a      	ldrb	r2, [r7, #5]
 8001d16:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20001bd8 	.word	0x20001bd8

08001d28 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460a      	mov	r2, r1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <prvTraceGetPriorityProperty+0x44>)
 8001d3a:	681c      	ldr	r4, [r3, #0]
 8001d3c:	79fa      	ldrb	r2, [r7, #7]
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f89c 	bl	8001e80 <uiIndexOfObject>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <prvTraceGetPriorityProperty+0x44>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4413      	add	r3, r2
 8001d54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d58:	440b      	add	r3, r1
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	4423      	add	r3, r4
 8001d5e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20001bd8 	.word	0x20001bd8

08001d70 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	71bb      	strb	r3, [r7, #6]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <prvTraceSetObjectState+0x44>)
 8001d84:	681c      	ldr	r4, [r3, #0]
 8001d86:	79fa      	ldrb	r2, [r7, #7]
 8001d88:	79bb      	ldrb	r3, [r7, #6]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f877 	bl	8001e80 <uiIndexOfObject>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4619      	mov	r1, r3
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <prvTraceSetObjectState+0x44>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001da2:	440b      	add	r3, r1
 8001da4:	4423      	add	r3, r4
 8001da6:	797a      	ldrb	r2, [r7, #5]
 8001da8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	20001bd8 	.word	0x20001bd8

08001db8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <prvTraceGetObjectState+0x40>)
 8001dca:	681c      	ldr	r4, [r3, #0]
 8001dcc:	79fa      	ldrb	r2, [r7, #7]
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f854 	bl	8001e80 <uiIndexOfObject>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <prvTraceGetObjectState+0x40>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4413      	add	r3, r2
 8001de4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001de8:	440b      	add	r3, r1
 8001dea:	4423      	add	r3, r4
 8001dec:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}
 8001df8:	20001bd8 	.word	0x20001bd8

08001dfc <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <prvTraceSetTaskInstanceFinished+0x38>)
 8001e08:	681c      	ldr	r4, [r3, #0]
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	2103      	movs	r1, #3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f836 	bl	8001e80 <uiIndexOfObject>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <prvTraceSetTaskInstanceFinished+0x38>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001e20:	4413      	add	r3, r2
 8001e22:	4423      	add	r3, r4
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20001bd8 	.word	0x20001bd8

08001e38 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e014      	b.n	8001e74 <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e54:	d304      	bcc.n	8001e60 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8001e56:	4809      	ldr	r0, [pc, #36]	; (8001e7c <prvTraceNextFreeEventBufferSlot+0x44>)
 8001e58:	f000 f984 	bl	8002164 <prvTraceError>
		return (void*)0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e009      	b.n	8001e74 <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8001e70:	4413      	add	r3, r2
 8001e72:	3304      	adds	r3, #4
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20001bd8 	.word	0x20001bd8
 8001e7c:	0800adfc 	.word	0x0800adfc

08001e80 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	460a      	mov	r2, r1
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8001e90:	79bb      	ldrb	r3, [r7, #6]
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d823      	bhi.n	8001ede <uiIndexOfObject+0x5e>
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d020      	beq.n	8001ede <uiIndexOfObject+0x5e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <uiIndexOfObject+0x70>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	79bb      	ldrb	r3, [r7, #6]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8001ea8:	79fa      	ldrb	r2, [r7, #7]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d817      	bhi.n	8001ede <uiIndexOfObject+0x5e>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <uiIndexOfObject+0x70>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	79bb      	ldrb	r3, [r7, #6]
 8001eb4:	3338      	adds	r3, #56	; 0x38
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <uiIndexOfObject+0x70>)
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001ec8:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	fb11 f303 	smulbb	r3, r1, r3
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	81fb      	strh	r3, [r7, #14]
		return index;
 8001eda:	89fb      	ldrh	r3, [r7, #14]
 8001edc:	e003      	b.n	8001ee6 <uiIndexOfObject+0x66>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <uiIndexOfObject+0x74>)
 8001ee0:	f000 f940 	bl	8002164 <prvTraceError>
	return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20001bd8 	.word	0x20001bd8
 8001ef4:	0800ae24 	.word	0x0800ae24

08001ef8 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f02:	f3ef 8310 	mrs	r3, PRIMASK
 8001f06:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f08:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f383 8810 	msr	PRIMASK, r3
}
 8001f16:	bf00      	nop
 8001f18:	4b40      	ldr	r3, [pc, #256]	; (800201c <prvTraceGetObjectHandle+0x124>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a3f      	ldr	r2, [pc, #252]	; (800201c <prvTraceGetObjectHandle+0x124>)
 8001f20:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	4a3e      	ldr	r2, [pc, #248]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <prvTraceGetObjectHandle+0x12c>)
 8001f2e:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8001f30:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <prvTraceGetObjectHandle+0x12c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001f36:	4413      	add	r3, r2
 8001f38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d114      	bne.n	8001f6a <prvTraceGetObjectHandle+0x72>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8001f40:	4b38      	ldr	r3, [pc, #224]	; (8002024 <prvTraceGetObjectHandle+0x12c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	4935      	ldr	r1, [pc, #212]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	440b      	add	r3, r1
 8001f50:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8001f58:	4b32      	ldr	r3, [pc, #200]	; (8002024 <prvTraceGetObjectHandle+0x12c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8001f5c:	3201      	adds	r2, #1
 8001f5e:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8001f60:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001f62:	4413      	add	r3, r2
 8001f64:	460a      	mov	r2, r1
 8001f66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <prvTraceGetObjectHandle+0x12c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2c      	ldr	r2, [pc, #176]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001f70:	4413      	add	r3, r2
 8001f72:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f76:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4a29      	ldr	r2, [pc, #164]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001f7c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4927      	ldr	r1, [pc, #156]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001f84:	3310      	adds	r3, #16
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	440b      	add	r3, r1
 8001f8a:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d90a      	bls.n	8001fa6 <prvTraceGetObjectHandle+0xae>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f9ba 	bl	800130c <pszTraceGetErrorNotEnoughHandles>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f8e2 	bl	8002164 <prvTraceError>
		handle = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	77fb      	strb	r3, [r7, #31]
 8001fa4:	e029      	b.n	8001ffa <prvTraceGetObjectHandle+0x102>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001faa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fae:	3201      	adds	r2, #1
 8001fb0:	b291      	uxth	r1, r2
 8001fb2:	4a1b      	ldr	r2, [pc, #108]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001fb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	4a19      	ldr	r2, [pc, #100]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fc0:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4a16      	ldr	r2, [pc, #88]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001fce:	1acb      	subs	r3, r1, r3
 8001fd0:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4a12      	ldr	r2, [pc, #72]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	88db      	ldrh	r3, [r3, #6]
 8001fde:	461a      	mov	r2, r3
		if (hndCount >
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	dd09      	ble.n	8001ffa <prvTraceGetObjectHandle+0x102>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001fea:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8001fec:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001fee:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <prvTraceGetObjectHandle+0x128>)
 8001ff0:	3318      	adds	r3, #24
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <prvTraceGetObjectHandle+0x124>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <prvTraceGetObjectHandle+0x124>)
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f383 8810 	msr	PRIMASK, r3
}
 800200e:	bf00      	nop

	return handle;
 8002010:	7ffb      	ldrb	r3, [r7, #31]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3720      	adds	r7, #32
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000228 	.word	0x20000228
 8002020:	20000240 	.word	0x20000240
 8002024:	20001be0 	.word	0x20001be0

08002028 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	460a      	mov	r2, r1
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	4613      	mov	r3, r2
 8002036:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8002038:	79fa      	ldrb	r2, [r7, #7]
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff1e 	bl	8001e80 <uiIndexOfObject>
 8002044:	4603      	mov	r3, r0
 8002046:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <prvMarkObjectAsUsed+0x38>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	4413      	add	r3, r2
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20001bd8 	.word	0x20001bd8

08002064 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e010      	b.n	8002098 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	441a      	add	r2, r3
 800207c:	68f9      	ldr	r1, [r7, #12]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	440b      	add	r3, r1
 8002082:	7812      	ldrb	r2, [r2, #0]
 8002084:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	4413      	add	r3, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	d3ea      	bcc.n	8002076 <prvStrncpy+0x12>
			break;
	}
}
 80020a0:	e000      	b.n	80020a4 <prvStrncpy+0x40>
			break;
 80020a2:	bf00      	nop
}
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	603a      	str	r2, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	460b      	mov	r3, r1
 80020be:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == (void*)0)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <prvTraceSetObjectName+0x1a>
	{
		name = "";
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <prvTraceSetObjectName+0x9c>)
 80020c8:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d903      	bls.n	80020d8 <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 80020d0:	481f      	ldr	r0, [pc, #124]	; (8002150 <prvTraceSetObjectName+0xa0>)
 80020d2:	f000 f847 	bl	8002164 <prvTraceError>
		return;
 80020d6:	e036      	b.n	8002146 <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d103      	bne.n	80020e6 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 80020de:	481d      	ldr	r0, [pc, #116]	; (8002154 <prvTraceSetObjectName+0xa4>)
 80020e0:	f000 f840 	bl	8002164 <prvTraceError>
		return;
 80020e4:	e02f      	b.n	8002146 <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <prvTraceSetObjectName+0xa8>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4413      	add	r3, r2
 80020ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020f2:	79ba      	ldrb	r2, [r7, #6]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d908      	bls.n	800210a <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f906 	bl	800130c <pszTraceGetErrorNotEnoughHandles>
 8002100:	4603      	mov	r3, r0
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f82e 	bl	8002164 <prvTraceError>
 8002108:	e01d      	b.n	8002146 <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 800210a:	79fa      	ldrb	r2, [r7, #7]
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff feb5 	bl	8001e80 <uiIndexOfObject>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <prvTraceSetObjectName+0xac>)
 800211c:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <prvTraceSetObjectName+0xb0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10f      	bne.n	8002146 <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <prvTraceSetObjectName+0xa8>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <prvTraceSetObjectName+0xac>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	3388      	adds	r3, #136	; 0x88
 8002130:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <prvTraceSetObjectName+0xa8>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	4413      	add	r3, r2
 800213a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800213e:	461a      	mov	r2, r3
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	f7ff ff8f 	bl	8002064 <prvStrncpy>
		}
	}
}
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	0800ae94 	.word	0x0800ae94
 8002150:	0800ae98 	.word	0x0800ae98
 8002154:	0800aec8 	.word	0x0800aec8
 8002158:	20001bd8 	.word	0x20001bd8
 800215c:	20001be4 	.word	0x20001be4
 8002160:	200002d0 	.word	0x200002d0

08002164 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <prvTraceError+0x50>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <prvTraceError+0x14>
	{
		xTraceDisable();
 8002174:	f7ff f94a 	bl	800140c <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <prvTraceError+0x54>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d115      	bne.n	80021ac <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <prvTraceError+0x54>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != (void*)0)
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <prvTraceError+0x50>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00e      	beq.n	80021ac <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <prvTraceError+0x50>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <prvTraceError+0x54>)
 8002198:	6811      	ldr	r1, [r2, #0]
 800219a:	2250      	movs	r2, #80	; 0x50
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff61 	bl	8002064 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <prvTraceError+0x50>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20001bd8 	.word	0x20001bd8
 80021b8:	200002d0 	.word	0x200002d0

080021bc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 80021ce:	e071      	b.n	80022b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4413      	add	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80021dc:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 80021ea:	2b98      	cmp	r3, #152	; 0x98
 80021ec:	d929      	bls.n	8002242 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80021fc:	2ba7      	cmp	r3, #167	; 0xa7
 80021fe:	d820      	bhi.n	8002242 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8002200:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800220e:	3368      	adds	r3, #104	; 0x68
 8002210:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	441a      	add	r2, r3
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	429a      	cmp	r2, r3
 8002220:	d244      	bcs.n	80022ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800222e:	4413      	add	r3, r2
 8002230:	1d18      	adds	r0, r3, #4
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	3301      	adds	r3, #1
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	461a      	mov	r2, r3
 800223a:	2100      	movs	r1, #0
 800223c:	f008 fa0a 	bl	800a654 <memset>
		{
 8002240:	e034      	b.n	80022ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8002250:	2b01      	cmp	r3, #1
 8002252:	d12c      	bne.n	80022ae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	429a      	cmp	r2, r3
 8002260:	d20d      	bcs.n	800227e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	2208      	movs	r2, #8
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f008 f9ec 	bl	800a654 <memset>
 800227c:	e017      	b.n	80022ae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8002286:	2204      	movs	r2, #4
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f008 f9e2 	bl	800a654 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800229c:	4413      	add	r3, r2
 800229e:	3304      	adds	r3, #4
 80022a0:	2204      	movs	r2, #4
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f008 f9d5 	bl	800a654 <memset>
 80022aa:	e000      	b.n	80022ae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
 80022ac:	bf00      	nop
			}
		}
		i++;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d389      	bcc.n	80021d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14>
	}
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20001bd8 	.word	0x20001bd8

080022cc <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <prvTraceUpdateCounters+0x4c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01b      	beq.n	8002312 <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <prvTraceUpdateCounters+0x4c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	3201      	adds	r2, #1
 80022e2:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <prvTraceUpdateCounters+0x4c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	3201      	adds	r2, #1
 80022ec:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <prvTraceUpdateCounters+0x4c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f8:	d307      	bcc.n	800230a <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <prvTraceUpdateCounters+0x4c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2201      	movs	r2, #1
 8002300:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <prvTraceUpdateCounters+0x4c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff ff56 	bl	80021bc <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8002310:	e000      	b.n	8002314 <prvTraceUpdateCounters+0x48>
		return;
 8002312:	bf00      	nop
#endif
}
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20001bd8 	.word	0x20001bd8

0800231c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 8002332:	4b58      	ldr	r3, [pc, #352]	; (8002494 <prvTraceGetDTS+0x178>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d116      	bne.n	800236a <prvTraceGetDTS+0x4e>
	{	
		if (timestampFrequency != 0)
 800233c:	4b56      	ldr	r3, [pc, #344]	; (8002498 <prvTraceGetDTS+0x17c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <prvTraceGetDTS+0x36>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8002344:	4b54      	ldr	r3, [pc, #336]	; (8002498 <prvTraceGetDTS+0x17c>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b52      	ldr	r3, [pc, #328]	; (8002494 <prvTraceGetDTS+0x178>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0892      	lsrs	r2, r2, #2
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
 8002350:	e00b      	b.n	800236a <prvTraceGetDTS+0x4e>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8002352:	4b52      	ldr	r3, [pc, #328]	; (800249c <prvTraceGetDTS+0x180>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <prvTraceGetDTS+0x184>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d005      	beq.n	800236a <prvTraceGetDTS+0x4e>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 800235e:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <prvTraceGetDTS+0x188>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <prvTraceGetDTS+0x178>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0892      	lsrs	r2, r2, #2
 8002368:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f8d6 	bl	8002520 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4b4c      	ldr	r3, [pc, #304]	; (80024a8 <prvTraceGetDTS+0x18c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4a49      	ldr	r2, [pc, #292]	; (80024a8 <prvTraceGetDTS+0x18c>)
 8002382:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8002384:	4b43      	ldr	r3, [pc, #268]	; (8002494 <prvTraceGetDTS+0x178>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	2b00      	cmp	r3, #0
 800238c:	d043      	beq.n	8002416 <prvTraceGetDTS+0xfa>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 800238e:	4b41      	ldr	r3, [pc, #260]	; (8002494 <prvTraceGetDTS+0x178>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	429a      	cmp	r2, r3
 8002398:	d91d      	bls.n	80023d6 <prvTraceGetDTS+0xba>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 800239a:	4b3e      	ldr	r3, [pc, #248]	; (8002494 <prvTraceGetDTS+0x178>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023a0:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <prvTraceGetDTS+0x178>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <prvTraceGetDTS+0x178>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	440a      	add	r2, r1
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 80023b4:	4b37      	ldr	r3, [pc, #220]	; (8002494 <prvTraceGetDTS+0x178>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023ba:	4b36      	ldr	r3, [pc, #216]	; (8002494 <prvTraceGetDTS+0x178>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80023c6:	fb00 f202 	mul.w	r2, r0, r2
 80023ca:	1a9a      	subs	r2, r3, r2
 80023cc:	4b31      	ldr	r3, [pc, #196]	; (8002494 <prvTraceGetDTS+0x178>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	440a      	add	r2, r1
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
 80023d4:	e007      	b.n	80023e6 <prvTraceGetDTS+0xca>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 80023d6:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <prvTraceGetDTS+0x178>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023dc:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <prvTraceGetDTS+0x178>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	440a      	add	r2, r1
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <prvTraceGetDTS+0x178>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <prvTraceGetDTS+0x178>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d313      	bcc.n	800241e <prvTraceGetDTS+0x102>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 80023f6:	4b27      	ldr	r3, [pc, #156]	; (8002494 <prvTraceGetDTS+0x178>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fc:	3201      	adds	r2, #1
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <prvTraceGetDTS+0x178>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002406:	4b23      	ldr	r3, [pc, #140]	; (8002494 <prvTraceGetDTS+0x178>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <prvTraceGetDTS+0x178>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	1a8a      	subs	r2, r1, r2
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
 8002414:	e003      	b.n	800241e <prvTraceGetDTS+0x102>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <prvTraceGetDTS+0x178>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	429a      	cmp	r2, r3
 8002424:	d92c      	bls.n	8002480 <prvTraceGetDTS+0x164>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8002426:	f7ff fd07 	bl	8001e38 <prvTraceNextFreeEventBufferSlot>
 800242a:	6178      	str	r0, [r7, #20]

		if (xts != (void*)0)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d026      	beq.n	8002480 <prvTraceGetDTS+0x164>
		{
			if (param_maxDTS == 0xFFFF)
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002438:	4293      	cmp	r3, r2
 800243a:	d10b      	bne.n	8002454 <prvTraceGetDTS+0x138>
			{
				xts->type = (uint8_t)XTS16;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	22a9      	movs	r2, #169	; 0xa9
 8002440:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	b29a      	uxth	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2200      	movs	r2, #0
 8002450:	705a      	strb	r2, [r3, #1]
 8002452:	e013      	b.n	800247c <prvTraceGetDTS+0x160>
			}
			else if (param_maxDTS == 0xFF)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	2bff      	cmp	r3, #255	; 0xff
 8002458:	d10d      	bne.n	8002476 <prvTraceGetDTS+0x15a>
			{
				xts->type = (uint8_t)XTS8;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	22a8      	movs	r2, #168	; 0xa8
 800245e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	b29a      	uxth	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	0e1b      	lsrs	r3, r3, #24
 800246e:	b2da      	uxtb	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	705a      	strb	r2, [r3, #1]
 8002474:	e002      	b.n	800247c <prvTraceGetDTS+0x160>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8002476:	480d      	ldr	r0, [pc, #52]	; (80024ac <prvTraceGetDTS+0x190>)
 8002478:	f7ff fe74 	bl	8002164 <prvTraceError>
			}
			prvTraceUpdateCounters();
 800247c:	f7ff ff26 	bl	80022cc <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	b29a      	uxth	r2, r3
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	4013      	ands	r3, r2
 8002488:	b29b      	uxth	r3, r3
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20001bd8 	.word	0x20001bd8
 8002498:	2000022c 	.word	0x2000022c
 800249c:	e0001004 	.word	0xe0001004
 80024a0:	20000238 	.word	0x20000238
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20001be8 	.word	0x20001be8
 80024ac:	0800aef8 	.word	0x0800aef8

080024b0 <xTraceHardwarePortInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if (((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) || (TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M_NRF_SD)) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void xTraceHardwarePortInitCortexM(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <xTraceHardwarePortInitCortexM+0x54>)
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <xTraceHardwarePortInitCortexM+0x58>)
 80024b8:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <xTraceHardwarePortInitCortexM+0x5c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <xTraceHardwarePortInitCortexM+0x5c>)
 80024c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c4:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <xTraceHardwarePortInitCortexM+0x5c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d103      	bne.n	80024d6 <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 80024ce:	4810      	ldr	r0, [pc, #64]	; (8002510 <xTraceHardwarePortInitCortexM+0x60>)
 80024d0:	f7ff fe48 	bl	8002164 <prvTraceError>
			break;
 80024d4:	e013      	b.n	80024fe <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <xTraceHardwarePortInitCortexM+0x64>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <xTraceHardwarePortInitCortexM+0x68>)
 80024e4:	f7ff fe3e 	bl	8002164 <prvTraceError>
			break;
 80024e8:	e009      	b.n	80024fe <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <xTraceHardwarePortInitCortexM+0x6c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <xTraceHardwarePortInitCortexM+0x64>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a07      	ldr	r2, [pc, #28]	; (8002514 <xTraceHardwarePortInitCortexM+0x64>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e0001fb0 	.word	0xe0001fb0
 8002508:	c5acce55 	.word	0xc5acce55
 800250c:	e000edfc 	.word	0xe000edfc
 8002510:	0800af64 	.word	0x0800af64
 8002514:	e0001000 	.word	0xe0001000
 8002518:	0800af90 	.word	0x0800af90
 800251c:	e0001004 	.word	0xe0001004

08002520 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <prvTracePortGetTimeStamp+0x80>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d028      	beq.n	8002594 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <prvTracePortGetTimeStamp+0x84>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	601a      	str	r2, [r3, #0]
		return;
 800254a:	e023      	b.n	8002594 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <prvTracePortGetTimeStamp+0x88>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8002552:	4b16      	ldr	r3, [pc, #88]	; (80025ac <prvTracePortGetTimeStamp+0x8c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	1ad2      	subs	r2, r2, r3
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <prvTracePortGetTimeStamp+0x90>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4413      	add	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	4a10      	ldr	r2, [pc, #64]	; (80025b0 <prvTracePortGetTimeStamp+0x90>)
 8002570:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <prvTracePortGetTimeStamp+0x84>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4413      	add	r3, r2
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <prvTracePortGetTimeStamp+0x84>)
 800257c:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <prvTracePortGetTimeStamp+0x84>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <prvTracePortGetTimeStamp+0x8c>)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e000      	b.n	8002596 <prvTracePortGetTimeStamp+0x76>
		return;
 8002594:	bf00      	nop
}
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	2000021c 	.word	0x2000021c
 80025a4:	20000220 	.word	0x20000220
 80025a8:	e0001004 	.word	0xe0001004
 80025ac:	20001bec 	.word	0x20001bec
 80025b0:	20001bf0 	.word	0x20001bf0

080025b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <HAL_Init+0x40>)
 80025be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_Init+0x40>)
 80025ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_Init+0x40>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025dc:	2003      	movs	r0, #3
 80025de:	f000 f8d8 	bl	8002792 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e2:	200f      	movs	r0, #15
 80025e4:	f7fe fba2 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e8:	f7fe fa42 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000014 	.word	0x20000014
 800261c:	20001bf4 	.word	0x20001bf4

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20001bf4 	.word	0x20001bf4

08002638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db0b      	blt.n	80026c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <__NVIC_EnableIRQ+0x38>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ff4c 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ba:	f7ff ff61 	bl	8002680 <__NVIC_GetPriorityGrouping>
 80027be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	6978      	ldr	r0, [r7, #20]
 80027c6:	f7ff ffb1 	bl	800272c <NVIC_EncodePriority>
 80027ca:	4602      	mov	r2, r0
 80027cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff80 	bl	80026d8 <__NVIC_SetPriority>
}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff54 	bl	800269c <__NVIC_EnableIRQ>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e16b      	b.n	8002af0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 815a 	bne.w	8002aea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d005      	beq.n	800284e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	2b02      	cmp	r3, #2
 800284c:	d130      	bne.n	80028b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 0201 	and.w	r2, r3, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d017      	beq.n	80028ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d123      	bne.n	8002940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	08da      	lsrs	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80b4 	beq.w	8002aea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b60      	ldr	r3, [pc, #384]	; (8002b08 <HAL_GPIO_Init+0x30c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	4a5f      	ldr	r2, [pc, #380]	; (8002b08 <HAL_GPIO_Init+0x30c>)
 800298c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002990:	6453      	str	r3, [r2, #68]	; 0x44
 8002992:	4b5d      	ldr	r3, [pc, #372]	; (8002b08 <HAL_GPIO_Init+0x30c>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800299e:	4a5b      	ldr	r2, [pc, #364]	; (8002b0c <HAL_GPIO_Init+0x310>)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_GPIO_Init+0x314>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d02b      	beq.n	8002a22 <HAL_GPIO_Init+0x226>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_GPIO_Init+0x318>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d025      	beq.n	8002a1e <HAL_GPIO_Init+0x222>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a50      	ldr	r2, [pc, #320]	; (8002b18 <HAL_GPIO_Init+0x31c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01f      	beq.n	8002a1a <HAL_GPIO_Init+0x21e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4f      	ldr	r2, [pc, #316]	; (8002b1c <HAL_GPIO_Init+0x320>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d019      	beq.n	8002a16 <HAL_GPIO_Init+0x21a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4e      	ldr	r2, [pc, #312]	; (8002b20 <HAL_GPIO_Init+0x324>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <HAL_GPIO_Init+0x216>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4d      	ldr	r2, [pc, #308]	; (8002b24 <HAL_GPIO_Init+0x328>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00d      	beq.n	8002a0e <HAL_GPIO_Init+0x212>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4c      	ldr	r2, [pc, #304]	; (8002b28 <HAL_GPIO_Init+0x32c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d007      	beq.n	8002a0a <HAL_GPIO_Init+0x20e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4b      	ldr	r2, [pc, #300]	; (8002b2c <HAL_GPIO_Init+0x330>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_GPIO_Init+0x20a>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e00e      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a06:	2308      	movs	r3, #8
 8002a08:	e00c      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a0a:	2306      	movs	r3, #6
 8002a0c:	e00a      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a0e:	2305      	movs	r3, #5
 8002a10:	e008      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a12:	2304      	movs	r3, #4
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a16:	2303      	movs	r3, #3
 8002a18:	e004      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e002      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a22:	2300      	movs	r3, #0
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f002 0203 	and.w	r2, r2, #3
 8002a2a:	0092      	lsls	r2, r2, #2
 8002a2c:	4093      	lsls	r3, r2
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a34:	4935      	ldr	r1, [pc, #212]	; (8002b0c <HAL_GPIO_Init+0x310>)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a66:	4a32      	ldr	r2, [pc, #200]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a6c:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a90:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae4:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	f67f ae90 	bls.w	8002818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020c00 	.word	0x40020c00
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40021400 	.word	0x40021400
 8002b28:	40021800 	.word	0x40021800
 8002b2c:	40021c00 	.word	0x40021c00
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b50:	e003      	b.n	8002b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b52:	887b      	ldrh	r3, [r7, #2]
 8002b54:	041a      	lsls	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	619a      	str	r2, [r3, #24]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b78:	887a      	ldrh	r2, [r7, #2]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	041a      	lsls	r2, r3, #16
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	400b      	ands	r3, r1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	619a      	str	r2, [r3, #24]
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d006      	beq.n	8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f806 	bl	8002bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40013c00 	.word	0x40013c00

08002bcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fd9d 	bl	8006738 <USB_GetMode>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	f040 80fb 	bne.w	8002dfc <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 fd60 	bl	80066d0 <USB_ReadInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80f1 	beq.w	8002dfa <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 fd57 	bl	80066d0 <USB_ReadInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c2c:	d104      	bne.n	8002c38 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c36:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fd47 	bl	80066d0 <USB_ReadInterrupts>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c4c:	d104      	bne.n	8002c58 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c56:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 fd37 	bl	80066d0 <USB_ReadInterrupts>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c6c:	d104      	bne.n	8002c78 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c76:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 fd27 	bl	80066d0 <USB_ReadInterrupts>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d103      	bne.n	8002c94 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2202      	movs	r2, #2
 8002c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 fd19 	bl	80066d0 <USB_ReadInterrupts>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca8:	d120      	bne.n	8002cec <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cb2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d113      	bne.n	8002cec <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002cc4:	2110      	movs	r1, #16
 8002cc6:	6938      	ldr	r0, [r7, #16]
 8002cc8:	f003 fc4a 	bl	8006560 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ccc:	6938      	ldr	r0, [r7, #16]
 8002cce:	f003 fc79 	bl	80065c4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	7a5b      	ldrb	r3, [r3, #9]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d105      	bne.n	8002ce6 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 fd37 	bl	8006754 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f007 fc24 	bl	800a534 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f003 fced 	bl	80066d0 <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d00:	d102      	bne.n	8002d08 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f001 fc87 	bl	8004616 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 fcdf 	bl	80066d0 <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d106      	bne.n	8002d2a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f007 fbed 	bl	800a4fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2208      	movs	r2, #8
 8002d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 fcce 	bl	80066d0 <USB_ReadInterrupts>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d3e:	d139      	bne.n	8002db4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f003 fd42 	bl	80067ce <USB_HC_ReadInterrupt>
 8002d4a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e025      	b.n	8002d9e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d018      	beq.n	8002d98 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d7c:	d106      	bne.n	8002d8c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f859 	bl	8002e3c <HCD_HC_IN_IRQHandler>
 8002d8a:	e005      	b.n	8002d98 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 febb 	bl	8003b0e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	795b      	ldrb	r3, [r3, #5]
 8002da2:	461a      	mov	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d3d3      	bcc.n	8002d52 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fc89 	bl	80066d0 <USB_ReadInterrupts>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d101      	bne.n	8002dcc <HAL_HCD_IRQHandler+0x1ea>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_HCD_IRQHandler+0x1ec>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d014      	beq.n	8002dfc <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699a      	ldr	r2, [r3, #24]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0210 	bic.w	r2, r2, #16
 8002de0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f001 fb38 	bl	8004458 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0210 	orr.w	r2, r2, #16
 8002df6:	619a      	str	r2, [r3, #24]
 8002df8:	e000      	b.n	8002dfc <HAL_HCD_IRQHandler+0x21a>
      return;
 8002dfa:	bf00      	nop
    }
  }
}
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_HCD_Stop+0x16>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e00d      	b.n	8002e34 <HAL_HCD_Stop+0x32>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fe03 	bl	8006a30 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 fc4b 	bl	80066f6 <USB_ReadChInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d11a      	bne.n	8002ea0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e76:	461a      	mov	r2, r3
 8002e78:	2304      	movs	r3, #4
 8002e7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	334d      	adds	r3, #77	; 0x4d
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fca9 	bl	80067f0 <USB_HC_Halt>
 8002e9e:	e09e      	b.n	8002fde <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f003 fc24 	bl	80066f6 <USB_ReadChInterrupts>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb8:	d11b      	bne.n	8002ef2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ecc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	334d      	adds	r3, #77	; 0x4d
 8002ede:	2208      	movs	r2, #8
 8002ee0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 fc80 	bl	80067f0 <USB_HC_Halt>
 8002ef0:	e075      	b.n	8002fde <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 fbfb 	bl	80066f6 <USB_ReadChInterrupts>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d11a      	bne.n	8002f40 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	461a      	mov	r2, r3
 8002f18:	2308      	movs	r3, #8
 8002f1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	334d      	adds	r3, #77	; 0x4d
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 fc59 	bl	80067f0 <USB_HC_Halt>
 8002f3e:	e04e      	b.n	8002fde <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fbd4 	bl	80066f6 <USB_ReadChInterrupts>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f58:	d11b      	bne.n	8002f92 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	461a      	mov	r2, r3
 8002f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	334d      	adds	r3, #77	; 0x4d
 8002f7e:	2209      	movs	r2, #9
 8002f80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f003 fc30 	bl	80067f0 <USB_HC_Halt>
 8002f90:	e025      	b.n	8002fde <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 fbab 	bl	80066f6 <USB_ReadChInterrupts>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b80      	cmp	r3, #128	; 0x80
 8002fa8:	d119      	bne.n	8002fde <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	334d      	adds	r3, #77	; 0x4d
 8002fcc:	2207      	movs	r2, #7
 8002fce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 fc09 	bl	80067f0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 fb85 	bl	80066f6 <USB_ReadChInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff6:	d112      	bne.n	800301e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f003 fbf5 	bl	80067f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003012:	461a      	mov	r2, r3
 8003014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003018:	6093      	str	r3, [r2, #8]
 800301a:	f000 bd75 	b.w	8003b08 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fb65 	bl	80066f6 <USB_ReadChInterrupts>
 800302c:	4603      	mov	r3, r0
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b01      	cmp	r3, #1
 8003034:	f040 8128 	bne.w	8003288 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	461a      	mov	r2, r3
 8003046:	2320      	movs	r3, #32
 8003048:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	331b      	adds	r3, #27
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d119      	bne.n	8003094 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	331b      	adds	r3, #27
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	0151      	lsls	r1, r2, #5
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	440a      	add	r2, r1
 800308a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800308e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003092:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	799b      	ldrb	r3, [r3, #6]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01b      	beq.n	80030d4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3330      	adds	r3, #48	; 0x30
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	1ac9      	subs	r1, r1, r3
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4403      	add	r3, r0
 80030d0:	3338      	adds	r3, #56	; 0x38
 80030d2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	334d      	adds	r3, #77	; 0x4d
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3344      	adds	r3, #68	; 0x44
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	461a      	mov	r2, r3
 800310a:	2301      	movs	r3, #1
 800310c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3326      	adds	r3, #38	; 0x26
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3326      	adds	r3, #38	; 0x26
 8003134:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003136:	2b02      	cmp	r3, #2
 8003138:	d110      	bne.n	800315c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f003 fb54 	bl	80067f0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	461a      	mov	r2, r3
 8003156:	2310      	movs	r3, #16
 8003158:	6093      	str	r3, [r2, #8]
 800315a:	e03d      	b.n	80031d8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	3326      	adds	r3, #38	; 0x26
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d00a      	beq.n	8003188 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3326      	adds	r3, #38	; 0x26
 8003182:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003184:	2b01      	cmp	r3, #1
 8003186:	d127      	bne.n	80031d8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	0151      	lsls	r1, r2, #5
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	440a      	add	r2, r1
 800319e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334c      	adds	r3, #76	; 0x4c
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	334c      	adds	r3, #76	; 0x4c
 80031cc:	781a      	ldrb	r2, [r3, #0]
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f007 f9bc 	bl	800a550 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	799b      	ldrb	r3, [r3, #6]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d13b      	bne.n	8003258 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	3338      	adds	r3, #56	; 0x38
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4403      	add	r3, r0
 8003200:	3328      	adds	r3, #40	; 0x28
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	440b      	add	r3, r1
 8003206:	1e59      	subs	r1, r3, #1
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4403      	add	r3, r0
 8003216:	3328      	adds	r3, #40	; 0x28
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	fbb1 f3f3 	udiv	r3, r1, r3
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8470 	beq.w	8003b08 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	333c      	adds	r3, #60	; 0x3c
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	f083 0301 	eor.w	r3, r3, #1
 8003240:	b2d8      	uxtb	r0, r3
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	333c      	adds	r3, #60	; 0x3c
 8003250:	4602      	mov	r2, r0
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	f000 bc58 	b.w	8003b08 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	333c      	adds	r3, #60	; 0x3c
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	f083 0301 	eor.w	r3, r3, #1
 8003270:	b2d8      	uxtb	r0, r3
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	333c      	adds	r3, #60	; 0x3c
 8003280:	4602      	mov	r2, r0
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	f000 bc40 	b.w	8003b08 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f003 fa30 	bl	80066f6 <USB_ReadChInterrupts>
 8003296:	4603      	mov	r3, r0
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b20      	cmp	r3, #32
 800329e:	d131      	bne.n	8003304 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	461a      	mov	r2, r3
 80032ae:	2320      	movs	r3, #32
 80032b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	331a      	adds	r3, #26
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f040 841f 	bne.w	8003b08 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	331b      	adds	r3, #27
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	334d      	adds	r3, #77	; 0x4d
 80032ee:	2203      	movs	r2, #3
 80032f0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 fa78 	bl	80067f0 <USB_HC_Halt>
 8003300:	f000 bc02 	b.w	8003b08 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f003 f9f2 	bl	80066f6 <USB_ReadChInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b02      	cmp	r3, #2
 800331a:	f040 8305 	bne.w	8003928 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	2302      	movs	r3, #2
 800332e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	334d      	adds	r3, #77	; 0x4d
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d114      	bne.n	8003370 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	334d      	adds	r3, #77	; 0x4d
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	334c      	adds	r3, #76	; 0x4c
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	e2cc      	b.n	800390a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	334d      	adds	r3, #77	; 0x4d
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d114      	bne.n	80033b0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	334d      	adds	r3, #77	; 0x4d
 8003396:	2202      	movs	r2, #2
 8003398:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	334c      	adds	r3, #76	; 0x4c
 80033aa:	2205      	movs	r2, #5
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e2ac      	b.n	800390a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	334d      	adds	r3, #77	; 0x4d
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b07      	cmp	r3, #7
 80033c4:	d00b      	beq.n	80033de <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	334d      	adds	r3, #77	; 0x4d
 80033d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033d8:	2b09      	cmp	r3, #9
 80033da:	f040 80a6 	bne.w	800352a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	334d      	adds	r3, #77	; 0x4d
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	3344      	adds	r3, #68	; 0x44
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1c59      	adds	r1, r3, #1
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4403      	add	r3, r0
 8003412:	3344      	adds	r3, #68	; 0x44
 8003414:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3344      	adds	r3, #68	; 0x44
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d943      	bls.n	80034b4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3344      	adds	r3, #68	; 0x44
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	331a      	adds	r3, #26
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d123      	bne.n	800349e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	331b      	adds	r3, #27
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	331c      	adds	r3, #28
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4413      	add	r3, r2
 8003486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	0151      	lsls	r1, r2, #5
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	440a      	add	r2, r1
 8003494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	334c      	adds	r3, #76	; 0x4c
 80034ae:	2204      	movs	r2, #4
 80034b0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034b2:	e229      	b.n	8003908 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	334c      	adds	r3, #76	; 0x4c
 80034c4:	2202      	movs	r2, #2
 80034c6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3326      	adds	r3, #38	; 0x26
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3326      	adds	r3, #38	; 0x26
 80034ee:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	f040 8209 	bne.w	8003908 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800350c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003514:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4413      	add	r3, r2
 800351e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003528:	e1ee      	b.n	8003908 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	334d      	adds	r3, #77	; 0x4d
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b05      	cmp	r3, #5
 800353e:	f040 80c8 	bne.w	80036d2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	334d      	adds	r3, #77	; 0x4d
 8003552:	2202      	movs	r2, #2
 8003554:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	331b      	adds	r3, #27
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	f040 81ce 	bne.w	800390a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3326      	adds	r3, #38	; 0x26
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d16b      	bne.n	800365c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3348      	adds	r3, #72	; 0x48
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4403      	add	r3, r0
 80035a4:	3348      	adds	r3, #72	; 0x48
 80035a6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3348      	adds	r3, #72	; 0x48
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d943      	bls.n	8003646 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	3348      	adds	r3, #72	; 0x48
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	331b      	adds	r3, #27
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3344      	adds	r3, #68	; 0x44
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d809      	bhi.n	8003610 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	331c      	adds	r3, #28
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	440a      	add	r2, r1
 8003626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334c      	adds	r3, #76	; 0x4c
 8003640:	2204      	movs	r2, #4
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	e014      	b.n	8003670 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	334c      	adds	r3, #76	; 0x4c
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e009      	b.n	8003670 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	334c      	adds	r3, #76	; 0x4c
 800366c:	2202      	movs	r2, #2
 800366e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	3326      	adds	r3, #38	; 0x26
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3326      	adds	r3, #38	; 0x26
 8003696:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003698:	2b02      	cmp	r3, #2
 800369a:	f040 8136 	bne.w	800390a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e11b      	b.n	800390a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	334d      	adds	r3, #77	; 0x4d
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	f040 8081 	bne.w	80037ec <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	334d      	adds	r3, #77	; 0x4d
 80036fa:	2202      	movs	r2, #2
 80036fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	331b      	adds	r3, #27
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 80fa 	bne.w	800390a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	334c      	adds	r3, #76	; 0x4c
 8003726:	2202      	movs	r2, #2
 8003728:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	0151      	lsls	r1, r2, #5
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	440a      	add	r2, r1
 8003740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003748:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	0151      	lsls	r1, r2, #5
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	440a      	add	r2, r1
 8003760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003768:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	0151      	lsls	r1, r2, #5
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	440a      	add	r2, r1
 8003780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003784:	f023 0320 	bic.w	r3, r3, #32
 8003788:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3326      	adds	r3, #38	; 0x26
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00b      	beq.n	80037b8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	3326      	adds	r3, #38	; 0x26
 80037b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	f040 80a9 	bne.w	800390a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	461a      	mov	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e08e      	b.n	800390a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	334d      	adds	r3, #77	; 0x4d
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d143      	bne.n	800388a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	334d      	adds	r3, #77	; 0x4d
 8003812:	2202      	movs	r2, #2
 8003814:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	334c      	adds	r3, #76	; 0x4c
 8003826:	2202      	movs	r2, #2
 8003828:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	3326      	adds	r3, #38	; 0x26
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3326      	adds	r3, #38	; 0x26
 8003850:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003852:	2b02      	cmp	r3, #2
 8003854:	d159      	bne.n	800390a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800386c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003874:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003882:	461a      	mov	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e03f      	b.n	800390a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	334d      	adds	r3, #77	; 0x4d
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d126      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	334d      	adds	r3, #77	; 0x4d
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	3344      	adds	r3, #68	; 0x44
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	1c59      	adds	r1, r3, #1
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4403      	add	r3, r0
 80038d4:	3344      	adds	r3, #68	; 0x44
 80038d6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	334c      	adds	r3, #76	; 0x4c
 80038e8:	2204      	movs	r2, #4
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	e00d      	b.n	800390a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	334d      	adds	r3, #77	; 0x4d
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b02      	cmp	r3, #2
 8003902:	f000 8100 	beq.w	8003b06 <HCD_HC_IN_IRQHandler+0xcca>
 8003906:	e000      	b.n	800390a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003908:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	334c      	adds	r3, #76	; 0x4c
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f006 fe15 	bl	800a550 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003926:	e0ef      	b.n	8003b08 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f002 fee0 	bl	80066f6 <USB_ReadChInterrupts>
 8003936:	4603      	mov	r3, r0
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d12f      	bne.n	80039a0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394c:	461a      	mov	r2, r3
 800394e:	2340      	movs	r3, #64	; 0x40
 8003950:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	334d      	adds	r3, #77	; 0x4d
 8003962:	2205      	movs	r2, #5
 8003964:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	331a      	adds	r3, #26
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	3344      	adds	r3, #68	; 0x44
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f002 ff29 	bl	80067f0 <USB_HC_Halt>
 800399e:	e0b3      	b.n	8003b08 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 fea4 	bl	80066f6 <USB_ReadChInterrupts>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	f040 80a7 	bne.w	8003b08 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3326      	adds	r3, #38	; 0x26
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d11b      	bne.n	8003a08 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	3344      	adds	r3, #68	; 0x44
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	334d      	adds	r3, #77	; 0x4d
 80039f4:	2204      	movs	r2, #4
 80039f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f002 fef5 	bl	80067f0 <USB_HC_Halt>
 8003a06:	e03f      	b.n	8003a88 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	3326      	adds	r3, #38	; 0x26
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3326      	adds	r3, #38	; 0x26
 8003a2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d129      	bne.n	8003a88 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3344      	adds	r3, #68	; 0x44
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	799b      	ldrb	r3, [r3, #6]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HCD_HC_IN_IRQHandler+0xc2a>
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	331b      	adds	r3, #27
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d110      	bne.n	8003a88 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	334d      	adds	r3, #77	; 0x4d
 8003a76:	2204      	movs	r2, #4
 8003a78:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f002 feb4 	bl	80067f0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	331b      	adds	r3, #27
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d129      	bne.n	8003af2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	331b      	adds	r3, #27
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	0151      	lsls	r1, r2, #5
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	440a      	add	r2, r1
 8003ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	0151      	lsls	r1, r2, #5
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	440a      	add	r2, r1
 8003ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aec:	f043 0320 	orr.w	r3, r3, #32
 8003af0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afe:	461a      	mov	r2, r3
 8003b00:	2310      	movs	r3, #16
 8003b02:	6093      	str	r3, [r2, #8]
 8003b04:	e000      	b.n	8003b08 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003b06:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 fde2 	bl	80066f6 <USB_ReadChInterrupts>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d11b      	bne.n	8003b74 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	334d      	adds	r3, #77	; 0x4d
 8003b5e:	2207      	movs	r2, #7
 8003b60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f002 fe40 	bl	80067f0 <USB_HC_Halt>
 8003b70:	f000 bc6f 	b.w	8004452 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f002 fdba 	bl	80066f6 <USB_ReadChInterrupts>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	f040 8082 	bne.w	8003c92 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	3319      	adds	r3, #25
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d124      	bne.n	8003c00 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	3319      	adds	r3, #25
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	334c      	adds	r3, #76	; 0x4c
 8003bda:	2202      	movs	r2, #2
 8003bdc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	334d      	adds	r3, #77	; 0x4d
 8003bee:	2203      	movs	r2, #3
 8003bf0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f002 fdf8 	bl	80067f0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	331a      	adds	r3, #26
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	f040 841d 	bne.w	8004452 <HCD_HC_OUT_IRQHandler+0x944>
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	331b      	adds	r3, #27
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f040 8411 	bne.w	8004452 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3326      	adds	r3, #38	; 0x26
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d009      	beq.n	8003c5a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	331b      	adds	r3, #27
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	334d      	adds	r3, #77	; 0x4d
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f002 fdba 	bl	80067f0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	3344      	adds	r3, #68	; 0x44
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e3df      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	4611      	mov	r1, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f002 fd2b 	bl	80066f6 <USB_ReadChInterrupts>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003caa:	d111      	bne.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cbe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f002 fd91 	bl	80067f0 <USB_HC_Halt>
 8003cce:	e3c0      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f002 fd0c 	bl	80066f6 <USB_ReadChInterrupts>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d168      	bne.n	8003dba <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3344      	adds	r3, #68	; 0x44
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f002 fcf6 	bl	80066f6 <USB_ReadChInterrupts>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d112      	bne.n	8003d3a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	3319      	adds	r3, #25
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d34:	461a      	mov	r2, r3
 8003d36:	2340      	movs	r3, #64	; 0x40
 8003d38:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	331b      	adds	r3, #27
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d019      	beq.n	8003d84 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	331b      	adds	r3, #27
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d82:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d90:	461a      	mov	r2, r3
 8003d92:	2301      	movs	r3, #1
 8003d94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	334d      	adds	r3, #77	; 0x4d
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f002 fd1c 	bl	80067f0 <USB_HC_Halt>
 8003db8:	e34b      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f002 fc97 	bl	80066f6 <USB_ReadChInterrupts>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d139      	bne.n	8003e46 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	334d      	adds	r3, #77	; 0x4d
 8003de2:	2205      	movs	r2, #5
 8003de4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	331a      	adds	r3, #26
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3319      	adds	r3, #25
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	3344      	adds	r3, #68	; 0x44
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f002 fcdf 	bl	80067f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2340      	movs	r3, #64	; 0x40
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	e305      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f002 fc51 	bl	80066f6 <USB_ReadChInterrupts>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d11a      	bne.n	8003e94 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	334d      	adds	r3, #77	; 0x4d
 8003e80:	2206      	movs	r2, #6
 8003e82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f002 fcaf 	bl	80067f0 <USB_HC_Halt>
 8003e92:	e2de      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f002 fc2a 	bl	80066f6 <USB_ReadChInterrupts>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d144      	bne.n	8003f36 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3344      	adds	r3, #68	; 0x44
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003ec0:	78fa      	ldrb	r2, [r7, #3]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	334d      	adds	r3, #77	; 0x4d
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3319      	adds	r3, #25
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d114      	bne.n	8003f14 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3318      	adds	r3, #24
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3319      	adds	r3, #25
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f002 fc67 	bl	80067f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2310      	movs	r3, #16
 8003f32:	6093      	str	r3, [r2, #8]
 8003f34:	e28d      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f002 fbd9 	bl	80066f6 <USB_ReadChInterrupts>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	2b80      	cmp	r3, #128	; 0x80
 8003f4c:	d169      	bne.n	8004022 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	799b      	ldrb	r3, [r3, #6]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d111      	bne.n	8003f7a <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	334d      	adds	r3, #77	; 0x4d
 8003f66:	2207      	movs	r2, #7
 8003f68:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f002 fc3c 	bl	80067f0 <USB_HC_Halt>
 8003f78:	e049      	b.n	800400e <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	3344      	adds	r3, #68	; 0x44
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	1c59      	adds	r1, r3, #1
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4403      	add	r3, r0
 8003f9a:	3344      	adds	r3, #68	; 0x44
 8003f9c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3344      	adds	r3, #68	; 0x44
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d922      	bls.n	8003ffa <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3344      	adds	r3, #68	; 0x44
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	334c      	adds	r3, #76	; 0x4c
 8003fd8:	2204      	movs	r2, #4
 8003fda:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	334c      	adds	r3, #76	; 0x4c
 8003fec:	781a      	ldrb	r2, [r3, #0]
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f006 faac 	bl	800a550 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ff8:	e009      	b.n	800400e <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	334c      	adds	r3, #76	; 0x4c
 800400a:	2202      	movs	r2, #2
 800400c:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4413      	add	r3, r2
 8004016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401a:	461a      	mov	r2, r3
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	6093      	str	r3, [r2, #8]
 8004020:	e217      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f002 fb63 	bl	80066f6 <USB_ReadChInterrupts>
 8004030:	4603      	mov	r3, r0
 8004032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403a:	d11b      	bne.n	8004074 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	334d      	adds	r3, #77	; 0x4d
 800404c:	2209      	movs	r2, #9
 800404e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f002 fbc9 	bl	80067f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406a:	461a      	mov	r2, r3
 800406c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004070:	6093      	str	r3, [r2, #8]
 8004072:	e1ee      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f002 fb3a 	bl	80066f6 <USB_ReadChInterrupts>
 8004082:	4603      	mov	r3, r0
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b02      	cmp	r3, #2
 800408a:	f040 81df 	bne.w	800444c <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409a:	461a      	mov	r2, r3
 800409c:	2302      	movs	r3, #2
 800409e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	334d      	adds	r3, #77	; 0x4d
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	f040 8093 	bne.w	80041de <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	334d      	adds	r3, #77	; 0x4d
 80040c8:	2202      	movs	r2, #2
 80040ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334c      	adds	r3, #76	; 0x4c
 80040dc:	2201      	movs	r2, #1
 80040de:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	3326      	adds	r3, #38	; 0x26
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d00b      	beq.n	800410e <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	3326      	adds	r3, #38	; 0x26
 8004106:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004108:	2b03      	cmp	r3, #3
 800410a:	f040 8190 	bne.w	800442e <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	799b      	ldrb	r3, [r3, #6]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d115      	bne.n	8004142 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	333d      	adds	r3, #61	; 0x3d
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	f083 0301 	eor.w	r3, r3, #1
 800412e:	b2d8      	uxtb	r0, r3
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	333d      	adds	r3, #61	; 0x3d
 800413e:	4602      	mov	r2, r0
 8004140:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	799b      	ldrb	r3, [r3, #6]
 8004146:	2b01      	cmp	r3, #1
 8004148:	f040 8171 	bne.w	800442e <HCD_HC_OUT_IRQHandler+0x920>
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	3334      	adds	r3, #52	; 0x34
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 8165 	beq.w	800442e <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	3334      	adds	r3, #52	; 0x34
 8004174:	6819      	ldr	r1, [r3, #0]
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4403      	add	r3, r0
 8004184:	3328      	adds	r3, #40	; 0x28
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	440b      	add	r3, r1
 800418a:	1e59      	subs	r1, r3, #1
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4403      	add	r3, r0
 800419a:	3328      	adds	r3, #40	; 0x28
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	fbb1 f3f3 	udiv	r3, r1, r3
 80041a2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 813f 	beq.w	800442e <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	333d      	adds	r3, #61	; 0x3d
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	f083 0301 	eor.w	r3, r3, #1
 80041c8:	b2d8      	uxtb	r0, r3
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	333d      	adds	r3, #61	; 0x3d
 80041d8:	4602      	mov	r2, r0
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e127      	b.n	800442e <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	334d      	adds	r3, #77	; 0x4d
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d120      	bne.n	8004236 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	334d      	adds	r3, #77	; 0x4d
 8004204:	2202      	movs	r2, #2
 8004206:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	331b      	adds	r3, #27
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	f040 8107 	bne.w	800442e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	334c      	adds	r3, #76	; 0x4c
 8004230:	2202      	movs	r2, #2
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	e0fb      	b.n	800442e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	334d      	adds	r3, #77	; 0x4d
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d13a      	bne.n	80042c2 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	334d      	adds	r3, #77	; 0x4d
 800425c:	2202      	movs	r2, #2
 800425e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	334c      	adds	r3, #76	; 0x4c
 8004270:	2202      	movs	r2, #2
 8004272:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	331b      	adds	r3, #27
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b01      	cmp	r3, #1
 8004288:	f040 80d1 	bne.w	800442e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	331b      	adds	r3, #27
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	0151      	lsls	r1, r2, #5
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	440a      	add	r2, r1
 80042b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042be:	6053      	str	r3, [r2, #4]
 80042c0:	e0b5      	b.n	800442e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	334d      	adds	r3, #77	; 0x4d
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b05      	cmp	r3, #5
 80042d6:	d114      	bne.n	8004302 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	334d      	adds	r3, #77	; 0x4d
 80042e8:	2202      	movs	r2, #2
 80042ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	334c      	adds	r3, #76	; 0x4c
 80042fc:	2202      	movs	r2, #2
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	e095      	b.n	800442e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	334d      	adds	r3, #77	; 0x4d
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b06      	cmp	r3, #6
 8004316:	d114      	bne.n	8004342 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	334d      	adds	r3, #77	; 0x4d
 8004328:	2202      	movs	r2, #2
 800432a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	334c      	adds	r3, #76	; 0x4c
 800433c:	2205      	movs	r2, #5
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	e075      	b.n	800442e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	334d      	adds	r3, #77	; 0x4d
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b07      	cmp	r3, #7
 8004356:	d00a      	beq.n	800436e <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	334d      	adds	r3, #77	; 0x4d
 8004368:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800436a:	2b09      	cmp	r3, #9
 800436c:	d170      	bne.n	8004450 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	334d      	adds	r3, #77	; 0x4d
 800437e:	2202      	movs	r2, #2
 8004380:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3344      	adds	r3, #68	; 0x44
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	1c59      	adds	r1, r3, #1
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4403      	add	r3, r0
 80043a2:	3344      	adds	r3, #68	; 0x44
 80043a4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	3344      	adds	r3, #68	; 0x44
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d914      	bls.n	80043e6 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	3344      	adds	r3, #68	; 0x44
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	334c      	adds	r3, #76	; 0x4c
 80043e0:	2204      	movs	r2, #4
 80043e2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043e4:	e022      	b.n	800442c <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	334c      	adds	r3, #76	; 0x4c
 80043f6:	2202      	movs	r2, #2
 80043f8:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004410:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004418:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4413      	add	r3, r2
 8004422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800442c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	334c      	adds	r3, #76	; 0x4c
 800443e:	781a      	ldrb	r2, [r3, #0]
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f006 f883 	bl	800a550 <HAL_HCD_HC_NotifyURBChange_Callback>
 800444a:	e002      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004450:	bf00      	nop
  }
}
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	0c5b      	lsrs	r3, r3, #17
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800448c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d004      	beq.n	800449e <HCD_RXQLVL_IRQHandler+0x46>
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2b05      	cmp	r3, #5
 8004498:	f000 80b6 	beq.w	8004608 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800449c:	e0b7      	b.n	800460e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80b3 	beq.w	800460c <HCD_RXQLVL_IRQHandler+0x1b4>
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	332c      	adds	r3, #44	; 0x2c
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a7 	beq.w	800460c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	3338      	adds	r3, #56	; 0x38
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	18d1      	adds	r1, r2, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4613      	mov	r3, r2
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4403      	add	r3, r0
 80044e2:	3334      	adds	r3, #52	; 0x34
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4299      	cmp	r1, r3
 80044e8:	f200 8083 	bhi.w	80045f2 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	332c      	adds	r3, #44	; 0x2c
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	b292      	uxth	r2, r2
 8004506:	4619      	mov	r1, r3
 8004508:	f002 f88a 	bl	8006620 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4613      	mov	r3, r2
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	332c      	adds	r3, #44	; 0x2c
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	18d1      	adds	r1, r2, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4403      	add	r3, r0
 8004530:	332c      	adds	r3, #44	; 0x2c
 8004532:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4613      	mov	r3, r2
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	3338      	adds	r3, #56	; 0x38
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	18d1      	adds	r1, r2, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4613      	mov	r3, r2
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4403      	add	r3, r0
 8004558:	3338      	adds	r3, #56	; 0x38
 800455a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	4413      	add	r3, r2
 8004564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	0cdb      	lsrs	r3, r3, #19
 800456c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004570:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	3328      	adds	r3, #40	; 0x28
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4293      	cmp	r3, r2
 800458a:	d13f      	bne.n	800460c <HCD_RXQLVL_IRQHandler+0x1b4>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d03c      	beq.n	800460c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	4413      	add	r3, r2
 800459a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045a8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045be:	461a      	mov	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	333c      	adds	r3, #60	; 0x3c
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f083 0301 	eor.w	r3, r3, #1
 80045da:	b2d8      	uxtb	r0, r3
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	333c      	adds	r3, #60	; 0x3c
 80045ec:	4602      	mov	r2, r0
 80045ee:	701a      	strb	r2, [r3, #0]
      break;
 80045f0:	e00c      	b.n	800460c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	334c      	adds	r3, #76	; 0x4c
 8004602:	2204      	movs	r2, #4
 8004604:	701a      	strb	r2, [r3, #0]
      break;
 8004606:	e001      	b.n	800460c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004608:	bf00      	nop
 800460a:	e000      	b.n	800460e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800460c:	bf00      	nop
  }
}
 800460e:	bf00      	nop
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b086      	sub	sp, #24
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004642:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d10b      	bne.n	8004666 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b01      	cmp	r3, #1
 8004656:	d102      	bne.n	800465e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f005 ff5d 	bl	800a518 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f043 0302 	orr.w	r3, r3, #2
 8004664:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b08      	cmp	r3, #8
 800466e:	d132      	bne.n	80046d6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f043 0308 	orr.w	r3, r3, #8
 8004676:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b04      	cmp	r3, #4
 8004680:	d126      	bne.n	80046d0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	7a5b      	ldrb	r3, [r3, #9]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d113      	bne.n	80046b2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004694:	d106      	bne.n	80046a4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2102      	movs	r1, #2
 800469c:	4618      	mov	r0, r3
 800469e:	f002 f859 	bl	8006754 <USB_InitFSLSPClkSel>
 80046a2:	e011      	b.n	80046c8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2101      	movs	r1, #1
 80046aa:	4618      	mov	r0, r3
 80046ac:	f002 f852 	bl	8006754 <USB_InitFSLSPClkSel>
 80046b0:	e00a      	b.n	80046c8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	79db      	ldrb	r3, [r3, #7]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d106      	bne.n	80046c8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046c0:	461a      	mov	r2, r3
 80046c2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80046c6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f005 ff53 	bl	800a574 <HAL_HCD_PortEnabled_Callback>
 80046ce:	e002      	b.n	80046d6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f005 ff5d 	bl	800a590 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d103      	bne.n	80046e8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f043 0320 	orr.w	r3, r3, #32
 80046e6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6013      	str	r3, [r2, #0]
}
 80046f4:	bf00      	nop
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e12b      	b.n	8004966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fc f9d0 	bl	8000ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2224      	movs	r2, #36	; 0x24
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800474e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800475e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004760:	f001 fa20 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 8004764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	4a81      	ldr	r2, [pc, #516]	; (8004970 <HAL_I2C_Init+0x274>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d807      	bhi.n	8004780 <HAL_I2C_Init+0x84>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a80      	ldr	r2, [pc, #512]	; (8004974 <HAL_I2C_Init+0x278>)
 8004774:	4293      	cmp	r3, r2
 8004776:	bf94      	ite	ls
 8004778:	2301      	movls	r3, #1
 800477a:	2300      	movhi	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e006      	b.n	800478e <HAL_I2C_Init+0x92>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a7d      	ldr	r2, [pc, #500]	; (8004978 <HAL_I2C_Init+0x27c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	bf94      	ite	ls
 8004788:	2301      	movls	r3, #1
 800478a:	2300      	movhi	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e0e7      	b.n	8004966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4a78      	ldr	r2, [pc, #480]	; (800497c <HAL_I2C_Init+0x280>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	0c9b      	lsrs	r3, r3, #18
 80047a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4a6a      	ldr	r2, [pc, #424]	; (8004970 <HAL_I2C_Init+0x274>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d802      	bhi.n	80047d0 <HAL_I2C_Init+0xd4>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	3301      	adds	r3, #1
 80047ce:	e009      	b.n	80047e4 <HAL_I2C_Init+0xe8>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	4a69      	ldr	r2, [pc, #420]	; (8004980 <HAL_I2C_Init+0x284>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	099b      	lsrs	r3, r3, #6
 80047e2:	3301      	adds	r3, #1
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	430b      	orrs	r3, r1
 80047ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	495c      	ldr	r1, [pc, #368]	; (8004970 <HAL_I2C_Init+0x274>)
 8004800:	428b      	cmp	r3, r1
 8004802:	d819      	bhi.n	8004838 <HAL_I2C_Init+0x13c>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e59      	subs	r1, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004812:	1c59      	adds	r1, r3, #1
 8004814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004818:	400b      	ands	r3, r1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_I2C_Init+0x138>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1e59      	subs	r1, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fbb1 f3f3 	udiv	r3, r1, r3
 800482c:	3301      	adds	r3, #1
 800482e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004832:	e051      	b.n	80048d8 <HAL_I2C_Init+0x1dc>
 8004834:	2304      	movs	r3, #4
 8004836:	e04f      	b.n	80048d8 <HAL_I2C_Init+0x1dc>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d111      	bne.n	8004864 <HAL_I2C_Init+0x168>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1e58      	subs	r0, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6859      	ldr	r1, [r3, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	440b      	add	r3, r1
 800484e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004852:	3301      	adds	r3, #1
 8004854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004858:	2b00      	cmp	r3, #0
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	e012      	b.n	800488a <HAL_I2C_Init+0x18e>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1e58      	subs	r0, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	0099      	lsls	r1, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	fbb0 f3f3 	udiv	r3, r0, r3
 800487a:	3301      	adds	r3, #1
 800487c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_I2C_Init+0x196>
 800488e:	2301      	movs	r3, #1
 8004890:	e022      	b.n	80048d8 <HAL_I2C_Init+0x1dc>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10e      	bne.n	80048b8 <HAL_I2C_Init+0x1bc>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1e58      	subs	r0, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	440b      	add	r3, r1
 80048a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ac:	3301      	adds	r3, #1
 80048ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b6:	e00f      	b.n	80048d8 <HAL_I2C_Init+0x1dc>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1e58      	subs	r0, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	0099      	lsls	r1, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ce:	3301      	adds	r3, #1
 80048d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	6809      	ldr	r1, [r1, #0]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6911      	ldr	r1, [r2, #16]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68d2      	ldr	r2, [r2, #12]
 8004912:	4311      	orrs	r1, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	430b      	orrs	r3, r1
 800491a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695a      	ldr	r2, [r3, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	000186a0 	.word	0x000186a0
 8004974:	001e847f 	.word	0x001e847f
 8004978:	003d08ff 	.word	0x003d08ff
 800497c:	431bde83 	.word	0x431bde83
 8004980:	10624dd3 	.word	0x10624dd3

08004984 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e128      	b.n	8004be8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a90      	ldr	r2, [pc, #576]	; (8004bf0 <HAL_I2S_Init+0x26c>)
 80049ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7fc f8d1 	bl	8000b58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049cc:	f023 030f 	bic.w	r3, r3, #15
 80049d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2202      	movs	r2, #2
 80049d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d060      	beq.n	8004aa4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80049ea:	2310      	movs	r3, #16
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	e001      	b.n	80049f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80049f0:	2320      	movs	r3, #32
 80049f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d802      	bhi.n	8004a02 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004a02:	2001      	movs	r0, #1
 8004a04:	f001 fa0a 	bl	8005e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8004a08:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a12:	d125      	bne.n	8004a60 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d010      	beq.n	8004a3e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	461a      	mov	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	3305      	adds	r3, #5
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	e01f      	b.n	8004a7e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	3305      	adds	r3, #5
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	e00e      	b.n	8004a7e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	461a      	mov	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	3305      	adds	r3, #5
 8004a7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4a5c      	ldr	r2, [pc, #368]	; (8004bf4 <HAL_I2S_Init+0x270>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	08db      	lsrs	r3, r3, #3
 8004a88:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	e003      	b.n	8004aac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d902      	bls.n	8004ab8 <HAL_I2S_Init+0x134>
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	2bff      	cmp	r3, #255	; 0xff
 8004ab6:	d907      	bls.n	8004ac8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f043 0210 	orr.w	r2, r3, #16
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e08f      	b.n	8004be8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	ea42 0103 	orr.w	r1, r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ae6:	f023 030f 	bic.w	r3, r3, #15
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6851      	ldr	r1, [r2, #4]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6892      	ldr	r2, [r2, #8]
 8004af2:	4311      	orrs	r1, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	68d2      	ldr	r2, [r2, #12]
 8004af8:	4311      	orrs	r1, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6992      	ldr	r2, [r2, #24]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d161      	bne.n	8004bd8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a38      	ldr	r2, [pc, #224]	; (8004bf8 <HAL_I2S_Init+0x274>)
 8004b18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a37      	ldr	r2, [pc, #220]	; (8004bfc <HAL_I2S_Init+0x278>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <HAL_I2S_Init+0x1a4>
 8004b24:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <HAL_I2S_Init+0x27c>)
 8004b26:	e001      	b.n	8004b2c <HAL_I2S_Init+0x1a8>
 8004b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	4932      	ldr	r1, [pc, #200]	; (8004bfc <HAL_I2S_Init+0x278>)
 8004b34:	428a      	cmp	r2, r1
 8004b36:	d101      	bne.n	8004b3c <HAL_I2S_Init+0x1b8>
 8004b38:	4a31      	ldr	r2, [pc, #196]	; (8004c00 <HAL_I2S_Init+0x27c>)
 8004b3a:	e001      	b.n	8004b40 <HAL_I2S_Init+0x1bc>
 8004b3c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004b40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b44:	f023 030f 	bic.w	r3, r3, #15
 8004b48:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a2b      	ldr	r2, [pc, #172]	; (8004bfc <HAL_I2S_Init+0x278>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d101      	bne.n	8004b58 <HAL_I2S_Init+0x1d4>
 8004b54:	4b2a      	ldr	r3, [pc, #168]	; (8004c00 <HAL_I2S_Init+0x27c>)
 8004b56:	e001      	b.n	8004b5c <HAL_I2S_Init+0x1d8>
 8004b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <HAL_I2S_Init+0x278>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d101      	bne.n	8004b6e <HAL_I2S_Init+0x1ea>
 8004b6a:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <HAL_I2S_Init+0x27c>)
 8004b6c:	e001      	b.n	8004b72 <HAL_I2S_Init+0x1ee>
 8004b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b7e:	d003      	beq.n	8004b88 <HAL_I2S_Init+0x204>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d103      	bne.n	8004b90 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	e001      	b.n	8004b94 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	897b      	ldrh	r3, [r7, #10]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bc0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a0d      	ldr	r2, [pc, #52]	; (8004bfc <HAL_I2S_Init+0x278>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d101      	bne.n	8004bd0 <HAL_I2S_Init+0x24c>
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <HAL_I2S_Init+0x27c>)
 8004bce:	e001      	b.n	8004bd4 <HAL_I2S_Init+0x250>
 8004bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd4:	897a      	ldrh	r2, [r7, #10]
 8004bd6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3720      	adds	r7, #32
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	08004cfb 	.word	0x08004cfb
 8004bf4:	cccccccd 	.word	0xcccccccd
 8004bf8:	08004e11 	.word	0x08004e11
 8004bfc:	40003800 	.word	0x40003800
 8004c00:	40003400 	.word	0x40003400

08004c04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	881a      	ldrh	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	1c9a      	adds	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10e      	bne.n	8004c94 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff ffb8 	bl	8004c04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c94:	bf00      	nop
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	b292      	uxth	r2, r2
 8004cb0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	1c9a      	adds	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10e      	bne.n	8004cf2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ce2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff93 	bl	8004c18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d13a      	bne.n	8004d8c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d109      	bne.n	8004d34 <I2S_IRQHandler+0x3a>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d102      	bne.n	8004d34 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff ffb4 	bl	8004c9c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d126      	bne.n	8004d8c <I2S_IRQHandler+0x92>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d11f      	bne.n	8004d8c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	f043 0202 	orr.w	r2, r3, #2
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff ff50 	bl	8004c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d136      	bne.n	8004e06 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d109      	bne.n	8004db6 <I2S_IRQHandler+0xbc>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dac:	2b80      	cmp	r3, #128	; 0x80
 8004dae:	d102      	bne.n	8004db6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff45 	bl	8004c40 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d122      	bne.n	8004e06 <I2S_IRQHandler+0x10c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d11b      	bne.n	8004e06 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ddc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	f043 0204 	orr.w	r2, r3, #4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ff13 	bl	8004c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a92      	ldr	r2, [pc, #584]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004e2a:	4b92      	ldr	r3, [pc, #584]	; (8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e2c:	e001      	b.n	8004e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a8b      	ldr	r2, [pc, #556]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d101      	bne.n	8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004e48:	4b8a      	ldr	r3, [pc, #552]	; (8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e4a:	e001      	b.n	8004e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004e4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5c:	d004      	beq.n	8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 8099 	bne.w	8004f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d107      	bne.n	8004e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f925 	bl	80050cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d107      	bne.n	8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9c8 	bl	800522c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d13a      	bne.n	8004f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d035      	beq.n	8004f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a6e      	ldr	r2, [pc, #440]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004eba:	4b6e      	ldr	r3, [pc, #440]	; (8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ebc:	e001      	b.n	8004ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4969      	ldr	r1, [pc, #420]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eca:	428b      	cmp	r3, r1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004ece:	4b69      	ldr	r3, [pc, #420]	; (8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ed0:	e001      	b.n	8004ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004eda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	f043 0202 	orr.w	r2, r3, #2
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fe88 	bl	8004c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	f040 80c3 	bne.w	80050ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 80bd 	beq.w	80050ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a49      	ldr	r2, [pc, #292]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004f4e:	4b49      	ldr	r3, [pc, #292]	; (8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f50:	e001      	b.n	8004f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4944      	ldr	r1, [pc, #272]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f5e:	428b      	cmp	r3, r1
 8004f60:	d101      	bne.n	8004f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f62:	4b44      	ldr	r3, [pc, #272]	; (8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f64:	e001      	b.n	8004f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f70:	2300      	movs	r3, #0
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	f043 0204 	orr.w	r2, r3, #4
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff fe4a 	bl	8004c2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f98:	e089      	b.n	80050ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d107      	bne.n	8004fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8be 	bl	8005130 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d107      	bne.n	8004fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f8fd 	bl	80051c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d12f      	bne.n	8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d02a      	beq.n	8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ff0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1e      	ldr	r2, [pc, #120]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d101      	bne.n	8005000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ffe:	e001      	b.n	8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4919      	ldr	r1, [pc, #100]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800500c:	428b      	cmp	r3, r1
 800500e:	d101      	bne.n	8005014 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005010:	4b18      	ldr	r3, [pc, #96]	; (8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005012:	e001      	b.n	8005018 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005018:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800501c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	f043 0202 	orr.w	r2, r3, #2
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fdfa 	bl	8004c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b08      	cmp	r3, #8
 8005040:	d136      	bne.n	80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d031      	beq.n	80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a07      	ldr	r2, [pc, #28]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d101      	bne.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005056:	4b07      	ldr	r3, [pc, #28]	; (8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005058:	e001      	b.n	800505e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800505a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4902      	ldr	r1, [pc, #8]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005066:	428b      	cmp	r3, r1
 8005068:	d106      	bne.n	8005078 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800506a:	4b02      	ldr	r3, [pc, #8]	; (8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800506c:	e006      	b.n	800507c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800506e:	bf00      	nop
 8005070:	40003800 	.word	0x40003800
 8005074:	40003400 	.word	0x40003400
 8005078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800507c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005080:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005090:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	f043 0204 	orr.w	r2, r3, #4
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fdc0 	bl	8004c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050ac:	e000      	b.n	80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050ae:	bf00      	nop
}
 80050b0:	bf00      	nop
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1c99      	adds	r1, r3, #2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6251      	str	r1, [r2, #36]	; 0x24
 80050de:	881a      	ldrh	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d113      	bne.n	8005126 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800510c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ffc9 	bl	80050b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	1c99      	adds	r1, r3, #2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6251      	str	r1, [r2, #36]	; 0x24
 8005142:	8819      	ldrh	r1, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <I2SEx_TxISR_I2SExt+0x90>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <I2SEx_TxISR_I2SExt+0x22>
 800514e:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <I2SEx_TxISR_I2SExt+0x94>)
 8005150:	e001      	b.n	8005156 <I2SEx_TxISR_I2SExt+0x26>
 8005152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005156:	460a      	mov	r2, r1
 8005158:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d121      	bne.n	80051b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <I2SEx_TxISR_I2SExt+0x90>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d101      	bne.n	8005180 <I2SEx_TxISR_I2SExt+0x50>
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <I2SEx_TxISR_I2SExt+0x94>)
 800517e:	e001      	b.n	8005184 <I2SEx_TxISR_I2SExt+0x54>
 8005180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	490d      	ldr	r1, [pc, #52]	; (80051c0 <I2SEx_TxISR_I2SExt+0x90>)
 800518c:	428b      	cmp	r3, r1
 800518e:	d101      	bne.n	8005194 <I2SEx_TxISR_I2SExt+0x64>
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <I2SEx_TxISR_I2SExt+0x94>)
 8005192:	e001      	b.n	8005198 <I2SEx_TxISR_I2SExt+0x68>
 8005194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005198:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800519c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff ff81 	bl	80050b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40003800 	.word	0x40003800
 80051c4:	40003400 	.word	0x40003400

080051c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68d8      	ldr	r0, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	1c99      	adds	r1, r3, #2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051e0:	b282      	uxth	r2, r0
 80051e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d113      	bne.n	8005224 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800520a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff ff4a 	bl	80050b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a20      	ldr	r2, [pc, #128]	; (80052bc <I2SEx_RxISR_I2SExt+0x90>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d101      	bne.n	8005242 <I2SEx_RxISR_I2SExt+0x16>
 800523e:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <I2SEx_RxISR_I2SExt+0x94>)
 8005240:	e001      	b.n	8005246 <I2SEx_RxISR_I2SExt+0x1a>
 8005242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005246:	68d8      	ldr	r0, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	1c99      	adds	r1, r3, #2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005252:	b282      	uxth	r2, r0
 8005254:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d121      	bne.n	80052b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a12      	ldr	r2, [pc, #72]	; (80052bc <I2SEx_RxISR_I2SExt+0x90>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <I2SEx_RxISR_I2SExt+0x50>
 8005278:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <I2SEx_RxISR_I2SExt+0x94>)
 800527a:	e001      	b.n	8005280 <I2SEx_RxISR_I2SExt+0x54>
 800527c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	490d      	ldr	r1, [pc, #52]	; (80052bc <I2SEx_RxISR_I2SExt+0x90>)
 8005288:	428b      	cmp	r3, r1
 800528a:	d101      	bne.n	8005290 <I2SEx_RxISR_I2SExt+0x64>
 800528c:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <I2SEx_RxISR_I2SExt+0x94>)
 800528e:	e001      	b.n	8005294 <I2SEx_RxISR_I2SExt+0x68>
 8005290:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005294:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005298:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff ff03 	bl	80050b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40003800 	.word	0x40003800
 80052c0:	40003400 	.word	0x40003400

080052c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e267      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d075      	beq.n	80053ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052e2:	4b88      	ldr	r3, [pc, #544]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d00c      	beq.n	8005308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ee:	4b85      	ldr	r3, [pc, #532]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d112      	bne.n	8005320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052fa:	4b82      	ldr	r3, [pc, #520]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005306:	d10b      	bne.n	8005320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005308:	4b7e      	ldr	r3, [pc, #504]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d05b      	beq.n	80053cc <HAL_RCC_OscConfig+0x108>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d157      	bne.n	80053cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e242      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005328:	d106      	bne.n	8005338 <HAL_RCC_OscConfig+0x74>
 800532a:	4b76      	ldr	r3, [pc, #472]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a75      	ldr	r2, [pc, #468]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	e01d      	b.n	8005374 <HAL_RCC_OscConfig+0xb0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005340:	d10c      	bne.n	800535c <HAL_RCC_OscConfig+0x98>
 8005342:	4b70      	ldr	r3, [pc, #448]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a6f      	ldr	r2, [pc, #444]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	4b6d      	ldr	r3, [pc, #436]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a6c      	ldr	r2, [pc, #432]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e00b      	b.n	8005374 <HAL_RCC_OscConfig+0xb0>
 800535c:	4b69      	ldr	r3, [pc, #420]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a68      	ldr	r2, [pc, #416]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	4b66      	ldr	r3, [pc, #408]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a65      	ldr	r2, [pc, #404]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 800536e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d013      	beq.n	80053a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fd f950 	bl	8002620 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005384:	f7fd f94c 	bl	8002620 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	; 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e207      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	4b5b      	ldr	r3, [pc, #364]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0xc0>
 80053a2:	e014      	b.n	80053ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a4:	f7fd f93c 	bl	8002620 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ac:	f7fd f938 	bl	8002620 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b64      	cmp	r3, #100	; 0x64
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e1f3      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053be:	4b51      	ldr	r3, [pc, #324]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0xe8>
 80053ca:	e000      	b.n	80053ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d063      	beq.n	80054a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053da:	4b4a      	ldr	r3, [pc, #296]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053e6:	4b47      	ldr	r3, [pc, #284]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d11c      	bne.n	800542c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053f2:	4b44      	ldr	r3, [pc, #272]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d116      	bne.n	800542c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fe:	4b41      	ldr	r3, [pc, #260]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_RCC_OscConfig+0x152>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d001      	beq.n	8005416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e1c7      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005416:	4b3b      	ldr	r3, [pc, #236]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4937      	ldr	r1, [pc, #220]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005426:	4313      	orrs	r3, r2
 8005428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542a:	e03a      	b.n	80054a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d020      	beq.n	8005476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005434:	4b34      	ldr	r3, [pc, #208]	; (8005508 <HAL_RCC_OscConfig+0x244>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543a:	f7fd f8f1 	bl	8002620 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005442:	f7fd f8ed 	bl	8002620 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e1a8      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005454:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005460:	4b28      	ldr	r3, [pc, #160]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4925      	ldr	r1, [pc, #148]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005470:	4313      	orrs	r3, r2
 8005472:	600b      	str	r3, [r1, #0]
 8005474:	e015      	b.n	80054a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005476:	4b24      	ldr	r3, [pc, #144]	; (8005508 <HAL_RCC_OscConfig+0x244>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547c:	f7fd f8d0 	bl	8002620 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005484:	f7fd f8cc 	bl	8002620 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e187      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005496:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d036      	beq.n	800551c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d016      	beq.n	80054e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054b6:	4b15      	ldr	r3, [pc, #84]	; (800550c <HAL_RCC_OscConfig+0x248>)
 80054b8:	2201      	movs	r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fd f8b0 	bl	8002620 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054c4:	f7fd f8ac 	bl	8002620 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e167      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d6:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_RCC_OscConfig+0x240>)
 80054d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f0      	beq.n	80054c4 <HAL_RCC_OscConfig+0x200>
 80054e2:	e01b      	b.n	800551c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054e4:	4b09      	ldr	r3, [pc, #36]	; (800550c <HAL_RCC_OscConfig+0x248>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ea:	f7fd f899 	bl	8002620 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f0:	e00e      	b.n	8005510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f2:	f7fd f895 	bl	8002620 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d907      	bls.n	8005510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e150      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
 8005504:	40023800 	.word	0x40023800
 8005508:	42470000 	.word	0x42470000
 800550c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005510:	4b88      	ldr	r3, [pc, #544]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 8005512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1ea      	bne.n	80054f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8097 	beq.w	8005658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552a:	2300      	movs	r3, #0
 800552c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800552e:	4b81      	ldr	r3, [pc, #516]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10f      	bne.n	800555a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	60bb      	str	r3, [r7, #8]
 800553e:	4b7d      	ldr	r3, [pc, #500]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	4a7c      	ldr	r2, [pc, #496]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 8005544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005548:	6413      	str	r3, [r2, #64]	; 0x40
 800554a:	4b7a      	ldr	r3, [pc, #488]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005556:	2301      	movs	r3, #1
 8005558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800555a:	4b77      	ldr	r3, [pc, #476]	; (8005738 <HAL_RCC_OscConfig+0x474>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	2b00      	cmp	r3, #0
 8005564:	d118      	bne.n	8005598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005566:	4b74      	ldr	r3, [pc, #464]	; (8005738 <HAL_RCC_OscConfig+0x474>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a73      	ldr	r2, [pc, #460]	; (8005738 <HAL_RCC_OscConfig+0x474>)
 800556c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005572:	f7fd f855 	bl	8002620 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557a:	f7fd f851 	bl	8002620 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e10c      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558c:	4b6a      	ldr	r3, [pc, #424]	; (8005738 <HAL_RCC_OscConfig+0x474>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d106      	bne.n	80055ae <HAL_RCC_OscConfig+0x2ea>
 80055a0:	4b64      	ldr	r3, [pc, #400]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a4:	4a63      	ldr	r2, [pc, #396]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80055a6:	f043 0301 	orr.w	r3, r3, #1
 80055aa:	6713      	str	r3, [r2, #112]	; 0x70
 80055ac:	e01c      	b.n	80055e8 <HAL_RCC_OscConfig+0x324>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCC_OscConfig+0x30c>
 80055b6:	4b5f      	ldr	r3, [pc, #380]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	4a5e      	ldr	r2, [pc, #376]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80055bc:	f043 0304 	orr.w	r3, r3, #4
 80055c0:	6713      	str	r3, [r2, #112]	; 0x70
 80055c2:	4b5c      	ldr	r3, [pc, #368]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	4a5b      	ldr	r2, [pc, #364]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	6713      	str	r3, [r2, #112]	; 0x70
 80055ce:	e00b      	b.n	80055e8 <HAL_RCC_OscConfig+0x324>
 80055d0:	4b58      	ldr	r3, [pc, #352]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d4:	4a57      	ldr	r2, [pc, #348]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	6713      	str	r3, [r2, #112]	; 0x70
 80055dc:	4b55      	ldr	r3, [pc, #340]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	4a54      	ldr	r2, [pc, #336]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80055e2:	f023 0304 	bic.w	r3, r3, #4
 80055e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d015      	beq.n	800561c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fd f816 	bl	8002620 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f6:	e00a      	b.n	800560e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f8:	f7fd f812 	bl	8002620 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	; 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e0cb      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560e:	4b49      	ldr	r3, [pc, #292]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0ee      	beq.n	80055f8 <HAL_RCC_OscConfig+0x334>
 800561a:	e014      	b.n	8005646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561c:	f7fd f800 	bl	8002620 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005622:	e00a      	b.n	800563a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005624:	f7fc fffc 	bl	8002620 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e0b5      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563a:	4b3e      	ldr	r3, [pc, #248]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1ee      	bne.n	8005624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005646:	7dfb      	ldrb	r3, [r7, #23]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d105      	bne.n	8005658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800564c:	4b39      	ldr	r3, [pc, #228]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	4a38      	ldr	r2, [pc, #224]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 8005652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80a1 	beq.w	80057a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005662:	4b34      	ldr	r3, [pc, #208]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 030c 	and.w	r3, r3, #12
 800566a:	2b08      	cmp	r3, #8
 800566c:	d05c      	beq.n	8005728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d141      	bne.n	80056fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005676:	4b31      	ldr	r3, [pc, #196]	; (800573c <HAL_RCC_OscConfig+0x478>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567c:	f7fc ffd0 	bl	8002620 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005684:	f7fc ffcc 	bl	8002620 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e087      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005696:	4b27      	ldr	r3, [pc, #156]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69da      	ldr	r2, [r3, #28]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	019b      	lsls	r3, r3, #6
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	3b01      	subs	r3, #1
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	491b      	ldr	r1, [pc, #108]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056cc:	4b1b      	ldr	r3, [pc, #108]	; (800573c <HAL_RCC_OscConfig+0x478>)
 80056ce:	2201      	movs	r2, #1
 80056d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d2:	f7fc ffa5 	bl	8002620 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056da:	f7fc ffa1 	bl	8002620 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e05c      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ec:	4b11      	ldr	r3, [pc, #68]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0f0      	beq.n	80056da <HAL_RCC_OscConfig+0x416>
 80056f8:	e054      	b.n	80057a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fa:	4b10      	ldr	r3, [pc, #64]	; (800573c <HAL_RCC_OscConfig+0x478>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005700:	f7fc ff8e 	bl	8002620 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005708:	f7fc ff8a 	bl	8002620 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e045      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <HAL_RCC_OscConfig+0x470>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0x444>
 8005726:	e03d      	b.n	80057a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d107      	bne.n	8005740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e038      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
 8005734:	40023800 	.word	0x40023800
 8005738:	40007000 	.word	0x40007000
 800573c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005740:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <HAL_RCC_OscConfig+0x4ec>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d028      	beq.n	80057a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d121      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005766:	429a      	cmp	r2, r3
 8005768:	d11a      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005770:	4013      	ands	r3, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005778:	4293      	cmp	r3, r2
 800577a:	d111      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	3b01      	subs	r3, #1
 800578a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d107      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40023800 	.word	0x40023800

080057b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0cc      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057c8:	4b68      	ldr	r3, [pc, #416]	; (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d90c      	bls.n	80057f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d6:	4b65      	ldr	r3, [pc, #404]	; (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057de:	4b63      	ldr	r3, [pc, #396]	; (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0b8      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d020      	beq.n	800583e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005808:	4b59      	ldr	r3, [pc, #356]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4a58      	ldr	r2, [pc, #352]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005820:	4b53      	ldr	r3, [pc, #332]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	4a52      	ldr	r2, [pc, #328]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800582a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800582c:	4b50      	ldr	r3, [pc, #320]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	494d      	ldr	r1, [pc, #308]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	4313      	orrs	r3, r2
 800583c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d044      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d107      	bne.n	8005862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	4b47      	ldr	r3, [pc, #284]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d119      	bne.n	8005892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e07f      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d003      	beq.n	8005872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800586e:	2b03      	cmp	r3, #3
 8005870:	d107      	bne.n	8005882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005872:	4b3f      	ldr	r3, [pc, #252]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e06f      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005882:	4b3b      	ldr	r3, [pc, #236]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e067      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005892:	4b37      	ldr	r3, [pc, #220]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f023 0203 	bic.w	r2, r3, #3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4934      	ldr	r1, [pc, #208]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058a4:	f7fc febc 	bl	8002620 <HAL_GetTick>
 80058a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058aa:	e00a      	b.n	80058c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ac:	f7fc feb8 	bl	8002620 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e04f      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c2:	4b2b      	ldr	r3, [pc, #172]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 020c 	and.w	r2, r3, #12
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d1eb      	bne.n	80058ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058d4:	4b25      	ldr	r3, [pc, #148]	; (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d20c      	bcs.n	80058fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e2:	4b22      	ldr	r3, [pc, #136]	; (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b20      	ldr	r3, [pc, #128]	; (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e032      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005908:	4b19      	ldr	r3, [pc, #100]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4916      	ldr	r1, [pc, #88]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005926:	4b12      	ldr	r3, [pc, #72]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	490e      	ldr	r1, [pc, #56]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800593a:	f000 f821 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 800593e:	4602      	mov	r2, r0
 8005940:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	490a      	ldr	r1, [pc, #40]	; (8005974 <HAL_RCC_ClockConfig+0x1c0>)
 800594c:	5ccb      	ldrb	r3, [r1, r3]
 800594e:	fa22 f303 	lsr.w	r3, r2, r3
 8005952:	4a09      	ldr	r2, [pc, #36]	; (8005978 <HAL_RCC_ClockConfig+0x1c4>)
 8005954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <HAL_RCC_ClockConfig+0x1c8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f7fb f9e6 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40023c00 	.word	0x40023c00
 8005970:	40023800 	.word	0x40023800
 8005974:	0800afd4 	.word	0x0800afd4
 8005978:	20000000 	.word	0x20000000
 800597c:	20000010 	.word	0x20000010

08005980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005984:	b094      	sub	sp, #80	; 0x50
 8005986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	647b      	str	r3, [r7, #68]	; 0x44
 800598c:	2300      	movs	r3, #0
 800598e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005990:	2300      	movs	r3, #0
 8005992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005998:	4b79      	ldr	r3, [pc, #484]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 030c 	and.w	r3, r3, #12
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d00d      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0x40>
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	f200 80e1 	bhi.w	8005b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x34>
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d003      	beq.n	80059ba <HAL_RCC_GetSysClockFreq+0x3a>
 80059b2:	e0db      	b.n	8005b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059b4:	4b73      	ldr	r3, [pc, #460]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80059b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059b8:	e0db      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059ba:	4b73      	ldr	r3, [pc, #460]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80059bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059be:	e0d8      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059c0:	4b6f      	ldr	r3, [pc, #444]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ca:	4b6d      	ldr	r3, [pc, #436]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d063      	beq.n	8005a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d6:	4b6a      	ldr	r3, [pc, #424]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	099b      	lsrs	r3, r3, #6
 80059dc:	2200      	movs	r2, #0
 80059de:	63bb      	str	r3, [r7, #56]	; 0x38
 80059e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e8:	633b      	str	r3, [r7, #48]	; 0x30
 80059ea:	2300      	movs	r3, #0
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
 80059ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059f2:	4622      	mov	r2, r4
 80059f4:	462b      	mov	r3, r5
 80059f6:	f04f 0000 	mov.w	r0, #0
 80059fa:	f04f 0100 	mov.w	r1, #0
 80059fe:	0159      	lsls	r1, r3, #5
 8005a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a04:	0150      	lsls	r0, r2, #5
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	1a51      	subs	r1, r2, r1
 8005a0e:	6139      	str	r1, [r7, #16]
 8005a10:	4629      	mov	r1, r5
 8005a12:	eb63 0301 	sbc.w	r3, r3, r1
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a24:	4659      	mov	r1, fp
 8005a26:	018b      	lsls	r3, r1, #6
 8005a28:	4651      	mov	r1, sl
 8005a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a2e:	4651      	mov	r1, sl
 8005a30:	018a      	lsls	r2, r1, #6
 8005a32:	4651      	mov	r1, sl
 8005a34:	ebb2 0801 	subs.w	r8, r2, r1
 8005a38:	4659      	mov	r1, fp
 8005a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a52:	4690      	mov	r8, r2
 8005a54:	4699      	mov	r9, r3
 8005a56:	4623      	mov	r3, r4
 8005a58:	eb18 0303 	adds.w	r3, r8, r3
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	462b      	mov	r3, r5
 8005a60:	eb49 0303 	adc.w	r3, r9, r3
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a72:	4629      	mov	r1, r5
 8005a74:	024b      	lsls	r3, r1, #9
 8005a76:	4621      	mov	r1, r4
 8005a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	024a      	lsls	r2, r1, #9
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a86:	2200      	movs	r2, #0
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a90:	f7fa fb9e 	bl	80001d0 <__aeabi_uldivmod>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4613      	mov	r3, r2
 8005a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a9c:	e058      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9e:	4b38      	ldr	r3, [pc, #224]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005aae:	623b      	str	r3, [r7, #32]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ab8:	4642      	mov	r2, r8
 8005aba:	464b      	mov	r3, r9
 8005abc:	f04f 0000 	mov.w	r0, #0
 8005ac0:	f04f 0100 	mov.w	r1, #0
 8005ac4:	0159      	lsls	r1, r3, #5
 8005ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aca:	0150      	lsls	r0, r2, #5
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005af0:	ebb2 040a 	subs.w	r4, r2, sl
 8005af4:	eb63 050b 	sbc.w	r5, r3, fp
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	00eb      	lsls	r3, r5, #3
 8005b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b06:	00e2      	lsls	r2, r4, #3
 8005b08:	4614      	mov	r4, r2
 8005b0a:	461d      	mov	r5, r3
 8005b0c:	4643      	mov	r3, r8
 8005b0e:	18e3      	adds	r3, r4, r3
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	464b      	mov	r3, r9
 8005b14:	eb45 0303 	adc.w	r3, r5, r3
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b26:	4629      	mov	r1, r5
 8005b28:	028b      	lsls	r3, r1, #10
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b30:	4621      	mov	r1, r4
 8005b32:	028a      	lsls	r2, r1, #10
 8005b34:	4610      	mov	r0, r2
 8005b36:	4619      	mov	r1, r3
 8005b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	61fa      	str	r2, [r7, #28]
 8005b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b44:	f7fa fb44 	bl	80001d0 <__aeabi_uldivmod>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	0c1b      	lsrs	r3, r3, #16
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b6a:	e002      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3750      	adds	r7, #80	; 0x50
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7e:	bf00      	nop
 8005b80:	40023800 	.word	0x40023800
 8005b84:	00f42400 	.word	0x00f42400
 8005b88:	007a1200 	.word	0x007a1200

08005b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b92:	681b      	ldr	r3, [r3, #0]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000000 	.word	0x20000000

08005ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ba8:	f7ff fff0 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	0a9b      	lsrs	r3, r3, #10
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	4903      	ldr	r1, [pc, #12]	; (8005bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bba:	5ccb      	ldrb	r3, [r1, r3]
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	0800afe4 	.word	0x0800afe4

08005bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bd0:	f7ff ffdc 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	0b5b      	lsrs	r3, r3, #13
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	4903      	ldr	r1, [pc, #12]	; (8005bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005be2:	5ccb      	ldrb	r3, [r1, r3]
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	0800afe4 	.word	0x0800afe4

08005bf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	220f      	movs	r2, #15
 8005c02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <HAL_RCC_GetClockConfig+0x5c>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 0203 	and.w	r2, r3, #3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c10:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <HAL_RCC_GetClockConfig+0x5c>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <HAL_RCC_GetClockConfig+0x5c>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <HAL_RCC_GetClockConfig+0x5c>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	08db      	lsrs	r3, r3, #3
 8005c2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <HAL_RCC_GetClockConfig+0x60>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0207 	and.w	r2, r3, #7
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	601a      	str	r2, [r3, #0]
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40023c00 	.word	0x40023c00

08005c58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d105      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d035      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c80:	4b62      	ldr	r3, [pc, #392]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c86:	f7fc fccb 	bl	8002620 <HAL_GetTick>
 8005c8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c8e:	f7fc fcc7 	bl	8002620 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e0b0      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ca0:	4b5b      	ldr	r3, [pc, #364]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	019a      	lsls	r2, r3, #6
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	071b      	lsls	r3, r3, #28
 8005cb8:	4955      	ldr	r1, [pc, #340]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cc0:	4b52      	ldr	r3, [pc, #328]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cc6:	f7fc fcab 	bl	8002620 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cce:	f7fc fca7 	bl	8002620 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e090      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ce0:	4b4b      	ldr	r3, [pc, #300]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8083 	beq.w	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	4b44      	ldr	r3, [pc, #272]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	4a43      	ldr	r2, [pc, #268]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d08:	6413      	str	r3, [r2, #64]	; 0x40
 8005d0a:	4b41      	ldr	r3, [pc, #260]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d16:	4b3f      	ldr	r3, [pc, #252]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3e      	ldr	r2, [pc, #248]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d22:	f7fc fc7d 	bl	8002620 <HAL_GetTick>
 8005d26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d2a:	f7fc fc79 	bl	8002620 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e062      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d3c:	4b35      	ldr	r3, [pc, #212]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d48:	4b31      	ldr	r3, [pc, #196]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d02f      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d028      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d66:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d70:	4b29      	ldr	r3, [pc, #164]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d76:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d7c:	4a24      	ldr	r2, [pc, #144]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d82:	4b23      	ldr	r3, [pc, #140]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d114      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d8e:	f7fc fc47 	bl	8002620 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d94:	e00a      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d96:	f7fc fc43 	bl	8002620 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e02a      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dac:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0ee      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc4:	d10d      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005dc6:	4b12      	ldr	r3, [pc, #72]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dda:	490d      	ldr	r1, [pc, #52]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	608b      	str	r3, [r1, #8]
 8005de0:	e005      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	4a0a      	ldr	r2, [pc, #40]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005dec:	6093      	str	r3, [r2, #8]
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dfa:	4905      	ldr	r1, [pc, #20]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	42470068 	.word	0x42470068
 8005e10:	40023800 	.word	0x40023800
 8005e14:	40007000 	.word	0x40007000
 8005e18:	42470e40 	.word	0x42470e40

08005e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d13f      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d006      	beq.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e50:	d12f      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e52:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e54:	617b      	str	r3, [r7, #20]
          break;
 8005e56:	e02f      	b.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e58:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e64:	d108      	bne.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e66:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e6e:	4a19      	ldr	r2, [pc, #100]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	e007      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e78:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e80:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e88:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8e:	099b      	lsrs	r3, r3, #6
 8005e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	fb02 f303 	mul.w	r3, r2, r3
 8005e9a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea2:	0f1b      	lsrs	r3, r3, #28
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	617b      	str	r3, [r7, #20]
          break;
 8005eb0:	e002      	b.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
          break;
 8005eb6:	bf00      	nop
        }
      }
      break;
 8005eb8:	e000      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005eba:	bf00      	nop
    }
  }
  return frequency;
 8005ebc:	697b      	ldr	r3, [r7, #20]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	00bb8000 	.word	0x00bb8000
 8005ed4:	007a1200 	.word	0x007a1200
 8005ed8:	00f42400 	.word	0x00f42400

08005edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e07b      	b.n	8005fe6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d108      	bne.n	8005f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005efe:	d009      	beq.n	8005f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	61da      	str	r2, [r3, #28]
 8005f06:	e005      	b.n	8005f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fa fe92 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f98:	ea42 0103 	orr.w	r1, r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	0c1b      	lsrs	r3, r3, #16
 8005fb2:	f003 0104 	and.w	r1, r3, #4
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	f003 0210 	and.w	r2, r3, #16
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69da      	ldr	r2, [r3, #28]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e041      	b.n	8006084 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7fa fe67 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3304      	adds	r3, #4
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f000 f9b5 	bl	800639c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d001      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e04e      	b.n	8006142 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a23      	ldr	r2, [pc, #140]	; (8006150 <HAL_TIM_Base_Start_IT+0xc4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d022      	beq.n	800610c <HAL_TIM_Base_Start_IT+0x80>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ce:	d01d      	beq.n	800610c <HAL_TIM_Base_Start_IT+0x80>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <HAL_TIM_Base_Start_IT+0xc8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d018      	beq.n	800610c <HAL_TIM_Base_Start_IT+0x80>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1e      	ldr	r2, [pc, #120]	; (8006158 <HAL_TIM_Base_Start_IT+0xcc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d013      	beq.n	800610c <HAL_TIM_Base_Start_IT+0x80>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a1c      	ldr	r2, [pc, #112]	; (800615c <HAL_TIM_Base_Start_IT+0xd0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00e      	beq.n	800610c <HAL_TIM_Base_Start_IT+0x80>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1b      	ldr	r2, [pc, #108]	; (8006160 <HAL_TIM_Base_Start_IT+0xd4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d009      	beq.n	800610c <HAL_TIM_Base_Start_IT+0x80>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a19      	ldr	r2, [pc, #100]	; (8006164 <HAL_TIM_Base_Start_IT+0xd8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d004      	beq.n	800610c <HAL_TIM_Base_Start_IT+0x80>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a18      	ldr	r2, [pc, #96]	; (8006168 <HAL_TIM_Base_Start_IT+0xdc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d111      	bne.n	8006130 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b06      	cmp	r3, #6
 800611c:	d010      	beq.n	8006140 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0201 	orr.w	r2, r2, #1
 800612c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612e:	e007      	b.n	8006140 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0201 	orr.w	r2, r2, #1
 800613e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40010400 	.word	0x40010400
 8006164:	40014000 	.word	0x40014000
 8006168:	40001800 	.word	0x40001800

0800616c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d020      	beq.n	80061d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01b      	beq.n	80061d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0202 	mvn.w	r2, #2
 80061a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f8d2 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 80061bc:	e005      	b.n	80061ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f8c4 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f8d5 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d020      	beq.n	800621c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01b      	beq.n	800621c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0204 	mvn.w	r2, #4
 80061ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f8ac 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8006208:	e005      	b.n	8006216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f89e 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f8af 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d020      	beq.n	8006268 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01b      	beq.n	8006268 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f06f 0208 	mvn.w	r2, #8
 8006238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2204      	movs	r2, #4
 800623e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f886 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8006254:	e005      	b.n	8006262 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f878 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f889 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	d020      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01b      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0210 	mvn.w	r2, #16
 8006284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2208      	movs	r2, #8
 800628a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f860 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f852 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f863 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0201 	mvn.w	r2, #1
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fa fbb4 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00c      	beq.n	80062fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f906 	bl	8006508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00c      	beq.n	8006320 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f834 	bl	8006388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00c      	beq.n	8006344 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0220 	mvn.w	r2, #32
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f8d8 	bl	80064f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006344:	bf00      	nop
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a46      	ldr	r2, [pc, #280]	; (80064c8 <TIM_Base_SetConfig+0x12c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d013      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ba:	d00f      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a43      	ldr	r2, [pc, #268]	; (80064cc <TIM_Base_SetConfig+0x130>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00b      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a42      	ldr	r2, [pc, #264]	; (80064d0 <TIM_Base_SetConfig+0x134>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d007      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a41      	ldr	r2, [pc, #260]	; (80064d4 <TIM_Base_SetConfig+0x138>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a40      	ldr	r2, [pc, #256]	; (80064d8 <TIM_Base_SetConfig+0x13c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d108      	bne.n	80063ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a35      	ldr	r2, [pc, #212]	; (80064c8 <TIM_Base_SetConfig+0x12c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d02b      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fc:	d027      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a32      	ldr	r2, [pc, #200]	; (80064cc <TIM_Base_SetConfig+0x130>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d023      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a31      	ldr	r2, [pc, #196]	; (80064d0 <TIM_Base_SetConfig+0x134>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d01f      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a30      	ldr	r2, [pc, #192]	; (80064d4 <TIM_Base_SetConfig+0x138>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d01b      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2f      	ldr	r2, [pc, #188]	; (80064d8 <TIM_Base_SetConfig+0x13c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d017      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2e      	ldr	r2, [pc, #184]	; (80064dc <TIM_Base_SetConfig+0x140>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d013      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a2d      	ldr	r2, [pc, #180]	; (80064e0 <TIM_Base_SetConfig+0x144>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00f      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a2c      	ldr	r2, [pc, #176]	; (80064e4 <TIM_Base_SetConfig+0x148>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00b      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <TIM_Base_SetConfig+0x14c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d007      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <TIM_Base_SetConfig+0x150>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d003      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a29      	ldr	r2, [pc, #164]	; (80064f0 <TIM_Base_SetConfig+0x154>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d108      	bne.n	8006460 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a10      	ldr	r2, [pc, #64]	; (80064c8 <TIM_Base_SetConfig+0x12c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_Base_SetConfig+0xf8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a12      	ldr	r2, [pc, #72]	; (80064d8 <TIM_Base_SetConfig+0x13c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d103      	bne.n	800649c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d105      	bne.n	80064ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f023 0201 	bic.w	r2, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	611a      	str	r2, [r3, #16]
  }
}
 80064ba:	bf00      	nop
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40010000 	.word	0x40010000
 80064cc:	40000400 	.word	0x40000400
 80064d0:	40000800 	.word	0x40000800
 80064d4:	40000c00 	.word	0x40000c00
 80064d8:	40010400 	.word	0x40010400
 80064dc:	40014000 	.word	0x40014000
 80064e0:	40014400 	.word	0x40014400
 80064e4:	40014800 	.word	0x40014800
 80064e8:	40001800 	.word	0x40001800
 80064ec:	40001c00 	.word	0x40001c00
 80064f0:	40002000 	.word	0x40002000

080064f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f043 0201 	orr.w	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f023 0201 	bic.w	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3301      	adds	r3, #1
 8006572:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800657a:	d901      	bls.n	8006580 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e01b      	b.n	80065b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	daf2      	bge.n	800656e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	019b      	lsls	r3, r3, #6
 8006590:	f043 0220 	orr.w	r2, r3, #32
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3301      	adds	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065a4:	d901      	bls.n	80065aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e006      	b.n	80065b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d0f0      	beq.n	8006598 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065dc:	d901      	bls.n	80065e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e018      	b.n	8006614 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	daf2      	bge.n	80065d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2210      	movs	r2, #16
 80065f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3301      	adds	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006600:	d901      	bls.n	8006606 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e006      	b.n	8006614 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b10      	cmp	r3, #16
 8006610:	d0f0      	beq.n	80065f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006620:	b480      	push	{r7}
 8006622:	b08b      	sub	sp, #44	; 0x2c
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	089b      	lsrs	r3, r3, #2
 800663a:	b29b      	uxth	r3, r3
 800663c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800663e:	88fb      	ldrh	r3, [r7, #6]
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006646:	2300      	movs	r3, #0
 8006648:	623b      	str	r3, [r7, #32]
 800664a:	e014      	b.n	8006676 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	601a      	str	r2, [r3, #0]
    pDest++;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	3301      	adds	r3, #1
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	3301      	adds	r3, #1
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	3301      	adds	r3, #1
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	3301      	adds	r3, #1
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	3301      	adds	r3, #1
 8006674:	623b      	str	r3, [r7, #32]
 8006676:	6a3a      	ldr	r2, [r7, #32]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	429a      	cmp	r2, r3
 800667c:	d3e6      	bcc.n	800664c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800667e:	8bfb      	ldrh	r3, [r7, #30]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01e      	beq.n	80066c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668e:	461a      	mov	r2, r3
 8006690:	f107 0310 	add.w	r3, r7, #16
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	fa22 f303 	lsr.w	r3, r2, r3
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	701a      	strb	r2, [r3, #0]
      i++;
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	3301      	adds	r3, #1
 80066ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	3301      	adds	r3, #1
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80066b6:	8bfb      	ldrh	r3, [r7, #30]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066bc:	8bfb      	ldrh	r3, [r7, #30]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1ea      	bne.n	8006698 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	372c      	adds	r7, #44	; 0x2c
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4013      	ands	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066e8:	68fb      	ldr	r3, [r7, #12]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006716:	78fb      	ldrb	r3, [r7, #3]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800672a:	68bb      	ldr	r3, [r7, #8]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	f003 0301 	and.w	r3, r3, #1
}
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	68f9      	ldr	r1, [r7, #12]
 8006788:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800678c:	4313      	orrs	r3, r2
 800678e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d107      	bne.n	80067a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679c:	461a      	mov	r2, r3
 800679e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80067a2:	6053      	str	r3, [r2, #4]
 80067a4:	e00c      	b.n	80067c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d107      	bne.n	80067bc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b2:	461a      	mov	r2, r3
 80067b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80067b8:	6053      	str	r3, [r2, #4]
 80067ba:	e001      	b.n	80067c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	b29b      	uxth	r3, r3
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b089      	sub	sp, #36	; 0x24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	4413      	add	r3, r2
 8006810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	0c9b      	lsrs	r3, r3, #18
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	0fdb      	lsrs	r3, r3, #31
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	0fdb      	lsrs	r3, r3, #31
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b20      	cmp	r3, #32
 8006854:	d10d      	bne.n	8006872 <USB_HC_Halt+0x82>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <USB_HC_Halt+0x82>
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d002      	beq.n	800686e <USB_HC_Halt+0x7e>
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b03      	cmp	r3, #3
 800686c:	d101      	bne.n	8006872 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	e0d8      	b.n	8006a24 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <USB_HC_Halt+0x8e>
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d173      	bne.n	8006966 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	0151      	lsls	r1, r2, #5
 8006890:	69fa      	ldr	r2, [r7, #28]
 8006892:	440a      	add	r2, r1
 8006894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800689c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d14a      	bne.n	8006940 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d133      	bne.n	800691e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	69fa      	ldr	r2, [r7, #28]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068f4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	3301      	adds	r3, #1
 80068fa:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006902:	d82e      	bhi.n	8006962 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	4413      	add	r3, r2
 800690c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800691a:	d0ec      	beq.n	80068f6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800691c:	e081      	b.n	8006a22 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	440a      	add	r2, r1
 8006934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800693c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800693e:	e070      	b.n	8006a22 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	4413      	add	r3, r2
 8006948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	440a      	add	r2, r1
 8006956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800695a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800695e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006960:	e05f      	b.n	8006a22 <USB_HC_Halt+0x232>
            break;
 8006962:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006964:	e05d      	b.n	8006a22 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	69fa      	ldr	r2, [r7, #28]
 800697a:	440a      	add	r2, r1
 800697c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006984:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d133      	bne.n	80069fe <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	3301      	adds	r3, #1
 80069da:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069e2:	d81d      	bhi.n	8006a20 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fa:	d0ec      	beq.n	80069d6 <USB_HC_Halt+0x1e6>
 80069fc:	e011      	b.n	8006a22 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	e000      	b.n	8006a22 <USB_HC_Halt+0x232>
          break;
 8006a20:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3724      	adds	r7, #36	; 0x24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff fd7a 	bl	800653e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a4a:	2110      	movs	r1, #16
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff fd87 	bl	8006560 <USB_FlushTxFifo>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff fdb1 	bl	80065c4 <USB_FlushRxFifo>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	e01f      	b.n	8006ab2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a98:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b0f      	cmp	r3, #15
 8006ab6:	d9dc      	bls.n	8006a72 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61bb      	str	r3, [r7, #24]
 8006abc:	e034      	b.n	8006b28 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ad4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006adc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ae4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af2:	461a      	mov	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b04:	d80c      	bhi.n	8006b20 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b1c:	d0ec      	beq.n	8006af8 <USB_StopHost+0xc8>
 8006b1e:	e000      	b.n	8006b22 <USB_StopHost+0xf2>
        break;
 8006b20:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	3301      	adds	r3, #1
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	d9c7      	bls.n	8006abe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b34:	461a      	mov	r2, r3
 8006b36:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff fce9 	bl	800651c <USB_EnableGlobalInt>

  return ret;
 8006b4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f804 	bl	8006b78 <USBH_HandleSof>
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b0b      	cmp	r3, #11
 8006b88:	d10a      	bne.n	8006ba0 <USBH_HandleSof+0x28>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f000 f8ae 	bl	8006d30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006bd4:	bf00      	nop
}
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006bec:	bf00      	nop
}
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	4619      	mov	r1, r3
 8006c30:	f000 f87e 	bl	8006d30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f003 fca4 	bl	800a5ac <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	791b      	ldrb	r3, [r3, #4]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f830 	bl	8006cd0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	795b      	ldrb	r3, [r3, #5]
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f82a 	bl	8006cd0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c90:	2200      	movs	r2, #0
 8006c92:	4619      	mov	r1, r3
 8006c94:	f000 f84c 	bl	8006d30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f000 f835 	bl	8006d30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	2b0f      	cmp	r3, #15
 8006ce0:	d80d      	bhi.n	8006cfe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	33e0      	adds	r3, #224	; 0xe0
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	78fb      	ldrb	r3, [r7, #3]
 8006cf0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	33e0      	adds	r3, #224	; 0xe0
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d12:	f3ef 8305 	mrs	r3, IPSR
 8006d16:	607b      	str	r3, [r7, #4]
  return(result);
 8006d18:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <osMessagePut+0x1e>
    ticks = 1;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006d4e:	f7ff ffdd 	bl	8006d0c <inHandlerMode>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d018      	beq.n	8006d8a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006d58:	f107 0210 	add.w	r2, r7, #16
 8006d5c:	f107 0108 	add.w	r1, r7, #8
 8006d60:	2300      	movs	r3, #0
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 fc58 	bl	8007618 <xQueueGenericSendFromISR>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d001      	beq.n	8006d72 <osMessagePut+0x42>
      return osErrorOS;
 8006d6e:	23ff      	movs	r3, #255	; 0xff
 8006d70:	e018      	b.n	8006da4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d014      	beq.n	8006da2 <osMessagePut+0x72>
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <osMessagePut+0x7c>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	e00b      	b.n	8006da2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006d8a:	f107 0108 	add.w	r1, r7, #8
 8006d8e:	2300      	movs	r3, #0
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 fa16 	bl	80071c4 <xQueueGenericSend>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d001      	beq.n	8006da2 <osMessagePut+0x72>
      return osErrorOS;
 8006d9e:	23ff      	movs	r3, #255	; 0xff
 8006da0:	e000      	b.n	8006da4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	e000ed04 	.word	0xe000ed04

08006db0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f103 0208 	add.w	r2, r3, #8
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f103 0208 	add.w	r2, r3, #8
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f103 0208 	add.w	r2, r3, #8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	601a      	str	r2, [r3, #0]
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e68:	d103      	bne.n	8006e72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e00c      	b.n	8006e8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3308      	adds	r3, #8
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e002      	b.n	8006e80 <vListInsert+0x2e>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d2f6      	bcs.n	8006e7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	601a      	str	r2, [r3, #0]
}
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6892      	ldr	r2, [r2, #8]
 8006eda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6852      	ldr	r2, [r2, #4]
 8006ee4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d103      	bne.n	8006ef8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	1e5a      	subs	r2, r3, #1
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f42:	f002 ffb7 	bl	8009eb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f52:	fb01 f303 	mul.w	r3, r1, r3
 8006f56:	441a      	add	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f72:	3b01      	subs	r3, #1
 8006f74:	68f9      	ldr	r1, [r7, #12]
 8006f76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f78:	fb01 f303 	mul.w	r3, r1, r3
 8006f7c:	441a      	add	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	22ff      	movs	r2, #255	; 0xff
 8006f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	22ff      	movs	r2, #255	; 0xff
 8006f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d114      	bne.n	8006fc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01a      	beq.n	8006fd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3310      	adds	r3, #16
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 fe35 	bl	8008c14 <xTaskRemoveFromEventList>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d012      	beq.n	8006fd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <xQueueGenericReset+0xcc>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	e009      	b.n	8006fd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3310      	adds	r3, #16
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff fef2 	bl	8006db0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3324      	adds	r3, #36	; 0x24
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff feed 	bl	8006db0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fd6:	f002 ff9d 	bl	8009f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fda:	2301      	movs	r3, #1
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	; 0x28
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	613b      	str	r3, [r7, #16]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	fb02 f303 	mul.w	r3, r2, r3
 800701a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	3354      	adds	r3, #84	; 0x54
 8007020:	4618      	mov	r0, r3
 8007022:	f003 f869 	bl	800a0f8 <pvPortMalloc>
 8007026:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00e      	beq.n	800704c <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	3354      	adds	r3, #84	; 0x54
 8007036:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007038:	79fa      	ldrb	r2, [r7, #7]
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4613      	mov	r3, r2
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f825 	bl	8007094 <prvInitialiseNewQueue>
 800704a:	e01a      	b.n	8007082 <xQueueGenericCreate+0x9a>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800704c:	f7f9 ffed 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8007050:	4603      	mov	r3, r0
 8007052:	4618      	mov	r0, r3
 8007054:	f7f9 ff68 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8007058:	4603      	mov	r3, r0
 800705a:	461a      	mov	r2, r3
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <xQueueGenericCreate+0xa4>)
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	4013      	ands	r3, r2
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00c      	beq.n	8007082 <xQueueGenericCreate+0x9a>
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	4a09      	ldr	r2, [pc, #36]	; (8007090 <xQueueGenericCreate+0xa8>)
 800706c:	5cd3      	ldrb	r3, [r2, r3]
 800706e:	3340      	adds	r3, #64	; 0x40
 8007070:	b2db      	uxtb	r3, r3
 8007072:	4618      	mov	r0, r3
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	4a06      	ldr	r2, [pc, #24]	; (8007090 <xQueueGenericCreate+0xa8>)
 8007078:	5cd3      	ldrb	r3, [r2, r3]
 800707a:	2200      	movs	r2, #0
 800707c:	4619      	mov	r1, r3
 800707e:	f7fa fc75 	bl	800196c <prvTraceStoreKernelCall>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007082:	69bb      	ldr	r3, [r7, #24]
	}
 8007084:	4618      	mov	r0, r3
 8007086:	3720      	adds	r7, #32
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	2000023c 	.word	0x2000023c
 8007090:	20000004 	.word	0x20000004

08007094 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007094:	b5b0      	push	{r4, r5, r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d103      	bne.n	80070b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	6a3a      	ldr	r2, [r7, #32]
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	e002      	b.n	80070b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070c2:	2101      	movs	r1, #1
 80070c4:	6a38      	ldr	r0, [r7, #32]
 80070c6:	f7ff ff27 	bl	8006f18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	78fa      	ldrb	r2, [r7, #3]
 80070ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	2200      	movs	r2, #0
 80070d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80070d8:	6a38      	ldr	r0, [r7, #32]
 80070da:	f7f9 ff0c 	bl	8000ef6 <prvTraceGetQueueType>
 80070de:	4603      	mov	r3, r0
 80070e0:	461a      	mov	r2, r3
 80070e2:	4b35      	ldr	r3, [pc, #212]	; (80071b8 <prvInitialiseNewQueue+0x124>)
 80070e4:	5c9b      	ldrb	r3, [r3, r2]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fa ff06 	bl	8001ef8 <prvTraceGetObjectHandle>
 80070ec:	4603      	mov	r3, r0
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	4619      	mov	r1, r3
 80070f2:	6a38      	ldr	r0, [r7, #32]
 80070f4:	f7f9 ff6d 	bl	8000fd2 <prvTraceSetQueueNumberLow16>
 80070f8:	4b30      	ldr	r3, [pc, #192]	; (80071bc <prvInitialiseNewQueue+0x128>)
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6a38      	ldr	r0, [r7, #32]
 8007100:	f7f9 ff7d 	bl	8000ffe <prvTraceSetQueueNumberHigh16>
 8007104:	6a38      	ldr	r0, [r7, #32]
 8007106:	f7f9 fef6 	bl	8000ef6 <prvTraceGetQueueType>
 800710a:	4603      	mov	r3, r0
 800710c:	461a      	mov	r2, r3
 800710e:	4b2a      	ldr	r3, [pc, #168]	; (80071b8 <prvInitialiseNewQueue+0x124>)
 8007110:	5c9c      	ldrb	r4, [r3, r2]
 8007112:	6a38      	ldr	r0, [r7, #32]
 8007114:	f7f9 ff42 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 8007118:	4603      	mov	r3, r0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	4619      	mov	r1, r3
 800711e:	4620      	mov	r0, r4
 8007120:	f7fa ff82 	bl	8002028 <prvMarkObjectAsUsed>
 8007124:	f7f9 ff81 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8007128:	4603      	mov	r3, r0
 800712a:	4618      	mov	r0, r3
 800712c:	f7f9 fefc 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8007130:	4603      	mov	r3, r0
 8007132:	461a      	mov	r2, r3
 8007134:	4b22      	ldr	r3, [pc, #136]	; (80071c0 <prvInitialiseNewQueue+0x12c>)
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	4013      	ands	r3, r2
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d025      	beq.n	800718c <prvInitialiseNewQueue+0xf8>
 8007140:	6a38      	ldr	r0, [r7, #32]
 8007142:	f7f9 ff38 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 8007146:	4603      	mov	r3, r0
 8007148:	461a      	mov	r2, r3
 800714a:	4b1d      	ldr	r3, [pc, #116]	; (80071c0 <prvInitialiseNewQueue+0x12c>)
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	4013      	ands	r3, r2
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01a      	beq.n	800718c <prvInitialiseNewQueue+0xf8>
 8007156:	6a38      	ldr	r0, [r7, #32]
 8007158:	f7f9 fecd 	bl	8000ef6 <prvTraceGetQueueType>
 800715c:	4603      	mov	r3, r0
 800715e:	461a      	mov	r2, r3
 8007160:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <prvInitialiseNewQueue+0x124>)
 8007162:	5c9b      	ldrb	r3, [r3, r2]
 8007164:	3318      	adds	r3, #24
 8007166:	b2db      	uxtb	r3, r3
 8007168:	461d      	mov	r5, r3
 800716a:	6a38      	ldr	r0, [r7, #32]
 800716c:	f7f9 fec3 	bl	8000ef6 <prvTraceGetQueueType>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <prvInitialiseNewQueue+0x124>)
 8007176:	5c9c      	ldrb	r4, [r3, r2]
 8007178:	6a38      	ldr	r0, [r7, #32]
 800717a:	f7f9 ff0f 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 800717e:	4603      	mov	r3, r0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	4621      	mov	r1, r4
 8007186:	4628      	mov	r0, r5
 8007188:	f7fa fbf0 	bl	800196c <prvTraceStoreKernelCall>
 800718c:	6a38      	ldr	r0, [r7, #32]
 800718e:	f7f9 feb2 	bl	8000ef6 <prvTraceGetQueueType>
 8007192:	4603      	mov	r3, r0
 8007194:	461a      	mov	r2, r3
 8007196:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <prvInitialiseNewQueue+0x124>)
 8007198:	5c9c      	ldrb	r4, [r3, r2]
 800719a:	6a38      	ldr	r0, [r7, #32]
 800719c:	f7f9 fefe 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 80071a0:	4603      	mov	r3, r0
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2200      	movs	r2, #0
 80071a6:	4619      	mov	r1, r3
 80071a8:	4620      	mov	r0, r4
 80071aa:	f7fa fde1 	bl	8001d70 <prvTraceSetObjectState>
}
 80071ae:	bf00      	nop
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bdb0      	pop	{r4, r5, r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20000004 	.word	0x20000004
 80071bc:	2000023e 	.word	0x2000023e
 80071c0:	2000023c 	.word	0x2000023c

080071c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071c4:	b5b0      	push	{r4, r5, r7, lr}
 80071c6:	b08e      	sub	sp, #56	; 0x38
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071d2:	2300      	movs	r3, #0
 80071d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <xQueueGenericSend+0x32>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071f2:	bf00      	nop
 80071f4:	e7fe      	b.n	80071f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d103      	bne.n	8007204 <xQueueGenericSend+0x40>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <xQueueGenericSend+0x44>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <xQueueGenericSend+0x46>
 8007208:	2300      	movs	r3, #0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <xQueueGenericSend+0x60>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	623b      	str	r3, [r7, #32]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b02      	cmp	r3, #2
 8007228:	d103      	bne.n	8007232 <xQueueGenericSend+0x6e>
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	2b01      	cmp	r3, #1
 8007230:	d101      	bne.n	8007236 <xQueueGenericSend+0x72>
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <xQueueGenericSend+0x74>
 8007236:	2300      	movs	r3, #0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <xQueueGenericSend+0x8e>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	61fb      	str	r3, [r7, #28]
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007252:	f001 fed1 	bl	8008ff8 <xTaskGetSchedulerState>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d102      	bne.n	8007262 <xQueueGenericSend+0x9e>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <xQueueGenericSend+0xa2>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <xQueueGenericSend+0xa4>
 8007266:	2300      	movs	r3, #0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10a      	bne.n	8007282 <xQueueGenericSend+0xbe>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	61bb      	str	r3, [r7, #24]
}
 800727e:	bf00      	nop
 8007280:	e7fe      	b.n	8007280 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007282:	f002 fe17 	bl	8009eb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728e:	429a      	cmp	r2, r3
 8007290:	d303      	bcc.n	800729a <xQueueGenericSend+0xd6>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b02      	cmp	r3, #2
 8007296:	f040 80a0 	bne.w	80073da <xQueueGenericSend+0x216>
			{
				traceQUEUE_SEND( pxQueue );
 800729a:	f7f9 fec6 	bl	800102a <prvTraceGetCurrentTaskHandle>
 800729e:	4603      	mov	r3, r0
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7f9 fe41 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80072a6:	4603      	mov	r3, r0
 80072a8:	461a      	mov	r2, r3
 80072aa:	4b9b      	ldr	r3, [pc, #620]	; (8007518 <xQueueGenericSend+0x354>)
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	4013      	ands	r3, r2
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d02a      	beq.n	800730c <xQueueGenericSend+0x148>
 80072b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b8:	f7f9 fe7d 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	4b95      	ldr	r3, [pc, #596]	; (8007518 <xQueueGenericSend+0x354>)
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	4013      	ands	r3, r2
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01f      	beq.n	800730c <xQueueGenericSend+0x148>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <xQueueGenericSend+0x124>
 80072d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072d4:	f7f9 fe0f 	bl	8000ef6 <prvTraceGetQueueType>
 80072d8:	4603      	mov	r3, r0
 80072da:	461a      	mov	r2, r3
 80072dc:	4b8f      	ldr	r3, [pc, #572]	; (800751c <xQueueGenericSend+0x358>)
 80072de:	5c9b      	ldrb	r3, [r3, r2]
 80072e0:	3320      	adds	r3, #32
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461d      	mov	r5, r3
 80072e6:	e000      	b.n	80072ea <xQueueGenericSend+0x126>
 80072e8:	2525      	movs	r5, #37	; 0x25
 80072ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072ec:	f7f9 fe03 	bl	8000ef6 <prvTraceGetQueueType>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	4b89      	ldr	r3, [pc, #548]	; (800751c <xQueueGenericSend+0x358>)
 80072f6:	5c9c      	ldrb	r4, [r3, r2]
 80072f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072fa:	f7f9 fe4f 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 80072fe:	4603      	mov	r3, r0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	461a      	mov	r2, r3
 8007304:	4621      	mov	r1, r4
 8007306:	4628      	mov	r0, r5
 8007308:	f7fa fb30 	bl	800196c <prvTraceStoreKernelCall>
 800730c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800730e:	f7f9 fdf2 	bl	8000ef6 <prvTraceGetQueueType>
 8007312:	4603      	mov	r3, r0
 8007314:	461a      	mov	r2, r3
 8007316:	4b81      	ldr	r3, [pc, #516]	; (800751c <xQueueGenericSend+0x358>)
 8007318:	5c9c      	ldrb	r4, [r3, r2]
 800731a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800731c:	f7f9 fe3e 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 8007320:	4603      	mov	r3, r0
 8007322:	b2dd      	uxtb	r5, r3
 8007324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007326:	f7f9 fde6 	bl	8000ef6 <prvTraceGetQueueType>
 800732a:	4603      	mov	r3, r0
 800732c:	461a      	mov	r2, r3
 800732e:	4b7b      	ldr	r3, [pc, #492]	; (800751c <xQueueGenericSend+0x358>)
 8007330:	5c9b      	ldrb	r3, [r3, r2]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d005      	beq.n	8007342 <xQueueGenericSend+0x17e>
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	b2db      	uxtb	r3, r3
 800733c:	3301      	adds	r3, #1
 800733e:	b2db      	uxtb	r3, r3
 8007340:	e000      	b.n	8007344 <xQueueGenericSend+0x180>
 8007342:	2300      	movs	r3, #0
 8007344:	461a      	mov	r2, r3
 8007346:	4629      	mov	r1, r5
 8007348:	4620      	mov	r0, r4
 800734a:	f7fa fd11 	bl	8001d70 <prvTraceSetObjectState>

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800735a:	f000 fcaa 	bl	8007cb2 <prvCopyDataToQueue>
 800735e:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007364:	2b00      	cmp	r3, #0
 8007366:	d014      	beq.n	8007392 <xQueueGenericSend+0x1ce>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d102      	bne.n	8007374 <xQueueGenericSend+0x1b0>
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d12e      	bne.n	80073d2 <xQueueGenericSend+0x20e>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8007374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007376:	f000 fe27 	bl	8007fc8 <prvNotifyQueueSetContainer>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d028      	beq.n	80073d2 <xQueueGenericSend+0x20e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8007380:	4b67      	ldr	r3, [pc, #412]	; (8007520 <xQueueGenericSend+0x35c>)
 8007382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	e01f      	b.n	80073d2 <xQueueGenericSend+0x20e>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	2b00      	cmp	r3, #0
 8007398:	d010      	beq.n	80073bc <xQueueGenericSend+0x1f8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	3324      	adds	r3, #36	; 0x24
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 fc38 	bl	8008c14 <xTaskRemoveFromEventList>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d013      	beq.n	80073d2 <xQueueGenericSend+0x20e>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 80073aa:	4b5d      	ldr	r3, [pc, #372]	; (8007520 <xQueueGenericSend+0x35c>)
 80073ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	e00a      	b.n	80073d2 <xQueueGenericSend+0x20e>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d007      	beq.n	80073d2 <xQueueGenericSend+0x20e>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 80073c2:	4b57      	ldr	r3, [pc, #348]	; (8007520 <xQueueGenericSend+0x35c>)
 80073c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80073d2:	f002 fd9f 	bl	8009f14 <vPortExitCritical>
				return pdPASS;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e114      	b.n	8007604 <xQueueGenericSend+0x440>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d13c      	bne.n	800745a <xQueueGenericSend+0x296>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073e0:	f002 fd98 	bl	8009f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80073e4:	f7f9 fe21 	bl	800102a <prvTraceGetCurrentTaskHandle>
 80073e8:	4603      	mov	r3, r0
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7f9 fd9c 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461a      	mov	r2, r3
 80073f4:	4b48      	ldr	r3, [pc, #288]	; (8007518 <xQueueGenericSend+0x354>)
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	4013      	ands	r3, r2
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d02a      	beq.n	8007456 <xQueueGenericSend+0x292>
 8007400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007402:	f7f9 fdd8 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 8007406:	4603      	mov	r3, r0
 8007408:	461a      	mov	r2, r3
 800740a:	4b43      	ldr	r3, [pc, #268]	; (8007518 <xQueueGenericSend+0x354>)
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	4013      	ands	r3, r2
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01f      	beq.n	8007456 <xQueueGenericSend+0x292>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <xQueueGenericSend+0x26e>
 800741c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800741e:	f7f9 fd6a 	bl	8000ef6 <prvTraceGetQueueType>
 8007422:	4603      	mov	r3, r0
 8007424:	461a      	mov	r2, r3
 8007426:	4b3d      	ldr	r3, [pc, #244]	; (800751c <xQueueGenericSend+0x358>)
 8007428:	5c9b      	ldrb	r3, [r3, r2]
 800742a:	3348      	adds	r3, #72	; 0x48
 800742c:	b2db      	uxtb	r3, r3
 800742e:	461d      	mov	r5, r3
 8007430:	e000      	b.n	8007434 <xQueueGenericSend+0x270>
 8007432:	254d      	movs	r5, #77	; 0x4d
 8007434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007436:	f7f9 fd5e 	bl	8000ef6 <prvTraceGetQueueType>
 800743a:	4603      	mov	r3, r0
 800743c:	461a      	mov	r2, r3
 800743e:	4b37      	ldr	r3, [pc, #220]	; (800751c <xQueueGenericSend+0x358>)
 8007440:	5c9c      	ldrb	r4, [r3, r2]
 8007442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007444:	f7f9 fdaa 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 8007448:	4603      	mov	r3, r0
 800744a:	b2db      	uxtb	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	4621      	mov	r1, r4
 8007450:	4628      	mov	r0, r5
 8007452:	f7fa fa8b 	bl	800196c <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 8007456:	2300      	movs	r3, #0
 8007458:	e0d4      	b.n	8007604 <xQueueGenericSend+0x440>
				}
				else if( xEntryTimeSet == pdFALSE )
 800745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745c:	2b00      	cmp	r3, #0
 800745e:	d106      	bne.n	800746e <xQueueGenericSend+0x2aa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007460:	f107 0310 	add.w	r3, r7, #16
 8007464:	4618      	mov	r0, r3
 8007466:	f001 fc4d 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800746a:	2301      	movs	r3, #1
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800746e:	f002 fd51 	bl	8009f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007472:	f001 f905 	bl	8008680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007476:	f002 fd1d 	bl	8009eb4 <vPortEnterCritical>
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007480:	b25b      	sxtb	r3, r3
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	d103      	bne.n	8007490 <xQueueGenericSend+0x2cc>
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007496:	b25b      	sxtb	r3, r3
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d103      	bne.n	80074a6 <xQueueGenericSend+0x2e2>
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074a6:	f002 fd35 	bl	8009f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074aa:	1d3a      	adds	r2, r7, #4
 80074ac:	f107 0310 	add.w	r3, r7, #16
 80074b0:	4611      	mov	r1, r2
 80074b2:	4618      	mov	r0, r3
 80074b4:	f001 fc3c 	bl	8008d30 <xTaskCheckForTimeOut>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d163      	bne.n	8007586 <xQueueGenericSend+0x3c2>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074c0:	f000 fcfc 	bl	8007ebc <prvIsQueueFull>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d057      	beq.n	800757a <xQueueGenericSend+0x3b6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80074ca:	f7f9 fdae 	bl	800102a <prvTraceGetCurrentTaskHandle>
 80074ce:	4603      	mov	r3, r0
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7f9 fd29 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80074d6:	4603      	mov	r3, r0
 80074d8:	461a      	mov	r2, r3
 80074da:	4b0f      	ldr	r3, [pc, #60]	; (8007518 <xQueueGenericSend+0x354>)
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	4013      	ands	r3, r2
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d030      	beq.n	8007548 <xQueueGenericSend+0x384>
 80074e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074e8:	f7f9 fd65 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 80074ec:	4603      	mov	r3, r0
 80074ee:	461a      	mov	r2, r3
 80074f0:	4b09      	ldr	r3, [pc, #36]	; (8007518 <xQueueGenericSend+0x354>)
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	4013      	ands	r3, r2
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d025      	beq.n	8007548 <xQueueGenericSend+0x384>
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d110      	bne.n	8007524 <xQueueGenericSend+0x360>
 8007502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007504:	f7f9 fcf7 	bl	8000ef6 <prvTraceGetQueueType>
 8007508:	4603      	mov	r3, r0
 800750a:	461a      	mov	r2, r3
 800750c:	4b03      	ldr	r3, [pc, #12]	; (800751c <xQueueGenericSend+0x358>)
 800750e:	5c9b      	ldrb	r3, [r3, r2]
 8007510:	3370      	adds	r3, #112	; 0x70
 8007512:	b2db      	uxtb	r3, r3
 8007514:	461d      	mov	r5, r3
 8007516:	e006      	b.n	8007526 <xQueueGenericSend+0x362>
 8007518:	2000023c 	.word	0x2000023c
 800751c:	20000004 	.word	0x20000004
 8007520:	e000ed04 	.word	0xe000ed04
 8007524:	2575      	movs	r5, #117	; 0x75
 8007526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007528:	f7f9 fce5 	bl	8000ef6 <prvTraceGetQueueType>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	4b36      	ldr	r3, [pc, #216]	; (800760c <xQueueGenericSend+0x448>)
 8007532:	5c9c      	ldrb	r4, [r3, r2]
 8007534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007536:	f7f9 fd31 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 800753a:	4603      	mov	r3, r0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	461a      	mov	r2, r3
 8007540:	4621      	mov	r1, r4
 8007542:	4628      	mov	r0, r5
 8007544:	f7fa fa12 	bl	800196c <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	3310      	adds	r3, #16
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	4611      	mov	r1, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f001 fad3 	bl	8008afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007558:	f000 fc3b 	bl	8007dd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800755c:	f001 f89e 	bl	800869c <xTaskResumeAll>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	f47f ae8d 	bne.w	8007282 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007568:	4b29      	ldr	r3, [pc, #164]	; (8007610 <xQueueGenericSend+0x44c>)
 800756a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	e683      	b.n	8007282 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800757a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800757c:	f000 fc29 	bl	8007dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007580:	f001 f88c 	bl	800869c <xTaskResumeAll>
 8007584:	e67d      	b.n	8007282 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007588:	f000 fc23 	bl	8007dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800758c:	f001 f886 	bl	800869c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8007590:	f7f9 fd4b 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8007594:	4603      	mov	r3, r0
 8007596:	4618      	mov	r0, r3
 8007598:	f7f9 fcc6 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	4b1c      	ldr	r3, [pc, #112]	; (8007614 <xQueueGenericSend+0x450>)
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	4013      	ands	r3, r2
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d02a      	beq.n	8007602 <xQueueGenericSend+0x43e>
 80075ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ae:	f7f9 fd02 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 80075b2:	4603      	mov	r3, r0
 80075b4:	461a      	mov	r2, r3
 80075b6:	4b17      	ldr	r3, [pc, #92]	; (8007614 <xQueueGenericSend+0x450>)
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	4013      	ands	r3, r2
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d01f      	beq.n	8007602 <xQueueGenericSend+0x43e>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <xQueueGenericSend+0x41a>
 80075c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ca:	f7f9 fc94 	bl	8000ef6 <prvTraceGetQueueType>
 80075ce:	4603      	mov	r3, r0
 80075d0:	461a      	mov	r2, r3
 80075d2:	4b0e      	ldr	r3, [pc, #56]	; (800760c <xQueueGenericSend+0x448>)
 80075d4:	5c9b      	ldrb	r3, [r3, r2]
 80075d6:	3348      	adds	r3, #72	; 0x48
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	461d      	mov	r5, r3
 80075dc:	e000      	b.n	80075e0 <xQueueGenericSend+0x41c>
 80075de:	254d      	movs	r5, #77	; 0x4d
 80075e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e2:	f7f9 fc88 	bl	8000ef6 <prvTraceGetQueueType>
 80075e6:	4603      	mov	r3, r0
 80075e8:	461a      	mov	r2, r3
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <xQueueGenericSend+0x448>)
 80075ec:	5c9c      	ldrb	r4, [r3, r2]
 80075ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f0:	f7f9 fcd4 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 80075f4:	4603      	mov	r3, r0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	4621      	mov	r1, r4
 80075fc:	4628      	mov	r0, r5
 80075fe:	f7fa f9b5 	bl	800196c <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 8007602:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007604:	4618      	mov	r0, r3
 8007606:	3738      	adds	r7, #56	; 0x38
 8007608:	46bd      	mov	sp, r7
 800760a:	bdb0      	pop	{r4, r5, r7, pc}
 800760c:	20000004 	.word	0x20000004
 8007610:	e000ed04 	.word	0xe000ed04
 8007614:	2000023c 	.word	0x2000023c

08007618 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007618:	b5b0      	push	{r4, r5, r7, lr}
 800761a:	b090      	sub	sp, #64	; 0x40
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d103      	bne.n	8007654 <xQueueGenericSendFromISR+0x3c>
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <xQueueGenericSendFromISR+0x40>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <xQueueGenericSendFromISR+0x42>
 8007658:	2300      	movs	r3, #0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007670:	bf00      	nop
 8007672:	e7fe      	b.n	8007672 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d103      	bne.n	8007682 <xQueueGenericSendFromISR+0x6a>
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <xQueueGenericSendFromISR+0x6e>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <xQueueGenericSendFromISR+0x70>
 8007686:	2300      	movs	r3, #0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	623b      	str	r3, [r7, #32]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076a2:	f002 fce9 	bl	800a078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076a6:	f3ef 8211 	mrs	r2, BASEPRI
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	61fa      	str	r2, [r7, #28]
 80076bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d303      	bcc.n	80076d6 <xQueueGenericSendFromISR+0xbe>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	f040 8087 	bne.w	80077e4 <xQueueGenericSendFromISR+0x1cc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80076e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076e8:	f7f9 fc65 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 80076ec:	4603      	mov	r3, r0
 80076ee:	461a      	mov	r2, r3
 80076f0:	4b58      	ldr	r3, [pc, #352]	; (8007854 <xQueueGenericSendFromISR+0x23c>)
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	4013      	ands	r3, r2
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01f      	beq.n	800773c <xQueueGenericSendFromISR+0x124>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <xQueueGenericSendFromISR+0x100>
 8007702:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007704:	f7f9 fbf7 	bl	8000ef6 <prvTraceGetQueueType>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	4b52      	ldr	r3, [pc, #328]	; (8007858 <xQueueGenericSendFromISR+0x240>)
 800770e:	5c9b      	ldrb	r3, [r3, r2]
 8007710:	3330      	adds	r3, #48	; 0x30
 8007712:	b2db      	uxtb	r3, r3
 8007714:	461d      	mov	r5, r3
 8007716:	e000      	b.n	800771a <xQueueGenericSendFromISR+0x102>
 8007718:	2535      	movs	r5, #53	; 0x35
 800771a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800771c:	f7f9 fbeb 	bl	8000ef6 <prvTraceGetQueueType>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	4b4c      	ldr	r3, [pc, #304]	; (8007858 <xQueueGenericSendFromISR+0x240>)
 8007726:	5c9c      	ldrb	r4, [r3, r2]
 8007728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800772a:	f7f9 fc37 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 800772e:	4603      	mov	r3, r0
 8007730:	b2db      	uxtb	r3, r3
 8007732:	461a      	mov	r2, r3
 8007734:	4621      	mov	r1, r4
 8007736:	4628      	mov	r0, r5
 8007738:	f7fa f918 	bl	800196c <prvTraceStoreKernelCall>
 800773c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800773e:	f7f9 fbda 	bl	8000ef6 <prvTraceGetQueueType>
 8007742:	4603      	mov	r3, r0
 8007744:	461a      	mov	r2, r3
 8007746:	4b44      	ldr	r3, [pc, #272]	; (8007858 <xQueueGenericSendFromISR+0x240>)
 8007748:	5c9c      	ldrb	r4, [r3, r2]
 800774a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800774c:	f7f9 fc26 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 8007750:	4603      	mov	r3, r0
 8007752:	b2d9      	uxtb	r1, r3
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	b2db      	uxtb	r3, r3
 800775a:	3301      	adds	r3, #1
 800775c:	b2db      	uxtb	r3, r3
 800775e:	461a      	mov	r2, r3
 8007760:	4620      	mov	r0, r4
 8007762:	f7fa fb05 	bl	8001d70 <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800776c:	f000 faa1 	bl	8007cb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007770:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007778:	d129      	bne.n	80077ce <xQueueGenericSendFromISR+0x1b6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777e:	2b00      	cmp	r3, #0
 8007780:	d012      	beq.n	80077a8 <xQueueGenericSendFromISR+0x190>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d102      	bne.n	800778e <xQueueGenericSendFromISR+0x176>
 8007788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d127      	bne.n	80077de <xQueueGenericSendFromISR+0x1c6>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800778e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007790:	f000 fc1a 	bl	8007fc8 <prvNotifyQueueSetContainer>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d021      	beq.n	80077de <xQueueGenericSendFromISR+0x1c6>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01e      	beq.n	80077de <xQueueGenericSendFromISR+0x1c6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e01a      	b.n	80077de <xQueueGenericSendFromISR+0x1c6>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d016      	beq.n	80077de <xQueueGenericSendFromISR+0x1c6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	3324      	adds	r3, #36	; 0x24
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 fa2d 	bl	8008c14 <xTaskRemoveFromEventList>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00e      	beq.n	80077de <xQueueGenericSendFromISR+0x1c6>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <xQueueGenericSendFromISR+0x1c6>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	e007      	b.n	80077de <xQueueGenericSendFromISR+0x1c6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077d2:	3301      	adds	r3, #1
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	b25a      	sxtb	r2, r3
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077de:	2301      	movs	r3, #1
 80077e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80077e2:	e02c      	b.n	800783e <xQueueGenericSendFromISR+0x226>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80077e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077e6:	f7f9 fbe6 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 80077ea:	4603      	mov	r3, r0
 80077ec:	461a      	mov	r2, r3
 80077ee:	4b19      	ldr	r3, [pc, #100]	; (8007854 <xQueueGenericSendFromISR+0x23c>)
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	4013      	ands	r3, r2
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01f      	beq.n	800783a <xQueueGenericSendFromISR+0x222>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xQueueGenericSendFromISR+0x1fe>
 8007800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007802:	f7f9 fb78 	bl	8000ef6 <prvTraceGetQueueType>
 8007806:	4603      	mov	r3, r0
 8007808:	461a      	mov	r2, r3
 800780a:	4b13      	ldr	r3, [pc, #76]	; (8007858 <xQueueGenericSendFromISR+0x240>)
 800780c:	5c9b      	ldrb	r3, [r3, r2]
 800780e:	3358      	adds	r3, #88	; 0x58
 8007810:	b2db      	uxtb	r3, r3
 8007812:	461d      	mov	r5, r3
 8007814:	e000      	b.n	8007818 <xQueueGenericSendFromISR+0x200>
 8007816:	255d      	movs	r5, #93	; 0x5d
 8007818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800781a:	f7f9 fb6c 	bl	8000ef6 <prvTraceGetQueueType>
 800781e:	4603      	mov	r3, r0
 8007820:	461a      	mov	r2, r3
 8007822:	4b0d      	ldr	r3, [pc, #52]	; (8007858 <xQueueGenericSendFromISR+0x240>)
 8007824:	5c9c      	ldrb	r4, [r3, r2]
 8007826:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007828:	f7f9 fbb8 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 800782c:	4603      	mov	r3, r0
 800782e:	b2db      	uxtb	r3, r3
 8007830:	461a      	mov	r2, r3
 8007832:	4621      	mov	r1, r4
 8007834:	4628      	mov	r0, r5
 8007836:	f7fa f899 	bl	800196c <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 800783a:	2300      	movs	r3, #0
 800783c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800783e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007840:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007848:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800784a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800784c:	4618      	mov	r0, r3
 800784e:	3740      	adds	r7, #64	; 0x40
 8007850:	46bd      	mov	sp, r7
 8007852:	bdb0      	pop	{r4, r5, r7, pc}
 8007854:	2000023c 	.word	0x2000023c
 8007858:	20000004 	.word	0x20000004

0800785c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800785c:	b5b0      	push	{r4, r5, r7, lr}
 800785e:	b08c      	sub	sp, #48	; 0x30
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007868:	2300      	movs	r3, #0
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <xQueueReceive+0x30>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	623b      	str	r3, [r7, #32]
}
 8007888:	bf00      	nop
 800788a:	e7fe      	b.n	800788a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d103      	bne.n	800789a <xQueueReceive+0x3e>
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <xQueueReceive+0x42>
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <xQueueReceive+0x44>
 800789e:	2300      	movs	r3, #0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <xQueueReceive+0x5e>
	__asm volatile
 80078a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	61fb      	str	r3, [r7, #28]
}
 80078b6:	bf00      	nop
 80078b8:	e7fe      	b.n	80078b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078ba:	f001 fb9d 	bl	8008ff8 <xTaskGetSchedulerState>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d102      	bne.n	80078ca <xQueueReceive+0x6e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <xQueueReceive+0x72>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <xQueueReceive+0x74>
 80078ce:	2300      	movs	r3, #0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <xQueueReceive+0x8e>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	61bb      	str	r3, [r7, #24]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078ea:	f002 fae3 	bl	8009eb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d07b      	beq.n	80079f2 <xQueueReceive+0x196>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078fe:	f000 fa42 	bl	8007d86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8007902:	f7f9 fb92 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8007906:	4603      	mov	r3, r0
 8007908:	4618      	mov	r0, r3
 800790a:	f7f9 fb0d 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	4bac      	ldr	r3, [pc, #688]	; (8007bc4 <xQueueReceive+0x368>)
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	4013      	ands	r3, r2
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d025      	beq.n	800796a <xQueueReceive+0x10e>
 800791e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007920:	f7f9 fb49 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	4ba6      	ldr	r3, [pc, #664]	; (8007bc4 <xQueueReceive+0x368>)
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	4013      	ands	r3, r2
 800792e:	b29b      	uxth	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01a      	beq.n	800796a <xQueueReceive+0x10e>
 8007934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007936:	f7f9 fade 	bl	8000ef6 <prvTraceGetQueueType>
 800793a:	4603      	mov	r3, r0
 800793c:	461a      	mov	r2, r3
 800793e:	4ba2      	ldr	r3, [pc, #648]	; (8007bc8 <xQueueReceive+0x36c>)
 8007940:	5c9b      	ldrb	r3, [r3, r2]
 8007942:	3328      	adds	r3, #40	; 0x28
 8007944:	b2db      	uxtb	r3, r3
 8007946:	461d      	mov	r5, r3
 8007948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800794a:	f7f9 fad4 	bl	8000ef6 <prvTraceGetQueueType>
 800794e:	4603      	mov	r3, r0
 8007950:	461a      	mov	r2, r3
 8007952:	4b9d      	ldr	r3, [pc, #628]	; (8007bc8 <xQueueReceive+0x36c>)
 8007954:	5c9c      	ldrb	r4, [r3, r2]
 8007956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007958:	f7f9 fb20 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 800795c:	4603      	mov	r3, r0
 800795e:	b2db      	uxtb	r3, r3
 8007960:	461a      	mov	r2, r3
 8007962:	4621      	mov	r1, r4
 8007964:	4628      	mov	r0, r5
 8007966:	f7fa f801 	bl	800196c <prvTraceStoreKernelCall>
 800796a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800796c:	f7f9 fac3 	bl	8000ef6 <prvTraceGetQueueType>
 8007970:	4603      	mov	r3, r0
 8007972:	461a      	mov	r2, r3
 8007974:	4b94      	ldr	r3, [pc, #592]	; (8007bc8 <xQueueReceive+0x36c>)
 8007976:	5c9c      	ldrb	r4, [r3, r2]
 8007978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800797a:	f7f9 fb0f 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 800797e:	4603      	mov	r3, r0
 8007980:	b2dd      	uxtb	r5, r3
 8007982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007984:	f7f9 fab7 	bl	8000ef6 <prvTraceGetQueueType>
 8007988:	4603      	mov	r3, r0
 800798a:	461a      	mov	r2, r3
 800798c:	4b8e      	ldr	r3, [pc, #568]	; (8007bc8 <xQueueReceive+0x36c>)
 800798e:	5c9b      	ldrb	r3, [r3, r2]
 8007990:	2b02      	cmp	r3, #2
 8007992:	d108      	bne.n	80079a6 <xQueueReceive+0x14a>
 8007994:	f7f9 fb49 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8007998:	4603      	mov	r3, r0
 800799a:	4618      	mov	r0, r3
 800799c:	f7f9 fab7 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 80079a0:	4603      	mov	r3, r0
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	e004      	b.n	80079b0 <xQueueReceive+0x154>
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	4629      	mov	r1, r5
 80079b4:	4620      	mov	r0, r4
 80079b6:	f7fa f9db 	bl	8001d70 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	1e5a      	subs	r2, r3, #1
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00f      	beq.n	80079ea <xQueueReceive+0x18e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	3310      	adds	r3, #16
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 f920 	bl	8008c14 <xTaskRemoveFromEventList>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d007      	beq.n	80079ea <xQueueReceive+0x18e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079da:	4b7c      	ldr	r3, [pc, #496]	; (8007bcc <xQueueReceive+0x370>)
 80079dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079ea:	f002 fa93 	bl	8009f14 <vPortExitCritical>
				return pdPASS;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e12f      	b.n	8007c52 <xQueueReceive+0x3f6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d137      	bne.n	8007a68 <xQueueReceive+0x20c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079f8:	f002 fa8c 	bl	8009f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80079fc:	f7f9 fb15 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8007a00:	4603      	mov	r3, r0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7f9 fa90 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	4b6d      	ldr	r3, [pc, #436]	; (8007bc4 <xQueueReceive+0x368>)
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	4013      	ands	r3, r2
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d025      	beq.n	8007a64 <xQueueReceive+0x208>
 8007a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a1a:	f7f9 facc 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	461a      	mov	r2, r3
 8007a22:	4b68      	ldr	r3, [pc, #416]	; (8007bc4 <xQueueReceive+0x368>)
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	4013      	ands	r3, r2
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d01a      	beq.n	8007a64 <xQueueReceive+0x208>
 8007a2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a30:	f7f9 fa61 	bl	8000ef6 <prvTraceGetQueueType>
 8007a34:	4603      	mov	r3, r0
 8007a36:	461a      	mov	r2, r3
 8007a38:	4b63      	ldr	r3, [pc, #396]	; (8007bc8 <xQueueReceive+0x36c>)
 8007a3a:	5c9b      	ldrb	r3, [r3, r2]
 8007a3c:	3350      	adds	r3, #80	; 0x50
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	461d      	mov	r5, r3
 8007a42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a44:	f7f9 fa57 	bl	8000ef6 <prvTraceGetQueueType>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4b5e      	ldr	r3, [pc, #376]	; (8007bc8 <xQueueReceive+0x36c>)
 8007a4e:	5c9c      	ldrb	r4, [r3, r2]
 8007a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a52:	f7f9 faa3 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 8007a56:	4603      	mov	r3, r0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f7f9 ff84 	bl	800196c <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e0f4      	b.n	8007c52 <xQueueReceive+0x3f6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <xQueueReceive+0x220>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a6e:	f107 0310 	add.w	r3, r7, #16
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 f946 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a7c:	f002 fa4a 	bl	8009f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a80:	f000 fdfe 	bl	8008680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a84:	f002 fa16 	bl	8009eb4 <vPortEnterCritical>
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a8e:	b25b      	sxtb	r3, r3
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d103      	bne.n	8007a9e <xQueueReceive+0x242>
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d103      	bne.n	8007ab4 <xQueueReceive+0x258>
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ab4:	f002 fa2e 	bl	8009f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ab8:	1d3a      	adds	r2, r7, #4
 8007aba:	f107 0310 	add.w	r3, r7, #16
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f001 f935 	bl	8008d30 <xTaskCheckForTimeOut>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f040 8081 	bne.w	8007bd0 <xQueueReceive+0x374>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ad0:	f000 f9de 	bl	8007e90 <prvIsQueueEmpty>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d06e      	beq.n	8007bb8 <xQueueReceive+0x35c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8007ada:	f7f9 faa6 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7f9 fa21 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	461a      	mov	r2, r3
 8007aea:	4b36      	ldr	r3, [pc, #216]	; (8007bc4 <xQueueReceive+0x368>)
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	4013      	ands	r3, r2
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d025      	beq.n	8007b42 <xQueueReceive+0x2e6>
 8007af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007af8:	f7f9 fa5d 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 8007afc:	4603      	mov	r3, r0
 8007afe:	461a      	mov	r2, r3
 8007b00:	4b30      	ldr	r3, [pc, #192]	; (8007bc4 <xQueueReceive+0x368>)
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	4013      	ands	r3, r2
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01a      	beq.n	8007b42 <xQueueReceive+0x2e6>
 8007b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b0e:	f7f9 f9f2 	bl	8000ef6 <prvTraceGetQueueType>
 8007b12:	4603      	mov	r3, r0
 8007b14:	461a      	mov	r2, r3
 8007b16:	4b2c      	ldr	r3, [pc, #176]	; (8007bc8 <xQueueReceive+0x36c>)
 8007b18:	5c9b      	ldrb	r3, [r3, r2]
 8007b1a:	3368      	adds	r3, #104	; 0x68
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	461d      	mov	r5, r3
 8007b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b22:	f7f9 f9e8 	bl	8000ef6 <prvTraceGetQueueType>
 8007b26:	4603      	mov	r3, r0
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4b27      	ldr	r3, [pc, #156]	; (8007bc8 <xQueueReceive+0x36c>)
 8007b2c:	5c9c      	ldrb	r4, [r3, r2]
 8007b2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b30:	f7f9 fa34 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 8007b34:	4603      	mov	r3, r0
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f7f9 ff15 	bl	800196c <prvTraceStoreKernelCall>
 8007b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b44:	f7f9 f9d7 	bl	8000ef6 <prvTraceGetQueueType>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4b1e      	ldr	r3, [pc, #120]	; (8007bc8 <xQueueReceive+0x36c>)
 8007b4e:	5c9b      	ldrb	r3, [r3, r2]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d018      	beq.n	8007b86 <xQueueReceive+0x32a>
 8007b54:	f7f9 fa69 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f9 f9e4 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	4b17      	ldr	r3, [pc, #92]	; (8007bc4 <xQueueReceive+0x368>)
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <xQueueReceive+0x32a>
 8007b70:	f7f9 fa5b 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8007b74:	4603      	mov	r3, r0
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7f9 f9c9 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fa f93b 	bl	8001dfc <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	3324      	adds	r3, #36	; 0x24
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 ffb4 	bl	8008afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b96:	f000 f91c 	bl	8007dd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b9a:	f000 fd7f 	bl	800869c <xTaskResumeAll>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f47f aea2 	bne.w	80078ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007ba6:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <xQueueReceive+0x370>)
 8007ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	e698      	b.n	80078ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bba:	f000 f90a 	bl	8007dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bbe:	f000 fd6d 	bl	800869c <xTaskResumeAll>
 8007bc2:	e692      	b.n	80078ea <xQueueReceive+0x8e>
 8007bc4:	2000023c 	.word	0x2000023c
 8007bc8:	20000004 	.word	0x20000004
 8007bcc:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bd2:	f000 f8fe 	bl	8007dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bd6:	f000 fd61 	bl	800869c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bdc:	f000 f958 	bl	8007e90 <prvIsQueueEmpty>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f43f ae81 	beq.w	80078ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007be8:	f7f9 fa1f 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8007bec:	4603      	mov	r3, r0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7f9 f99a 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	4b18      	ldr	r3, [pc, #96]	; (8007c5c <xQueueReceive+0x400>)
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d025      	beq.n	8007c50 <xQueueReceive+0x3f4>
 8007c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c06:	f7f9 f9d6 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <xQueueReceive+0x400>)
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	4013      	ands	r3, r2
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01a      	beq.n	8007c50 <xQueueReceive+0x3f4>
 8007c1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c1c:	f7f9 f96b 	bl	8000ef6 <prvTraceGetQueueType>
 8007c20:	4603      	mov	r3, r0
 8007c22:	461a      	mov	r2, r3
 8007c24:	4b0e      	ldr	r3, [pc, #56]	; (8007c60 <xQueueReceive+0x404>)
 8007c26:	5c9b      	ldrb	r3, [r3, r2]
 8007c28:	3350      	adds	r3, #80	; 0x50
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	461d      	mov	r5, r3
 8007c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c30:	f7f9 f961 	bl	8000ef6 <prvTraceGetQueueType>
 8007c34:	4603      	mov	r3, r0
 8007c36:	461a      	mov	r2, r3
 8007c38:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <xQueueReceive+0x404>)
 8007c3a:	5c9c      	ldrb	r4, [r3, r2]
 8007c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c3e:	f7f9 f9ad 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 8007c42:	4603      	mov	r3, r0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f7f9 fe8e 	bl	800196c <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8007c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3730      	adds	r7, #48	; 0x30
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bdb0      	pop	{r4, r5, r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	2000023c 	.word	0x2000023c
 8007c60:	20000004 	.word	0x20000004

08007c64 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b086      	sub	sp, #24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10d      	bne.n	8007cec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d14d      	bne.n	8007d74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 f9a9 	bl	8009034 <xTaskPriorityDisinherit>
 8007ce2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	609a      	str	r2, [r3, #8]
 8007cea:	e043      	b.n	8007d74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d119      	bne.n	8007d26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6858      	ldr	r0, [r3, #4]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	68b9      	ldr	r1, [r7, #8]
 8007cfe:	f002 fd2d 	bl	800a75c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	441a      	add	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d32b      	bcc.n	8007d74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	605a      	str	r2, [r3, #4]
 8007d24:	e026      	b.n	8007d74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	68d8      	ldr	r0, [r3, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	f002 fd13 	bl	800a75c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	425b      	negs	r3, r3
 8007d40:	441a      	add	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68da      	ldr	r2, [r3, #12]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d207      	bcs.n	8007d62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	425b      	negs	r3, r3
 8007d5c:	441a      	add	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d105      	bne.n	8007d74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d7c:	697b      	ldr	r3, [r7, #20]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d018      	beq.n	8007dca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	441a      	add	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d303      	bcc.n	8007dba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68d9      	ldr	r1, [r3, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6838      	ldr	r0, [r7, #0]
 8007dc6:	f002 fcc9 	bl	800a75c <memcpy>
	}
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dda:	f002 f86b 	bl	8009eb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007de4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007de6:	e01e      	b.n	8007e26 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d008      	beq.n	8007e02 <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f8e9 	bl	8007fc8 <prvNotifyQueueSetContainer>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d010      	beq.n	8007e1e <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8007dfc:	f000 fffa 	bl	8008df4 <vTaskMissedYield>
 8007e00:	e00d      	b.n	8007e1e <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d012      	beq.n	8007e30 <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3324      	adds	r3, #36	; 0x24
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 ff00 	bl	8008c14 <xTaskRemoveFromEventList>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8007e1a:	f000 ffeb 	bl	8008df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	dcdc      	bgt.n	8007de8 <prvUnlockQueue+0x16>
 8007e2e:	e000      	b.n	8007e32 <prvUnlockQueue+0x60>
						break;
 8007e30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	22ff      	movs	r2, #255	; 0xff
 8007e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e3a:	f002 f86b 	bl	8009f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e3e:	f002 f839 	bl	8009eb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e4a:	e011      	b.n	8007e70 <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d012      	beq.n	8007e7a <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3310      	adds	r3, #16
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 fedb 	bl	8008c14 <xTaskRemoveFromEventList>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 8007e64:	f000 ffc6 	bl	8008df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	dce9      	bgt.n	8007e4c <prvUnlockQueue+0x7a>
 8007e78:	e000      	b.n	8007e7c <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 8007e7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	22ff      	movs	r2, #255	; 0xff
 8007e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e84:	f002 f846 	bl	8009f14 <vPortExitCritical>
}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e98:	f002 f80c 	bl	8009eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d102      	bne.n	8007eaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e001      	b.n	8007eae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eae:	f002 f831 	bl	8009f14 <vPortExitCritical>

	return xReturn;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ec4:	f001 fff6 	bl	8009eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d102      	bne.n	8007eda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e001      	b.n	8007ede <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ede:	f002 f819 	bl	8009f14 <vPortExitCritical>

	return xReturn;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	e025      	b.n	8007f48 <vQueueAddToRegistry+0x5c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007efc:	4a16      	ldr	r2, [pc, #88]	; (8007f58 <vQueueAddToRegistry+0x6c>)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d11c      	bne.n	8007f42 <vQueueAddToRegistry+0x56>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f08:	4913      	ldr	r1, [pc, #76]	; (8007f58 <vQueueAddToRegistry+0x6c>)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f12:	4a11      	ldr	r2, [pc, #68]	; (8007f58 <vQueueAddToRegistry+0x6c>)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	4413      	add	r3, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7f8 ffe9 	bl	8000ef6 <prvTraceGetQueueType>
 8007f24:	4603      	mov	r3, r0
 8007f26:	461a      	mov	r2, r3
 8007f28:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <vQueueAddToRegistry+0x70>)
 8007f2a:	5c9c      	ldrb	r4, [r3, r2]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7f9 f835 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 8007f32:	4603      	mov	r3, r0
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f7fa f8b8 	bl	80020b0 <prvTraceSetObjectName>
				break;
 8007f40:	e006      	b.n	8007f50 <vQueueAddToRegistry+0x64>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b07      	cmp	r3, #7
 8007f4c:	d9d6      	bls.n	8007efc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd90      	pop	{r4, r7, pc}
 8007f58:	20001bf8 	.word	0x20001bf8
 8007f5c:	20000004 	.word	0x20000004

08007f60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f70:	f001 ffa0 	bl	8009eb4 <vPortEnterCritical>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f7a:	b25b      	sxtb	r3, r3
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d103      	bne.n	8007f8a <vQueueWaitForMessageRestricted+0x2a>
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f90:	b25b      	sxtb	r3, r3
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f96:	d103      	bne.n	8007fa0 <vQueueWaitForMessageRestricted+0x40>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fa0:	f001 ffb8 	bl	8009f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d106      	bne.n	8007fba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	3324      	adds	r3, #36	; 0x24
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	68b9      	ldr	r1, [r7, #8]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fdc5 	bl	8008b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fba:	6978      	ldr	r0, [r7, #20]
 8007fbc:	f7ff ff09 	bl	8007dd2 <prvUnlockQueue>
	}
 8007fc0:	bf00      	nop
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8007fc8:	b5b0      	push	{r4, r5, r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd4:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	613b      	str	r3, [r7, #16]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d30a      	bcc.n	8008018 <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	60fb      	str	r3, [r7, #12]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008020:	429a      	cmp	r2, r3
 8008022:	d26e      	bcs.n	8008102 <prvNotifyQueueSetContainer+0x13a>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800802a:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SET_SEND( pxQueueSetContainer );
 800802c:	f7f8 fffd 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8008030:	4603      	mov	r3, r0
 8008032:	4618      	mov	r0, r3
 8008034:	f7f8 ff78 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8008038:	4603      	mov	r3, r0
 800803a:	461a      	mov	r2, r3
 800803c:	4b33      	ldr	r3, [pc, #204]	; (800810c <prvNotifyQueueSetContainer+0x144>)
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	4013      	ands	r3, r2
 8008042:	b29b      	uxth	r3, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	d025      	beq.n	8008094 <prvNotifyQueueSetContainer+0xcc>
 8008048:	69b8      	ldr	r0, [r7, #24]
 800804a:	f7f8 ffb4 	bl	8000fb6 <prvTraceGetQueueNumberHigh16>
 800804e:	4603      	mov	r3, r0
 8008050:	461a      	mov	r2, r3
 8008052:	4b2e      	ldr	r3, [pc, #184]	; (800810c <prvNotifyQueueSetContainer+0x144>)
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	4013      	ands	r3, r2
 8008058:	b29b      	uxth	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d01a      	beq.n	8008094 <prvNotifyQueueSetContainer+0xcc>
 800805e:	69b8      	ldr	r0, [r7, #24]
 8008060:	f7f8 ff49 	bl	8000ef6 <prvTraceGetQueueType>
 8008064:	4603      	mov	r3, r0
 8008066:	461a      	mov	r2, r3
 8008068:	4b29      	ldr	r3, [pc, #164]	; (8008110 <prvNotifyQueueSetContainer+0x148>)
 800806a:	5c9b      	ldrb	r3, [r3, r2]
 800806c:	3320      	adds	r3, #32
 800806e:	b2db      	uxtb	r3, r3
 8008070:	461d      	mov	r5, r3
 8008072:	69b8      	ldr	r0, [r7, #24]
 8008074:	f7f8 ff3f 	bl	8000ef6 <prvTraceGetQueueType>
 8008078:	4603      	mov	r3, r0
 800807a:	461a      	mov	r2, r3
 800807c:	4b24      	ldr	r3, [pc, #144]	; (8008110 <prvNotifyQueueSetContainer+0x148>)
 800807e:	5c9c      	ldrb	r4, [r3, r2]
 8008080:	69b8      	ldr	r0, [r7, #24]
 8008082:	f7f8 ff8b 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 8008086:	4603      	mov	r3, r0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	4621      	mov	r1, r4
 800808e:	4628      	mov	r0, r5
 8008090:	f7f9 fc6c 	bl	800196c <prvTraceStoreKernelCall>
 8008094:	69b8      	ldr	r0, [r7, #24]
 8008096:	f7f8 ff2e 	bl	8000ef6 <prvTraceGetQueueType>
 800809a:	4603      	mov	r3, r0
 800809c:	461a      	mov	r2, r3
 800809e:	4b1c      	ldr	r3, [pc, #112]	; (8008110 <prvNotifyQueueSetContainer+0x148>)
 80080a0:	5c9c      	ldrb	r4, [r3, r2]
 80080a2:	69b8      	ldr	r0, [r7, #24]
 80080a4:	f7f8 ff7a 	bl	8000f9c <prvTraceGetQueueNumberLow16>
 80080a8:	4603      	mov	r3, r0
 80080aa:	b2d9      	uxtb	r1, r3
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	3301      	adds	r3, #1
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	461a      	mov	r2, r3
 80080b8:	4620      	mov	r0, r4
 80080ba:	f7f9 fe59 	bl	8001d70 <prvTraceSetObjectState>

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80080be:	1d3b      	adds	r3, r7, #4
 80080c0:	2200      	movs	r2, #0
 80080c2:	4619      	mov	r1, r3
 80080c4:	69b8      	ldr	r0, [r7, #24]
 80080c6:	f7ff fdf4 	bl	8007cb2 <prvCopyDataToQueue>
 80080ca:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80080cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d4:	d10e      	bne.n	80080f4 <prvNotifyQueueSetContainer+0x12c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d011      	beq.n	8008102 <prvNotifyQueueSetContainer+0x13a>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	3324      	adds	r3, #36	; 0x24
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fd96 	bl	8008c14 <xTaskRemoveFromEventList>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <prvNotifyQueueSetContainer+0x13a>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80080ee:	2301      	movs	r3, #1
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	e006      	b.n	8008102 <prvNotifyQueueSetContainer+0x13a>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	3301      	adds	r3, #1
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	b25a      	sxtb	r2, r3
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008102:	69fb      	ldr	r3, [r7, #28]
	}
 8008104:	4618      	mov	r0, r3
 8008106:	3720      	adds	r7, #32
 8008108:	46bd      	mov	sp, r7
 800810a:	bdb0      	pop	{r4, r5, r7, pc}
 800810c:	2000023c 	.word	0x2000023c
 8008110:	20000004 	.word	0x20000004

08008114 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08c      	sub	sp, #48	; 0x30
 8008118:	af04      	add	r7, sp, #16
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	603b      	str	r3, [r7, #0]
 8008120:	4613      	mov	r3, r2
 8008122:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008124:	88fb      	ldrh	r3, [r7, #6]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4618      	mov	r0, r3
 800812a:	f001 ffe5 	bl	800a0f8 <pvPortMalloc>
 800812e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00e      	beq.n	8008154 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008136:	20a8      	movs	r0, #168	; 0xa8
 8008138:	f001 ffde 	bl	800a0f8 <pvPortMalloc>
 800813c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	631a      	str	r2, [r3, #48]	; 0x30
 800814a:	e005      	b.n	8008158 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800814c:	6978      	ldr	r0, [r7, #20]
 800814e:	f002 f8af 	bl	800a2b0 <vPortFree>
 8008152:	e001      	b.n	8008158 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008154:	2300      	movs	r3, #0
 8008156:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d013      	beq.n	8008186 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800815e:	88fa      	ldrh	r2, [r7, #6]
 8008160:	2300      	movs	r3, #0
 8008162:	9303      	str	r3, [sp, #12]
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	9302      	str	r3, [sp, #8]
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	68b9      	ldr	r1, [r7, #8]
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 f80f 	bl	8008198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800817a:	69f8      	ldr	r0, [r7, #28]
 800817c:	f000 f8b2 	bl	80082e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008180:	2301      	movs	r3, #1
 8008182:	61bb      	str	r3, [r7, #24]
 8008184:	e002      	b.n	800818c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008186:	f04f 33ff 	mov.w	r3, #4294967295
 800818a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800818c:	69bb      	ldr	r3, [r7, #24]
	}
 800818e:	4618      	mov	r0, r3
 8008190:	3720      	adds	r7, #32
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b088      	sub	sp, #32
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	461a      	mov	r2, r3
 80081b0:	21a5      	movs	r1, #165	; 0xa5
 80081b2:	f002 fa4f 	bl	800a654 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081c0:	3b01      	subs	r3, #1
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	f023 0307 	bic.w	r3, r3, #7
 80081ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	617b      	str	r3, [r7, #20]
}
 80081ec:	bf00      	nop
 80081ee:	e7fe      	b.n	80081ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d01f      	beq.n	8008236 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081f6:	2300      	movs	r3, #0
 80081f8:	61fb      	str	r3, [r7, #28]
 80081fa:	e012      	b.n	8008222 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	7819      	ldrb	r1, [r3, #0]
 8008204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	4413      	add	r3, r2
 800820a:	3334      	adds	r3, #52	; 0x34
 800820c:	460a      	mov	r2, r1
 800820e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4413      	add	r3, r2
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d006      	beq.n	800822a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	3301      	adds	r3, #1
 8008220:	61fb      	str	r3, [r7, #28]
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	2b0f      	cmp	r3, #15
 8008226:	d9e9      	bls.n	80081fc <prvInitialiseNewTask+0x64>
 8008228:	e000      	b.n	800822c <prvInitialiseNewTask+0x94>
			{
				break;
 800822a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008234:	e003      	b.n	800823e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	2b06      	cmp	r3, #6
 8008242:	d901      	bls.n	8008248 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008244:	2306      	movs	r3, #6
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800824c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008252:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	2200      	movs	r2, #0
 8008258:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fdc6 	bl	8006df0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	3318      	adds	r3, #24
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fdc1 	bl	8006df0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008272:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	f1c3 0207 	rsb	r2, r3, #7
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008282:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	2200      	movs	r2, #0
 8008290:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	3354      	adds	r3, #84	; 0x54
 8008298:	224c      	movs	r2, #76	; 0x4c
 800829a:	2100      	movs	r1, #0
 800829c:	4618      	mov	r0, r3
 800829e:	f002 f9d9 	bl	800a654 <memset>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	4a0c      	ldr	r2, [pc, #48]	; (80082d8 <prvInitialiseNewTask+0x140>)
 80082a6:	659a      	str	r2, [r3, #88]	; 0x58
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	4a0c      	ldr	r2, [pc, #48]	; (80082dc <prvInitialiseNewTask+0x144>)
 80082ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	4a0b      	ldr	r2, [pc, #44]	; (80082e0 <prvInitialiseNewTask+0x148>)
 80082b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	68f9      	ldr	r1, [r7, #12]
 80082b8:	69b8      	ldr	r0, [r7, #24]
 80082ba:	f001 fcbd 	bl	8009c38 <pxPortInitialiseStack>
 80082be:	4602      	mov	r2, r0
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082d0:	bf00      	nop
 80082d2:	3720      	adds	r7, #32
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	20005dac 	.word	0x20005dac
 80082dc:	20005e14 	.word	0x20005e14
 80082e0:	20005e7c 	.word	0x20005e7c

080082e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082ec:	f001 fde2 	bl	8009eb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082f0:	4b67      	ldr	r3, [pc, #412]	; (8008490 <prvAddNewTaskToReadyList+0x1ac>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3301      	adds	r3, #1
 80082f6:	4a66      	ldr	r2, [pc, #408]	; (8008490 <prvAddNewTaskToReadyList+0x1ac>)
 80082f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082fa:	4b66      	ldr	r3, [pc, #408]	; (8008494 <prvAddNewTaskToReadyList+0x1b0>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008302:	4a64      	ldr	r2, [pc, #400]	; (8008494 <prvAddNewTaskToReadyList+0x1b0>)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008308:	4b61      	ldr	r3, [pc, #388]	; (8008490 <prvAddNewTaskToReadyList+0x1ac>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d110      	bne.n	8008332 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008310:	f000 fdbe 	bl	8008e90 <prvInitialiseTaskLists>
 8008314:	e00d      	b.n	8008332 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008316:	4b60      	ldr	r3, [pc, #384]	; (8008498 <prvAddNewTaskToReadyList+0x1b4>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800831e:	4b5d      	ldr	r3, [pc, #372]	; (8008494 <prvAddNewTaskToReadyList+0x1b0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	429a      	cmp	r2, r3
 800832a:	d802      	bhi.n	8008332 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800832c:	4a59      	ldr	r2, [pc, #356]	; (8008494 <prvAddNewTaskToReadyList+0x1b0>)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008332:	4b5a      	ldr	r3, [pc, #360]	; (800849c <prvAddNewTaskToReadyList+0x1b8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3301      	adds	r3, #1
 8008338:	4a58      	ldr	r2, [pc, #352]	; (800849c <prvAddNewTaskToReadyList+0x1b8>)
 800833a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800833c:	4b57      	ldr	r3, [pc, #348]	; (800849c <prvAddNewTaskToReadyList+0x1b8>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d05f      	beq.n	800840a <prvAddNewTaskToReadyList+0x126>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d049      	beq.n	80083e4 <prvAddNewTaskToReadyList+0x100>
 8008350:	2003      	movs	r0, #3
 8008352:	f7f9 fdd1 	bl	8001ef8 <prvTraceGetObjectHandle>
 8008356:	4603      	mov	r3, r0
 8008358:	b29b      	uxth	r3, r3
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7f8 fdf1 	bl	8000f44 <prvTraceSetTaskNumberLow16>
 8008362:	4b4f      	ldr	r3, [pc, #316]	; (80084a0 <prvAddNewTaskToReadyList+0x1bc>)
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7f8 fe01 	bl	8000f70 <prvTraceSetTaskNumberHigh16>
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7f8 fdcd 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8008374:	4603      	mov	r3, r0
 8008376:	b2d9      	uxtb	r1, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3334      	adds	r3, #52	; 0x34
 800837c:	461a      	mov	r2, r3
 800837e:	2003      	movs	r0, #3
 8008380:	f7f9 fe96 	bl	80020b0 <prvTraceSetObjectName>
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7f8 fdc2 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 800838a:	4603      	mov	r3, r0
 800838c:	b2d9      	uxtb	r1, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	b2db      	uxtb	r3, r3
 8008394:	461a      	mov	r2, r3
 8008396:	2003      	movs	r0, #3
 8008398:	f7f9 fca0 	bl	8001cdc <prvTraceSetPriorityProperty>
 800839c:	f7f8 fe45 	bl	800102a <prvTraceGetCurrentTaskHandle>
 80083a0:	4603      	mov	r3, r0
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7f8 fdc0 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	4b3d      	ldr	r3, [pc, #244]	; (80084a4 <prvAddNewTaskToReadyList+0x1c0>)
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	4013      	ands	r3, r2
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d028      	beq.n	800840a <prvAddNewTaskToReadyList+0x126>
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7f8 fdb5 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80083be:	4603      	mov	r3, r0
 80083c0:	461a      	mov	r2, r3
 80083c2:	4b38      	ldr	r3, [pc, #224]	; (80084a4 <prvAddNewTaskToReadyList+0x1c0>)
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	4013      	ands	r3, r2
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d01d      	beq.n	800840a <prvAddNewTaskToReadyList+0x126>
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7f8 fd9d 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 80083d4:	4603      	mov	r3, r0
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	461a      	mov	r2, r3
 80083da:	2103      	movs	r1, #3
 80083dc:	201b      	movs	r0, #27
 80083de:	f7f9 fac5 	bl	800196c <prvTraceStoreKernelCall>
 80083e2:	e012      	b.n	800840a <prvAddNewTaskToReadyList+0x126>
 80083e4:	f7f8 fe21 	bl	800102a <prvTraceGetCurrentTaskHandle>
 80083e8:	4603      	mov	r3, r0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7f8 fd9c 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80083f0:	4603      	mov	r3, r0
 80083f2:	461a      	mov	r2, r3
 80083f4:	4b2b      	ldr	r3, [pc, #172]	; (80084a4 <prvAddNewTaskToReadyList+0x1c0>)
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	4013      	ands	r3, r2
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <prvAddNewTaskToReadyList+0x126>
 8008400:	2200      	movs	r2, #0
 8008402:	2103      	movs	r1, #3
 8008404:	201b      	movs	r0, #27
 8008406:	f7f9 fab1 	bl	800196c <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7f8 fd8c 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8008410:	4603      	mov	r3, r0
 8008412:	461a      	mov	r2, r3
 8008414:	4b23      	ldr	r3, [pc, #140]	; (80084a4 <prvAddNewTaskToReadyList+0x1c0>)
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	4013      	ands	r3, r2
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d007      	beq.n	8008430 <prvAddNewTaskToReadyList+0x14c>
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7f8 fd74 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8008426:	4603      	mov	r3, r0
 8008428:	b2db      	uxtb	r3, r3
 800842a:	4618      	mov	r0, r3
 800842c:	f7f9 f9aa 	bl	8001784 <prvTraceStoreTaskReady>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	2201      	movs	r2, #1
 8008436:	409a      	lsls	r2, r3
 8008438:	4b1b      	ldr	r3, [pc, #108]	; (80084a8 <prvAddNewTaskToReadyList+0x1c4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4313      	orrs	r3, r2
 800843e:	4a1a      	ldr	r2, [pc, #104]	; (80084a8 <prvAddNewTaskToReadyList+0x1c4>)
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4a17      	ldr	r2, [pc, #92]	; (80084ac <prvAddNewTaskToReadyList+0x1c8>)
 8008450:	441a      	add	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	3304      	adds	r3, #4
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f7fe fcd6 	bl	8006e0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800845e:	f001 fd59 	bl	8009f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008462:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <prvAddNewTaskToReadyList+0x1b4>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00e      	beq.n	8008488 <prvAddNewTaskToReadyList+0x1a4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800846a:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <prvAddNewTaskToReadyList+0x1b0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	429a      	cmp	r2, r3
 8008476:	d207      	bcs.n	8008488 <prvAddNewTaskToReadyList+0x1a4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008478:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <prvAddNewTaskToReadyList+0x1cc>)
 800847a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20001d38 	.word	0x20001d38
 8008494:	20001c38 	.word	0x20001c38
 8008498:	20001d44 	.word	0x20001d44
 800849c:	20001d54 	.word	0x20001d54
 80084a0:	2000023e 	.word	0x2000023e
 80084a4:	2000023c 	.word	0x2000023c
 80084a8:	20001d40 	.word	0x20001d40
 80084ac:	20001c3c 	.word	0x20001c3c
 80084b0:	e000ed04 	.word	0xe000ed04

080084b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d04b      	beq.n	800855e <vTaskDelay+0xaa>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084c6:	4b2d      	ldr	r3, [pc, #180]	; (800857c <vTaskDelay+0xc8>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <vTaskDelay+0x30>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	60bb      	str	r3, [r7, #8]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80084e4:	f000 f8cc 	bl	8008680 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80084e8:	4b25      	ldr	r3, [pc, #148]	; (8008580 <vTaskDelay+0xcc>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7f8 fd1b 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80084f2:	4603      	mov	r3, r0
 80084f4:	461a      	mov	r2, r3
 80084f6:	4b23      	ldr	r3, [pc, #140]	; (8008584 <vTaskDelay+0xd0>)
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	4013      	ands	r3, r2
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00d      	beq.n	800851e <vTaskDelay+0x6a>
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	2089      	movs	r0, #137	; 0x89
 8008506:	f7f9 fb23 	bl	8001b50 <prvTraceStoreKernelCallWithNumericParamOnly>
 800850a:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <vTaskDelay+0xcc>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7f8 fcfd 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8008514:	4603      	mov	r3, r0
 8008516:	b2db      	uxtb	r3, r3
 8008518:	4618      	mov	r0, r3
 800851a:	f7f9 fc6f 	bl	8001dfc <prvTraceSetTaskInstanceFinished>
 800851e:	f7f8 fd84 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8008522:	4603      	mov	r3, r0
 8008524:	4618      	mov	r0, r3
 8008526:	f7f8 fcff 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 800852a:	4603      	mov	r3, r0
 800852c:	461a      	mov	r2, r3
 800852e:	4b15      	ldr	r3, [pc, #84]	; (8008584 <vTaskDelay+0xd0>)
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	4013      	ands	r3, r2
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <vTaskDelay+0x9c>
 800853a:	f7f8 fd76 	bl	800102a <prvTraceGetCurrentTaskHandle>
 800853e:	4603      	mov	r3, r0
 8008540:	4618      	mov	r0, r3
 8008542:	f7f8 fce4 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8008546:	4603      	mov	r3, r0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	4618      	mov	r0, r3
 800854c:	f7f9 fc56 	bl	8001dfc <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008550:	2100      	movs	r1, #0
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 ffdc 	bl	8009510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008558:	f000 f8a0 	bl	800869c <xTaskResumeAll>
 800855c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d107      	bne.n	8008574 <vTaskDelay+0xc0>
		{
			portYIELD_WITHIN_API();
 8008564:	4b08      	ldr	r3, [pc, #32]	; (8008588 <vTaskDelay+0xd4>)
 8008566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20001d60 	.word	0x20001d60
 8008580:	20001c38 	.word	0x20001c38
 8008584:	2000023c 	.word	0x2000023c
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008592:	4b31      	ldr	r3, [pc, #196]	; (8008658 <vTaskStartScheduler+0xcc>)
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	2300      	movs	r3, #0
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	2300      	movs	r3, #0
 800859c:	2280      	movs	r2, #128	; 0x80
 800859e:	492f      	ldr	r1, [pc, #188]	; (800865c <vTaskStartScheduler+0xd0>)
 80085a0:	482f      	ldr	r0, [pc, #188]	; (8008660 <vTaskStartScheduler+0xd4>)
 80085a2:	f7ff fdb7 	bl	8008114 <xTaskCreate>
 80085a6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d102      	bne.n	80085b4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80085ae:	f001 f815 	bl	80095dc <xTimerCreateTimerTask>
 80085b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d13a      	bne.n	8008630 <vTaskStartScheduler+0xa4>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	60bb      	str	r3, [r7, #8]
}
 80085cc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085ce:	4b25      	ldr	r3, [pc, #148]	; (8008664 <vTaskStartScheduler+0xd8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3354      	adds	r3, #84	; 0x54
 80085d4:	4a24      	ldr	r2, [pc, #144]	; (8008668 <vTaskStartScheduler+0xdc>)
 80085d6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085d8:	4b24      	ldr	r3, [pc, #144]	; (800866c <vTaskStartScheduler+0xe0>)
 80085da:	f04f 32ff 	mov.w	r2, #4294967295
 80085de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085e0:	4b23      	ldr	r3, [pc, #140]	; (8008670 <vTaskStartScheduler+0xe4>)
 80085e2:	2201      	movs	r2, #1
 80085e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085e6:	4b23      	ldr	r3, [pc, #140]	; (8008674 <vTaskStartScheduler+0xe8>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80085ec:	4b22      	ldr	r3, [pc, #136]	; (8008678 <vTaskStartScheduler+0xec>)
 80085ee:	2201      	movs	r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	f7f8 fd1a 	bl	800102a <prvTraceGetCurrentTaskHandle>
 80085f6:	4603      	mov	r3, r0
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7f8 fc95 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80085fe:	4603      	mov	r3, r0
 8008600:	461a      	mov	r2, r3
 8008602:	4b1e      	ldr	r3, [pc, #120]	; (800867c <vTaskStartScheduler+0xf0>)
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	4013      	ands	r3, r2
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00a      	beq.n	8008624 <vTaskStartScheduler+0x98>
 800860e:	f7f8 fd0c 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8008612:	4603      	mov	r3, r0
 8008614:	4618      	mov	r0, r3
 8008616:	f7f8 fc7a 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 800861a:	4603      	mov	r3, r0
 800861c:	b2db      	uxtb	r3, r3
 800861e:	4618      	mov	r0, r3
 8008620:	f7f9 faf2 	bl	8001c08 <prvTraceStoreTaskswitch>
 8008624:	4b14      	ldr	r3, [pc, #80]	; (8008678 <vTaskStartScheduler+0xec>)
 8008626:	2202      	movs	r2, #2
 8008628:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800862a:	f001 fb91 	bl	8009d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800862e:	e00e      	b.n	800864e <vTaskStartScheduler+0xc2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008636:	d10a      	bne.n	800864e <vTaskStartScheduler+0xc2>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	607b      	str	r3, [r7, #4]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <vTaskStartScheduler+0xc0>
}
 800864e:	bf00      	nop
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20001d5c 	.word	0x20001d5c
 800865c:	0800afbc 	.word	0x0800afbc
 8008660:	08008e61 	.word	0x08008e61
 8008664:	20001c38 	.word	0x20001c38
 8008668:	20000068 	.word	0x20000068
 800866c:	20001d58 	.word	0x20001d58
 8008670:	20001d44 	.word	0x20001d44
 8008674:	20001d3c 	.word	0x20001d3c
 8008678:	20000224 	.word	0x20000224
 800867c:	2000023c 	.word	0x2000023c

08008680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008684:	4b04      	ldr	r3, [pc, #16]	; (8008698 <vTaskSuspendAll+0x18>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3301      	adds	r3, #1
 800868a:	4a03      	ldr	r2, [pc, #12]	; (8008698 <vTaskSuspendAll+0x18>)
 800868c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800868e:	bf00      	nop
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	20001d60 	.word	0x20001d60

0800869c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086aa:	4b4b      	ldr	r3, [pc, #300]	; (80087d8 <xTaskResumeAll+0x13c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	603b      	str	r3, [r7, #0]
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086c8:	f001 fbf4 	bl	8009eb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086cc:	4b42      	ldr	r3, [pc, #264]	; (80087d8 <xTaskResumeAll+0x13c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	4a41      	ldr	r2, [pc, #260]	; (80087d8 <xTaskResumeAll+0x13c>)
 80086d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086d6:	4b40      	ldr	r3, [pc, #256]	; (80087d8 <xTaskResumeAll+0x13c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d174      	bne.n	80087c8 <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086de:	4b3f      	ldr	r3, [pc, #252]	; (80087dc <xTaskResumeAll+0x140>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d070      	beq.n	80087c8 <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086e6:	e041      	b.n	800876c <xTaskResumeAll+0xd0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e8:	4b3d      	ldr	r3, [pc, #244]	; (80087e0 <xTaskResumeAll+0x144>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3318      	adds	r3, #24
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fe fbe5 	bl	8006ec4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3304      	adds	r3, #4
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fbe0 	bl	8006ec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f7f8 fc0f 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 800870a:	4603      	mov	r3, r0
 800870c:	461a      	mov	r2, r3
 800870e:	4b35      	ldr	r3, [pc, #212]	; (80087e4 <xTaskResumeAll+0x148>)
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	4013      	ands	r3, r2
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d007      	beq.n	800872a <xTaskResumeAll+0x8e>
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f7f8 fbf7 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8008720:	4603      	mov	r3, r0
 8008722:	b2db      	uxtb	r3, r3
 8008724:	4618      	mov	r0, r3
 8008726:	f7f9 f82d 	bl	8001784 <prvTraceStoreTaskReady>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	2201      	movs	r2, #1
 8008730:	409a      	lsls	r2, r3
 8008732:	4b2d      	ldr	r3, [pc, #180]	; (80087e8 <xTaskResumeAll+0x14c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4313      	orrs	r3, r2
 8008738:	4a2b      	ldr	r2, [pc, #172]	; (80087e8 <xTaskResumeAll+0x14c>)
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4a28      	ldr	r2, [pc, #160]	; (80087ec <xTaskResumeAll+0x150>)
 800874a:	441a      	add	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3304      	adds	r3, #4
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f7fe fb59 	bl	8006e0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875c:	4b24      	ldr	r3, [pc, #144]	; (80087f0 <xTaskResumeAll+0x154>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008762:	429a      	cmp	r2, r3
 8008764:	d302      	bcc.n	800876c <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 8008766:	4b23      	ldr	r3, [pc, #140]	; (80087f4 <xTaskResumeAll+0x158>)
 8008768:	2201      	movs	r2, #1
 800876a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800876c:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <xTaskResumeAll+0x144>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1b9      	bne.n	80086e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800877a:	f000 fc0d 	bl	8008f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800877e:	4b1e      	ldr	r3, [pc, #120]	; (80087f8 <xTaskResumeAll+0x15c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d010      	beq.n	80087ac <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800878a:	f000 f849 	bl	8008820 <xTaskIncrementTick>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 8008794:	4b17      	ldr	r3, [pc, #92]	; (80087f4 <xTaskResumeAll+0x158>)
 8008796:	2201      	movs	r2, #1
 8008798:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3b01      	subs	r3, #1
 800879e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1f1      	bne.n	800878a <xTaskResumeAll+0xee>

						xPendedTicks = 0;
 80087a6:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <xTaskResumeAll+0x15c>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087ac:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <xTaskResumeAll+0x158>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087b4:	2301      	movs	r3, #1
 80087b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087b8:	4b10      	ldr	r3, [pc, #64]	; (80087fc <xTaskResumeAll+0x160>)
 80087ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087c8:	f001 fba4 	bl	8009f14 <vPortExitCritical>

	return xAlreadyYielded;
 80087cc:	68bb      	ldr	r3, [r7, #8]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20001d60 	.word	0x20001d60
 80087dc:	20001d38 	.word	0x20001d38
 80087e0:	20001cf8 	.word	0x20001cf8
 80087e4:	2000023c 	.word	0x2000023c
 80087e8:	20001d40 	.word	0x20001d40
 80087ec:	20001c3c 	.word	0x20001c3c
 80087f0:	20001c38 	.word	0x20001c38
 80087f4:	20001d4c 	.word	0x20001d4c
 80087f8:	20001d48 	.word	0x20001d48
 80087fc:	e000ed04 	.word	0xe000ed04

08008800 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008806:	4b05      	ldr	r3, [pc, #20]	; (800881c <xTaskGetTickCount+0x1c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800880c:	687b      	ldr	r3, [r7, #4]
}
 800880e:	4618      	mov	r0, r3
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	20001d3c 	.word	0x20001d3c

08008820 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800882a:	4b65      	ldr	r3, [pc, #404]	; (80089c0 <xTaskIncrementTick+0x1a0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d003      	beq.n	800883a <xTaskIncrementTick+0x1a>
 8008832:	4b64      	ldr	r3, [pc, #400]	; (80089c4 <xTaskIncrementTick+0x1a4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d107      	bne.n	800884a <xTaskIncrementTick+0x2a>
 800883a:	4b63      	ldr	r3, [pc, #396]	; (80089c8 <xTaskIncrementTick+0x1a8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3301      	adds	r3, #1
 8008840:	4a61      	ldr	r2, [pc, #388]	; (80089c8 <xTaskIncrementTick+0x1a8>)
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	2000      	movs	r0, #0
 8008846:	f7f9 fe6b 	bl	8002520 <prvTracePortGetTimeStamp>
 800884a:	4b5d      	ldr	r3, [pc, #372]	; (80089c0 <xTaskIncrementTick+0x1a0>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d106      	bne.n	8008860 <xTaskIncrementTick+0x40>
 8008852:	4b5e      	ldr	r3, [pc, #376]	; (80089cc <xTaskIncrementTick+0x1ac>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3301      	adds	r3, #1
 8008858:	4619      	mov	r1, r3
 800885a:	2003      	movs	r0, #3
 800885c:	f7f9 f978 	bl	8001b50 <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008860:	4b57      	ldr	r3, [pc, #348]	; (80089c0 <xTaskIncrementTick+0x1a0>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f040 80a1 	bne.w	80089ac <xTaskIncrementTick+0x18c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800886a:	4b58      	ldr	r3, [pc, #352]	; (80089cc <xTaskIncrementTick+0x1ac>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3301      	adds	r3, #1
 8008870:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008872:	4a56      	ldr	r2, [pc, #344]	; (80089cc <xTaskIncrementTick+0x1ac>)
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d120      	bne.n	80088c0 <xTaskIncrementTick+0xa0>
		{
			taskSWITCH_DELAYED_LISTS();
 800887e:	4b54      	ldr	r3, [pc, #336]	; (80089d0 <xTaskIncrementTick+0x1b0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00a      	beq.n	800889e <xTaskIncrementTick+0x7e>
	__asm volatile
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	603b      	str	r3, [r7, #0]
}
 800889a:	bf00      	nop
 800889c:	e7fe      	b.n	800889c <xTaskIncrementTick+0x7c>
 800889e:	4b4c      	ldr	r3, [pc, #304]	; (80089d0 <xTaskIncrementTick+0x1b0>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	4b4b      	ldr	r3, [pc, #300]	; (80089d4 <xTaskIncrementTick+0x1b4>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a49      	ldr	r2, [pc, #292]	; (80089d0 <xTaskIncrementTick+0x1b0>)
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	4a49      	ldr	r2, [pc, #292]	; (80089d4 <xTaskIncrementTick+0x1b4>)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	4b49      	ldr	r3, [pc, #292]	; (80089d8 <xTaskIncrementTick+0x1b8>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3301      	adds	r3, #1
 80088b8:	4a47      	ldr	r2, [pc, #284]	; (80089d8 <xTaskIncrementTick+0x1b8>)
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	f000 fb6c 	bl	8008f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088c0:	4b46      	ldr	r3, [pc, #280]	; (80089dc <xTaskIncrementTick+0x1bc>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d35b      	bcc.n	8008982 <xTaskIncrementTick+0x162>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ca:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <xTaskIncrementTick+0x1b0>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d104      	bne.n	80088de <xTaskIncrementTick+0xbe>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d4:	4b41      	ldr	r3, [pc, #260]	; (80089dc <xTaskIncrementTick+0x1bc>)
 80088d6:	f04f 32ff 	mov.w	r2, #4294967295
 80088da:	601a      	str	r2, [r3, #0]
					break;
 80088dc:	e051      	b.n	8008982 <xTaskIncrementTick+0x162>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088de:	4b3c      	ldr	r3, [pc, #240]	; (80089d0 <xTaskIncrementTick+0x1b0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d203      	bcs.n	80088fe <xTaskIncrementTick+0xde>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088f6:	4a39      	ldr	r2, [pc, #228]	; (80089dc <xTaskIncrementTick+0x1bc>)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088fc:	e041      	b.n	8008982 <xTaskIncrementTick+0x162>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	3304      	adds	r3, #4
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fade 	bl	8006ec4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	2b00      	cmp	r3, #0
 800890e:	d004      	beq.n	800891a <xTaskIncrementTick+0xfa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	3318      	adds	r3, #24
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe fad5 	bl	8006ec4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800891a:	68b8      	ldr	r0, [r7, #8]
 800891c:	f7f8 fb04 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	4b2e      	ldr	r3, [pc, #184]	; (80089e0 <xTaskIncrementTick+0x1c0>)
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	4013      	ands	r3, r2
 800892a:	b29b      	uxth	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d007      	beq.n	8008940 <xTaskIncrementTick+0x120>
 8008930:	68b8      	ldr	r0, [r7, #8]
 8008932:	f7f8 faec 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8008936:	4603      	mov	r3, r0
 8008938:	b2db      	uxtb	r3, r3
 800893a:	4618      	mov	r0, r3
 800893c:	f7f8 ff22 	bl	8001784 <prvTraceStoreTaskReady>
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	2201      	movs	r2, #1
 8008946:	409a      	lsls	r2, r3
 8008948:	4b26      	ldr	r3, [pc, #152]	; (80089e4 <xTaskIncrementTick+0x1c4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4313      	orrs	r3, r2
 800894e:	4a25      	ldr	r2, [pc, #148]	; (80089e4 <xTaskIncrementTick+0x1c4>)
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4a22      	ldr	r2, [pc, #136]	; (80089e8 <xTaskIncrementTick+0x1c8>)
 8008960:	441a      	add	r2, r3
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	3304      	adds	r3, #4
 8008966:	4619      	mov	r1, r3
 8008968:	4610      	mov	r0, r2
 800896a:	f7fe fa4e 	bl	8006e0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008972:	4b1e      	ldr	r3, [pc, #120]	; (80089ec <xTaskIncrementTick+0x1cc>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008978:	429a      	cmp	r2, r3
 800897a:	d3a6      	bcc.n	80088ca <xTaskIncrementTick+0xaa>
						{
							xSwitchRequired = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008980:	e7a3      	b.n	80088ca <xTaskIncrementTick+0xaa>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008982:	4b1a      	ldr	r3, [pc, #104]	; (80089ec <xTaskIncrementTick+0x1cc>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4917      	ldr	r1, [pc, #92]	; (80089e8 <xTaskIncrementTick+0x1c8>)
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d901      	bls.n	800899e <xTaskIncrementTick+0x17e>
			{
				xSwitchRequired = pdTRUE;
 800899a:	2301      	movs	r3, #1
 800899c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800899e:	4b14      	ldr	r3, [pc, #80]	; (80089f0 <xTaskIncrementTick+0x1d0>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d007      	beq.n	80089b6 <xTaskIncrementTick+0x196>
			{
				xSwitchRequired = pdTRUE;
 80089a6:	2301      	movs	r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	e004      	b.n	80089b6 <xTaskIncrementTick+0x196>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089ac:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <xTaskIncrementTick+0x1a4>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3301      	adds	r3, #1
 80089b2:	4a04      	ldr	r2, [pc, #16]	; (80089c4 <xTaskIncrementTick+0x1a4>)
 80089b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089b6:	697b      	ldr	r3, [r7, #20]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20001d60 	.word	0x20001d60
 80089c4:	20001d48 	.word	0x20001d48
 80089c8:	20000218 	.word	0x20000218
 80089cc:	20001d3c 	.word	0x20001d3c
 80089d0:	20001cf0 	.word	0x20001cf0
 80089d4:	20001cf4 	.word	0x20001cf4
 80089d8:	20001d50 	.word	0x20001d50
 80089dc:	20001d58 	.word	0x20001d58
 80089e0:	2000023c 	.word	0x2000023c
 80089e4:	20001d40 	.word	0x20001d40
 80089e8:	20001c3c 	.word	0x20001c3c
 80089ec:	20001c38 	.word	0x20001c38
 80089f0:	20001d4c 	.word	0x20001d4c

080089f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089fa:	4b38      	ldr	r3, [pc, #224]	; (8008adc <vTaskSwitchContext+0xe8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a02:	4b37      	ldr	r3, [pc, #220]	; (8008ae0 <vTaskSwitchContext+0xec>)
 8008a04:	2201      	movs	r2, #1
 8008a06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a08:	e063      	b.n	8008ad2 <vTaskSwitchContext+0xde>
		xYieldPending = pdFALSE;
 8008a0a:	4b35      	ldr	r3, [pc, #212]	; (8008ae0 <vTaskSwitchContext+0xec>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a10:	4b34      	ldr	r3, [pc, #208]	; (8008ae4 <vTaskSwitchContext+0xf0>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	fab3 f383 	clz	r3, r3
 8008a1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a1e:	7afb      	ldrb	r3, [r7, #11]
 8008a20:	f1c3 031f 	rsb	r3, r3, #31
 8008a24:	617b      	str	r3, [r7, #20]
 8008a26:	4930      	ldr	r1, [pc, #192]	; (8008ae8 <vTaskSwitchContext+0xf4>)
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	440b      	add	r3, r1
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10a      	bne.n	8008a50 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	607b      	str	r3, [r7, #4]
}
 8008a4c:	bf00      	nop
 8008a4e:	e7fe      	b.n	8008a4e <vTaskSwitchContext+0x5a>
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4a23      	ldr	r2, [pc, #140]	; (8008ae8 <vTaskSwitchContext+0xf4>)
 8008a5c:	4413      	add	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	605a      	str	r2, [r3, #4]
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	3308      	adds	r3, #8
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d104      	bne.n	8008a80 <vTaskSwitchContext+0x8c>
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	605a      	str	r2, [r3, #4]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	4a19      	ldr	r2, [pc, #100]	; (8008aec <vTaskSwitchContext+0xf8>)
 8008a88:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8008a8a:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <vTaskSwitchContext+0xfc>)
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	f7f8 facb 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8008a94:	4603      	mov	r3, r0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f8 fa46 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	4b14      	ldr	r3, [pc, #80]	; (8008af4 <vTaskSwitchContext+0x100>)
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00a      	beq.n	8008ac2 <vTaskSwitchContext+0xce>
 8008aac:	f7f8 fabd 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7f8 fa2b 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7f9 f8a3 	bl	8001c08 <prvTraceStoreTaskswitch>
 8008ac2:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <vTaskSwitchContext+0xfc>)
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ac8:	4b08      	ldr	r3, [pc, #32]	; (8008aec <vTaskSwitchContext+0xf8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3354      	adds	r3, #84	; 0x54
 8008ace:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <vTaskSwitchContext+0x104>)
 8008ad0:	6013      	str	r3, [r2, #0]
}
 8008ad2:	bf00      	nop
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20001d60 	.word	0x20001d60
 8008ae0:	20001d4c 	.word	0x20001d4c
 8008ae4:	20001d40 	.word	0x20001d40
 8008ae8:	20001c3c 	.word	0x20001c3c
 8008aec:	20001c38 	.word	0x20001c38
 8008af0:	20000224 	.word	0x20000224
 8008af4:	2000023c 	.word	0x2000023c
 8008af8:	20000068 	.word	0x20000068

08008afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	60fb      	str	r3, [r7, #12]
}
 8008b1e:	bf00      	nop
 8008b20:	e7fe      	b.n	8008b20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b22:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <vTaskPlaceOnEventList+0x44>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3318      	adds	r3, #24
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fe f991 	bl	8006e52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b30:	2101      	movs	r1, #1
 8008b32:	6838      	ldr	r0, [r7, #0]
 8008b34:	f000 fcec 	bl	8009510 <prvAddCurrentTaskToDelayedList>
}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20001c38 	.word	0x20001c38

08008b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	617b      	str	r3, [r7, #20]
}
 8008b68:	bf00      	nop
 8008b6a:	e7fe      	b.n	8008b6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b6c:	4b26      	ldr	r3, [pc, #152]	; (8008c08 <vTaskPlaceOnEventListRestricted+0xc4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3318      	adds	r3, #24
 8008b72:	4619      	mov	r1, r3
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7fe f948 	bl	8006e0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b80:	f04f 33ff 	mov.w	r3, #4294967295
 8008b84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8008b86:	4b20      	ldr	r3, [pc, #128]	; (8008c08 <vTaskPlaceOnEventListRestricted+0xc4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7f8 f9cc 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8008b90:	4603      	mov	r3, r0
 8008b92:	461a      	mov	r2, r3
 8008b94:	4b1d      	ldr	r3, [pc, #116]	; (8008c0c <vTaskPlaceOnEventListRestricted+0xc8>)
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d011      	beq.n	8008bc4 <vTaskPlaceOnEventListRestricted+0x80>
 8008ba0:	4b1b      	ldr	r3, [pc, #108]	; (8008c10 <vTaskPlaceOnEventListRestricted+0xcc>)
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	2088      	movs	r0, #136	; 0x88
 8008bac:	f7f8 ffd0 	bl	8001b50 <prvTraceStoreKernelCallWithNumericParamOnly>
 8008bb0:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <vTaskPlaceOnEventListRestricted+0xc4>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7f8 f9aa 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7f9 f91c 	bl	8001dfc <prvTraceSetTaskInstanceFinished>
 8008bc4:	f7f8 fa31 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7f8 f9ac 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	4b0d      	ldr	r3, [pc, #52]	; (8008c0c <vTaskPlaceOnEventListRestricted+0xc8>)
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00a      	beq.n	8008bf6 <vTaskPlaceOnEventListRestricted+0xb2>
 8008be0:	f7f8 fa23 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8008be4:	4603      	mov	r3, r0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7f8 f991 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8008bec:	4603      	mov	r3, r0
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7f9 f903 	bl	8001dfc <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	68b8      	ldr	r0, [r7, #8]
 8008bfa:	f000 fc89 	bl	8009510 <prvAddCurrentTaskToDelayedList>
	}
 8008bfe:	bf00      	nop
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20001c38 	.word	0x20001c38
 8008c0c:	2000023c 	.word	0x2000023c
 8008c10:	20001d3c 	.word	0x20001d3c

08008c14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10a      	bne.n	8008c40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	60fb      	str	r3, [r7, #12]
}
 8008c3c:	bf00      	nop
 8008c3e:	e7fe      	b.n	8008c3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	3318      	adds	r3, #24
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fe f93d 	bl	8006ec4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c4a:	4b27      	ldr	r3, [pc, #156]	; (8008ce8 <xTaskRemoveFromEventList+0xd4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d12f      	bne.n	8008cb2 <xTaskRemoveFromEventList+0x9e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	3304      	adds	r3, #4
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe f934 	bl	8006ec4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c5c:	6938      	ldr	r0, [r7, #16]
 8008c5e:	f7f8 f963 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8008c62:	4603      	mov	r3, r0
 8008c64:	461a      	mov	r2, r3
 8008c66:	4b21      	ldr	r3, [pc, #132]	; (8008cec <xTaskRemoveFromEventList+0xd8>)
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d007      	beq.n	8008c82 <xTaskRemoveFromEventList+0x6e>
 8008c72:	6938      	ldr	r0, [r7, #16]
 8008c74:	f7f8 f94b 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7f8 fd81 	bl	8001784 <prvTraceStoreTaskReady>
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c86:	2201      	movs	r2, #1
 8008c88:	409a      	lsls	r2, r3
 8008c8a:	4b19      	ldr	r3, [pc, #100]	; (8008cf0 <xTaskRemoveFromEventList+0xdc>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	4a17      	ldr	r2, [pc, #92]	; (8008cf0 <xTaskRemoveFromEventList+0xdc>)
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4a14      	ldr	r2, [pc, #80]	; (8008cf4 <xTaskRemoveFromEventList+0xe0>)
 8008ca2:	441a      	add	r2, r3
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f7fe f8ad 	bl	8006e0a <vListInsertEnd>
 8008cb0:	e005      	b.n	8008cbe <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	3318      	adds	r3, #24
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	480f      	ldr	r0, [pc, #60]	; (8008cf8 <xTaskRemoveFromEventList+0xe4>)
 8008cba:	f7fe f8a6 	bl	8006e0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc2:	4b0e      	ldr	r3, [pc, #56]	; (8008cfc <xTaskRemoveFromEventList+0xe8>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d905      	bls.n	8008cd8 <xTaskRemoveFromEventList+0xc4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <xTaskRemoveFromEventList+0xec>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	e001      	b.n	8008cdc <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		xReturn = pdFALSE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008cdc:	697b      	ldr	r3, [r7, #20]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20001d60 	.word	0x20001d60
 8008cec:	2000023c 	.word	0x2000023c
 8008cf0:	20001d40 	.word	0x20001d40
 8008cf4:	20001c3c 	.word	0x20001c3c
 8008cf8:	20001cf8 	.word	0x20001cf8
 8008cfc:	20001c38 	.word	0x20001c38
 8008d00:	20001d4c 	.word	0x20001d4c

08008d04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <vTaskInternalSetTimeOutState+0x24>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d14:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <vTaskInternalSetTimeOutState+0x28>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	605a      	str	r2, [r3, #4]
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	20001d50 	.word	0x20001d50
 8008d2c:	20001d3c 	.word	0x20001d3c

08008d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	613b      	str	r3, [r7, #16]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10a      	bne.n	8008d72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	60fb      	str	r3, [r7, #12]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d72:	f001 f89f 	bl	8009eb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d76:	4b1d      	ldr	r3, [pc, #116]	; (8008dec <xTaskCheckForTimeOut+0xbc>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d102      	bne.n	8008d96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d90:	2300      	movs	r3, #0
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e023      	b.n	8008dde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <xTaskCheckForTimeOut+0xc0>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d007      	beq.n	8008db2 <xTaskCheckForTimeOut+0x82>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d302      	bcc.n	8008db2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008dac:	2301      	movs	r3, #1
 8008dae:	61fb      	str	r3, [r7, #28]
 8008db0:	e015      	b.n	8008dde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d20b      	bcs.n	8008dd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	1ad2      	subs	r2, r2, r3
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff ff9b 	bl	8008d04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61fb      	str	r3, [r7, #28]
 8008dd2:	e004      	b.n	8008dde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008dde:	f001 f899 	bl	8009f14 <vPortExitCritical>

	return xReturn;
 8008de2:	69fb      	ldr	r3, [r7, #28]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3720      	adds	r7, #32
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	20001d3c 	.word	0x20001d3c
 8008df0:	20001d50 	.word	0x20001d50

08008df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008df4:	b480      	push	{r7}
 8008df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008df8:	4b03      	ldr	r3, [pc, #12]	; (8008e08 <vTaskMissedYield+0x14>)
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]
}
 8008dfe:	bf00      	nop
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	20001d4c 	.word	0x20001d4c

08008e0c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d005      	beq.n	8008e26 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	e001      	b.n	8008e2a <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
	}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8008e52:	bf00      	nop
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
	...

08008e60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e68:	f000 f852 	bl	8008f10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e6c:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <prvIdleTask+0x28>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d9f9      	bls.n	8008e68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e74:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <prvIdleTask+0x2c>)
 8008e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e84:	e7f0      	b.n	8008e68 <prvIdleTask+0x8>
 8008e86:	bf00      	nop
 8008e88:	20001c3c 	.word	0x20001c3c
 8008e8c:	e000ed04 	.word	0xe000ed04

08008e90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e96:	2300      	movs	r3, #0
 8008e98:	607b      	str	r3, [r7, #4]
 8008e9a:	e00c      	b.n	8008eb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4a12      	ldr	r2, [pc, #72]	; (8008ef0 <prvInitialiseTaskLists+0x60>)
 8008ea8:	4413      	add	r3, r2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fd ff80 	bl	8006db0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	607b      	str	r3, [r7, #4]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b06      	cmp	r3, #6
 8008eba:	d9ef      	bls.n	8008e9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ebc:	480d      	ldr	r0, [pc, #52]	; (8008ef4 <prvInitialiseTaskLists+0x64>)
 8008ebe:	f7fd ff77 	bl	8006db0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ec2:	480d      	ldr	r0, [pc, #52]	; (8008ef8 <prvInitialiseTaskLists+0x68>)
 8008ec4:	f7fd ff74 	bl	8006db0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ec8:	480c      	ldr	r0, [pc, #48]	; (8008efc <prvInitialiseTaskLists+0x6c>)
 8008eca:	f7fd ff71 	bl	8006db0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ece:	480c      	ldr	r0, [pc, #48]	; (8008f00 <prvInitialiseTaskLists+0x70>)
 8008ed0:	f7fd ff6e 	bl	8006db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ed4:	480b      	ldr	r0, [pc, #44]	; (8008f04 <prvInitialiseTaskLists+0x74>)
 8008ed6:	f7fd ff6b 	bl	8006db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008eda:	4b0b      	ldr	r3, [pc, #44]	; (8008f08 <prvInitialiseTaskLists+0x78>)
 8008edc:	4a05      	ldr	r2, [pc, #20]	; (8008ef4 <prvInitialiseTaskLists+0x64>)
 8008ede:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ee0:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <prvInitialiseTaskLists+0x7c>)
 8008ee2:	4a05      	ldr	r2, [pc, #20]	; (8008ef8 <prvInitialiseTaskLists+0x68>)
 8008ee4:	601a      	str	r2, [r3, #0]
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20001c3c 	.word	0x20001c3c
 8008ef4:	20001cc8 	.word	0x20001cc8
 8008ef8:	20001cdc 	.word	0x20001cdc
 8008efc:	20001cf8 	.word	0x20001cf8
 8008f00:	20001d0c 	.word	0x20001d0c
 8008f04:	20001d24 	.word	0x20001d24
 8008f08:	20001cf0 	.word	0x20001cf0
 8008f0c:	20001cf4 	.word	0x20001cf4

08008f10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f16:	e019      	b.n	8008f4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f18:	f000 ffcc 	bl	8009eb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f1c:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <prvCheckTasksWaitingTermination+0x50>)
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3304      	adds	r3, #4
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fd ffcb 	bl	8006ec4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f2e:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <prvCheckTasksWaitingTermination+0x54>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	4a0b      	ldr	r2, [pc, #44]	; (8008f64 <prvCheckTasksWaitingTermination+0x54>)
 8008f36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f38:	4b0b      	ldr	r3, [pc, #44]	; (8008f68 <prvCheckTasksWaitingTermination+0x58>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	4a0a      	ldr	r2, [pc, #40]	; (8008f68 <prvCheckTasksWaitingTermination+0x58>)
 8008f40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f42:	f000 ffe7 	bl	8009f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f810 	bl	8008f6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <prvCheckTasksWaitingTermination+0x58>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e1      	bne.n	8008f18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20001d0c 	.word	0x20001d0c
 8008f64:	20001d38 	.word	0x20001d38
 8008f68:	20001d20 	.word	0x20001d20

08008f6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	3354      	adds	r3, #84	; 0x54
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f001 fb73 	bl	800a664 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 f994 	bl	800a2b0 <vPortFree>
			vPortFree( pxTCB );
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 f991 	bl	800a2b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f9e:	4b0c      	ldr	r3, [pc, #48]	; (8008fd0 <prvResetNextTaskUnblockTime+0x38>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	; (8008fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8008faa:	f04f 32ff 	mov.w	r2, #4294967295
 8008fae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fb0:	e008      	b.n	8008fc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb2:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <prvResetNextTaskUnblockTime+0x38>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	4a04      	ldr	r2, [pc, #16]	; (8008fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8008fc2:	6013      	str	r3, [r2, #0]
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	20001cf0 	.word	0x20001cf0
 8008fd4:	20001d58 	.word	0x20001d58

08008fd8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008fde:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <xTaskGetCurrentTaskHandle+0x1c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008fe4:	687b      	ldr	r3, [r7, #4]
	}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20001c38 	.word	0x20001c38

08008ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ffe:	4b0b      	ldr	r3, [pc, #44]	; (800902c <xTaskGetSchedulerState+0x34>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009006:	2301      	movs	r3, #1
 8009008:	607b      	str	r3, [r7, #4]
 800900a:	e008      	b.n	800901e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800900c:	4b08      	ldr	r3, [pc, #32]	; (8009030 <xTaskGetSchedulerState+0x38>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009014:	2302      	movs	r3, #2
 8009016:	607b      	str	r3, [r7, #4]
 8009018:	e001      	b.n	800901e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800901a:	2300      	movs	r3, #0
 800901c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800901e:	687b      	ldr	r3, [r7, #4]
	}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	20001d44 	.word	0x20001d44
 8009030:	20001d60 	.word	0x20001d60

08009034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009034:	b590      	push	{r4, r7, lr}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009040:	2300      	movs	r3, #0
 8009042:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 80af 	beq.w	80091aa <xTaskPriorityDisinherit+0x176>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800904c:	4b59      	ldr	r3, [pc, #356]	; (80091b4 <xTaskPriorityDisinherit+0x180>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	429a      	cmp	r2, r3
 8009054:	d00a      	beq.n	800906c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	60fb      	str	r3, [r7, #12]
}
 8009068:	bf00      	nop
 800906a:	e7fe      	b.n	800906a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <xTaskPriorityDisinherit+0x56>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	60bb      	str	r3, [r7, #8]
}
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800908e:	1e5a      	subs	r2, r3, #1
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909c:	429a      	cmp	r2, r3
 800909e:	f000 8084 	beq.w	80091aa <xTaskPriorityDisinherit+0x176>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d17f      	bne.n	80091aa <xTaskPriorityDisinherit+0x176>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	3304      	adds	r3, #4
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fd ff08 	bl	8006ec4 <uxListRemove>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d115      	bne.n	80090e6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090be:	493e      	ldr	r1, [pc, #248]	; (80091b8 <xTaskPriorityDisinherit+0x184>)
 80090c0:	4613      	mov	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <xTaskPriorityDisinherit+0xb2>
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d4:	2201      	movs	r2, #1
 80090d6:	fa02 f303 	lsl.w	r3, r2, r3
 80090da:	43da      	mvns	r2, r3
 80090dc:	4b37      	ldr	r3, [pc, #220]	; (80091bc <xTaskPriorityDisinherit+0x188>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4013      	ands	r3, r2
 80090e2:	4a36      	ldr	r2, [pc, #216]	; (80091bc <xTaskPriorityDisinherit+0x188>)
 80090e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80090e6:	6938      	ldr	r0, [r7, #16]
 80090e8:	f7f7 ff1e 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461a      	mov	r2, r3
 80090f0:	4b33      	ldr	r3, [pc, #204]	; (80091c0 <xTaskPriorityDisinherit+0x18c>)
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	4013      	ands	r3, r2
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d020      	beq.n	800913e <xTaskPriorityDisinherit+0x10a>
 80090fc:	6938      	ldr	r0, [r7, #16]
 80090fe:	f7f7 ff06 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8009102:	4603      	mov	r3, r0
 8009104:	b2db      	uxtb	r3, r3
 8009106:	461c      	mov	r4, r3
 8009108:	6938      	ldr	r0, [r7, #16]
 800910a:	f7f7 ff00 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 800910e:	4603      	mov	r3, r0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	4619      	mov	r1, r3
 8009114:	2003      	movs	r0, #3
 8009116:	f7f8 fe07 	bl	8001d28 <prvTraceGetPriorityProperty>
 800911a:	4603      	mov	r3, r0
 800911c:	4622      	mov	r2, r4
 800911e:	2103      	movs	r1, #3
 8009120:	208f      	movs	r0, #143	; 0x8f
 8009122:	f7f8 fc7f 	bl	8001a24 <prvTraceStoreKernelCallWithParam>
 8009126:	6938      	ldr	r0, [r7, #16]
 8009128:	f7f7 fef1 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 800912c:	4603      	mov	r3, r0
 800912e:	b2d9      	uxtb	r1, r3
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009134:	b2db      	uxtb	r3, r3
 8009136:	461a      	mov	r2, r3
 8009138:	2003      	movs	r0, #3
 800913a:	f7f8 fdcf 	bl	8001cdc <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	f1c3 0207 	rsb	r2, r3, #7
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009152:	6938      	ldr	r0, [r7, #16]
 8009154:	f7f7 fee8 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8009158:	4603      	mov	r3, r0
 800915a:	461a      	mov	r2, r3
 800915c:	4b18      	ldr	r3, [pc, #96]	; (80091c0 <xTaskPriorityDisinherit+0x18c>)
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	4013      	ands	r3, r2
 8009162:	b29b      	uxth	r3, r3
 8009164:	2b00      	cmp	r3, #0
 8009166:	d007      	beq.n	8009178 <xTaskPriorityDisinherit+0x144>
 8009168:	6938      	ldr	r0, [r7, #16]
 800916a:	f7f7 fed0 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 800916e:	4603      	mov	r3, r0
 8009170:	b2db      	uxtb	r3, r3
 8009172:	4618      	mov	r0, r3
 8009174:	f7f8 fb06 	bl	8001784 <prvTraceStoreTaskReady>
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	2201      	movs	r2, #1
 800917e:	409a      	lsls	r2, r3
 8009180:	4b0e      	ldr	r3, [pc, #56]	; (80091bc <xTaskPriorityDisinherit+0x188>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4313      	orrs	r3, r2
 8009186:	4a0d      	ldr	r2, [pc, #52]	; (80091bc <xTaskPriorityDisinherit+0x188>)
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4a08      	ldr	r2, [pc, #32]	; (80091b8 <xTaskPriorityDisinherit+0x184>)
 8009198:	441a      	add	r2, r3
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	3304      	adds	r3, #4
 800919e:	4619      	mov	r1, r3
 80091a0:	4610      	mov	r0, r2
 80091a2:	f7fd fe32 	bl	8006e0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091a6:	2301      	movs	r3, #1
 80091a8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091aa:	697b      	ldr	r3, [r7, #20]
	}
 80091ac:	4618      	mov	r0, r3
 80091ae:	371c      	adds	r7, #28
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd90      	pop	{r4, r7, pc}
 80091b4:	20001c38 	.word	0x20001c38
 80091b8:	20001c3c 	.word	0x20001c3c
 80091bc:	20001d40 	.word	0x20001d40
 80091c0:	2000023c 	.word	0x2000023c

080091c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80091ce:	f000 fe71 	bl	8009eb4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80091d2:	4b6d      	ldr	r3, [pc, #436]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d154      	bne.n	8009288 <ulTaskNotifyTake+0xc4>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80091de:	4b6a      	ldr	r3, [pc, #424]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d04c      	beq.n	8009288 <ulTaskNotifyTake+0xc4>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091ee:	2101      	movs	r1, #1
 80091f0:	6838      	ldr	r0, [r7, #0]
 80091f2:	f000 f98d 	bl	8009510 <prvAddCurrentTaskToDelayedList>
					traceTASK_NOTIFY_TAKE_BLOCK();
 80091f6:	f7f7 ff18 	bl	800102a <prvTraceGetCurrentTaskHandle>
 80091fa:	4603      	mov	r3, r0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7f7 fe93 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8009202:	4603      	mov	r3, r0
 8009204:	461a      	mov	r2, r3
 8009206:	4b61      	ldr	r3, [pc, #388]	; (800938c <ulTaskNotifyTake+0x1c8>)
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	4013      	ands	r3, r2
 800920c:	b29b      	uxth	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d019      	beq.n	8009246 <ulTaskNotifyTake+0x82>
 8009212:	4b5d      	ldr	r3, [pc, #372]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4618      	mov	r0, r3
 8009218:	f7f7 fe86 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 800921c:	4603      	mov	r3, r0
 800921e:	461a      	mov	r2, r3
 8009220:	4b5a      	ldr	r3, [pc, #360]	; (800938c <ulTaskNotifyTake+0x1c8>)
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	4013      	ands	r3, r2
 8009226:	b29b      	uxth	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00c      	beq.n	8009246 <ulTaskNotifyTake+0x82>
 800922c:	4b56      	ldr	r3, [pc, #344]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	f7f7 fe6c 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8009236:	4603      	mov	r3, r0
 8009238:	b2db      	uxtb	r3, r3
 800923a:	461a      	mov	r2, r3
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2103      	movs	r1, #3
 8009240:	20d4      	movs	r0, #212	; 0xd4
 8009242:	f7f8 fbef 	bl	8001a24 <prvTraceStoreKernelCallWithParam>
 8009246:	f7f7 fef0 	bl	800102a <prvTraceGetCurrentTaskHandle>
 800924a:	4603      	mov	r3, r0
 800924c:	4618      	mov	r0, r3
 800924e:	f7f7 fe6b 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8009252:	4603      	mov	r3, r0
 8009254:	461a      	mov	r2, r3
 8009256:	4b4d      	ldr	r3, [pc, #308]	; (800938c <ulTaskNotifyTake+0x1c8>)
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	4013      	ands	r3, r2
 800925c:	b29b      	uxth	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <ulTaskNotifyTake+0xb4>
 8009262:	f7f7 fee2 	bl	800102a <prvTraceGetCurrentTaskHandle>
 8009266:	4603      	mov	r3, r0
 8009268:	4618      	mov	r0, r3
 800926a:	f7f7 fe50 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 800926e:	4603      	mov	r3, r0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	4618      	mov	r0, r3
 8009274:	f7f8 fdc2 	bl	8001dfc <prvTraceSetTaskInstanceFinished>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009278:	4b45      	ldr	r3, [pc, #276]	; (8009390 <ulTaskNotifyTake+0x1cc>)
 800927a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009288:	f000 fe44 	bl	8009f14 <vPortExitCritical>

		taskENTER_CRITICAL();
 800928c:	f000 fe12 	bl	8009eb4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
 8009290:	4b3d      	ldr	r3, [pc, #244]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b02      	cmp	r3, #2
 800929c:	d128      	bne.n	80092f0 <ulTaskNotifyTake+0x12c>
 800929e:	f7f7 fec4 	bl	800102a <prvTraceGetCurrentTaskHandle>
 80092a2:	4603      	mov	r3, r0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7f7 fe3f 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80092aa:	4603      	mov	r3, r0
 80092ac:	461a      	mov	r2, r3
 80092ae:	4b37      	ldr	r3, [pc, #220]	; (800938c <ulTaskNotifyTake+0x1c8>)
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	4013      	ands	r3, r2
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d042      	beq.n	8009340 <ulTaskNotifyTake+0x17c>
 80092ba:	4b33      	ldr	r3, [pc, #204]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7f7 fe32 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80092c4:	4603      	mov	r3, r0
 80092c6:	461a      	mov	r2, r3
 80092c8:	4b30      	ldr	r3, [pc, #192]	; (800938c <ulTaskNotifyTake+0x1c8>)
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	4013      	ands	r3, r2
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d035      	beq.n	8009340 <ulTaskNotifyTake+0x17c>
 80092d4:	4b2c      	ldr	r3, [pc, #176]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4618      	mov	r0, r3
 80092da:	f7f7 fe18 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 80092de:	4603      	mov	r3, r0
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	461a      	mov	r2, r3
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2103      	movs	r1, #3
 80092e8:	20d3      	movs	r0, #211	; 0xd3
 80092ea:	f7f8 fb9b 	bl	8001a24 <prvTraceStoreKernelCallWithParam>
 80092ee:	e027      	b.n	8009340 <ulTaskNotifyTake+0x17c>
 80092f0:	f7f7 fe9b 	bl	800102a <prvTraceGetCurrentTaskHandle>
 80092f4:	4603      	mov	r3, r0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7f7 fe16 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 80092fc:	4603      	mov	r3, r0
 80092fe:	461a      	mov	r2, r3
 8009300:	4b22      	ldr	r3, [pc, #136]	; (800938c <ulTaskNotifyTake+0x1c8>)
 8009302:	881b      	ldrh	r3, [r3, #0]
 8009304:	4013      	ands	r3, r2
 8009306:	b29b      	uxth	r3, r3
 8009308:	2b00      	cmp	r3, #0
 800930a:	d019      	beq.n	8009340 <ulTaskNotifyTake+0x17c>
 800930c:	4b1e      	ldr	r3, [pc, #120]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4618      	mov	r0, r3
 8009312:	f7f7 fe09 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8009316:	4603      	mov	r3, r0
 8009318:	461a      	mov	r2, r3
 800931a:	4b1c      	ldr	r3, [pc, #112]	; (800938c <ulTaskNotifyTake+0x1c8>)
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	4013      	ands	r3, r2
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00c      	beq.n	8009340 <ulTaskNotifyTake+0x17c>
 8009326:	4b18      	ldr	r3, [pc, #96]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4618      	mov	r0, r3
 800932c:	f7f7 fdef 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8009330:	4603      	mov	r3, r0
 8009332:	b2db      	uxtb	r3, r3
 8009334:	461a      	mov	r2, r3
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2103      	movs	r1, #3
 800933a:	20d5      	movs	r0, #213	; 0xd5
 800933c:	f7f8 fb72 	bl	8001a24 <prvTraceStoreKernelCallWithParam>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009340:	4b11      	ldr	r3, [pc, #68]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009348:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00e      	beq.n	800936e <ulTaskNotifyTake+0x1aa>
			{
				if( xClearCountOnExit != pdFALSE )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <ulTaskNotifyTake+0x19e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009356:	4b0c      	ldr	r3, [pc, #48]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2200      	movs	r2, #0
 800935c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8009360:	e005      	b.n	800936e <ulTaskNotifyTake+0x1aa>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	3a01      	subs	r2, #1
 800936a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800936e:	4b06      	ldr	r3, [pc, #24]	; (8009388 <ulTaskNotifyTake+0x1c4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 8009378:	f000 fdcc 	bl	8009f14 <vPortExitCritical>

		return ulReturn;
 800937c:	68fb      	ldr	r3, [r7, #12]
	}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20001c38 	.word	0x20001c38
 800938c:	2000023c 	.word	0x2000023c
 8009390:	e000ed04 	.word	0xe000ed04

08009394 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08a      	sub	sp, #40	; 0x28
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	61bb      	str	r3, [r7, #24]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093ba:	f000 fe5d 	bl	800a078 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80093c2:	f3ef 8211 	mrs	r2, BASEPRI
 80093c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	617a      	str	r2, [r7, #20]
 80093d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80093da:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093dc:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80093e4:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80093e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e8:	2202      	movs	r2, #2
 80093ea:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093f4:	1c5a      	adds	r2, r3, #1
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7f7 fd93 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8009402:	4603      	mov	r3, r0
 8009404:	461a      	mov	r2, r3
 8009406:	4b3b      	ldr	r3, [pc, #236]	; (80094f4 <vTaskNotifyGiveFromISR+0x160>)
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	4013      	ands	r3, r2
 800940c:	b29b      	uxth	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <vTaskNotifyGiveFromISR+0x92>
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7f7 fd7b 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8009418:	4603      	mov	r3, r0
 800941a:	b2db      	uxtb	r3, r3
 800941c:	461a      	mov	r2, r3
 800941e:	2103      	movs	r1, #3
 8009420:	20da      	movs	r0, #218	; 0xda
 8009422:	f7f8 faa3 	bl	800196c <prvTraceStoreKernelCall>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009426:	7ffb      	ldrb	r3, [r7, #31]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d158      	bne.n	80094de <vTaskNotifyGiveFromISR+0x14a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00a      	beq.n	800944a <vTaskNotifyGiveFromISR+0xb6>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	60fb      	str	r3, [r7, #12]
}
 8009446:	bf00      	nop
 8009448:	e7fe      	b.n	8009448 <vTaskNotifyGiveFromISR+0xb4>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800944a:	4b2b      	ldr	r3, [pc, #172]	; (80094f8 <vTaskNotifyGiveFromISR+0x164>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d12f      	bne.n	80094b2 <vTaskNotifyGiveFromISR+0x11e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009454:	3304      	adds	r3, #4
 8009456:	4618      	mov	r0, r3
 8009458:	f7fd fd34 	bl	8006ec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800945c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800945e:	f7f7 fd63 	bl	8000f28 <prvTraceGetTaskNumberHigh16>
 8009462:	4603      	mov	r3, r0
 8009464:	461a      	mov	r2, r3
 8009466:	4b23      	ldr	r3, [pc, #140]	; (80094f4 <vTaskNotifyGiveFromISR+0x160>)
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	4013      	ands	r3, r2
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <vTaskNotifyGiveFromISR+0xee>
 8009472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009474:	f7f7 fd4b 	bl	8000f0e <prvTraceGetTaskNumberLow16>
 8009478:	4603      	mov	r3, r0
 800947a:	b2db      	uxtb	r3, r3
 800947c:	4618      	mov	r0, r3
 800947e:	f7f8 f981 	bl	8001784 <prvTraceStoreTaskReady>
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009486:	2201      	movs	r2, #1
 8009488:	409a      	lsls	r2, r3
 800948a:	4b1c      	ldr	r3, [pc, #112]	; (80094fc <vTaskNotifyGiveFromISR+0x168>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4313      	orrs	r3, r2
 8009490:	4a1a      	ldr	r2, [pc, #104]	; (80094fc <vTaskNotifyGiveFromISR+0x168>)
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009498:	4613      	mov	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4a17      	ldr	r2, [pc, #92]	; (8009500 <vTaskNotifyGiveFromISR+0x16c>)
 80094a2:	441a      	add	r2, r3
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	3304      	adds	r3, #4
 80094a8:	4619      	mov	r1, r3
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7fd fcad 	bl	8006e0a <vListInsertEnd>
 80094b0:	e005      	b.n	80094be <vTaskNotifyGiveFromISR+0x12a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	3318      	adds	r3, #24
 80094b6:	4619      	mov	r1, r3
 80094b8:	4812      	ldr	r0, [pc, #72]	; (8009504 <vTaskNotifyGiveFromISR+0x170>)
 80094ba:	f7fd fca6 	bl	8006e0a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c2:	4b11      	ldr	r3, [pc, #68]	; (8009508 <vTaskNotifyGiveFromISR+0x174>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d908      	bls.n	80094de <vTaskNotifyGiveFromISR+0x14a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <vTaskNotifyGiveFromISR+0x144>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2201      	movs	r2, #1
 80094d6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80094d8:	4b0c      	ldr	r3, [pc, #48]	; (800950c <vTaskNotifyGiveFromISR+0x178>)
 80094da:	2201      	movs	r2, #1
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	f383 8811 	msr	BASEPRI, r3
}
 80094e8:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80094ea:	bf00      	nop
 80094ec:	3728      	adds	r7, #40	; 0x28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	2000023c 	.word	0x2000023c
 80094f8:	20001d60 	.word	0x20001d60
 80094fc:	20001d40 	.word	0x20001d40
 8009500:	20001c3c 	.word	0x20001c3c
 8009504:	20001cf8 	.word	0x20001cf8
 8009508:	20001c38 	.word	0x20001c38
 800950c:	20001d4c 	.word	0x20001d4c

08009510 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800951a:	4b29      	ldr	r3, [pc, #164]	; (80095c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009520:	4b28      	ldr	r3, [pc, #160]	; (80095c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3304      	adds	r3, #4
 8009526:	4618      	mov	r0, r3
 8009528:	f7fd fccc 	bl	8006ec4 <uxListRemove>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10b      	bne.n	800954a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009532:	4b24      	ldr	r3, [pc, #144]	; (80095c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009538:	2201      	movs	r2, #1
 800953a:	fa02 f303 	lsl.w	r3, r2, r3
 800953e:	43da      	mvns	r2, r3
 8009540:	4b21      	ldr	r3, [pc, #132]	; (80095c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4013      	ands	r3, r2
 8009546:	4a20      	ldr	r2, [pc, #128]	; (80095c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009548:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009550:	d10a      	bne.n	8009568 <prvAddCurrentTaskToDelayedList+0x58>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d007      	beq.n	8009568 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009558:	4b1a      	ldr	r3, [pc, #104]	; (80095c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3304      	adds	r3, #4
 800955e:	4619      	mov	r1, r3
 8009560:	481a      	ldr	r0, [pc, #104]	; (80095cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009562:	f7fd fc52 	bl	8006e0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009566:	e026      	b.n	80095b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4413      	add	r3, r2
 800956e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009570:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	429a      	cmp	r2, r3
 800957e:	d209      	bcs.n	8009594 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009580:	4b13      	ldr	r3, [pc, #76]	; (80095d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3304      	adds	r3, #4
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f7fd fc60 	bl	8006e52 <vListInsert>
}
 8009592:	e010      	b.n	80095b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009594:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3304      	adds	r3, #4
 800959e:	4619      	mov	r1, r3
 80095a0:	4610      	mov	r0, r2
 80095a2:	f7fd fc56 	bl	8006e52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095a6:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d202      	bcs.n	80095b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80095b0:	4a09      	ldr	r2, [pc, #36]	; (80095d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6013      	str	r3, [r2, #0]
}
 80095b6:	bf00      	nop
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20001d3c 	.word	0x20001d3c
 80095c4:	20001c38 	.word	0x20001c38
 80095c8:	20001d40 	.word	0x20001d40
 80095cc:	20001d24 	.word	0x20001d24
 80095d0:	20001cf4 	.word	0x20001cf4
 80095d4:	20001cf0 	.word	0x20001cf0
 80095d8:	20001d58 	.word	0x20001d58

080095dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095e6:	f000 faf1 	bl	8009bcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095ea:	4b11      	ldr	r3, [pc, #68]	; (8009630 <xTimerCreateTimerTask+0x54>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80095f2:	4b10      	ldr	r3, [pc, #64]	; (8009634 <xTimerCreateTimerTask+0x58>)
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	2305      	movs	r3, #5
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	2300      	movs	r3, #0
 80095fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009600:	490d      	ldr	r1, [pc, #52]	; (8009638 <xTimerCreateTimerTask+0x5c>)
 8009602:	480e      	ldr	r0, [pc, #56]	; (800963c <xTimerCreateTimerTask+0x60>)
 8009604:	f7fe fd86 	bl	8008114 <xTaskCreate>
 8009608:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10a      	bne.n	8009626 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	603b      	str	r3, [r7, #0]
}
 8009622:	bf00      	nop
 8009624:	e7fe      	b.n	8009624 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8009626:	687b      	ldr	r3, [r7, #4]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	20001d94 	.word	0x20001d94
 8009634:	20001d98 	.word	0x20001d98
 8009638:	0800afc4 	.word	0x0800afc4
 800963c:	08009775 	.word	0x08009775

08009640 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08a      	sub	sp, #40	; 0x28
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800964e:	2300      	movs	r3, #0
 8009650:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	623b      	str	r3, [r7, #32]
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800966e:	4b1a      	ldr	r3, [pc, #104]	; (80096d8 <xTimerGenericCommand+0x98>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d02a      	beq.n	80096cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b05      	cmp	r3, #5
 8009686:	dc18      	bgt.n	80096ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009688:	f7ff fcb6 	bl	8008ff8 <xTaskGetSchedulerState>
 800968c:	4603      	mov	r3, r0
 800968e:	2b02      	cmp	r3, #2
 8009690:	d109      	bne.n	80096a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009692:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <xTimerGenericCommand+0x98>)
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	f107 0110 	add.w	r1, r7, #16
 800969a:	2300      	movs	r3, #0
 800969c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800969e:	f7fd fd91 	bl	80071c4 <xQueueGenericSend>
 80096a2:	6278      	str	r0, [r7, #36]	; 0x24
 80096a4:	e012      	b.n	80096cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096a6:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <xTimerGenericCommand+0x98>)
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	f107 0110 	add.w	r1, r7, #16
 80096ae:	2300      	movs	r3, #0
 80096b0:	2200      	movs	r2, #0
 80096b2:	f7fd fd87 	bl	80071c4 <xQueueGenericSend>
 80096b6:	6278      	str	r0, [r7, #36]	; 0x24
 80096b8:	e008      	b.n	80096cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096ba:	4b07      	ldr	r3, [pc, #28]	; (80096d8 <xTimerGenericCommand+0x98>)
 80096bc:	6818      	ldr	r0, [r3, #0]
 80096be:	f107 0110 	add.w	r1, r7, #16
 80096c2:	2300      	movs	r3, #0
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	f7fd ffa7 	bl	8007618 <xQueueGenericSendFromISR>
 80096ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3728      	adds	r7, #40	; 0x28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20001d94 	.word	0x20001d94

080096dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af02      	add	r7, sp, #8
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e6:	4b22      	ldr	r3, [pc, #136]	; (8009770 <prvProcessExpiredTimer+0x94>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fd fbe5 	bl	8006ec4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d022      	beq.n	800974e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	699a      	ldr	r2, [r3, #24]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	18d1      	adds	r1, r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	6978      	ldr	r0, [r7, #20]
 8009716:	f000 f8d1 	bl	80098bc <prvInsertTimerInActiveList>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d01f      	beq.n	8009760 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009720:	2300      	movs	r3, #0
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	2300      	movs	r3, #0
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	2100      	movs	r1, #0
 800972a:	6978      	ldr	r0, [r7, #20]
 800972c:	f7ff ff88 	bl	8009640 <xTimerGenericCommand>
 8009730:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d113      	bne.n	8009760 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	60fb      	str	r3, [r7, #12]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009754:	f023 0301 	bic.w	r3, r3, #1
 8009758:	b2da      	uxtb	r2, r3
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	6a1b      	ldr	r3, [r3, #32]
 8009764:	6978      	ldr	r0, [r7, #20]
 8009766:	4798      	blx	r3
}
 8009768:	bf00      	nop
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	20001d8c 	.word	0x20001d8c

08009774 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800977c:	f107 0308 	add.w	r3, r7, #8
 8009780:	4618      	mov	r0, r3
 8009782:	f000 f857 	bl	8009834 <prvGetNextExpireTime>
 8009786:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4619      	mov	r1, r3
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f803 	bl	8009798 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009792:	f000 f8d5 	bl	8009940 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009796:	e7f1      	b.n	800977c <prvTimerTask+0x8>

08009798 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097a2:	f7fe ff6d 	bl	8008680 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097a6:	f107 0308 	add.w	r3, r7, #8
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f866 	bl	800987c <prvSampleTimeNow>
 80097b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d130      	bne.n	800981a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10a      	bne.n	80097d4 <prvProcessTimerOrBlockTask+0x3c>
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d806      	bhi.n	80097d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097c6:	f7fe ff69 	bl	800869c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097ca:	68f9      	ldr	r1, [r7, #12]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7ff ff85 	bl	80096dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097d2:	e024      	b.n	800981e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d008      	beq.n	80097ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097da:	4b13      	ldr	r3, [pc, #76]	; (8009828 <prvProcessTimerOrBlockTask+0x90>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <prvProcessTimerOrBlockTask+0x50>
 80097e4:	2301      	movs	r3, #1
 80097e6:	e000      	b.n	80097ea <prvProcessTimerOrBlockTask+0x52>
 80097e8:	2300      	movs	r3, #0
 80097ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097ec:	4b0f      	ldr	r3, [pc, #60]	; (800982c <prvProcessTimerOrBlockTask+0x94>)
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	4619      	mov	r1, r3
 80097fa:	f7fe fbb1 	bl	8007f60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097fe:	f7fe ff4d 	bl	800869c <xTaskResumeAll>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009808:	4b09      	ldr	r3, [pc, #36]	; (8009830 <prvProcessTimerOrBlockTask+0x98>)
 800980a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	f3bf 8f6f 	isb	sy
}
 8009818:	e001      	b.n	800981e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800981a:	f7fe ff3f 	bl	800869c <xTaskResumeAll>
}
 800981e:	bf00      	nop
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20001d90 	.word	0x20001d90
 800982c:	20001d94 	.word	0x20001d94
 8009830:	e000ed04 	.word	0xe000ed04

08009834 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800983c:	4b0e      	ldr	r3, [pc, #56]	; (8009878 <prvGetNextExpireTime+0x44>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <prvGetNextExpireTime+0x16>
 8009846:	2201      	movs	r2, #1
 8009848:	e000      	b.n	800984c <prvGetNextExpireTime+0x18>
 800984a:	2200      	movs	r2, #0
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d105      	bne.n	8009864 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009858:	4b07      	ldr	r3, [pc, #28]	; (8009878 <prvGetNextExpireTime+0x44>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60fb      	str	r3, [r7, #12]
 8009862:	e001      	b.n	8009868 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009868:	68fb      	ldr	r3, [r7, #12]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	20001d8c 	.word	0x20001d8c

0800987c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009884:	f7fe ffbc 	bl	8008800 <xTaskGetTickCount>
 8009888:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800988a:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <prvSampleTimeNow+0x3c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	429a      	cmp	r2, r3
 8009892:	d205      	bcs.n	80098a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009894:	f000 f936 	bl	8009b04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	e002      	b.n	80098a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098a6:	4a04      	ldr	r2, [pc, #16]	; (80098b8 <prvSampleTimeNow+0x3c>)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098ac:	68fb      	ldr	r3, [r7, #12]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20001d9c 	.word	0x20001d9c

080098bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098ca:	2300      	movs	r3, #0
 80098cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d812      	bhi.n	8009908 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	1ad2      	subs	r2, r2, r3
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d302      	bcc.n	80098f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098f0:	2301      	movs	r3, #1
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	e01b      	b.n	800992e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098f6:	4b10      	ldr	r3, [pc, #64]	; (8009938 <prvInsertTimerInActiveList+0x7c>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3304      	adds	r3, #4
 80098fe:	4619      	mov	r1, r3
 8009900:	4610      	mov	r0, r2
 8009902:	f7fd faa6 	bl	8006e52 <vListInsert>
 8009906:	e012      	b.n	800992e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	429a      	cmp	r2, r3
 800990e:	d206      	bcs.n	800991e <prvInsertTimerInActiveList+0x62>
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d302      	bcc.n	800991e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009918:	2301      	movs	r3, #1
 800991a:	617b      	str	r3, [r7, #20]
 800991c:	e007      	b.n	800992e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800991e:	4b07      	ldr	r3, [pc, #28]	; (800993c <prvInsertTimerInActiveList+0x80>)
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3304      	adds	r3, #4
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f7fd fa92 	bl	8006e52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800992e:	697b      	ldr	r3, [r7, #20]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	20001d90 	.word	0x20001d90
 800993c:	20001d8c 	.word	0x20001d8c

08009940 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08e      	sub	sp, #56	; 0x38
 8009944:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009946:	e0ca      	b.n	8009ade <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	da18      	bge.n	8009980 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800994e:	1d3b      	adds	r3, r7, #4
 8009950:	3304      	adds	r3, #4
 8009952:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	61fb      	str	r3, [r7, #28]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009976:	6850      	ldr	r0, [r2, #4]
 8009978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800997a:	6892      	ldr	r2, [r2, #8]
 800997c:	4611      	mov	r1, r2
 800997e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	f2c0 80ab 	blt.w	8009ade <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	695b      	ldr	r3, [r3, #20]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d004      	beq.n	800999e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	3304      	adds	r3, #4
 8009998:	4618      	mov	r0, r3
 800999a:	f7fd fa93 	bl	8006ec4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800999e:	463b      	mov	r3, r7
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff ff6b 	bl	800987c <prvSampleTimeNow>
 80099a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b09      	cmp	r3, #9
 80099ac:	f200 8096 	bhi.w	8009adc <prvProcessReceivedCommands+0x19c>
 80099b0:	a201      	add	r2, pc, #4	; (adr r2, 80099b8 <prvProcessReceivedCommands+0x78>)
 80099b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b6:	bf00      	nop
 80099b8:	080099e1 	.word	0x080099e1
 80099bc:	080099e1 	.word	0x080099e1
 80099c0:	080099e1 	.word	0x080099e1
 80099c4:	08009a55 	.word	0x08009a55
 80099c8:	08009a69 	.word	0x08009a69
 80099cc:	08009ab3 	.word	0x08009ab3
 80099d0:	080099e1 	.word	0x080099e1
 80099d4:	080099e1 	.word	0x080099e1
 80099d8:	08009a55 	.word	0x08009a55
 80099dc:	08009a69 	.word	0x08009a69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099e6:	f043 0301 	orr.w	r3, r3, #1
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	18d1      	adds	r1, r2, r3
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a00:	f7ff ff5c 	bl	80098bc <prvInsertTimerInActiveList>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d069      	beq.n	8009ade <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a18:	f003 0304 	and.w	r3, r3, #4
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d05e      	beq.n	8009ade <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	441a      	add	r2, r3
 8009a28:	2300      	movs	r3, #0
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	2100      	movs	r1, #0
 8009a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a32:	f7ff fe05 	bl	8009640 <xTimerGenericCommand>
 8009a36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d14f      	bne.n	8009ade <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	61bb      	str	r3, [r7, #24]
}
 8009a50:	bf00      	nop
 8009a52:	e7fe      	b.n	8009a52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a5a:	f023 0301 	bic.w	r3, r3, #1
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a66:	e03a      	b.n	8009ade <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a6e:	f043 0301 	orr.w	r3, r3, #1
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	617b      	str	r3, [r7, #20]
}
 8009a9a:	bf00      	nop
 8009a9c:	e7fe      	b.n	8009a9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa0:	699a      	ldr	r2, [r3, #24]
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	18d1      	adds	r1, r2, r3
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aac:	f7ff ff06 	bl	80098bc <prvInsertTimerInActiveList>
					break;
 8009ab0:	e015      	b.n	8009ade <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ab8:	f003 0302 	and.w	r3, r3, #2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d103      	bne.n	8009ac8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ac2:	f000 fbf5 	bl	800a2b0 <vPortFree>
 8009ac6:	e00a      	b.n	8009ade <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ace:	f023 0301 	bic.w	r3, r3, #1
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ada:	e000      	b.n	8009ade <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009adc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ade:	4b08      	ldr	r3, [pc, #32]	; (8009b00 <prvProcessReceivedCommands+0x1c0>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	1d39      	adds	r1, r7, #4
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fd feb8 	bl	800785c <xQueueReceive>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f47f af2a 	bne.w	8009948 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	3730      	adds	r7, #48	; 0x30
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20001d94 	.word	0x20001d94

08009b04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b088      	sub	sp, #32
 8009b08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b0a:	e048      	b.n	8009b9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b0c:	4b2d      	ldr	r3, [pc, #180]	; (8009bc4 <prvSwitchTimerLists+0xc0>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b16:	4b2b      	ldr	r3, [pc, #172]	; (8009bc4 <prvSwitchTimerLists+0xc0>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fd f9cd 	bl	8006ec4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a1b      	ldr	r3, [r3, #32]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d02e      	beq.n	8009b9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4413      	add	r3, r2
 8009b48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d90e      	bls.n	8009b70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b5e:	4b19      	ldr	r3, [pc, #100]	; (8009bc4 <prvSwitchTimerLists+0xc0>)
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3304      	adds	r3, #4
 8009b66:	4619      	mov	r1, r3
 8009b68:	4610      	mov	r0, r2
 8009b6a:	f7fd f972 	bl	8006e52 <vListInsert>
 8009b6e:	e016      	b.n	8009b9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b70:	2300      	movs	r3, #0
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2300      	movs	r3, #0
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f7ff fd60 	bl	8009640 <xTimerGenericCommand>
 8009b80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	603b      	str	r3, [r7, #0]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <prvSwitchTimerLists+0xc0>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1b1      	bne.n	8009b0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ba8:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <prvSwitchTimerLists+0xc0>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bae:	4b06      	ldr	r3, [pc, #24]	; (8009bc8 <prvSwitchTimerLists+0xc4>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a04      	ldr	r2, [pc, #16]	; (8009bc4 <prvSwitchTimerLists+0xc0>)
 8009bb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bb6:	4a04      	ldr	r2, [pc, #16]	; (8009bc8 <prvSwitchTimerLists+0xc4>)
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	6013      	str	r3, [r2, #0]
}
 8009bbc:	bf00      	nop
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20001d8c 	.word	0x20001d8c
 8009bc8:	20001d90 	.word	0x20001d90

08009bcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bd0:	f000 f970 	bl	8009eb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009bd4:	4b12      	ldr	r3, [pc, #72]	; (8009c20 <prvCheckForValidListAndQueue+0x54>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d11d      	bne.n	8009c18 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009bdc:	4811      	ldr	r0, [pc, #68]	; (8009c24 <prvCheckForValidListAndQueue+0x58>)
 8009bde:	f7fd f8e7 	bl	8006db0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009be2:	4811      	ldr	r0, [pc, #68]	; (8009c28 <prvCheckForValidListAndQueue+0x5c>)
 8009be4:	f7fd f8e4 	bl	8006db0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009be8:	4b10      	ldr	r3, [pc, #64]	; (8009c2c <prvCheckForValidListAndQueue+0x60>)
 8009bea:	4a0e      	ldr	r2, [pc, #56]	; (8009c24 <prvCheckForValidListAndQueue+0x58>)
 8009bec:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009bee:	4b10      	ldr	r3, [pc, #64]	; (8009c30 <prvCheckForValidListAndQueue+0x64>)
 8009bf0:	4a0d      	ldr	r2, [pc, #52]	; (8009c28 <prvCheckForValidListAndQueue+0x5c>)
 8009bf2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2110      	movs	r1, #16
 8009bf8:	2014      	movs	r0, #20
 8009bfa:	f7fd f9f5 	bl	8006fe8 <xQueueGenericCreate>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4a07      	ldr	r2, [pc, #28]	; (8009c20 <prvCheckForValidListAndQueue+0x54>)
 8009c02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c04:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <prvCheckForValidListAndQueue+0x54>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d005      	beq.n	8009c18 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c0c:	4b04      	ldr	r3, [pc, #16]	; (8009c20 <prvCheckForValidListAndQueue+0x54>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4908      	ldr	r1, [pc, #32]	; (8009c34 <prvCheckForValidListAndQueue+0x68>)
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe f96a 	bl	8007eec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c18:	f000 f97c 	bl	8009f14 <vPortExitCritical>
}
 8009c1c:	bf00      	nop
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20001d94 	.word	0x20001d94
 8009c24:	20001d64 	.word	0x20001d64
 8009c28:	20001d78 	.word	0x20001d78
 8009c2c:	20001d8c 	.word	0x20001d8c
 8009c30:	20001d90 	.word	0x20001d90
 8009c34:	0800afcc 	.word	0x0800afcc

08009c38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3b04      	subs	r3, #4
 8009c48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3b04      	subs	r3, #4
 8009c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f023 0201 	bic.w	r2, r3, #1
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3b04      	subs	r3, #4
 8009c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c68:	4a0c      	ldr	r2, [pc, #48]	; (8009c9c <pxPortInitialiseStack+0x64>)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3b14      	subs	r3, #20
 8009c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3b04      	subs	r3, #4
 8009c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f06f 0202 	mvn.w	r2, #2
 8009c86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3b20      	subs	r3, #32
 8009c8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	08009ca1 	.word	0x08009ca1

08009ca0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009caa:	4b12      	ldr	r3, [pc, #72]	; (8009cf4 <prvTaskExitError+0x54>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb2:	d00a      	beq.n	8009cca <prvTaskExitError+0x2a>
	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	60fb      	str	r3, [r7, #12]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <prvTaskExitError+0x28>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	60bb      	str	r3, [r7, #8]
}
 8009cdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cde:	bf00      	nop
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d0fc      	beq.n	8009ce0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	20000018 	.word	0x20000018
	...

08009d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d00:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <pxCurrentTCBConst2>)
 8009d02:	6819      	ldr	r1, [r3, #0]
 8009d04:	6808      	ldr	r0, [r1, #0]
 8009d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0a:	f380 8809 	msr	PSP, r0
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f04f 0000 	mov.w	r0, #0
 8009d16:	f380 8811 	msr	BASEPRI, r0
 8009d1a:	4770      	bx	lr
 8009d1c:	f3af 8000 	nop.w

08009d20 <pxCurrentTCBConst2>:
 8009d20:	20001c38 	.word	0x20001c38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop

08009d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d28:	4808      	ldr	r0, [pc, #32]	; (8009d4c <prvPortStartFirstTask+0x24>)
 8009d2a:	6800      	ldr	r0, [r0, #0]
 8009d2c:	6800      	ldr	r0, [r0, #0]
 8009d2e:	f380 8808 	msr	MSP, r0
 8009d32:	f04f 0000 	mov.w	r0, #0
 8009d36:	f380 8814 	msr	CONTROL, r0
 8009d3a:	b662      	cpsie	i
 8009d3c:	b661      	cpsie	f
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	df00      	svc	0
 8009d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d4a:	bf00      	nop
 8009d4c:	e000ed08 	.word	0xe000ed08

08009d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d56:	4b4e      	ldr	r3, [pc, #312]	; (8009e90 <xPortStartScheduler+0x140>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a4e      	ldr	r2, [pc, #312]	; (8009e94 <xPortStartScheduler+0x144>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d10a      	bne.n	8009d76 <xPortStartScheduler+0x26>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	61bb      	str	r3, [r7, #24]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d76:	4b46      	ldr	r3, [pc, #280]	; (8009e90 <xPortStartScheduler+0x140>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a47      	ldr	r2, [pc, #284]	; (8009e98 <xPortStartScheduler+0x148>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d10a      	bne.n	8009d96 <xPortStartScheduler+0x46>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	617b      	str	r3, [r7, #20]
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d96:	4b41      	ldr	r3, [pc, #260]	; (8009e9c <xPortStartScheduler+0x14c>)
 8009d98:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	22ff      	movs	r2, #255	; 0xff
 8009da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009db0:	79fb      	ldrb	r3, [r7, #7]
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	4b39      	ldr	r3, [pc, #228]	; (8009ea0 <xPortStartScheduler+0x150>)
 8009dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dbe:	4b39      	ldr	r3, [pc, #228]	; (8009ea4 <xPortStartScheduler+0x154>)
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dc4:	e009      	b.n	8009dda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009dc6:	4b37      	ldr	r3, [pc, #220]	; (8009ea4 <xPortStartScheduler+0x154>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	4a35      	ldr	r2, [pc, #212]	; (8009ea4 <xPortStartScheduler+0x154>)
 8009dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009dd0:	79fb      	ldrb	r3, [r7, #7]
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dda:	79fb      	ldrb	r3, [r7, #7]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de2:	2b80      	cmp	r3, #128	; 0x80
 8009de4:	d0ef      	beq.n	8009dc6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8009de6:	4b2f      	ldr	r3, [pc, #188]	; (8009ea4 <xPortStartScheduler+0x154>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f1c3 0307 	rsb	r3, r3, #7
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	d00a      	beq.n	8009e08 <xPortStartScheduler+0xb8>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	613b      	str	r3, [r7, #16]
}
 8009e04:	bf00      	nop
 8009e06:	e7fe      	b.n	8009e06 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e08:	4b26      	ldr	r3, [pc, #152]	; (8009ea4 <xPortStartScheduler+0x154>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f1c3 0307 	rsb	r3, r3, #7
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	d00a      	beq.n	8009e2a <xPortStartScheduler+0xda>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	60fb      	str	r3, [r7, #12]
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e2a:	4b1e      	ldr	r3, [pc, #120]	; (8009ea4 <xPortStartScheduler+0x154>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	4a1c      	ldr	r2, [pc, #112]	; (8009ea4 <xPortStartScheduler+0x154>)
 8009e32:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e34:	4b1b      	ldr	r3, [pc, #108]	; (8009ea4 <xPortStartScheduler+0x154>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e3c:	4a19      	ldr	r2, [pc, #100]	; (8009ea4 <xPortStartScheduler+0x154>)
 8009e3e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e48:	4b17      	ldr	r3, [pc, #92]	; (8009ea8 <xPortStartScheduler+0x158>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a16      	ldr	r2, [pc, #88]	; (8009ea8 <xPortStartScheduler+0x158>)
 8009e4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e52:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e54:	4b14      	ldr	r3, [pc, #80]	; (8009ea8 <xPortStartScheduler+0x158>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a13      	ldr	r2, [pc, #76]	; (8009ea8 <xPortStartScheduler+0x158>)
 8009e5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e5e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e60:	f000 f8dc 	bl	800a01c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e64:	4b11      	ldr	r3, [pc, #68]	; (8009eac <xPortStartScheduler+0x15c>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e6a:	f000 f8fb 	bl	800a064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e6e:	4b10      	ldr	r3, [pc, #64]	; (8009eb0 <xPortStartScheduler+0x160>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a0f      	ldr	r2, [pc, #60]	; (8009eb0 <xPortStartScheduler+0x160>)
 8009e74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e78:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e7a:	f7ff ff55 	bl	8009d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e7e:	f7fe fdb9 	bl	80089f4 <vTaskSwitchContext>
	prvTaskExitError();
 8009e82:	f7ff ff0d 	bl	8009ca0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3720      	adds	r7, #32
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	e000ed00 	.word	0xe000ed00
 8009e94:	410fc271 	.word	0x410fc271
 8009e98:	410fc270 	.word	0x410fc270
 8009e9c:	e000e400 	.word	0xe000e400
 8009ea0:	20001da0 	.word	0x20001da0
 8009ea4:	20001da4 	.word	0x20001da4
 8009ea8:	e000ed20 	.word	0xe000ed20
 8009eac:	20000018 	.word	0x20000018
 8009eb0:	e000ef34 	.word	0xe000ef34

08009eb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	607b      	str	r3, [r7, #4]
}
 8009ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ece:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <vPortEnterCritical+0x58>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	4a0d      	ldr	r2, [pc, #52]	; (8009f0c <vPortEnterCritical+0x58>)
 8009ed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ed8:	4b0c      	ldr	r3, [pc, #48]	; (8009f0c <vPortEnterCritical+0x58>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d10f      	bne.n	8009f00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <vPortEnterCritical+0x5c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <vPortEnterCritical+0x4c>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	603b      	str	r3, [r7, #0]
}
 8009efc:	bf00      	nop
 8009efe:	e7fe      	b.n	8009efe <vPortEnterCritical+0x4a>
	}
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	20000018 	.word	0x20000018
 8009f10:	e000ed04 	.word	0xe000ed04

08009f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f1a:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <vPortExitCritical+0x50>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10a      	bne.n	8009f38 <vPortExitCritical+0x24>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	607b      	str	r3, [r7, #4]
}
 8009f34:	bf00      	nop
 8009f36:	e7fe      	b.n	8009f36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f38:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <vPortExitCritical+0x50>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	4a09      	ldr	r2, [pc, #36]	; (8009f64 <vPortExitCritical+0x50>)
 8009f40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f42:	4b08      	ldr	r3, [pc, #32]	; (8009f64 <vPortExitCritical+0x50>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d105      	bne.n	8009f56 <vPortExitCritical+0x42>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	f383 8811 	msr	BASEPRI, r3
}
 8009f54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20000018 	.word	0x20000018
	...

08009f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f70:	f3ef 8009 	mrs	r0, PSP
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	4b15      	ldr	r3, [pc, #84]	; (8009fd0 <pxCurrentTCBConst>)
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	f01e 0f10 	tst.w	lr, #16
 8009f80:	bf08      	it	eq
 8009f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8a:	6010      	str	r0, [r2, #0]
 8009f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f94:	f380 8811 	msr	BASEPRI, r0
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f7fe fd28 	bl	80089f4 <vTaskSwitchContext>
 8009fa4:	f04f 0000 	mov.w	r0, #0
 8009fa8:	f380 8811 	msr	BASEPRI, r0
 8009fac:	bc09      	pop	{r0, r3}
 8009fae:	6819      	ldr	r1, [r3, #0]
 8009fb0:	6808      	ldr	r0, [r1, #0]
 8009fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb6:	f01e 0f10 	tst.w	lr, #16
 8009fba:	bf08      	it	eq
 8009fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fc0:	f380 8809 	msr	PSP, r0
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	f3af 8000 	nop.w

08009fd0 <pxCurrentTCBConst>:
 8009fd0:	20001c38 	.word	0x20001c38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fd4:	bf00      	nop
 8009fd6:	bf00      	nop

08009fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	607b      	str	r3, [r7, #4]
}
 8009ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ff2:	f7fe fc15 	bl	8008820 <xTaskIncrementTick>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ffc:	4b06      	ldr	r3, [pc, #24]	; (800a018 <SysTick_Handler+0x40>)
 8009ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	2300      	movs	r3, #0
 800a006:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	f383 8811 	msr	BASEPRI, r3
}
 800a00e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	e000ed04 	.word	0xe000ed04

0800a01c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a01c:	b480      	push	{r7}
 800a01e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a020:	4b0b      	ldr	r3, [pc, #44]	; (800a050 <vPortSetupTimerInterrupt+0x34>)
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a026:	4b0b      	ldr	r3, [pc, #44]	; (800a054 <vPortSetupTimerInterrupt+0x38>)
 800a028:	2200      	movs	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a02c:	4b0a      	ldr	r3, [pc, #40]	; (800a058 <vPortSetupTimerInterrupt+0x3c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a0a      	ldr	r2, [pc, #40]	; (800a05c <vPortSetupTimerInterrupt+0x40>)
 800a032:	fba2 2303 	umull	r2, r3, r2, r3
 800a036:	099b      	lsrs	r3, r3, #6
 800a038:	4a09      	ldr	r2, [pc, #36]	; (800a060 <vPortSetupTimerInterrupt+0x44>)
 800a03a:	3b01      	subs	r3, #1
 800a03c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a03e:	4b04      	ldr	r3, [pc, #16]	; (800a050 <vPortSetupTimerInterrupt+0x34>)
 800a040:	2207      	movs	r2, #7
 800a042:	601a      	str	r2, [r3, #0]
}
 800a044:	bf00      	nop
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	e000e010 	.word	0xe000e010
 800a054:	e000e018 	.word	0xe000e018
 800a058:	20000000 	.word	0x20000000
 800a05c:	10624dd3 	.word	0x10624dd3
 800a060:	e000e014 	.word	0xe000e014

0800a064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a074 <vPortEnableVFP+0x10>
 800a068:	6801      	ldr	r1, [r0, #0]
 800a06a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a06e:	6001      	str	r1, [r0, #0]
 800a070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a072:	bf00      	nop
 800a074:	e000ed88 	.word	0xe000ed88

0800a078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a07e:	f3ef 8305 	mrs	r3, IPSR
 800a082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b0f      	cmp	r3, #15
 800a088:	d914      	bls.n	800a0b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a08a:	4a17      	ldr	r2, [pc, #92]	; (800a0e8 <vPortValidateInterruptPriority+0x70>)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a094:	4b15      	ldr	r3, [pc, #84]	; (800a0ec <vPortValidateInterruptPriority+0x74>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	7afa      	ldrb	r2, [r7, #11]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d20a      	bcs.n	800a0b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	607b      	str	r3, [r7, #4]
}
 800a0b0:	bf00      	nop
 800a0b2:	e7fe      	b.n	800a0b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0b4:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <vPortValidateInterruptPriority+0x78>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0bc:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <vPortValidateInterruptPriority+0x7c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d90a      	bls.n	800a0da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	603b      	str	r3, [r7, #0]
}
 800a0d6:	bf00      	nop
 800a0d8:	e7fe      	b.n	800a0d8 <vPortValidateInterruptPriority+0x60>
	}
 800a0da:	bf00      	nop
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	e000e3f0 	.word	0xe000e3f0
 800a0ec:	20001da0 	.word	0x20001da0
 800a0f0:	e000ed0c 	.word	0xe000ed0c
 800a0f4:	20001da4 	.word	0x20001da4

0800a0f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08a      	sub	sp, #40	; 0x28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a100:	2300      	movs	r3, #0
 800a102:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a104:	f7fe fabc 	bl	8008680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a108:	4b63      	ldr	r3, [pc, #396]	; (800a298 <pvPortMalloc+0x1a0>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a110:	f000 f938 	bl	800a384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a114:	4b61      	ldr	r3, [pc, #388]	; (800a29c <pvPortMalloc+0x1a4>)
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4013      	ands	r3, r2
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f040 8093 	bne.w	800a248 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d01d      	beq.n	800a164 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a128:	2208      	movs	r2, #8
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4413      	add	r3, r2
 800a12e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f003 0307 	and.w	r3, r3, #7
 800a136:	2b00      	cmp	r3, #0
 800a138:	d014      	beq.n	800a164 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f023 0307 	bic.w	r3, r3, #7
 800a140:	3308      	adds	r3, #8
 800a142:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00a      	beq.n	800a164 <pvPortMalloc+0x6c>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	617b      	str	r3, [r7, #20]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d06e      	beq.n	800a248 <pvPortMalloc+0x150>
 800a16a:	4b4d      	ldr	r3, [pc, #308]	; (800a2a0 <pvPortMalloc+0x1a8>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d869      	bhi.n	800a248 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a174:	4b4b      	ldr	r3, [pc, #300]	; (800a2a4 <pvPortMalloc+0x1ac>)
 800a176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a178:	4b4a      	ldr	r3, [pc, #296]	; (800a2a4 <pvPortMalloc+0x1ac>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a17e:	e004      	b.n	800a18a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	429a      	cmp	r2, r3
 800a192:	d903      	bls.n	800a19c <pvPortMalloc+0xa4>
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1f1      	bne.n	800a180 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a19c:	4b3e      	ldr	r3, [pc, #248]	; (800a298 <pvPortMalloc+0x1a0>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d050      	beq.n	800a248 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2208      	movs	r2, #8
 800a1ac:	4413      	add	r3, r2
 800a1ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	1ad2      	subs	r2, r2, r3
 800a1c0:	2308      	movs	r3, #8
 800a1c2:	005b      	lsls	r3, r3, #1
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d91f      	bls.n	800a208 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	f003 0307 	and.w	r3, r3, #7
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	613b      	str	r3, [r7, #16]
}
 800a1ec:	bf00      	nop
 800a1ee:	e7fe      	b.n	800a1ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	1ad2      	subs	r2, r2, r3
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a202:	69b8      	ldr	r0, [r7, #24]
 800a204:	f000 f920 	bl	800a448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a208:	4b25      	ldr	r3, [pc, #148]	; (800a2a0 <pvPortMalloc+0x1a8>)
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	4a23      	ldr	r2, [pc, #140]	; (800a2a0 <pvPortMalloc+0x1a8>)
 800a214:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a216:	4b22      	ldr	r3, [pc, #136]	; (800a2a0 <pvPortMalloc+0x1a8>)
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	4b23      	ldr	r3, [pc, #140]	; (800a2a8 <pvPortMalloc+0x1b0>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d203      	bcs.n	800a22a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a222:	4b1f      	ldr	r3, [pc, #124]	; (800a2a0 <pvPortMalloc+0x1a8>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a20      	ldr	r2, [pc, #128]	; (800a2a8 <pvPortMalloc+0x1b0>)
 800a228:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	4b1b      	ldr	r3, [pc, #108]	; (800a29c <pvPortMalloc+0x1a4>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	431a      	orrs	r2, r3
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a23e:	4b1b      	ldr	r3, [pc, #108]	; (800a2ac <pvPortMalloc+0x1b4>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3301      	adds	r3, #1
 800a244:	4a19      	ldr	r2, [pc, #100]	; (800a2ac <pvPortMalloc+0x1b4>)
 800a246:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d006      	beq.n	800a25c <pvPortMalloc+0x164>
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	4619      	mov	r1, r3
 800a254:	2094      	movs	r0, #148	; 0x94
 800a256:	f7f7 faf1 	bl	800183c <vTraceStoreMemMangEvent>
 800a25a:	e005      	b.n	800a268 <pvPortMalloc+0x170>
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	4619      	mov	r1, r3
 800a262:	20e8      	movs	r0, #232	; 0xe8
 800a264:	f7f7 faea 	bl	800183c <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 800a268:	f7fe fa18 	bl	800869c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <pvPortMalloc+0x194>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	60fb      	str	r3, [r7, #12]
}
 800a288:	bf00      	nop
 800a28a:	e7fe      	b.n	800a28a <pvPortMalloc+0x192>
	return pvReturn;
 800a28c:	69fb      	ldr	r3, [r7, #28]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3728      	adds	r7, #40	; 0x28
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	200059b0 	.word	0x200059b0
 800a29c:	200059c4 	.word	0x200059c4
 800a2a0:	200059b4 	.word	0x200059b4
 800a2a4:	200059a8 	.word	0x200059a8
 800a2a8:	200059b8 	.word	0x200059b8
 800a2ac:	200059bc 	.word	0x200059bc

0800a2b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d055      	beq.n	800a36e <vPortFree+0xbe>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2c2:	2308      	movs	r3, #8
 800a2c4:	425b      	negs	r3, r3
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	4b28      	ldr	r3, [pc, #160]	; (800a378 <vPortFree+0xc8>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10a      	bne.n	800a2f4 <vPortFree+0x44>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	60fb      	str	r3, [r7, #12]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00a      	beq.n	800a312 <vPortFree+0x62>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	60bb      	str	r3, [r7, #8]
}
 800a30e:	bf00      	nop
 800a310:	e7fe      	b.n	800a310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	4b18      	ldr	r3, [pc, #96]	; (800a378 <vPortFree+0xc8>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4013      	ands	r3, r2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d026      	beq.n	800a36e <vPortFree+0xbe>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d122      	bne.n	800a36e <vPortFree+0xbe>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	4b12      	ldr	r3, [pc, #72]	; (800a378 <vPortFree+0xc8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	43db      	mvns	r3, r3
 800a332:	401a      	ands	r2, r3
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a338:	f7fe f9a2 	bl	8008680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	4b0e      	ldr	r3, [pc, #56]	; (800a37c <vPortFree+0xcc>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4413      	add	r3, r2
 800a346:	4a0d      	ldr	r2, [pc, #52]	; (800a37c <vPortFree+0xcc>)
 800a348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	425b      	negs	r3, r3
 800a352:	461a      	mov	r2, r3
 800a354:	2096      	movs	r0, #150	; 0x96
 800a356:	f7f7 fa71 	bl	800183c <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a35a:	6938      	ldr	r0, [r7, #16]
 800a35c:	f000 f874 	bl	800a448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a360:	4b07      	ldr	r3, [pc, #28]	; (800a380 <vPortFree+0xd0>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3301      	adds	r3, #1
 800a366:	4a06      	ldr	r2, [pc, #24]	; (800a380 <vPortFree+0xd0>)
 800a368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a36a:	f7fe f997 	bl	800869c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a36e:	bf00      	nop
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	200059c4 	.word	0x200059c4
 800a37c:	200059b4 	.word	0x200059b4
 800a380:	200059c0 	.word	0x200059c0

0800a384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a38a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a38e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a390:	4b27      	ldr	r3, [pc, #156]	; (800a430 <prvHeapInit+0xac>)
 800a392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f003 0307 	and.w	r3, r3, #7
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00c      	beq.n	800a3b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3307      	adds	r3, #7
 800a3a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 0307 	bic.w	r3, r3, #7
 800a3aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	4a1f      	ldr	r2, [pc, #124]	; (800a430 <prvHeapInit+0xac>)
 800a3b4:	4413      	add	r3, r2
 800a3b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3bc:	4a1d      	ldr	r2, [pc, #116]	; (800a434 <prvHeapInit+0xb0>)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3c2:	4b1c      	ldr	r3, [pc, #112]	; (800a434 <prvHeapInit+0xb0>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3d0:	2208      	movs	r2, #8
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 0307 	bic.w	r3, r3, #7
 800a3de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4a15      	ldr	r2, [pc, #84]	; (800a438 <prvHeapInit+0xb4>)
 800a3e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3e6:	4b14      	ldr	r3, [pc, #80]	; (800a438 <prvHeapInit+0xb4>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3ee:	4b12      	ldr	r3, [pc, #72]	; (800a438 <prvHeapInit+0xb4>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	1ad2      	subs	r2, r2, r3
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a404:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <prvHeapInit+0xb4>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	4a0a      	ldr	r2, [pc, #40]	; (800a43c <prvHeapInit+0xb8>)
 800a412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	4a09      	ldr	r2, [pc, #36]	; (800a440 <prvHeapInit+0xbc>)
 800a41a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a41c:	4b09      	ldr	r3, [pc, #36]	; (800a444 <prvHeapInit+0xc0>)
 800a41e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a422:	601a      	str	r2, [r3, #0]
}
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	20001da8 	.word	0x20001da8
 800a434:	200059a8 	.word	0x200059a8
 800a438:	200059b0 	.word	0x200059b0
 800a43c:	200059b8 	.word	0x200059b8
 800a440:	200059b4 	.word	0x200059b4
 800a444:	200059c4 	.word	0x200059c4

0800a448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a450:	4b28      	ldr	r3, [pc, #160]	; (800a4f4 <prvInsertBlockIntoFreeList+0xac>)
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	e002      	b.n	800a45c <prvInsertBlockIntoFreeList+0x14>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	429a      	cmp	r2, r3
 800a464:	d8f7      	bhi.n	800a456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	4413      	add	r3, r2
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	429a      	cmp	r2, r3
 800a476:	d108      	bne.n	800a48a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	441a      	add	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	441a      	add	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d118      	bne.n	800a4d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4b15      	ldr	r3, [pc, #84]	; (800a4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d00d      	beq.n	800a4c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	441a      	add	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	e008      	b.n	800a4d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4c6:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	e003      	b.n	800a4d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d002      	beq.n	800a4e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4e6:	bf00      	nop
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	200059a8 	.word	0x200059a8
 800a4f8:	200059b0 	.word	0x200059b0

0800a4fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fc fb22 	bl	8006b54 <USBH_LL_IncTimer>
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a526:	4618      	mov	r0, r3
 800a528:	f7fc fb66 	bl	8006bf8 <USBH_LL_Connect>
}
 800a52c:	bf00      	nop
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a542:	4618      	mov	r0, r3
 800a544:	f7fc fb7b 	bl	8006c3e <USBH_LL_Disconnect>
}
 800a548:	bf00      	nop
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	70fb      	strb	r3, [r7, #3]
 800a55c:	4613      	mov	r3, r2
 800a55e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a566:	4618      	mov	r0, r3
 800a568:	f7fc fb9b 	bl	8006ca2 <USBH_LL_NotifyURBChange>
#endif
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a582:	4618      	mov	r0, r3
 800a584:	f7fc fb10 	bl	8006ba8 <USBH_LL_PortEnabled>
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fc fb1c 	bl	8006bdc <USBH_LL_PortDisabled>
}
 800a5a4:	bf00      	nop
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7f8 fc1d 	bl	8002e02 <HAL_HCD_Stop>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 f808 	bl	800a5e4 <USBH_Get_USB_Status>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5f2:	79fb      	ldrb	r3, [r7, #7]
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	d817      	bhi.n	800a628 <USBH_Get_USB_Status+0x44>
 800a5f8:	a201      	add	r2, pc, #4	; (adr r2, 800a600 <USBH_Get_USB_Status+0x1c>)
 800a5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fe:	bf00      	nop
 800a600:	0800a611 	.word	0x0800a611
 800a604:	0800a617 	.word	0x0800a617
 800a608:	0800a61d 	.word	0x0800a61d
 800a60c:	0800a623 	.word	0x0800a623
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	73fb      	strb	r3, [r7, #15]
    break;
 800a614:	e00b      	b.n	800a62e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a616:	2302      	movs	r3, #2
 800a618:	73fb      	strb	r3, [r7, #15]
    break;
 800a61a:	e008      	b.n	800a62e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a61c:	2301      	movs	r3, #1
 800a61e:	73fb      	strb	r3, [r7, #15]
    break;
 800a620:	e005      	b.n	800a62e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a622:	2302      	movs	r3, #2
 800a624:	73fb      	strb	r3, [r7, #15]
    break;
 800a626:	e002      	b.n	800a62e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a628:	2302      	movs	r3, #2
 800a62a:	73fb      	strb	r3, [r7, #15]
    break;
 800a62c:	bf00      	nop
  }
  return usb_status;
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3714      	adds	r7, #20
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <__malloc_lock>:
 800a63c:	4801      	ldr	r0, [pc, #4]	; (800a644 <__malloc_lock+0x8>)
 800a63e:	f000 b88b 	b.w	800a758 <__retarget_lock_acquire_recursive>
 800a642:	bf00      	nop
 800a644:	20005ee4 	.word	0x20005ee4

0800a648 <__malloc_unlock>:
 800a648:	4801      	ldr	r0, [pc, #4]	; (800a650 <__malloc_unlock+0x8>)
 800a64a:	f000 b886 	b.w	800a75a <__retarget_lock_release_recursive>
 800a64e:	bf00      	nop
 800a650:	20005ee4 	.word	0x20005ee4

0800a654 <memset>:
 800a654:	4402      	add	r2, r0
 800a656:	4603      	mov	r3, r0
 800a658:	4293      	cmp	r3, r2
 800a65a:	d100      	bne.n	800a65e <memset+0xa>
 800a65c:	4770      	bx	lr
 800a65e:	f803 1b01 	strb.w	r1, [r3], #1
 800a662:	e7f9      	b.n	800a658 <memset+0x4>

0800a664 <_reclaim_reent>:
 800a664:	4b29      	ldr	r3, [pc, #164]	; (800a70c <_reclaim_reent+0xa8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4283      	cmp	r3, r0
 800a66a:	b570      	push	{r4, r5, r6, lr}
 800a66c:	4604      	mov	r4, r0
 800a66e:	d04b      	beq.n	800a708 <_reclaim_reent+0xa4>
 800a670:	69c3      	ldr	r3, [r0, #28]
 800a672:	b143      	cbz	r3, 800a686 <_reclaim_reent+0x22>
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d144      	bne.n	800a704 <_reclaim_reent+0xa0>
 800a67a:	69e3      	ldr	r3, [r4, #28]
 800a67c:	6819      	ldr	r1, [r3, #0]
 800a67e:	b111      	cbz	r1, 800a686 <_reclaim_reent+0x22>
 800a680:	4620      	mov	r0, r4
 800a682:	f000 f879 	bl	800a778 <_free_r>
 800a686:	6961      	ldr	r1, [r4, #20]
 800a688:	b111      	cbz	r1, 800a690 <_reclaim_reent+0x2c>
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 f874 	bl	800a778 <_free_r>
 800a690:	69e1      	ldr	r1, [r4, #28]
 800a692:	b111      	cbz	r1, 800a69a <_reclaim_reent+0x36>
 800a694:	4620      	mov	r0, r4
 800a696:	f000 f86f 	bl	800a778 <_free_r>
 800a69a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a69c:	b111      	cbz	r1, 800a6a4 <_reclaim_reent+0x40>
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 f86a 	bl	800a778 <_free_r>
 800a6a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6a6:	b111      	cbz	r1, 800a6ae <_reclaim_reent+0x4a>
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 f865 	bl	800a778 <_free_r>
 800a6ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a6b0:	b111      	cbz	r1, 800a6b8 <_reclaim_reent+0x54>
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 f860 	bl	800a778 <_free_r>
 800a6b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a6ba:	b111      	cbz	r1, 800a6c2 <_reclaim_reent+0x5e>
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f000 f85b 	bl	800a778 <_free_r>
 800a6c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a6c4:	b111      	cbz	r1, 800a6cc <_reclaim_reent+0x68>
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 f856 	bl	800a778 <_free_r>
 800a6cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a6ce:	b111      	cbz	r1, 800a6d6 <_reclaim_reent+0x72>
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 f851 	bl	800a778 <_free_r>
 800a6d6:	6a23      	ldr	r3, [r4, #32]
 800a6d8:	b1b3      	cbz	r3, 800a708 <_reclaim_reent+0xa4>
 800a6da:	4620      	mov	r0, r4
 800a6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6e0:	4718      	bx	r3
 800a6e2:	5949      	ldr	r1, [r1, r5]
 800a6e4:	b941      	cbnz	r1, 800a6f8 <_reclaim_reent+0x94>
 800a6e6:	3504      	adds	r5, #4
 800a6e8:	69e3      	ldr	r3, [r4, #28]
 800a6ea:	2d80      	cmp	r5, #128	; 0x80
 800a6ec:	68d9      	ldr	r1, [r3, #12]
 800a6ee:	d1f8      	bne.n	800a6e2 <_reclaim_reent+0x7e>
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f000 f841 	bl	800a778 <_free_r>
 800a6f6:	e7c0      	b.n	800a67a <_reclaim_reent+0x16>
 800a6f8:	680e      	ldr	r6, [r1, #0]
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 f83c 	bl	800a778 <_free_r>
 800a700:	4631      	mov	r1, r6
 800a702:	e7ef      	b.n	800a6e4 <_reclaim_reent+0x80>
 800a704:	2500      	movs	r5, #0
 800a706:	e7ef      	b.n	800a6e8 <_reclaim_reent+0x84>
 800a708:	bd70      	pop	{r4, r5, r6, pc}
 800a70a:	bf00      	nop
 800a70c:	20000068 	.word	0x20000068

0800a710 <__libc_init_array>:
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	4d0d      	ldr	r5, [pc, #52]	; (800a748 <__libc_init_array+0x38>)
 800a714:	4c0d      	ldr	r4, [pc, #52]	; (800a74c <__libc_init_array+0x3c>)
 800a716:	1b64      	subs	r4, r4, r5
 800a718:	10a4      	asrs	r4, r4, #2
 800a71a:	2600      	movs	r6, #0
 800a71c:	42a6      	cmp	r6, r4
 800a71e:	d109      	bne.n	800a734 <__libc_init_array+0x24>
 800a720:	4d0b      	ldr	r5, [pc, #44]	; (800a750 <__libc_init_array+0x40>)
 800a722:	4c0c      	ldr	r4, [pc, #48]	; (800a754 <__libc_init_array+0x44>)
 800a724:	f000 f874 	bl	800a810 <_init>
 800a728:	1b64      	subs	r4, r4, r5
 800a72a:	10a4      	asrs	r4, r4, #2
 800a72c:	2600      	movs	r6, #0
 800a72e:	42a6      	cmp	r6, r4
 800a730:	d105      	bne.n	800a73e <__libc_init_array+0x2e>
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	f855 3b04 	ldr.w	r3, [r5], #4
 800a738:	4798      	blx	r3
 800a73a:	3601      	adds	r6, #1
 800a73c:	e7ee      	b.n	800a71c <__libc_init_array+0xc>
 800a73e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a742:	4798      	blx	r3
 800a744:	3601      	adds	r6, #1
 800a746:	e7f2      	b.n	800a72e <__libc_init_array+0x1e>
 800a748:	0800aff4 	.word	0x0800aff4
 800a74c:	0800aff4 	.word	0x0800aff4
 800a750:	0800aff4 	.word	0x0800aff4
 800a754:	0800aff8 	.word	0x0800aff8

0800a758 <__retarget_lock_acquire_recursive>:
 800a758:	4770      	bx	lr

0800a75a <__retarget_lock_release_recursive>:
 800a75a:	4770      	bx	lr

0800a75c <memcpy>:
 800a75c:	440a      	add	r2, r1
 800a75e:	4291      	cmp	r1, r2
 800a760:	f100 33ff 	add.w	r3, r0, #4294967295
 800a764:	d100      	bne.n	800a768 <memcpy+0xc>
 800a766:	4770      	bx	lr
 800a768:	b510      	push	{r4, lr}
 800a76a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a76e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a772:	4291      	cmp	r1, r2
 800a774:	d1f9      	bne.n	800a76a <memcpy+0xe>
 800a776:	bd10      	pop	{r4, pc}

0800a778 <_free_r>:
 800a778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a77a:	2900      	cmp	r1, #0
 800a77c:	d044      	beq.n	800a808 <_free_r+0x90>
 800a77e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a782:	9001      	str	r0, [sp, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	f1a1 0404 	sub.w	r4, r1, #4
 800a78a:	bfb8      	it	lt
 800a78c:	18e4      	addlt	r4, r4, r3
 800a78e:	f7ff ff55 	bl	800a63c <__malloc_lock>
 800a792:	4a1e      	ldr	r2, [pc, #120]	; (800a80c <_free_r+0x94>)
 800a794:	9801      	ldr	r0, [sp, #4]
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	b933      	cbnz	r3, 800a7a8 <_free_r+0x30>
 800a79a:	6063      	str	r3, [r4, #4]
 800a79c:	6014      	str	r4, [r2, #0]
 800a79e:	b003      	add	sp, #12
 800a7a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7a4:	f7ff bf50 	b.w	800a648 <__malloc_unlock>
 800a7a8:	42a3      	cmp	r3, r4
 800a7aa:	d908      	bls.n	800a7be <_free_r+0x46>
 800a7ac:	6825      	ldr	r5, [r4, #0]
 800a7ae:	1961      	adds	r1, r4, r5
 800a7b0:	428b      	cmp	r3, r1
 800a7b2:	bf01      	itttt	eq
 800a7b4:	6819      	ldreq	r1, [r3, #0]
 800a7b6:	685b      	ldreq	r3, [r3, #4]
 800a7b8:	1949      	addeq	r1, r1, r5
 800a7ba:	6021      	streq	r1, [r4, #0]
 800a7bc:	e7ed      	b.n	800a79a <_free_r+0x22>
 800a7be:	461a      	mov	r2, r3
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	b10b      	cbz	r3, 800a7c8 <_free_r+0x50>
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	d9fa      	bls.n	800a7be <_free_r+0x46>
 800a7c8:	6811      	ldr	r1, [r2, #0]
 800a7ca:	1855      	adds	r5, r2, r1
 800a7cc:	42a5      	cmp	r5, r4
 800a7ce:	d10b      	bne.n	800a7e8 <_free_r+0x70>
 800a7d0:	6824      	ldr	r4, [r4, #0]
 800a7d2:	4421      	add	r1, r4
 800a7d4:	1854      	adds	r4, r2, r1
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	6011      	str	r1, [r2, #0]
 800a7da:	d1e0      	bne.n	800a79e <_free_r+0x26>
 800a7dc:	681c      	ldr	r4, [r3, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	6053      	str	r3, [r2, #4]
 800a7e2:	440c      	add	r4, r1
 800a7e4:	6014      	str	r4, [r2, #0]
 800a7e6:	e7da      	b.n	800a79e <_free_r+0x26>
 800a7e8:	d902      	bls.n	800a7f0 <_free_r+0x78>
 800a7ea:	230c      	movs	r3, #12
 800a7ec:	6003      	str	r3, [r0, #0]
 800a7ee:	e7d6      	b.n	800a79e <_free_r+0x26>
 800a7f0:	6825      	ldr	r5, [r4, #0]
 800a7f2:	1961      	adds	r1, r4, r5
 800a7f4:	428b      	cmp	r3, r1
 800a7f6:	bf04      	itt	eq
 800a7f8:	6819      	ldreq	r1, [r3, #0]
 800a7fa:	685b      	ldreq	r3, [r3, #4]
 800a7fc:	6063      	str	r3, [r4, #4]
 800a7fe:	bf04      	itt	eq
 800a800:	1949      	addeq	r1, r1, r5
 800a802:	6021      	streq	r1, [r4, #0]
 800a804:	6054      	str	r4, [r2, #4]
 800a806:	e7ca      	b.n	800a79e <_free_r+0x26>
 800a808:	b003      	add	sp, #12
 800a80a:	bd30      	pop	{r4, r5, pc}
 800a80c:	20005da8 	.word	0x20005da8

0800a810 <_init>:
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	bf00      	nop
 800a814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a816:	bc08      	pop	{r3}
 800a818:	469e      	mov	lr, r3
 800a81a:	4770      	bx	lr

0800a81c <_fini>:
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	bf00      	nop
 800a820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a822:	bc08      	pop	{r3}
 800a824:	469e      	mov	lr, r3
 800a826:	4770      	bx	lr
