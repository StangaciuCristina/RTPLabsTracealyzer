
RTPLaboratories.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a688  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800a818  0800a818  0001a818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afdc  0800afdc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800afdc  0800afdc  0001afdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afe4  0800afe4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afe4  0800afe4  0001afe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe8  0800afe8  0001afe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800afec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00005e7c  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005ee8  20005ee8  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021a7d  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005078  00000000  00000000  00041b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ef8  00000000  00000000  00046bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001803  00000000  00000000  00048ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002826e  00000000  00000000  0004a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000282bd  00000000  00000000  00072541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ea5c9  00000000  00000000  0009a7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008714  00000000  00000000  00184dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0018d4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a800 	.word	0x0800a800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a800 	.word	0x0800a800

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vHandlerTask>:
/* Stores the handle of the task to which interrupt processing is deferred. */
static TaskHandle_t xHandlerTask = NULL;


static void vHandlerTask( void *pvParameters )
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	/* xMaxExpectedBlockTime is set to be a little longer than the maximum expected
	time between events. */
	const TickType_t xMaxExpectedBlockTime = xInterruptFrequency + pdMS_TO_TICKS( 10 );
 80004d4:	2332      	movs	r3, #50	; 0x32
 80004d6:	330a      	adds	r3, #10
 80004d8:	60fb      	str	r3, [r7, #12]
		{
			/* Wait to receive a notification sent directly to this task from the
			interrupt handler.  The xClearCountOnExit parameter is now pdFALSE, so
			the task's notification will be decremented when ulTaskNotifyTake()
			returns having received a notification. */
			if( ulTaskNotifyTake( pdFALSE, xMaxExpectedBlockTime ) != 0 )
 80004da:	68f9      	ldr	r1, [r7, #12]
 80004dc:	2000      	movs	r0, #0
 80004de:	f008 fe6d 	bl	80091bc <ulTaskNotifyTake>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f8      	beq.n	80004da <vHandlerTask+0xe>
			{
				/* To get here the event must have occurred.  Process the event (in
				this case just print out a message). */
				HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 80004e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ec:	4801      	ldr	r0, [pc, #4]	; (80004f4 <vHandlerTask+0x28>)
 80004ee:	f002 fb36 	bl	8002b5e <HAL_GPIO_TogglePin>
			if( ulTaskNotifyTake( pdFALSE, xMaxExpectedBlockTime ) != 0 )
 80004f2:	e7f2      	b.n	80004da <vHandlerTask+0xe>
 80004f4:	40020c00 	.word	0x40020c00

080004f8 <vPeriodicTask>:
		}
}
/*-----------------------------------------------------------*/

static void vPeriodicTask( void *pvParameters )
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* This task is just used to 'simulate' an interrupt.  This is done by
		periodically generating a simulated software interrupt.  Block until it
		is time to generate the software interrupt again. */
		vTaskDelay( xInterruptFrequency );
 8000500:	2332      	movs	r3, #50	; 0x32
 8000502:	4618      	mov	r0, r3
 8000504:	f007 ffd2 	bl	80084ac <vTaskDelay>

		The syntax used to generate a software interrupt is dependent on the
		FreeRTOS port being used.  The syntax used below can only be used with
		the FreeRTOS Windows port, in which such interrupts are only
		simulated. */
		HAL_GPIO_TogglePin(GPIOD, GREEN_LED);
 8000508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050c:	4801      	ldr	r0, [pc, #4]	; (8000514 <vPeriodicTask+0x1c>)
 800050e:	f002 fb26 	bl	8002b5e <HAL_GPIO_TogglePin>
		vTaskDelay( xInterruptFrequency );
 8000512:	e7f5      	b.n	8000500 <vPeriodicTask+0x8>
 8000514:	40020c00 	.word	0x40020c00

08000518 <EXTI0_IRQHandler>:
	}
}

void EXTI0_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;

	/* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
	it will get set to pdTRUE inside the interrupt safe API function if a
	context switch is required. */
	xHigherPriorityTaskWoken = pdFALSE;
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]

	/* Send a notification to the handler task multiple times.  The first will
	unblock the task, the following 'gives' are to demonstrate that the
	receiving task's notification value is being used to latch events - allowing
	the task to process the events in turn. */
	vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <EXTI0_IRQHandler+0x4c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	1d3a      	adds	r2, r7, #4
 8000528:	4611      	mov	r1, r2
 800052a:	4618      	mov	r0, r3
 800052c:	f008 ff2e 	bl	800938c <vTaskNotifyGiveFromISR>
	vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <EXTI0_IRQHandler+0x4c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	1d3a      	adds	r2, r7, #4
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f008 ff27 	bl	800938c <vTaskNotifyGiveFromISR>
	vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <EXTI0_IRQHandler+0x4c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	1d3a      	adds	r2, r7, #4
 8000544:	4611      	mov	r1, r2
 8000546:	4618      	mov	r0, r3
 8000548:	f008 ff20 	bl	800938c <vTaskNotifyGiveFromISR>


  HAL_GPIO_TogglePin(GPIOD, RED_LED);
 800054c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <EXTI0_IRQHandler+0x50>)
 8000552:	f002 fb04 	bl	8002b5e <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000556:	2001      	movs	r0, #1
 8000558:	f002 fb1c 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000088 	.word	0x20000088
 8000568:	40020c00 	.word	0x40020c00

0800056c <application25>:


void application25(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af02      	add	r7, sp, #8
	processing is deferred, and so is the task that will be synchronized
	with the interrupt.  The handler task is created with a high priority to
	ensure it runs immediately after the interrupt exits.  In this case a
	priority of 3 is chosen.  The handle of the task is saved for use by the
	ISR. */
	xTaskCreate( vHandlerTask, "Handler", 1000, NULL, 3, &xHandlerTask );
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <application25+0x38>)
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2303      	movs	r3, #3
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000580:	4909      	ldr	r1, [pc, #36]	; (80005a8 <application25+0x3c>)
 8000582:	480a      	ldr	r0, [pc, #40]	; (80005ac <application25+0x40>)
 8000584:	f007 fdc2 	bl	800810c <xTaskCreate>

	/* Create the task that will periodically generate a software interrupt.
	This is created with a priority below the handler task to ensure it will
	get preempted each time the handler task exits the Blocked state. */
	xTaskCreate( vPeriodicTask, "Periodic", 1000, NULL, 1, NULL );
 8000588:	2300      	movs	r3, #0
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2301      	movs	r3, #1
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000596:	4906      	ldr	r1, [pc, #24]	; (80005b0 <application25+0x44>)
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <application25+0x48>)
 800059a:	f007 fdb7 	bl	800810c <xTaskCreate>


}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000088 	.word	0x20000088
 80005a8:	0800a818 	.word	0x0800a818
 80005ac:	080004cd 	.word	0x080004cd
 80005b0:	0800a820 	.word	0x0800a820
 80005b4:	080004f9 	.word	0x080004f9

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f001 fff6 	bl	80025ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f812 	bl	80005e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  vTraceEnable(TRC_START);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fee9 	bl	800139c <xTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f92f 	bl	800082c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ce:	f000 f875 	bl	80006bc <MX_I2C1_Init>
  MX_I2S3_Init();
 80005d2:	f000 f8a1 	bl	8000718 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005d6:	f000 f8cf 	bl	8000778 <MX_SPI1_Init>
  MX_TIM11_Init();
 80005da:	f000 f903 	bl	80007e4 <MX_TIM11_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	application25();
 80005de:	f7ff ffc5 	bl	800056c <application25>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80005e2:	f007 ffcf 	bl	8008584 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005e6:	e7fe      	b.n	80005e6 <main+0x2e>

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00a f824 	bl	800a644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000666:	2307      	movs	r3, #7
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fe24 	bl	80052bc <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067a:	f000 f9ef 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2105      	movs	r1, #5
 800069c:	4618      	mov	r0, r3
 800069e:	f005 f885 	bl	80057ac <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a8:	f000 f9d8 	bl	8000a5c <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f003 fffb 	bl	80046f4 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f9aa 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000008c 	.word	0x2000008c
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_I2S3_Init+0x54>)
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <MX_I2S3_Init+0x58>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2S3_Init+0x54>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_I2S3_Init+0x54>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_I2S3_Init+0x54>)
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <MX_I2S3_Init+0x5c>)
 8000742:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_I2S3_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_I2S3_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_I2S3_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_I2S3_Init+0x54>)
 8000758:	f004 f910 	bl	800497c <HAL_I2S_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000762:	f000 f97b 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000e0 	.word	0x200000e0
 8000770:	40003c00 	.word	0x40003c00
 8000774:	00017700 	.word	0x00017700

08000778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_SPI1_Init+0x64>)
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_SPI1_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_SPI1_Init+0x64>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_SPI1_Init+0x64>)
 80007ca:	f005 fb83 	bl	8005ed4 <HAL_SPI_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 f942 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000128 	.word	0x20000128
 80007e0:	40013000 	.word	0x40013000

080007e4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_TIM11_Init+0x40>)
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_TIM11_Init+0x44>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_TIM11_Init+0x40>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_TIM11_Init+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_TIM11_Init+0x40>)
 80007fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000800:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_TIM11_Init+0x40>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_TIM11_Init+0x40>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_TIM11_Init+0x40>)
 8000810:	f005 fbe9 	bl	8005fe6 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800081a:	f000 f91f 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000180 	.word	0x20000180
 8000828:	40014800 	.word	0x40014800

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4b76      	ldr	r3, [pc, #472]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a75      	ldr	r2, [pc, #468]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b73      	ldr	r3, [pc, #460]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a6e      	ldr	r2, [pc, #440]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b6c      	ldr	r3, [pc, #432]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b68      	ldr	r3, [pc, #416]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a67      	ldr	r2, [pc, #412]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b65      	ldr	r3, [pc, #404]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a60      	ldr	r2, [pc, #384]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b5e      	ldr	r3, [pc, #376]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a59      	ldr	r2, [pc, #356]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b57      	ldr	r3, [pc, #348]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a52      	ldr	r2, [pc, #328]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b50      	ldr	r3, [pc, #320]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	484d      	ldr	r0, [pc, #308]	; (8000a24 <MX_GPIO_Init+0x1f8>)
 80008f0:	f002 f91c 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	484b      	ldr	r0, [pc, #300]	; (8000a28 <MX_GPIO_Init+0x1fc>)
 80008fa:	f002 f917 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fe:	2200      	movs	r2, #0
 8000900:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000904:	4849      	ldr	r0, [pc, #292]	; (8000a2c <MX_GPIO_Init+0x200>)
 8000906:	f002 f911 	bl	8002b2c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4840      	ldr	r0, [pc, #256]	; (8000a24 <MX_GPIO_Init+0x1f8>)
 8000922:	f001 ff67 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	483a      	ldr	r0, [pc, #232]	; (8000a28 <MX_GPIO_Init+0x1fc>)
 800093e:	f001 ff59 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000942:	2308      	movs	r3, #8
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4832      	ldr	r0, [pc, #200]	; (8000a28 <MX_GPIO_Init+0x1fc>)
 800095e:	f001 ff49 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000962:	2301      	movs	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	482e      	ldr	r0, [pc, #184]	; (8000a30 <MX_GPIO_Init+0x204>)
 8000978:	f001 ff3c 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097c:	2304      	movs	r3, #4
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4829      	ldr	r0, [pc, #164]	; (8000a34 <MX_GPIO_Init+0x208>)
 8000990:	f001 ff30 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4820      	ldr	r0, [pc, #128]	; (8000a34 <MX_GPIO_Init+0x208>)
 80009b2:	f001 ff1f 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <MX_GPIO_Init+0x200>)
 80009d0:	f001 ff10 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d4:	2320      	movs	r3, #32
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_GPIO_Init+0x200>)
 80009e8:	f001 ff04 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <MX_GPIO_Init+0x1f8>)
 8000a02:	f001 fef7 	bl	80027f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2105      	movs	r1, #5
 8000a0a:	2006      	movs	r0, #6
 8000a0c:	f001 fec8 	bl	80027a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a10:	2006      	movs	r0, #6
 8000a12:	f001 fee1 	bl	80027d8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	; 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400

08000a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4a:	f001 fdd1 	bl	80025f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40010000 	.word	0x40010000

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_MspInit+0x54>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <HAL_MspInit+0x54>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_MspInit+0x54>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_MspInit+0x54>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_MspInit+0x54>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_MspInit+0x54>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	f06f 0001 	mvn.w	r0, #1
 8000aae:	f001 fe77 	bl	80027a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <HAL_I2C_MspInit+0x84>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12c      	bne.n	8000b3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000afe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b10:	2304      	movs	r3, #4
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480c      	ldr	r0, [pc, #48]	; (8000b4c <HAL_I2C_MspInit+0x8c>)
 8000b1c:	f001 fe6a 	bl	80027f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400

08000b50 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_I2S_MspInit+0xf0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d15a      	bne.n	8000c36 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b84:	23c0      	movs	r3, #192	; 0xc0
 8000b86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4618      	mov	r0, r3
 8000b92:	f005 f85d 	bl	8005c50 <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b9c:	f7ff ff5e 	bl	8000a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c04:	2306      	movs	r3, #6
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <HAL_I2S_MspInit+0xf8>)
 8000c10:	f001 fdf0 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c14:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c26:	2306      	movs	r3, #6
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4806      	ldr	r0, [pc, #24]	; (8000c4c <HAL_I2S_MspInit+0xfc>)
 8000c32:	f001 fddf 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3738      	adds	r7, #56	; 0x38
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40003c00 	.word	0x40003c00
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020800 	.word	0x40020800

08000c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <HAL_SPI_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12b      	bne.n	8000cca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000caa:	23e0      	movs	r3, #224	; 0xe0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000cc6:	f001 fd95 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40013000 	.word	0x40013000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <HAL_TIM_Base_MspInit+0x3c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d10d      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_TIM_Base_MspInit+0x40>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_TIM_Base_MspInit+0x40>)
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <HAL_TIM_Base_MspInit+0x40>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40014800 	.word	0x40014800
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	; 0x30
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <HAL_InitTick+0xd4>)
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	4a2e      	ldr	r2, [pc, #184]	; (8000df8 <HAL_InitTick+0xd4>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6453      	str	r3, [r2, #68]	; 0x44
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <HAL_InitTick+0xd4>)
 8000d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d50:	f107 020c 	add.w	r2, r7, #12
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 ff46 	bl	8005bec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d60:	f004 ff30 	bl	8005bc4 <HAL_RCC_GetPCLK2Freq>
 8000d64:	4603      	mov	r3, r0
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6c:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <HAL_InitTick+0xd8>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	0c9b      	lsrs	r3, r3, #18
 8000d74:	3b01      	subs	r3, #1
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d7a:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <HAL_InitTick+0xe0>)
 8000d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d86:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d9e:	4818      	ldr	r0, [pc, #96]	; (8000e00 <HAL_InitTick+0xdc>)
 8000da0:	f005 f921 	bl	8005fe6 <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d11b      	bne.n	8000dea <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000db2:	4813      	ldr	r0, [pc, #76]	; (8000e00 <HAL_InitTick+0xdc>)
 8000db4:	f005 f966 	bl	8006084 <HAL_TIM_Base_Start_IT>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d111      	bne.n	8000dea <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dc6:	2019      	movs	r0, #25
 8000dc8:	f001 fd06 	bl	80027d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b0f      	cmp	r3, #15
 8000dd0:	d808      	bhi.n	8000de4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	2019      	movs	r0, #25
 8000dd8:	f001 fce2 	bl	80027a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_InitTick+0xe4>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e002      	b.n	8000dea <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3730      	adds	r7, #48	; 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	200001c8 	.word	0x200001c8
 8000e04:	40010000 	.word	0x40010000
 8000e08:	20000010 	.word	0x20000010

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e3e:	f005 f991 	bl	8006164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001c8 	.word	0x200001c8

08000e4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <OTG_FS_IRQHandler+0x10>)
 8000e52:	f001 fec2 	bl	8002bda <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200059c8 	.word	0x200059c8

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e88:	f7ff ffea 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f009 fc25 	bl	800a700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fb7f 	bl	80005b8 <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ec8:	0800afec 	.word	0x0800afec
  ldr r2, =_sbss
 8000ecc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ed0:	20005ee8 	.word	0x20005ee8

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>

08000ed6 <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f006 febc 	bl	8007c5c <uxQueueGetQueueNumber>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(pvQueue);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f006 feca 	bl	8007c90 <ucQueueGetQueueType>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(pvTask));
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f007 ff78 	bl	8008e04 <uxTaskGetTaskNumber>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29b      	uxth	r3, r3
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(pvTask));
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f007 ff6b 	bl	8008e04 <uxTaskGetTaskNumber>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	0c1b      	lsrs	r3, r3, #16
 8000f32:	b29b      	uxth	r3, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber(pvTask), uiValue));
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f007 ff5b 	bl	8008e04 <uxTaskGetTaskNumber>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	0c1b      	lsrs	r3, r3, #16
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f007 ff68 	bl	8008e30 <vTaskSetTaskNumber>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber(pvTask), uiValue));
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f007 ff45 	bl	8008e04 <uxTaskGetTaskNumber>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	041b      	lsls	r3, r3, #16
 8000f82:	4313      	orrs	r3, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f007 ff52 	bl	8008e30 <vTaskSetTaskNumber>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff9a 	bl	8000ed6 <prvTraceGetQueueNumber>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29b      	uxth	r3, r3
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff8d 	bl	8000ed6 <prvTraceGetQueueNumber>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	0c1b      	lsrs	r3, r3, #16
 8000fc0:	b29b      	uxth	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff7d 	bl	8000ed6 <prvTraceGetQueueNumber>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	0c1b      	lsrs	r3, r3, #16
 8000fe0:	041b      	lsls	r3, r3, #16
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f006 fe43 	bl	8007c74 <vQueueSetQueueNumber>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	460b      	mov	r3, r1
 8001000:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff67 	bl	8000ed6 <prvTraceGetQueueNumber>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	041b      	lsls	r3, r3, #16
 8001010:	4313      	orrs	r3, r2
 8001012:	4619      	mov	r1, r3
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f006 fe2d 	bl	8007c74 <vQueueSetQueueNumber>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8001026:	f007 ffd3 	bl	8008fd0 <xTaskGetCurrentTaskHandle>
 800102a:	4603      	mov	r3, r0
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}

08001030 <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 800105c:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2209      	movs	r2, #9
 8001062:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8001064:	4b62      	ldr	r3, [pc, #392]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	220a      	movs	r2, #10
 800106a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 800106e:	4b60      	ldr	r3, [pc, #384]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	220a      	movs	r2, #10
 8001074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8001078:	4b5d      	ldr	r3, [pc, #372]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	220a      	movs	r2, #10
 800107e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8001082:	4b5b      	ldr	r3, [pc, #364]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	220f      	movs	r2, #15
 8001088:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 800108c:	4b58      	ldr	r3, [pc, #352]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2205      	movs	r2, #5
 8001092:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8001096:	4b56      	ldr	r3, [pc, #344]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2205      	movs	r2, #5
 800109c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80010a0:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2205      	movs	r2, #5
 80010a6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 80010aa:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2205      	movs	r2, #5
 80010b0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 80010b4:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2205      	movs	r2, #5
 80010ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 80010be:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	220f      	movs	r2, #15
 80010c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 80010c8:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	220f      	movs	r2, #15
 80010ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	220f      	movs	r2, #15
 80010d8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 80010dc:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	220f      	movs	r2, #15
 80010e2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 80010e6:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	220f      	movs	r2, #15
 80010ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 80010f0:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	220f      	movs	r2, #15
 80010f6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 80010fa:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	220f      	movs	r2, #15
 8001100:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	220f      	movs	r2, #15
 800110a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 800110e:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	220f      	movs	r2, #15
 8001114:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8001118:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2210      	movs	r2, #16
 800111e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8001122:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2210      	movs	r2, #16
 8001128:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 800112c:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2210      	movs	r2, #16
 8001132:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8001136:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2213      	movs	r2, #19
 800113c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2211      	movs	r2, #17
 8001146:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2210      	movs	r2, #16
 8001150:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2213      	movs	r2, #19
 800115a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2213      	movs	r2, #19
 8001164:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2213      	movs	r2, #19
 800116e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	22a0      	movs	r2, #160	; 0xa0
 8001182:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800118e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800119a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f240 22fd 	movw	r2, #765	; 0x2fd
 80011a6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f240 3252 	movw	r2, #850	; 0x352
 80011b2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f240 32a2 	movw	r2, #930	; 0x3a2
 80011be:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f240 4201 	movw	r2, #1025	; 0x401
 80011ca:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80011d6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <xTraceKernelPortInitObjectPropertyTable+0x198>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80011e2:	64da      	str	r2, [r3, #76]	; 0x4c

	return TRC_SUCCESS;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	20001bd8 	.word	0x20001bd8

080011f4 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 80011fe:	4b40      	ldr	r3, [pc, #256]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001200:	2200      	movs	r2, #0
 8001202:	825a      	strh	r2, [r3, #18]
 8001204:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001206:	8a5a      	ldrh	r2, [r3, #18]
 8001208:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800120a:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 800120c:	4b3c      	ldr	r3, [pc, #240]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800120e:	220a      	movs	r2, #10
 8001210:	829a      	strh	r2, [r3, #20]
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001214:	8a9a      	ldrh	r2, [r3, #20]
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001218:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800121c:	2214      	movs	r2, #20
 800121e:	82da      	strh	r2, [r3, #22]
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001222:	8ada      	ldrh	r2, [r3, #22]
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001226:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8001228:	4b35      	ldr	r3, [pc, #212]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800122a:	221e      	movs	r2, #30
 800122c:	831a      	strh	r2, [r3, #24]
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001230:	8b1a      	ldrh	r2, [r3, #24]
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001234:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8001236:	4b32      	ldr	r3, [pc, #200]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001238:	222d      	movs	r2, #45	; 0x2d
 800123a:	835a      	strh	r2, [r3, #26]
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800123e:	8b5a      	ldrh	r2, [r3, #26]
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001242:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8001244:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001246:	2232      	movs	r2, #50	; 0x32
 8001248:	839a      	strh	r2, [r3, #28]
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800124c:	8b9a      	ldrh	r2, [r3, #28]
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001250:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001254:	2237      	movs	r2, #55	; 0x37
 8001256:	83da      	strh	r2, [r3, #30]
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800125a:	8bda      	ldrh	r2, [r3, #30]
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800125e:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001262:	223c      	movs	r2, #60	; 0x3c
 8001264:	841a      	strh	r2, [r3, #32]
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001268:	8c1a      	ldrh	r2, [r3, #32]
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800126c:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001270:	2241      	movs	r2, #65	; 0x41
 8001272:	845a      	strh	r2, [r3, #34]	; 0x22
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001276:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800127a:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800127e:	2209      	movs	r2, #9
 8001280:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001284:	2213      	movs	r2, #19
 8001286:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800128a:	221d      	movs	r2, #29
 800128c:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001290:	222c      	movs	r2, #44	; 0x2c
 8001292:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8001296:	2231      	movs	r2, #49	; 0x31
 8001298:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800129c:	2236      	movs	r2, #54	; 0x36
 800129e:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012a2:	223b      	movs	r2, #59	; 0x3b
 80012a4:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012a8:	2240      	movs	r2, #64	; 0x40
 80012aa:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012ae:	2245      	movs	r2, #69	; 0x45
 80012b0:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	e009      	b.n	80012cc <xTraceKernelPortInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3318      	adds	r3, #24
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	2200      	movs	r2, #0
 80012c4:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3301      	adds	r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d9f2      	bls.n	80012b8 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	e008      	b.n	80012ea <xTraceKernelPortInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 80012d8:	4a09      	ldr	r2, [pc, #36]	; (8001300 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	3348      	adds	r3, #72	; 0x48
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3301      	adds	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b45      	cmp	r3, #69	; 0x45
 80012ee:	d9f3      	bls.n	80012d8 <xTraceKernelPortInitObjectHandleStack+0xe4>
	}

	return TRC_SUCCESS;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000240 	.word	0x20000240

08001304 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b08      	cmp	r3, #8
 8001312:	d827      	bhi.n	8001364 <pszTraceGetErrorNotEnoughHandles+0x60>
 8001314:	a201      	add	r2, pc, #4	; (adr r2, 800131c <pszTraceGetErrorNotEnoughHandles+0x18>)
 8001316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131a:	bf00      	nop
 800131c:	08001351 	.word	0x08001351
 8001320:	08001349 	.word	0x08001349
 8001324:	0800134d 	.word	0x0800134d
 8001328:	08001341 	.word	0x08001341
 800132c:	08001345 	.word	0x08001345
 8001330:	08001355 	.word	0x08001355
 8001334:	08001359 	.word	0x08001359
 8001338:	0800135d 	.word	0x0800135d
 800133c:	08001361 	.word	0x08001361
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8001342:	e010      	b.n	8001366 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <pszTraceGetErrorNotEnoughHandles+0x74>)
 8001346:	e00e      	b.n	8001366 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <pszTraceGetErrorNotEnoughHandles+0x78>)
 800134a:	e00c      	b.n	8001366 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 800134e:	e00a      	b.n	8001366 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <pszTraceGetErrorNotEnoughHandles+0x80>)
 8001352:	e008      	b.n	8001366 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <pszTraceGetErrorNotEnoughHandles+0x84>)
 8001356:	e006      	b.n	8001366 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <pszTraceGetErrorNotEnoughHandles+0x88>)
 800135a:	e004      	b.n	8001366 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 800135e:	e002      	b.n	8001366 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <pszTraceGetErrorNotEnoughHandles+0x90>)
 8001362:	e000      	b.n	8001366 <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	0800a82c 	.word	0x0800a82c
 8001378:	0800a874 	.word	0x0800a874
 800137c:	0800a8bc 	.word	0x0800a8bc
 8001380:	0800a910 	.word	0x0800a910
 8001384:	0800a95c 	.word	0x0800a95c
 8001388:	0800a9a8 	.word	0x0800a9a8
 800138c:	0800a9f4 	.word	0x0800a9f4
 8001390:	0800aa48 	.word	0x0800aa48
 8001394:	0800aaa0 	.word	0x0800aaa0
 8001398:	0800aafc 	.word	0x0800aafc

0800139c <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 80013a4:	f000 f8be 	bl	8001524 <xTraceInitialize>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e01f      	b.n	80013f2 <xTraceEnable+0x56>
	}

	if (uiStartOption == TRC_START)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d10b      	bne.n	80013d0 <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 80013b8:	f7ff fe45 	bl	8001046 <xTraceKernelPortEnable>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d101      	bne.n	80013c6 <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e015      	b.n	80013f2 <xTraceEnable+0x56>
		}
		
		prvTraceInitTimestamps();
 80013c6:	f000 f89d 	bl	8001504 <prvTraceInitTimestamps>

		prvTraceStart();
 80013ca:	f000 f823 	bl	8001414 <prvTraceStart>
 80013ce:	e00f      	b.n	80013f0 <xTraceEnable+0x54>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d104      	bne.n	80013e0 <xTraceEnable+0x44>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <xTraceEnable+0x60>)
 80013d8:	f000 fec0 	bl	800215c <prvTraceError>

		return TRC_FAIL;
 80013dc:	2301      	movs	r3, #1
 80013de:	e008      	b.n	80013f2 <xTraceEnable+0x56>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <xTraceEnable+0x54>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <xTraceEnable+0x64>)
 80013e8:	f000 feb8 	bl	800215c <prvTraceError>

		return TRC_FAIL;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <xTraceEnable+0x56>
	}

	return TRC_SUCCESS;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	0800ab2c 	.word	0x0800ab2c
 8001400:	0800ab6c 	.word	0x0800ab6c

08001404 <xTraceDisable>:


traceResult xTraceDisable(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	prvTraceStop();
 8001408:	f000 f864 	bl	80014d4 <prvTraceStop>

	return TRC_SUCCESS;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == (void*)0)
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <prvTraceStart+0xb0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d047      	beq.n	80014b6 <prvTraceStart+0xa2>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <prvTraceStart+0xb0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	2b01      	cmp	r3, #1
 800142e:	d044      	beq.n	80014ba <prvTraceStart+0xa6>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <prvTraceStart+0xb4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d141      	bne.n	80014bc <prvTraceStart+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001438:	f3ef 8310 	mrs	r3, PRIMASK
 800143c:	60bb      	str	r3, [r7, #8]
  return(result);
 800143e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	2301      	movs	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f383 8810 	msr	PRIMASK, r3
}
 800144c:	bf00      	nop
 800144e:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <prvTraceStart+0xb8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <prvTraceStart+0xb8>)
 8001456:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <prvTraceStart+0xb0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2201      	movs	r2, #1
 800145e:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8001460:	f7ff fddf 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8001464:	4603      	mov	r3, r0
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fd4d 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 800146c:	4603      	mov	r3, r0
 800146e:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d110      	bne.n	8001498 <prvTraceStart+0x84>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8001476:	2003      	movs	r0, #3
 8001478:	f000 fd3a 	bl	8001ef0 <prvTraceGetObjectHandle>
 800147c:	4603      	mov	r3, r0
 800147e:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <prvTraceStart+0xbc>)
 8001484:	4619      	mov	r1, r3
 8001486:	2003      	movs	r0, #3
 8001488:	f000 fe0e 	bl	80020a8 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	2003      	movs	r0, #3
 8001494:	f000 fc1e 	bl	8001cd4 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fbb0 	bl	8001c00 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <prvTraceStart+0xb8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <prvTraceStart+0xb8>)
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f383 8810 	msr	PRIMASK, r3
}
 80014b4:	e002      	b.n	80014bc <prvTraceStart+0xa8>
		return;
 80014b6:	bf00      	nop
 80014b8:	e000      	b.n	80014bc <prvTraceStart+0xa8>
		return; /* Already running */
 80014ba:	bf00      	nop
	}
}
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20001bd8 	.word	0x20001bd8
 80014c8:	200002d0 	.word	0x200002d0
 80014cc:	20000228 	.word	0x20000228
 80014d0:	0800abac 	.word	0x0800abac

080014d4 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <prvTraceStop+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <prvTraceStop+0x28>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <prvTraceStop+0x2c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <prvTraceStop+0x2c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4798      	blx	r3
	}
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20001bd8 	.word	0x20001bd8
 8001500:	20000234 	.word	0x20000234

08001504 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <prvTraceInitTimestamps+0x18>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <prvTraceInitTimestamps+0x1c>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e0001004 	.word	0xe0001004
 8001520:	20000238 	.word	0x20000238

08001524 <xTraceInitialize>:
	return trcStr;
}
#endif

traceResult xTraceInitialize(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8001528:	4b8a      	ldr	r3, [pc, #552]	; (8001754 <xTraceInitialize+0x230>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 8001530:	2300      	movs	r3, #0
 8001532:	e10d      	b.n	8001750 <xTraceInitialize+0x22c>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 8001534:	4b88      	ldr	r3, [pc, #544]	; (8001758 <xTraceInitialize+0x234>)
 8001536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800153a:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 800153c:	4b87      	ldr	r3, [pc, #540]	; (800175c <xTraceInitialize+0x238>)
 800153e:	2201      	movs	r2, #1
 8001540:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 8001542:	4b87      	ldr	r3, [pc, #540]	; (8001760 <xTraceInitialize+0x23c>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8001548:	4b86      	ldr	r3, [pc, #536]	; (8001764 <xTraceInitialize+0x240>)
 800154a:	4a87      	ldr	r2, [pc, #540]	; (8001768 <xTraceInitialize+0x244>)
 800154c:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 800154e:	4b87      	ldr	r3, [pc, #540]	; (800176c <xTraceInitialize+0x248>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a87      	ldr	r2, [pc, #540]	; (8001770 <xTraceInitialize+0x24c>)
 8001554:	6013      	str	r3, [r2, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 8001556:	4887      	ldr	r0, [pc, #540]	; (8001774 <xTraceInitialize+0x250>)
 8001558:	f7ff fd6a 	bl	8001030 <xTraceKernelPortInitialize>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <xTraceInitialize+0x42>
	{
		return TRC_FAIL;
 8001562:	2301      	movs	r3, #1
 8001564:	e0f4      	b.n	8001750 <xTraceInitialize+0x22c>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8001566:	4b7f      	ldr	r3, [pc, #508]	; (8001764 <xTraceInitialize+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f641 1204 	movw	r2, #6404	; 0x1904
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f009 f867 	bl	800a644 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8001576:	4b7b      	ldr	r3, [pc, #492]	; (8001764 <xTraceInitialize+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 800157e:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8001580:	4b78      	ldr	r3, [pc, #480]	; (8001764 <xTraceInitialize+0x240>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2207      	movs	r2, #7
 8001586:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8001588:	4b76      	ldr	r3, [pc, #472]	; (8001764 <xTraceInitialize+0x240>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2200      	movs	r2, #0
 800158e:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8001590:	4b74      	ldr	r3, [pc, #464]	; (8001764 <xTraceInitialize+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f641 1204 	movw	r2, #6404	; 0x1904
 8001598:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800159a:	4b72      	ldr	r3, [pc, #456]	; (8001764 <xTraceInitialize+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a2:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 80015a4:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <xTraceInitialize+0x240>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80015ae:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <xTraceInitialize+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80015b6:	4b6b      	ldr	r3, [pc, #428]	; (8001764 <xTraceInitialize+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 80015be:	f7ff fd4b 	bl	8001058 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80015c2:	4b68      	ldr	r3, [pc, #416]	; (8001764 <xTraceInitialize+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 80015ca:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <xTraceInitialize+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80015d6:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80015da:	4b62      	ldr	r3, [pc, #392]	; (8001764 <xTraceInitialize+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2201      	movs	r2, #1
 80015e0:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80015e4:	4b5f      	ldr	r3, [pc, #380]	; (8001764 <xTraceInitialize+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 80015ec:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80015f0:	4b5c      	ldr	r3, [pc, #368]	; (8001764 <xTraceInitialize+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f8:	2250      	movs	r2, #80	; 0x50
 80015fa:	495f      	ldr	r1, [pc, #380]	; (8001778 <xTraceInitialize+0x254>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fd2d 	bl	800205c <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8001602:	4b58      	ldr	r3, [pc, #352]	; (8001764 <xTraceInitialize+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 800160a:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 800160e:	4b55      	ldr	r3, [pc, #340]	; (8001764 <xTraceInitialize+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	220a      	movs	r2, #10
 8001618:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
	RecorderDataPtr->endmarker1 = 0x0B;
 800161c:	4b51      	ldr	r3, [pc, #324]	; (8001764 <xTraceInitialize+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001624:	220b      	movs	r2, #11
 8001626:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
	RecorderDataPtr->endmarker2 = 0x0C;
 800162a:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <xTraceInitialize+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001632:	220c      	movs	r2, #12
 8001634:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
	RecorderDataPtr->endmarker3 = 0x0D;
 8001638:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <xTraceInitialize+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001640:	220d      	movs	r2, #13
 8001642:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
	RecorderDataPtr->endmarker4 = 0x71;
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <xTraceInitialize+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164e:	2271      	movs	r2, #113	; 0x71
 8001650:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
	RecorderDataPtr->endmarker5 = 0x72;
 8001654:	4b43      	ldr	r3, [pc, #268]	; (8001764 <xTraceInitialize+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165c:	2272      	movs	r2, #114	; 0x72
 800165e:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
	RecorderDataPtr->endmarker6 = 0x73;
 8001662:	4b40      	ldr	r3, [pc, #256]	; (8001764 <xTraceInitialize+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	2273      	movs	r2, #115	; 0x73
 800166c:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
	RecorderDataPtr->endmarker7 = 0x74;
 8001670:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <xTraceInitialize+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001678:	2274      	movs	r2, #116	; 0x74
 800167a:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
	RecorderDataPtr->endmarker8 = 0xF1;
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <xTraceInitialize+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001686:	22f1      	movs	r2, #241	; 0xf1
 8001688:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
	RecorderDataPtr->endmarker9 = 0xF2;
 800168c:	4b35      	ldr	r3, [pc, #212]	; (8001764 <xTraceInitialize+0x240>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001694:	22f2      	movs	r2, #242	; 0xf2
 8001696:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
	RecorderDataPtr->endmarker10 = 0xF3;
 800169a:	4b32      	ldr	r3, [pc, #200]	; (8001764 <xTraceInitialize+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a2:	22f3      	movs	r2, #243	; 0xf3
 80016a4:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
	RecorderDataPtr->endmarker11 = 0xF4;
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <xTraceInitialize+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b0:	22f4      	movs	r2, #244	; 0xf4
 80016b2:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 80016b6:	f7ff fd9d 	bl	80011f4 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <xTraceInitialize+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	22f4      	movs	r2, #244	; 0xf4
 80016c0:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <xTraceInitialize+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	22f3      	movs	r2, #243	; 0xf3
 80016c8:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <xTraceInitialize+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	22f2      	movs	r2, #242	; 0xf2
 80016d0:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <xTraceInitialize+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	22f1      	movs	r2, #241	; 0xf1
 80016d8:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <xTraceInitialize+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2274      	movs	r2, #116	; 0x74
 80016e0:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <xTraceInitialize+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2273      	movs	r2, #115	; 0x73
 80016e8:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <xTraceInitialize+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2272      	movs	r2, #114	; 0x72
 80016f0:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <xTraceInitialize+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2271      	movs	r2, #113	; 0x71
 80016f8:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <xTraceInitialize+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2204      	movs	r2, #4
 8001700:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <xTraceInitialize+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2203      	movs	r2, #3
 8001708:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <xTraceInitialize+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2202      	movs	r2, #2
 8001710:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <xTraceInitialize+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <xTraceInitialize+0x23c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d010      	beq.n	8001744 <xTraceInitialize+0x220>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <xTraceInitialize+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172a:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <xTraceInitialize+0x23c>)
 800172c:	6811      	ldr	r1, [r2, #0]
 800172e:	2250      	movs	r2, #80	; 0x50
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fc93 	bl	800205c <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <xTraceInitialize+0x240>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2201      	movs	r2, #1
 800173c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		prvTraceStop();
 8001740:	f7ff fec8 	bl	80014d4 <prvTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 8001744:	f000 feb0 	bl	80024a8 <xTraceHardwarePortInitCortexM>
#endif

	RecorderInitialized = 1;
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <xTraceInitialize+0x230>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20001bdc 	.word	0x20001bdc
 8001758:	2000023c 	.word	0x2000023c
 800175c:	2000023e 	.word	0x2000023e
 8001760:	200002d0 	.word	0x200002d0
 8001764:	20001bd8 	.word	0x20001bd8
 8001768:	200002d4 	.word	0x200002d4
 800176c:	e0001004 	.word	0xe0001004
 8001770:	20000238 	.word	0x20000238
 8001774:	20000210 	.word	0x20000210
 8001778:	0800acf8 	.word	0x0800acf8

0800177c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d044      	beq.n	8001816 <prvTraceStoreTaskReady+0x9a>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <prvTraceStoreTaskReady+0xa8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d042      	beq.n	800181a <prvTraceStoreTaskReady+0x9e>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <prvTraceStoreTaskReady+0xac>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <prvTraceStoreTaskReady+0x28>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 800179c:	4823      	ldr	r0, [pc, #140]	; (800182c <prvTraceStoreTaskReady+0xb0>)
 800179e:	f000 fcdd 	bl	800215c <prvTraceError>
		return;
 80017a2:	e03b      	b.n	800181c <prvTraceStoreTaskReady+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80017a4:	f3ef 8310 	mrs	r3, PRIMASK
 80017a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80017aa:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	2301      	movs	r3, #1
 80017b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f383 8810 	msr	PRIMASK, r3
}
 80017b8:	bf00      	nop
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <prvTraceStoreTaskReady+0xac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <prvTraceStoreTaskReady+0xac>)
 80017c2:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <prvTraceStoreTaskReady+0xb4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d018      	beq.n	8001800 <prvTraceStoreTaskReady+0x84>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80017ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017d2:	f000 fd9f 	bl	8002314 <prvTraceGetDTS>
 80017d6:	4603      	mov	r3, r0
 80017d8:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 80017de:	f000 fb27 	bl	8001e30 <prvTraceNextFreeEventBufferSlot>
 80017e2:	6178      	str	r0, [r7, #20]
		if (tr != (void*)0)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00a      	beq.n	8001800 <prvTraceStoreTaskReady+0x84>
		{
			tr->type = DIV_TASK_READY;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2202      	movs	r2, #2
 80017ee:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	8b7a      	ldrh	r2, [r7, #26]
 80017f4:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	7e7a      	ldrb	r2, [r7, #25]
 80017fa:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80017fc:	f000 fd62 	bl	80022c4 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <prvTraceStoreTaskReady+0xac>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3b01      	subs	r3, #1
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <prvTraceStoreTaskReady+0xac>)
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f383 8810 	msr	PRIMASK, r3
}
 8001814:	e002      	b.n	800181c <prvTraceStoreTaskReady+0xa0>
		return;
 8001816:	bf00      	nop
 8001818:	e000      	b.n	800181c <prvTraceStoreTaskReady+0xa0>
		return;
 800181a:	bf00      	nop
}
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000000c 	.word	0x2000000c
 8001828:	20000228 	.word	0x20000228
 800182c:	0800ad0c 	.word	0x0800ad0c
 8001830:	20001bd8 	.word	0x20001bd8

08001834 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08e      	sub	sp, #56	; 0x38
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 8001840:	4b46      	ldr	r3, [pc, #280]	; (800195c <vTraceStoreMemMangEvent+0x128>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8084 	beq.w	8001952 <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	da03      	bge.n	8001858 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	425b      	negs	r3, r3
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
 8001856:	e001      	b.n	800185c <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800185c:	f3ef 8310 	mrs	r3, PRIMASK
 8001860:	61bb      	str	r3, [r7, #24]
  return(result);
 8001862:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
 8001866:	2301      	movs	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f383 8810 	msr	PRIMASK, r3
}
 8001870:	bf00      	nop
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <vTraceStoreMemMangEvent+0x12c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a39      	ldr	r2, [pc, #228]	; (8001960 <vTraceStoreMemMangEvent+0x12c>)
 800187a:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d015      	beq.n	80018ae <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8001882:	4b36      	ldr	r3, [pc, #216]	; (800195c <vTraceStoreMemMangEvent+0x128>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <vTraceStoreMemMangEvent+0x128>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	440a      	add	r2, r1
 8001890:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <vTraceStoreMemMangEvent+0x128>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <vTraceStoreMemMangEvent+0x128>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189e:	429a      	cmp	r2, r3
 80018a0:	d905      	bls.n	80018ae <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <vTraceStoreMemMangEvent+0x128>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <vTraceStoreMemMangEvent+0x128>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018ac:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <vTraceStoreMemMangEvent+0x128>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d041      	beq.n	800193c <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 80018b8:	20ff      	movs	r0, #255	; 0xff
 80018ba:	f000 fd2b 	bl	8002314 <prvTraceGetDTS>
 80018be:	4603      	mov	r3, r0
 80018c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 80018c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018ca:	f000 f90f 	bl	8001aec <prvTraceGetParam>
 80018ce:	4603      	mov	r3, r0
 80018d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 80018d2:	f000 faad 	bl	8001e30 <prvTraceNextFreeEventBufferSlot>
 80018d6:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != (void*)0)
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d02e      	beq.n	800193c <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 80018de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80018e4:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 80018ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80018f0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80018f2:	f000 fce7 	bl	80022c4 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018fc:	f000 f8f6 	bl	8001aec <prvTraceGetParam>
 8001900:	4603      	mov	r3, r0
 8001902:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 800190a:	f000 fa91 	bl	8001e30 <prvTraceNextFreeEventBufferSlot>
 800190e:	6238      	str	r0, [r7, #32]
			if (ma != (void*)0)
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d012      	beq.n	800193c <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800191a:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001922:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3301      	adds	r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8001938:	f000 fcc4 	bl	80022c4 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <vTraceStoreMemMangEvent+0x12c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3b01      	subs	r3, #1
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <vTraceStoreMemMangEvent+0x12c>)
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f383 8810 	msr	PRIMASK, r3
}
 8001950:	e000      	b.n	8001954 <vTraceStoreMemMangEvent+0x120>
		return;
 8001952:	bf00      	nop
}
 8001954:	3738      	adds	r7, #56	; 0x38
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20001bd8 	.word	0x20001bd8
 8001960:	20000228 	.word	0x20000228

08001964 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	460b      	mov	r3, r1
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <prvTraceStoreKernelCall+0xa8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <prvTraceStoreKernelCall+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 800197a:	4825      	ldr	r0, [pc, #148]	; (8001a10 <prvTraceStoreKernelCall+0xac>)
 800197c:	f000 fbee 	bl	800215c <prvTraceError>
		return;
 8001980:	e040      	b.n	8001a04 <prvTraceStoreKernelCall+0xa0>
	}

	if (handle_of_last_logged_task == 0)
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <prvTraceStoreKernelCall+0xb0>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03b      	beq.n	8001a02 <prvTraceStoreKernelCall+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800198a:	f3ef 8310 	mrs	r3, PRIMASK
 800198e:	617b      	str	r3, [r7, #20]
  return(result);
 8001990:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
 8001994:	2301      	movs	r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f383 8810 	msr	PRIMASK, r3
}
 800199e:	bf00      	nop
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <prvTraceStoreKernelCall+0xa8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <prvTraceStoreKernelCall+0xa8>)
 80019a8:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <prvTraceStoreKernelCall+0xb4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01b      	beq.n	80019ec <prvTraceStoreKernelCall+0x88>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80019b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019b8:	f000 fcac 	bl	8002314 <prvTraceGetDTS>
 80019bc:	4603      	mov	r3, r0
 80019be:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 80019c6:	f000 fa33 	bl	8001e30 <prvTraceNextFreeEventBufferSlot>
 80019ca:	61f8      	str	r0, [r7, #28]
		if (kse != (void*)0)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00c      	beq.n	80019ec <prvTraceStoreKernelCall+0x88>
		{
			kse->dts = dts1;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80019d6:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80019e6:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80019e8:	f000 fc6c 	bl	80022c4 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <prvTraceStoreKernelCall+0xa8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <prvTraceStoreKernelCall+0xa8>)
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	f383 8810 	msr	PRIMASK, r3
}
 8001a00:	e000      	b.n	8001a04 <prvTraceStoreKernelCall+0xa0>
		return;
 8001a02:	bf00      	nop
}
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000228 	.word	0x20000228
 8001a10:	0800ad44 	.word	0x0800ad44
 8001a14:	20000230 	.word	0x20000230
 8001a18:	20001bd8 	.word	0x20001bd8

08001a1c <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	72fb      	strb	r3, [r7, #11]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <prvTraceStoreKernelCallWithParam+0x20>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8001a34:	482a      	ldr	r0, [pc, #168]	; (8001ae0 <prvTraceStoreKernelCallWithParam+0xc4>)
 8001a36:	f000 fb91 	bl	800215c <prvTraceError>
		return;
 8001a3a:	e04b      	b.n	8001ad4 <prvTraceStoreKernelCallWithParam+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a40:	617b      	str	r3, [r7, #20]
  return(result);
 8001a42:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
 8001a46:	2301      	movs	r3, #1
 8001a48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f383 8810 	msr	PRIMASK, r3
}
 8001a50:	bf00      	nop
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a20      	ldr	r2, [pc, #128]	; (8001adc <prvTraceStoreKernelCallWithParam+0xc0>)
 8001a5a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <prvTraceStoreKernelCallWithParam+0xc8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d02b      	beq.n	8001abe <prvTraceStoreKernelCallWithParam+0xa2>
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <prvTraceStoreKernelCallWithParam+0xcc>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d027      	beq.n	8001abe <prvTraceStoreKernelCallWithParam+0xa2>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8001a6e:	20ff      	movs	r0, #255	; 0xff
 8001a70:	f000 fc50 	bl	8002314 <prvTraceGetDTS>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8001a7a:	6839      	ldr	r1, [r7, #0]
 8001a7c:	20ff      	movs	r0, #255	; 0xff
 8001a7e:	f000 f835 	bl	8001aec <prvTraceGetParam>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8001a8e:	f000 f9cf 	bl	8001e30 <prvTraceNextFreeEventBufferSlot>
 8001a92:	61f8      	str	r0, [r7, #28]
		if (kse != (void*)0)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d011      	beq.n	8001abe <prvTraceStoreKernelCallWithParam+0xa2>
		{
			kse->dts = dts2;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001aa0:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001ab0:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001ab8:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001aba:	f000 fc03 	bl	80022c4 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <prvTraceStoreKernelCallWithParam+0xc0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	4a05      	ldr	r2, [pc, #20]	; (8001adc <prvTraceStoreKernelCallWithParam+0xc0>)
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f383 8810 	msr	PRIMASK, r3
}
 8001ad2:	bf00      	nop
}
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000228 	.word	0x20000228
 8001ae0:	0800ad7c 	.word	0x0800ad7c
 8001ae4:	20001bd8 	.word	0x20001bd8
 8001ae8:	20000230 	.word	0x20000230

08001aec <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d801      	bhi.n	8001b02 <prvTraceGetParam+0x16>
	{
		return param;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	e01d      	b.n	8001b3e <prvTraceGetParam+0x52>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8001b02:	f000 f995 	bl	8001e30 <prvTraceNextFreeEventBufferSlot>
 8001b06:	60f8      	str	r0, [r7, #12]
		if (xps != (void*)0)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d014      	beq.n	8001b38 <prvTraceGetParam+0x4c>
		{
			xps->type = DIV_XPS;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	43da      	mvns	r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	43da      	mvns	r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	0c1b      	lsrs	r3, r3, #16
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001b34:	f000 fbc6 	bl	80022c4 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4013      	ands	r3, r2
	}
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <prvTraceStoreKernelCallWithNumericParamOnly+0x1e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8001b5e:	4825      	ldr	r0, [pc, #148]	; (8001bf4 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>)
 8001b60:	f000 fafc 	bl	800215c <prvTraceError>
		return;
 8001b64:	e041      	b.n	8001bea <prvTraceStoreKernelCallWithNumericParamOnly+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001b66:	f3ef 8310 	mrs	r3, PRIMASK
 8001b6a:	613b      	str	r3, [r7, #16]
  return(result);
 8001b6c:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	2301      	movs	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f383 8810 	msr	PRIMASK, r3
}
 8001b7a:	bf00      	nop
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001b84:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d021      	beq.n	8001bd4 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01d      	beq.n	8001bd4 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8001b98:	20ff      	movs	r0, #255	; 0xff
 8001b9a:	f000 fbbb 	bl	8002314 <prvTraceGetDTS>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ba8:	f7ff ffa0 	bl	8001aec <prvTraceGetParam>
 8001bac:	4603      	mov	r3, r0
 8001bae:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8001bb0:	f000 f93e 	bl	8001e30 <prvTraceNextFreeEventBufferSlot>
 8001bb4:	61b8      	str	r0, [r7, #24]
		if (kse != (void*)0)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00b      	beq.n	8001bd4 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>
		{
			kse->dts = dts6;
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	7ffa      	ldrb	r2, [r7, #31]
 8001bc0:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001bce:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001bd0:	f000 fb78 	bl	80022c4 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa8>)
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f383 8810 	msr	PRIMASK, r3
}
 8001be8:	bf00      	nop
}
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000228 	.word	0x20000228
 8001bf4:	0800adb4 	.word	0x0800adb4
 8001bf8:	20001bd8 	.word	0x20001bd8
 8001bfc:	20000230 	.word	0x20000230

08001c00 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c10:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	2301      	movs	r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f383 8810 	msr	PRIMASK, r3
}
 8001c1e:	bf00      	nop
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <prvTraceStoreTaskswitch+0xc4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <prvTraceStoreTaskswitch+0xc4>)
 8001c28:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8001c2a:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <prvTraceStoreTaskswitch+0xc8>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	79fa      	ldrb	r2, [r7, #7]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d038      	beq.n	8001ca6 <prvTraceStoreTaskswitch+0xa6>
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <prvTraceStoreTaskswitch+0xcc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d033      	beq.n	8001ca6 <prvTraceStoreTaskswitch+0xa6>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <prvTraceStoreTaskswitch+0xd0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001c44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c48:	f000 fb64 	bl	8002314 <prvTraceGetDTS>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <prvTraceStoreTaskswitch+0xc8>)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <prvTraceStoreTaskswitch+0xc8>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8001c5c:	f000 f8e8 	bl	8001e30 <prvTraceNextFreeEventBufferSlot>
 8001c60:	6178      	str	r0, [r7, #20]

		if (ts != (void*)0)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d01e      	beq.n	8001ca6 <prvTraceStoreTaskswitch+0xa6>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <prvTraceStoreTaskswitch+0xc8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	2003      	movs	r0, #3
 8001c70:	f000 f89e 	bl	8001db0 <prvTraceGetObjectState>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d103      	bne.n	8001c82 <prvTraceStoreTaskswitch+0x82>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	e002      	b.n	8001c88 <prvTraceStoreTaskswitch+0x88>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2206      	movs	r2, #6
 8001c86:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	8b7a      	ldrh	r2, [r7, #26]
 8001c8c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	7e7a      	ldrb	r2, [r7, #25]
 8001c92:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <prvTraceStoreTaskswitch+0xc8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 f863 	bl	8001d68 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8001ca2:	f000 fb0f 	bl	80022c4 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <prvTraceStoreTaskswitch+0xc4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <prvTraceStoreTaskswitch+0xc4>)
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f383 8810 	msr	PRIMASK, r3
}
 8001cba:	bf00      	nop
}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000228 	.word	0x20000228
 8001cc8:	20000230 	.word	0x20000230
 8001ccc:	20001bd8 	.word	0x20001bd8
 8001cd0:	20000214 	.word	0x20000214

08001cd4 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	71bb      	strb	r3, [r7, #6]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <prvTraceSetPriorityProperty+0x48>)
 8001ce8:	681c      	ldr	r4, [r3, #0]
 8001cea:	79fa      	ldrb	r2, [r7, #7]
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f8c1 	bl	8001e78 <uiIndexOfObject>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <prvTraceSetPriorityProperty+0x48>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4413      	add	r3, r2
 8001d02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d06:	440b      	add	r3, r1
 8001d08:	3301      	adds	r3, #1
 8001d0a:	4423      	add	r3, r4
 8001d0c:	797a      	ldrb	r2, [r7, #5]
 8001d0e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20001bd8 	.word	0x20001bd8

08001d20 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	460a      	mov	r2, r1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <prvTraceGetPriorityProperty+0x44>)
 8001d32:	681c      	ldr	r4, [r3, #0]
 8001d34:	79fa      	ldrb	r2, [r7, #7]
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f89c 	bl	8001e78 <uiIndexOfObject>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4619      	mov	r1, r3
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <prvTraceGetPriorityProperty+0x44>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d50:	440b      	add	r3, r1
 8001d52:	3301      	adds	r3, #1
 8001d54:	4423      	add	r3, r4
 8001d56:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20001bd8 	.word	0x20001bd8

08001d68 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	460b      	mov	r3, r1
 8001d74:	71bb      	strb	r3, [r7, #6]
 8001d76:	4613      	mov	r3, r2
 8001d78:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <prvTraceSetObjectState+0x44>)
 8001d7c:	681c      	ldr	r4, [r3, #0]
 8001d7e:	79fa      	ldrb	r2, [r7, #7]
 8001d80:	79bb      	ldrb	r3, [r7, #6]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f877 	bl	8001e78 <uiIndexOfObject>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <prvTraceSetObjectState+0x44>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4413      	add	r3, r2
 8001d96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d9a:	440b      	add	r3, r1
 8001d9c:	4423      	add	r3, r4
 8001d9e:	797a      	ldrb	r2, [r7, #5]
 8001da0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	20001bd8 	.word	0x20001bd8

08001db0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	460a      	mov	r2, r1
 8001dba:	71fb      	strb	r3, [r7, #7]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <prvTraceGetObjectState+0x40>)
 8001dc2:	681c      	ldr	r4, [r3, #0]
 8001dc4:	79fa      	ldrb	r2, [r7, #7]
 8001dc6:	79bb      	ldrb	r3, [r7, #6]
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f854 	bl	8001e78 <uiIndexOfObject>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <prvTraceGetObjectState+0x40>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001de0:	440b      	add	r3, r1
 8001de2:	4423      	add	r3, r4
 8001de4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd90      	pop	{r4, r7, pc}
 8001df0:	20001bd8 	.word	0x20001bd8

08001df4 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <prvTraceSetTaskInstanceFinished+0x38>)
 8001e00:	681c      	ldr	r4, [r3, #0]
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2103      	movs	r1, #3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f836 	bl	8001e78 <uiIndexOfObject>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <prvTraceSetTaskInstanceFinished+0x38>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001e18:	4413      	add	r3, r2
 8001e1a:	4423      	add	r3, r4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20001bd8 	.word	0x20001bd8

08001e30 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e014      	b.n	8001e6c <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e4c:	d304      	bcc.n	8001e58 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8001e4e:	4809      	ldr	r0, [pc, #36]	; (8001e74 <prvTraceNextFreeEventBufferSlot+0x44>)
 8001e50:	f000 f984 	bl	800215c <prvTraceError>
		return (void*)0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e009      	b.n	8001e6c <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8001e68:	4413      	add	r3, r2
 8001e6a:	3304      	adds	r3, #4
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20001bd8 	.word	0x20001bd8
 8001e74:	0800adec 	.word	0x0800adec

08001e78 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460a      	mov	r2, r1
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8001e88:	79bb      	ldrb	r3, [r7, #6]
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d823      	bhi.n	8001ed6 <uiIndexOfObject+0x5e>
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <uiIndexOfObject+0x5e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <uiIndexOfObject+0x70>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8001ea0:	79fa      	ldrb	r2, [r7, #7]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d817      	bhi.n	8001ed6 <uiIndexOfObject+0x5e>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <uiIndexOfObject+0x70>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	3338      	adds	r3, #56	; 0x38
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <uiIndexOfObject+0x70>)
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	440b      	add	r3, r1
 8001ebc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001ec0:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	fb11 f303 	smulbb	r3, r1, r3
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	81fb      	strh	r3, [r7, #14]
		return index;
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	e003      	b.n	8001ede <uiIndexOfObject+0x66>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <uiIndexOfObject+0x74>)
 8001ed8:	f000 f940 	bl	800215c <prvTraceError>
	return 0;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20001bd8 	.word	0x20001bd8
 8001eec:	0800ae14 	.word	0x0800ae14

08001ef0 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001efa:	f3ef 8310 	mrs	r3, PRIMASK
 8001efe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f00:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	2301      	movs	r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f383 8810 	msr	PRIMASK, r3
}
 8001f0e:	bf00      	nop
 8001f10:	4b40      	ldr	r3, [pc, #256]	; (8002014 <prvTraceGetObjectHandle+0x124>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	4a3f      	ldr	r2, [pc, #252]	; (8002014 <prvTraceGetObjectHandle+0x124>)
 8001f18:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	4a3e      	ldr	r2, [pc, #248]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b3d      	ldr	r3, [pc, #244]	; (800201c <prvTraceGetObjectHandle+0x12c>)
 8001f26:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8001f28:	4b3c      	ldr	r3, [pc, #240]	; (800201c <prvTraceGetObjectHandle+0x12c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a3a      	ldr	r2, [pc, #232]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d114      	bne.n	8001f62 <prvTraceGetObjectHandle+0x72>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8001f38:	4b38      	ldr	r3, [pc, #224]	; (800201c <prvTraceGetObjectHandle+0x12c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4935      	ldr	r1, [pc, #212]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001f42:	3308      	adds	r3, #8
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	440b      	add	r3, r1
 8001f48:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8001f50:	4b32      	ldr	r3, [pc, #200]	; (800201c <prvTraceGetObjectHandle+0x12c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8001f54:	3201      	adds	r2, #1
 8001f56:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8001f58:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001f5a:	4413      	add	r3, r2
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8001f62:	4b2e      	ldr	r3, [pc, #184]	; (800201c <prvTraceGetObjectHandle+0x12c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001f68:	4413      	add	r3, r2
 8001f6a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f6e:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	4a29      	ldr	r2, [pc, #164]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001f74:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4927      	ldr	r1, [pc, #156]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001f7c:	3310      	adds	r3, #16
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	440b      	add	r3, r1
 8001f82:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d90a      	bls.n	8001f9e <prvTraceGetObjectHandle+0xae>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f9ba 	bl	8001304 <pszTraceGetErrorNotEnoughHandles>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f8e2 	bl	800215c <prvTraceError>
		handle = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]
 8001f9c:	e029      	b.n	8001ff2 <prvTraceGetObjectHandle+0x102>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001fa2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fa6:	3201      	adds	r2, #1
 8001fa8:	b291      	uxth	r1, r2
 8001faa:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001fac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4a19      	ldr	r2, [pc, #100]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fb8:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	4a16      	ldr	r2, [pc, #88]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001fc6:	1acb      	subs	r3, r1, r3
 8001fc8:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	4a12      	ldr	r2, [pc, #72]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001fce:	3318      	adds	r3, #24
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	88db      	ldrh	r3, [r3, #6]
 8001fd6:	461a      	mov	r2, r3
		if (hndCount >
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	dd09      	ble.n	8001ff2 <prvTraceGetObjectHandle+0x102>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8001fe4:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <prvTraceGetObjectHandle+0x128>)
 8001fe8:	3318      	adds	r3, #24
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	460a      	mov	r2, r1
 8001ff0:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <prvTraceGetObjectHandle+0x124>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <prvTraceGetObjectHandle+0x124>)
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f383 8810 	msr	PRIMASK, r3
}
 8002006:	bf00      	nop

	return handle;
 8002008:	7ffb      	ldrb	r3, [r7, #31]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000228 	.word	0x20000228
 8002018:	20000240 	.word	0x20000240
 800201c:	20001be0 	.word	0x20001be0

08002020 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	79bb      	ldrb	r3, [r7, #6]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff1e 	bl	8001e78 <uiIndexOfObject>
 800203c:	4603      	mov	r3, r0
 800203e:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <prvMarkObjectAsUsed+0x38>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	89fb      	ldrh	r3, [r7, #14]
 8002046:	4413      	add	r3, r2
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20001bd8 	.word	0x20001bd8

0800205c <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e010      	b.n	8002090 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	441a      	add	r2, r3
 8002074:	68f9      	ldr	r1, [r7, #12]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	440b      	add	r3, r1
 800207a:	7812      	ldrb	r2, [r2, #0]
 800207c:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	d3ea      	bcc.n	800206e <prvStrncpy+0x12>
			break;
	}
}
 8002098:	e000      	b.n	800209c <prvStrncpy+0x40>
			break;
 800209a:	bf00      	nop
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	603a      	str	r2, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
 80020b4:	460b      	mov	r3, r1
 80020b6:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == (void*)0)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <prvTraceSetObjectName+0x1a>
	{
		name = "";
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <prvTraceSetObjectName+0x9c>)
 80020c0:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d903      	bls.n	80020d0 <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 80020c8:	481f      	ldr	r0, [pc, #124]	; (8002148 <prvTraceSetObjectName+0xa0>)
 80020ca:	f000 f847 	bl	800215c <prvTraceError>
		return;
 80020ce:	e036      	b.n	800213e <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 80020d0:	79bb      	ldrb	r3, [r7, #6]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 80020d6:	481d      	ldr	r0, [pc, #116]	; (800214c <prvTraceSetObjectName+0xa4>)
 80020d8:	f000 f840 	bl	800215c <prvTraceError>
		return;
 80020dc:	e02f      	b.n	800213e <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <prvTraceSetObjectName+0xa8>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	4413      	add	r3, r2
 80020e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ea:	79ba      	ldrb	r2, [r7, #6]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d908      	bls.n	8002102 <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f906 	bl	8001304 <pszTraceGetErrorNotEnoughHandles>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f82e 	bl	800215c <prvTraceError>
 8002100:	e01d      	b.n	800213e <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8002102:	79fa      	ldrb	r2, [r7, #7]
 8002104:	79bb      	ldrb	r3, [r7, #6]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff feb5 	bl	8001e78 <uiIndexOfObject>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <prvTraceSetObjectName+0xac>)
 8002114:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <prvTraceSetObjectName+0xb0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <prvTraceSetObjectName+0xa8>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <prvTraceSetObjectName+0xac>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	3388      	adds	r3, #136	; 0x88
 8002128:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <prvTraceSetObjectName+0xa8>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	4413      	add	r3, r2
 8002132:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8002136:	461a      	mov	r2, r3
 8002138:	6839      	ldr	r1, [r7, #0]
 800213a:	f7ff ff8f 	bl	800205c <prvStrncpy>
		}
	}
}
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	0800ae84 	.word	0x0800ae84
 8002148:	0800ae88 	.word	0x0800ae88
 800214c:	0800aeb8 	.word	0x0800aeb8
 8002150:	20001bd8 	.word	0x20001bd8
 8002154:	20001be4 	.word	0x20001be4
 8002158:	200002d0 	.word	0x200002d0

0800215c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <prvTraceError+0x50>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <prvTraceError+0x14>
	{
		xTraceDisable();
 800216c:	f7ff f94a 	bl	8001404 <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <prvTraceError+0x54>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d115      	bne.n	80021a4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <prvTraceError+0x54>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != (void*)0)
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <prvTraceError+0x50>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00e      	beq.n	80021a4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <prvTraceError+0x50>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <prvTraceError+0x54>)
 8002190:	6811      	ldr	r1, [r2, #0]
 8002192:	2250      	movs	r2, #80	; 0x50
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff61 	bl	800205c <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <prvTraceError+0x50>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20001bd8 	.word	0x20001bd8
 80021b0:	200002d0 	.word	0x200002d0

080021b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 80021c6:	e071      	b.n	80022ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80021c8:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4413      	add	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80021d4:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 80021e2:	2b98      	cmp	r3, #152	; 0x98
 80021e4:	d929      	bls.n	800223a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80021f4:	2ba7      	cmp	r3, #167	; 0xa7
 80021f6:	d820      	bhi.n	800223a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8002206:	3368      	adds	r3, #104	; 0x68
 8002208:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	441a      	add	r2, r3
 8002210:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	429a      	cmp	r2, r3
 8002218:	d244      	bcs.n	80022a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002226:	4413      	add	r3, r2
 8002228:	1d18      	adds	r0, r3, #4
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	3301      	adds	r3, #1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	461a      	mov	r2, r3
 8002232:	2100      	movs	r1, #0
 8002234:	f008 fa06 	bl	800a644 <memset>
		{
 8002238:	e034      	b.n	80022a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf0>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8002248:	2b01      	cmp	r3, #1
 800224a:	d12c      	bne.n	80022a6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	429a      	cmp	r2, r3
 8002258:	d20d      	bcs.n	8002276 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	2208      	movs	r2, #8
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f008 f9e8 	bl	800a644 <memset>
 8002274:	e017      	b.n	80022a6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f603 1354 	addw	r3, r3, #2388	; 0x954
 800227e:	2204      	movs	r2, #4
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f008 f9de 	bl	800a644 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002294:	4413      	add	r3, r2
 8002296:	3304      	adds	r3, #4
 8002298:	2204      	movs	r2, #4
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f008 f9d1 	bl	800a644 <memset>
 80022a2:	e000      	b.n	80022a6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf2>
		{
 80022a4:	bf00      	nop
			}
		}
		i++;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d389      	bcc.n	80021c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14>
	}
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20001bd8 	.word	0x20001bd8

080022c4 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <prvTraceUpdateCounters+0x4c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01b      	beq.n	800230a <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <prvTraceUpdateCounters+0x4c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	3201      	adds	r2, #1
 80022da:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <prvTraceUpdateCounters+0x4c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	3201      	adds	r2, #1
 80022e4:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <prvTraceUpdateCounters+0x4c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f0:	d307      	bcc.n	8002302 <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <prvTraceUpdateCounters+0x4c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2201      	movs	r2, #1
 80022f8:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <prvTraceUpdateCounters+0x4c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff ff56 	bl	80021b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8002308:	e000      	b.n	800230c <prvTraceUpdateCounters+0x48>
		return;
 800230a:	bf00      	nop
#endif
}
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20001bd8 	.word	0x20001bd8

08002314 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 800232a:	4b58      	ldr	r3, [pc, #352]	; (800248c <prvTraceGetDTS+0x178>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	2b00      	cmp	r3, #0
 8002332:	d116      	bne.n	8002362 <prvTraceGetDTS+0x4e>
	{	
		if (timestampFrequency != 0)
 8002334:	4b56      	ldr	r3, [pc, #344]	; (8002490 <prvTraceGetDTS+0x17c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <prvTraceGetDTS+0x36>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 800233c:	4b54      	ldr	r3, [pc, #336]	; (8002490 <prvTraceGetDTS+0x17c>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b52      	ldr	r3, [pc, #328]	; (800248c <prvTraceGetDTS+0x178>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0892      	lsrs	r2, r2, #2
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
 8002348:	e00b      	b.n	8002362 <prvTraceGetDTS+0x4e>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 800234a:	4b52      	ldr	r3, [pc, #328]	; (8002494 <prvTraceGetDTS+0x180>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b52      	ldr	r3, [pc, #328]	; (8002498 <prvTraceGetDTS+0x184>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d005      	beq.n	8002362 <prvTraceGetDTS+0x4e>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8002356:	4b51      	ldr	r3, [pc, #324]	; (800249c <prvTraceGetDTS+0x188>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b4c      	ldr	r3, [pc, #304]	; (800248c <prvTraceGetDTS+0x178>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0892      	lsrs	r2, r2, #2
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f8d6 	bl	8002518 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <prvTraceGetDTS+0x18c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a49      	ldr	r2, [pc, #292]	; (80024a0 <prvTraceGetDTS+0x18c>)
 800237a:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <prvTraceGetDTS+0x178>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d043      	beq.n	800240e <prvTraceGetDTS+0xfa>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <prvTraceGetDTS+0x178>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	429a      	cmp	r2, r3
 8002390:	d91d      	bls.n	80023ce <prvTraceGetDTS+0xba>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8002392:	4b3e      	ldr	r3, [pc, #248]	; (800248c <prvTraceGetDTS+0x178>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002398:	4b3c      	ldr	r3, [pc, #240]	; (800248c <prvTraceGetDTS+0x178>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <prvTraceGetDTS+0x178>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	440a      	add	r2, r1
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 80023ac:	4b37      	ldr	r3, [pc, #220]	; (800248c <prvTraceGetDTS+0x178>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <prvTraceGetDTS+0x178>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80023be:	fb00 f202 	mul.w	r2, r0, r2
 80023c2:	1a9a      	subs	r2, r3, r2
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <prvTraceGetDTS+0x178>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	440a      	add	r2, r1
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
 80023cc:	e007      	b.n	80023de <prvTraceGetDTS+0xca>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 80023ce:	4b2f      	ldr	r3, [pc, #188]	; (800248c <prvTraceGetDTS+0x178>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <prvTraceGetDTS+0x178>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	440a      	add	r2, r1
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <prvTraceGetDTS+0x178>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <prvTraceGetDTS+0x178>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d313      	bcc.n	8002416 <prvTraceGetDTS+0x102>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 80023ee:	4b27      	ldr	r3, [pc, #156]	; (800248c <prvTraceGetDTS+0x178>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	3201      	adds	r2, #1
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <prvTraceGetDTS+0x178>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <prvTraceGetDTS+0x178>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <prvTraceGetDTS+0x178>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1a8a      	subs	r2, r1, r2
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
 800240c:	e003      	b.n	8002416 <prvTraceGetDTS+0x102>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <prvTraceGetDTS+0x178>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	429a      	cmp	r2, r3
 800241c:	d92c      	bls.n	8002478 <prvTraceGetDTS+0x164>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 800241e:	f7ff fd07 	bl	8001e30 <prvTraceNextFreeEventBufferSlot>
 8002422:	6178      	str	r0, [r7, #20]

		if (xts != (void*)0)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d026      	beq.n	8002478 <prvTraceGetDTS+0x164>
		{
			if (param_maxDTS == 0xFFFF)
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002430:	4293      	cmp	r3, r2
 8002432:	d10b      	bne.n	800244c <prvTraceGetDTS+0x138>
			{
				xts->type = (uint8_t)XTS16;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	22a9      	movs	r2, #169	; 0xa9
 8002438:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	b29a      	uxth	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2200      	movs	r2, #0
 8002448:	705a      	strb	r2, [r3, #1]
 800244a:	e013      	b.n	8002474 <prvTraceGetDTS+0x160>
			}
			else if (param_maxDTS == 0xFF)
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	2bff      	cmp	r3, #255	; 0xff
 8002450:	d10d      	bne.n	800246e <prvTraceGetDTS+0x15a>
			{
				xts->type = (uint8_t)XTS8;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	22a8      	movs	r2, #168	; 0xa8
 8002456:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	b29a      	uxth	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	0e1b      	lsrs	r3, r3, #24
 8002466:	b2da      	uxtb	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	705a      	strb	r2, [r3, #1]
 800246c:	e002      	b.n	8002474 <prvTraceGetDTS+0x160>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 800246e:	480d      	ldr	r0, [pc, #52]	; (80024a4 <prvTraceGetDTS+0x190>)
 8002470:	f7ff fe74 	bl	800215c <prvTraceError>
			}
			prvTraceUpdateCounters();
 8002474:	f7ff ff26 	bl	80022c4 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	b29a      	uxth	r2, r3
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	4013      	ands	r3, r2
 8002480:	b29b      	uxth	r3, r3
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20001bd8 	.word	0x20001bd8
 8002490:	2000022c 	.word	0x2000022c
 8002494:	e0001004 	.word	0xe0001004
 8002498:	20000238 	.word	0x20000238
 800249c:	20000000 	.word	0x20000000
 80024a0:	20001be8 	.word	0x20001be8
 80024a4:	0800aee8 	.word	0x0800aee8

080024a8 <xTraceHardwarePortInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if (((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) || (TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M_NRF_SD)) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void xTraceHardwarePortInitCortexM(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <xTraceHardwarePortInitCortexM+0x54>)
 80024ae:	4a14      	ldr	r2, [pc, #80]	; (8002500 <xTraceHardwarePortInitCortexM+0x58>)
 80024b0:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <xTraceHardwarePortInitCortexM+0x5c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <xTraceHardwarePortInitCortexM+0x5c>)
 80024b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024bc:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <xTraceHardwarePortInitCortexM+0x5c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 80024c6:	4810      	ldr	r0, [pc, #64]	; (8002508 <xTraceHardwarePortInitCortexM+0x60>)
 80024c8:	f7ff fe48 	bl	800215c <prvTraceError>
			break;
 80024cc:	e013      	b.n	80024f6 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <xTraceHardwarePortInitCortexM+0x64>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 80024da:	480d      	ldr	r0, [pc, #52]	; (8002510 <xTraceHardwarePortInitCortexM+0x68>)
 80024dc:	f7ff fe3e 	bl	800215c <prvTraceError>
			break;
 80024e0:	e009      	b.n	80024f6 <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <xTraceHardwarePortInitCortexM+0x6c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <xTraceHardwarePortInitCortexM+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a07      	ldr	r2, [pc, #28]	; (800250c <xTraceHardwarePortInitCortexM+0x64>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e0001fb0 	.word	0xe0001fb0
 8002500:	c5acce55 	.word	0xc5acce55
 8002504:	e000edfc 	.word	0xe000edfc
 8002508:	0800af54 	.word	0x0800af54
 800250c:	e0001000 	.word	0xe0001000
 8002510:	0800af80 	.word	0x0800af80
 8002514:	e0001004 	.word	0xe0001004

08002518 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <prvTracePortGetTimeStamp+0x80>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d107      	bne.n	8002544 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d028      	beq.n	800258c <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <prvTracePortGetTimeStamp+0x84>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
		return;
 8002542:	e023      	b.n	800258c <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <prvTracePortGetTimeStamp+0x88>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <prvTracePortGetTimeStamp+0x8c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	1ad2      	subs	r2, r2, r3
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <prvTracePortGetTimeStamp+0x90>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <prvTracePortGetTimeStamp+0x90>)
 8002568:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <prvTracePortGetTimeStamp+0x84>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4413      	add	r3, r2
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <prvTracePortGetTimeStamp+0x84>)
 8002574:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <prvTracePortGetTimeStamp+0x84>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8002584:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <prvTracePortGetTimeStamp+0x8c>)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e000      	b.n	800258e <prvTracePortGetTimeStamp+0x76>
		return;
 800258c:	bf00      	nop
}
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	2000021c 	.word	0x2000021c
 800259c:	20000220 	.word	0x20000220
 80025a0:	e0001004 	.word	0xe0001004
 80025a4:	20001bec 	.word	0x20001bec
 80025a8:	20001bf0 	.word	0x20001bf0

080025ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b0:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <HAL_Init+0x40>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0d      	ldr	r2, [pc, #52]	; (80025ec <HAL_Init+0x40>)
 80025b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_Init+0x40>)
 80025c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_Init+0x40>)
 80025ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d4:	2003      	movs	r0, #3
 80025d6:	f000 f8d8 	bl	800278a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025da:	200f      	movs	r0, #15
 80025dc:	f7fe fba2 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e0:	f7fe fa42 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023c00 	.word	0x40023c00

080025f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x20>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_IncTick+0x24>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_IncTick+0x24>)
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000014 	.word	0x20000014
 8002614:	20001bf4 	.word	0x20001bf4

08002618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_GetTick+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20001bf4 	.word	0x20001bf4

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <__NVIC_EnableIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ff4c 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b2:	f7ff ff61 	bl	8002678 <__NVIC_GetPriorityGrouping>
 80027b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	6978      	ldr	r0, [r7, #20]
 80027be:	f7ff ffb1 	bl	8002724 <NVIC_EncodePriority>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff80 	bl	80026d0 <__NVIC_SetPriority>
}
 80027d0:	bf00      	nop
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff54 	bl	8002694 <__NVIC_EnableIRQ>
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e16b      	b.n	8002ae8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 815a 	bne.w	8002ae2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	2b02      	cmp	r3, #2
 8002844:	d130      	bne.n	80028a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d017      	beq.n	80028e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d123      	bne.n	8002938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80b4 	beq.w	8002ae2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a5f      	ldr	r2, [pc, #380]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002996:	4a5b      	ldr	r2, [pc, #364]	; (8002b04 <HAL_GPIO_Init+0x310>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_GPIO_Init+0x314>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d02b      	beq.n	8002a1a <HAL_GPIO_Init+0x226>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_GPIO_Init+0x318>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d025      	beq.n	8002a16 <HAL_GPIO_Init+0x222>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a50      	ldr	r2, [pc, #320]	; (8002b10 <HAL_GPIO_Init+0x31c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01f      	beq.n	8002a12 <HAL_GPIO_Init+0x21e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4f      	ldr	r2, [pc, #316]	; (8002b14 <HAL_GPIO_Init+0x320>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d019      	beq.n	8002a0e <HAL_GPIO_Init+0x21a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4e      	ldr	r2, [pc, #312]	; (8002b18 <HAL_GPIO_Init+0x324>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x216>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4d      	ldr	r2, [pc, #308]	; (8002b1c <HAL_GPIO_Init+0x328>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x212>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4c      	ldr	r2, [pc, #304]	; (8002b20 <HAL_GPIO_Init+0x32c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x20e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4b      	ldr	r2, [pc, #300]	; (8002b24 <HAL_GPIO_Init+0x330>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x20a>
 80029fa:	2307      	movs	r3, #7
 80029fc:	e00e      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 80029fe:	2308      	movs	r3, #8
 8002a00:	e00c      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a02:	2306      	movs	r3, #6
 8002a04:	e00a      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a06:	2305      	movs	r3, #5
 8002a08:	e008      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e004      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	f002 0203 	and.w	r2, r2, #3
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	4093      	lsls	r3, r2
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a2c:	4935      	ldr	r1, [pc, #212]	; (8002b04 <HAL_GPIO_Init+0x310>)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5e:	4a32      	ldr	r2, [pc, #200]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a64:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a88:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8e:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002adc:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	f67f ae90 	bls.w	8002810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40013800 	.word	0x40013800
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	40020800 	.word	0x40020800
 8002b14:	40020c00 	.word	0x40020c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40021400 	.word	0x40021400
 8002b20:	40021800 	.word	0x40021800
 8002b24:	40021c00 	.word	0x40021c00
 8002b28:	40013c00 	.word	0x40013c00

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b70:	887a      	ldrh	r2, [r7, #2]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	041a      	lsls	r2, r3, #16
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	887b      	ldrh	r3, [r7, #2]
 8002b7e:	400b      	ands	r3, r1
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f806 	bl	8002bc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 fd9d 	bl	8006730 <USB_GetMode>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 80fb 	bne.w	8002df4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 fd60 	bl	80066c8 <USB_ReadInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80f1 	beq.w	8002df2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fd57 	bl	80066c8 <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c24:	d104      	bne.n	8002c30 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c2e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fd47 	bl	80066c8 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c44:	d104      	bne.n	8002c50 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c4e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fd37 	bl	80066c8 <USB_ReadInterrupts>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c64:	d104      	bne.n	8002c70 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c6e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 fd27 	bl	80066c8 <USB_ReadInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d103      	bne.n	8002c8c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 fd19 	bl	80066c8 <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca0:	d120      	bne.n	8002ce4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002caa:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d113      	bne.n	8002ce4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	6938      	ldr	r0, [r7, #16]
 8002cc0:	f003 fc4a 	bl	8006558 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002cc4:	6938      	ldr	r0, [r7, #16]
 8002cc6:	f003 fc79 	bl	80065bc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7a5b      	ldrb	r3, [r3, #9]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d105      	bne.n	8002cde <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 fd37 	bl	800674c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f007 fc20 	bl	800a524 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fced 	bl	80066c8 <USB_ReadInterrupts>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf8:	d102      	bne.n	8002d00 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f001 fc87 	bl	800460e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 fcdf 	bl	80066c8 <USB_ReadInterrupts>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d106      	bne.n	8002d22 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f007 fbe9 	bl	800a4ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2208      	movs	r2, #8
 8002d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 fcce 	bl	80066c8 <USB_ReadInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d36:	d139      	bne.n	8002dac <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fd42 	bl	80067c6 <USB_HC_ReadInterrupt>
 8002d42:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e025      	b.n	8002d96 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d74:	d106      	bne.n	8002d84 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f859 	bl	8002e34 <HCD_HC_IN_IRQHandler>
 8002d82:	e005      	b.n	8002d90 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 febb 	bl	8003b06 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3301      	adds	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	795b      	ldrb	r3, [r3, #5]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d3d3      	bcc.n	8002d4a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fc89 	bl	80066c8 <USB_ReadInterrupts>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d101      	bne.n	8002dc4 <HAL_HCD_IRQHandler+0x1ea>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_HCD_IRQHandler+0x1ec>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d014      	beq.n	8002df4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0210 	bic.w	r2, r2, #16
 8002dd8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f001 fb38 	bl	8004450 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0210 	orr.w	r2, r2, #16
 8002dee:	619a      	str	r2, [r3, #24]
 8002df0:	e000      	b.n	8002df4 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002df2:	bf00      	nop
    }
  }
}
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_HCD_Stop+0x16>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e00d      	b.n	8002e2c <HAL_HCD_Stop+0x32>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fe03 	bl	8006a28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 fc4b 	bl	80066ee <USB_ReadChInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d11a      	bne.n	8002e98 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2304      	movs	r3, #4
 8002e72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	334d      	adds	r3, #77	; 0x4d
 8002e84:	2207      	movs	r2, #7
 8002e86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fca9 	bl	80067e8 <USB_HC_Halt>
 8002e96:	e09e      	b.n	8002fd6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 fc24 	bl	80066ee <USB_ReadChInterrupts>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb0:	d11b      	bne.n	8002eea <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	334d      	adds	r3, #77	; 0x4d
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f003 fc80 	bl	80067e8 <USB_HC_Halt>
 8002ee8:	e075      	b.n	8002fd6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fbfb 	bl	80066ee <USB_ReadChInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d11a      	bne.n	8002f38 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2308      	movs	r3, #8
 8002f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	334d      	adds	r3, #77	; 0x4d
 8002f24:	2206      	movs	r2, #6
 8002f26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 fc59 	bl	80067e8 <USB_HC_Halt>
 8002f36:	e04e      	b.n	8002fd6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 fbd4 	bl	80066ee <USB_ReadChInterrupts>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f50:	d11b      	bne.n	8002f8a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	334d      	adds	r3, #77	; 0x4d
 8002f76:	2209      	movs	r2, #9
 8002f78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fc30 	bl	80067e8 <USB_HC_Halt>
 8002f88:	e025      	b.n	8002fd6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f003 fbab 	bl	80066ee <USB_ReadChInterrupts>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b80      	cmp	r3, #128	; 0x80
 8002fa0:	d119      	bne.n	8002fd6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	334d      	adds	r3, #77	; 0x4d
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fc09 	bl	80067e8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 fb85 	bl	80066ee <USB_ReadChInterrupts>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	d112      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f003 fbf5 	bl	80067e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	461a      	mov	r2, r3
 800300c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003010:	6093      	str	r3, [r2, #8]
 8003012:	f000 bd75 	b.w	8003b00 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f003 fb65 	bl	80066ee <USB_ReadChInterrupts>
 8003024:	4603      	mov	r3, r0
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	f040 8128 	bne.w	8003280 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303c:	461a      	mov	r2, r3
 800303e:	2320      	movs	r3, #32
 8003040:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	331b      	adds	r3, #27
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d119      	bne.n	800308c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	331b      	adds	r3, #27
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	0151      	lsls	r1, r2, #5
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	440a      	add	r2, r1
 8003082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	799b      	ldrb	r3, [r3, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01b      	beq.n	80030cc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	3330      	adds	r3, #48	; 0x30
 80030a4:	6819      	ldr	r1, [r3, #0]
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	1ac9      	subs	r1, r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4403      	add	r3, r0
 80030c8:	3338      	adds	r3, #56	; 0x38
 80030ca:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	334d      	adds	r3, #77	; 0x4d
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3344      	adds	r3, #68	; 0x44
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	461a      	mov	r2, r3
 8003102:	2301      	movs	r3, #1
 8003104:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3326      	adds	r3, #38	; 0x26
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	3326      	adds	r3, #38	; 0x26
 800312c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800312e:	2b02      	cmp	r3, #2
 8003130:	d110      	bne.n	8003154 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f003 fb54 	bl	80067e8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	461a      	mov	r2, r3
 800314e:	2310      	movs	r3, #16
 8003150:	6093      	str	r3, [r2, #8]
 8003152:	e03d      	b.n	80031d0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3326      	adds	r3, #38	; 0x26
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d00a      	beq.n	8003180 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3326      	adds	r3, #38	; 0x26
 800317a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800317c:	2b01      	cmp	r3, #1
 800317e:	d127      	bne.n	80031d0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	0151      	lsls	r1, r2, #5
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	440a      	add	r2, r1
 8003196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800319a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800319e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	334c      	adds	r3, #76	; 0x4c
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	334c      	adds	r3, #76	; 0x4c
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f007 f9b8 	bl	800a540 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	799b      	ldrb	r3, [r3, #6]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d13b      	bne.n	8003250 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3338      	adds	r3, #56	; 0x38
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4403      	add	r3, r0
 80031f8:	3328      	adds	r3, #40	; 0x28
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	440b      	add	r3, r1
 80031fe:	1e59      	subs	r1, r3, #1
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4403      	add	r3, r0
 800320e:	3328      	adds	r3, #40	; 0x28
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	fbb1 f3f3 	udiv	r3, r1, r3
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8470 	beq.w	8003b00 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	333c      	adds	r3, #60	; 0x3c
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	f083 0301 	eor.w	r3, r3, #1
 8003238:	b2d8      	uxtb	r0, r3
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	333c      	adds	r3, #60	; 0x3c
 8003248:	4602      	mov	r2, r0
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	f000 bc58 	b.w	8003b00 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	333c      	adds	r3, #60	; 0x3c
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	f083 0301 	eor.w	r3, r3, #1
 8003268:	b2d8      	uxtb	r0, r3
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	333c      	adds	r3, #60	; 0x3c
 8003278:	4602      	mov	r2, r0
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	f000 bc40 	b.w	8003b00 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f003 fa30 	bl	80066ee <USB_ReadChInterrupts>
 800328e:	4603      	mov	r3, r0
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b20      	cmp	r3, #32
 8003296:	d131      	bne.n	80032fc <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a4:	461a      	mov	r2, r3
 80032a6:	2320      	movs	r3, #32
 80032a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	331a      	adds	r3, #26
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	f040 841f 	bne.w	8003b00 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	331b      	adds	r3, #27
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334d      	adds	r3, #77	; 0x4d
 80032e6:	2203      	movs	r2, #3
 80032e8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 fa78 	bl	80067e8 <USB_HC_Halt>
 80032f8:	f000 bc02 	b.w	8003b00 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f003 f9f2 	bl	80066ee <USB_ReadChInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b02      	cmp	r3, #2
 8003312:	f040 8305 	bne.w	8003920 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003322:	461a      	mov	r2, r3
 8003324:	2302      	movs	r3, #2
 8003326:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334d      	adds	r3, #77	; 0x4d
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d114      	bne.n	8003368 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	334d      	adds	r3, #77	; 0x4d
 800334e:	2202      	movs	r2, #2
 8003350:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334c      	adds	r3, #76	; 0x4c
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	e2cc      	b.n	8003902 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334d      	adds	r3, #77	; 0x4d
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d114      	bne.n	80033a8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	334d      	adds	r3, #77	; 0x4d
 800338e:	2202      	movs	r2, #2
 8003390:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	334c      	adds	r3, #76	; 0x4c
 80033a2:	2205      	movs	r2, #5
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e2ac      	b.n	8003902 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	334d      	adds	r3, #77	; 0x4d
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b07      	cmp	r3, #7
 80033bc:	d00b      	beq.n	80033d6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	334d      	adds	r3, #77	; 0x4d
 80033ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	f040 80a6 	bne.w	8003522 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	334d      	adds	r3, #77	; 0x4d
 80033e6:	2202      	movs	r2, #2
 80033e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3344      	adds	r3, #68	; 0x44
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1c59      	adds	r1, r3, #1
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4403      	add	r3, r0
 800340a:	3344      	adds	r3, #68	; 0x44
 800340c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	3344      	adds	r3, #68	; 0x44
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d943      	bls.n	80034ac <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	3344      	adds	r3, #68	; 0x44
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	331a      	adds	r3, #26
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d123      	bne.n	8003496 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	331b      	adds	r3, #27
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	331c      	adds	r3, #28
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	440a      	add	r2, r1
 800348c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003494:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	334c      	adds	r3, #76	; 0x4c
 80034a6:	2204      	movs	r2, #4
 80034a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034aa:	e229      	b.n	8003900 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	334c      	adds	r3, #76	; 0x4c
 80034bc:	2202      	movs	r2, #2
 80034be:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3326      	adds	r3, #38	; 0x26
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3326      	adds	r3, #38	; 0x26
 80034e6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	f040 8209 	bne.w	8003900 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003504:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800350c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351a:	461a      	mov	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003520:	e1ee      	b.n	8003900 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	334d      	adds	r3, #77	; 0x4d
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b05      	cmp	r3, #5
 8003536:	f040 80c8 	bne.w	80036ca <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	334d      	adds	r3, #77	; 0x4d
 800354a:	2202      	movs	r2, #2
 800354c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	331b      	adds	r3, #27
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	f040 81ce 	bne.w	8003902 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3326      	adds	r3, #38	; 0x26
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d16b      	bne.n	8003654 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3348      	adds	r3, #72	; 0x48
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	1c59      	adds	r1, r3, #1
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4403      	add	r3, r0
 800359c:	3348      	adds	r3, #72	; 0x48
 800359e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3348      	adds	r3, #72	; 0x48
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d943      	bls.n	800363e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3348      	adds	r3, #72	; 0x48
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	331b      	adds	r3, #27
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3344      	adds	r3, #68	; 0x44
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d809      	bhi.n	8003608 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	331c      	adds	r3, #28
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	0151      	lsls	r1, r2, #5
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	440a      	add	r2, r1
 800361e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	334c      	adds	r3, #76	; 0x4c
 8003638:	2204      	movs	r2, #4
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	e014      	b.n	8003668 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	334c      	adds	r3, #76	; 0x4c
 800364e:	2202      	movs	r2, #2
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e009      	b.n	8003668 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	334c      	adds	r3, #76	; 0x4c
 8003664:	2202      	movs	r2, #2
 8003666:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3326      	adds	r3, #38	; 0x26
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3326      	adds	r3, #38	; 0x26
 800368e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003690:	2b02      	cmp	r3, #2
 8003692:	f040 8136 	bne.w	8003902 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036ac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036b4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e11b      	b.n	8003902 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	334d      	adds	r3, #77	; 0x4d
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	f040 8081 	bne.w	80037e4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	334d      	adds	r3, #77	; 0x4d
 80036f2:	2202      	movs	r2, #2
 80036f4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	331b      	adds	r3, #27
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 80fa 	bne.w	8003902 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	334c      	adds	r3, #76	; 0x4c
 800371e:	2202      	movs	r2, #2
 8003720:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	0151      	lsls	r1, r2, #5
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	440a      	add	r2, r1
 8003738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800373c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003740:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4413      	add	r3, r2
 800374a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	0151      	lsls	r1, r2, #5
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	440a      	add	r2, r1
 8003758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800375c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003760:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	0151      	lsls	r1, r2, #5
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	440a      	add	r2, r1
 8003778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800377c:	f023 0320 	bic.w	r3, r3, #32
 8003780:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3326      	adds	r3, #38	; 0x26
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	3326      	adds	r3, #38	; 0x26
 80037a8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	f040 80a9 	bne.w	8003902 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037c6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037ce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	461a      	mov	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e08e      	b.n	8003902 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	334d      	adds	r3, #77	; 0x4d
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d143      	bne.n	8003882 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	334d      	adds	r3, #77	; 0x4d
 800380a:	2202      	movs	r2, #2
 800380c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	334c      	adds	r3, #76	; 0x4c
 800381e:	2202      	movs	r2, #2
 8003820:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3326      	adds	r3, #38	; 0x26
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	3326      	adds	r3, #38	; 0x26
 8003848:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800384a:	2b02      	cmp	r3, #2
 800384c:	d159      	bne.n	8003902 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003864:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800386c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	e03f      	b.n	8003902 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	334d      	adds	r3, #77	; 0x4d
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d126      	bne.n	80038e6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	334d      	adds	r3, #77	; 0x4d
 80038a8:	2202      	movs	r2, #2
 80038aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3344      	adds	r3, #68	; 0x44
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1c59      	adds	r1, r3, #1
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4403      	add	r3, r0
 80038cc:	3344      	adds	r3, #68	; 0x44
 80038ce:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	334c      	adds	r3, #76	; 0x4c
 80038e0:	2204      	movs	r2, #4
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	e00d      	b.n	8003902 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	334d      	adds	r3, #77	; 0x4d
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	f000 8100 	beq.w	8003afe <HCD_HC_IN_IRQHandler+0xcca>
 80038fe:	e000      	b.n	8003902 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003900:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	334c      	adds	r3, #76	; 0x4c
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f006 fe11 	bl	800a540 <HAL_HCD_HC_NotifyURBChange_Callback>
 800391e:	e0ef      	b.n	8003b00 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f002 fee0 	bl	80066ee <USB_ReadChInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d12f      	bne.n	8003998 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	461a      	mov	r2, r3
 8003946:	2340      	movs	r3, #64	; 0x40
 8003948:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	334d      	adds	r3, #77	; 0x4d
 800395a:	2205      	movs	r2, #5
 800395c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	331a      	adds	r3, #26
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3344      	adds	r3, #68	; 0x44
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	4611      	mov	r1, r2
 8003990:	4618      	mov	r0, r3
 8003992:	f002 ff29 	bl	80067e8 <USB_HC_Halt>
 8003996:	e0b3      	b.n	8003b00 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f002 fea4 	bl	80066ee <USB_ReadChInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	f040 80a7 	bne.w	8003b00 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	3326      	adds	r3, #38	; 0x26
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d11b      	bne.n	8003a00 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3344      	adds	r3, #68	; 0x44
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	334d      	adds	r3, #77	; 0x4d
 80039ec:	2204      	movs	r2, #4
 80039ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f002 fef5 	bl	80067e8 <USB_HC_Halt>
 80039fe:	e03f      	b.n	8003a80 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3326      	adds	r3, #38	; 0x26
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	3326      	adds	r3, #38	; 0x26
 8003a26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d129      	bne.n	8003a80 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3344      	adds	r3, #68	; 0x44
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	799b      	ldrb	r3, [r3, #6]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HCD_HC_IN_IRQHandler+0xc2a>
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	331b      	adds	r3, #27
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d110      	bne.n	8003a80 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	334d      	adds	r3, #77	; 0x4d
 8003a6e:	2204      	movs	r2, #4
 8003a70:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f002 feb4 	bl	80067e8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	331b      	adds	r3, #27
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d129      	bne.n	8003aea <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	331b      	adds	r3, #27
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	0151      	lsls	r1, r2, #5
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	440a      	add	r2, r1
 8003ac0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	0151      	lsls	r1, r2, #5
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	440a      	add	r2, r1
 8003ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ae4:	f043 0320 	orr.w	r3, r3, #32
 8003ae8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af6:	461a      	mov	r2, r3
 8003af8:	2310      	movs	r3, #16
 8003afa:	6093      	str	r3, [r2, #8]
 8003afc:	e000      	b.n	8003b00 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003afe:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b086      	sub	sp, #24
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f002 fde2 	bl	80066ee <USB_ReadChInterrupts>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d11b      	bne.n	8003b6c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	461a      	mov	r2, r3
 8003b42:	2304      	movs	r3, #4
 8003b44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	334d      	adds	r3, #77	; 0x4d
 8003b56:	2207      	movs	r2, #7
 8003b58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f002 fe40 	bl	80067e8 <USB_HC_Halt>
 8003b68:	f000 bc6f 	b.w	800444a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f002 fdba 	bl	80066ee <USB_ReadChInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	f040 8082 	bne.w	8003c8a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b92:	461a      	mov	r2, r3
 8003b94:	2320      	movs	r3, #32
 8003b96:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	3319      	adds	r3, #25
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d124      	bne.n	8003bf8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	3319      	adds	r3, #25
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	334c      	adds	r3, #76	; 0x4c
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	334d      	adds	r3, #77	; 0x4d
 8003be6:	2203      	movs	r2, #3
 8003be8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f002 fdf8 	bl	80067e8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	331a      	adds	r3, #26
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	f040 841d 	bne.w	800444a <HCD_HC_OUT_IRQHandler+0x944>
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	331b      	adds	r3, #27
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 8411 	bne.w	800444a <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	3326      	adds	r3, #38	; 0x26
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d009      	beq.n	8003c52 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	331b      	adds	r3, #27
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	334d      	adds	r3, #77	; 0x4d
 8003c62:	2203      	movs	r2, #3
 8003c64:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f002 fdba 	bl	80067e8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3344      	adds	r3, #68	; 0x44
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e3df      	b.n	800444a <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f002 fd2b 	bl	80066ee <USB_ReadChInterrupts>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca2:	d111      	bne.n	8003cc8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cb6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f002 fd91 	bl	80067e8 <USB_HC_Halt>
 8003cc6:	e3c0      	b.n	800444a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f002 fd0c 	bl	80066ee <USB_ReadChInterrupts>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d168      	bne.n	8003db2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3344      	adds	r3, #68	; 0x44
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f002 fcf6 	bl	80066ee <USB_ReadChInterrupts>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d112      	bne.n	8003d32 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	3319      	adds	r3, #25
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2340      	movs	r3, #64	; 0x40
 8003d30:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	331b      	adds	r3, #27
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d019      	beq.n	8003d7c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	331b      	adds	r3, #27
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	334d      	adds	r3, #77	; 0x4d
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f002 fd1c 	bl	80067e8 <USB_HC_Halt>
 8003db0:	e34b      	b.n	800444a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 fc97 	bl	80066ee <USB_ReadChInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d139      	bne.n	8003e3e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	334d      	adds	r3, #77	; 0x4d
 8003dda:	2205      	movs	r2, #5
 8003ddc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	331a      	adds	r3, #26
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	3319      	adds	r3, #25
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3344      	adds	r3, #68	; 0x44
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f002 fcdf 	bl	80067e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	461a      	mov	r2, r3
 8003e38:	2340      	movs	r3, #64	; 0x40
 8003e3a:	6093      	str	r3, [r2, #8]
 8003e3c:	e305      	b.n	800444a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f002 fc51 	bl	80066ee <USB_ReadChInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d11a      	bne.n	8003e8c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	461a      	mov	r2, r3
 8003e64:	2308      	movs	r3, #8
 8003e66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	334d      	adds	r3, #77	; 0x4d
 8003e78:	2206      	movs	r2, #6
 8003e7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f002 fcaf 	bl	80067e8 <USB_HC_Halt>
 8003e8a:	e2de      	b.n	800444a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f002 fc2a 	bl	80066ee <USB_ReadChInterrupts>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d144      	bne.n	8003f2e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3344      	adds	r3, #68	; 0x44
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	334d      	adds	r3, #77	; 0x4d
 8003ec8:	2204      	movs	r2, #4
 8003eca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	3319      	adds	r3, #25
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d114      	bne.n	8003f0c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	3318      	adds	r3, #24
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3319      	adds	r3, #25
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f002 fc67 	bl	80067e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f26:	461a      	mov	r2, r3
 8003f28:	2310      	movs	r3, #16
 8003f2a:	6093      	str	r3, [r2, #8]
 8003f2c:	e28d      	b.n	800444a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f002 fbd9 	bl	80066ee <USB_ReadChInterrupts>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d169      	bne.n	800401a <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	799b      	ldrb	r3, [r3, #6]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d111      	bne.n	8003f72 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	334d      	adds	r3, #77	; 0x4d
 8003f5e:	2207      	movs	r2, #7
 8003f60:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	4611      	mov	r1, r2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f002 fc3c 	bl	80067e8 <USB_HC_Halt>
 8003f70:	e049      	b.n	8004006 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	3344      	adds	r3, #68	; 0x44
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	1c59      	adds	r1, r3, #1
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4403      	add	r3, r0
 8003f92:	3344      	adds	r3, #68	; 0x44
 8003f94:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3344      	adds	r3, #68	; 0x44
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d922      	bls.n	8003ff2 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3344      	adds	r3, #68	; 0x44
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	334c      	adds	r3, #76	; 0x4c
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	334c      	adds	r3, #76	; 0x4c
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f006 faa8 	bl	800a540 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ff0:	e009      	b.n	8004006 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	334c      	adds	r3, #76	; 0x4c
 8004002:	2202      	movs	r2, #2
 8004004:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4413      	add	r3, r2
 800400e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004012:	461a      	mov	r2, r3
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	6093      	str	r3, [r2, #8]
 8004018:	e217      	b.n	800444a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f002 fb63 	bl	80066ee <USB_ReadChInterrupts>
 8004028:	4603      	mov	r3, r0
 800402a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004032:	d11b      	bne.n	800406c <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	334d      	adds	r3, #77	; 0x4d
 8004044:	2209      	movs	r2, #9
 8004046:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	4611      	mov	r1, r2
 8004050:	4618      	mov	r0, r3
 8004052:	f002 fbc9 	bl	80067e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004062:	461a      	mov	r2, r3
 8004064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004068:	6093      	str	r3, [r2, #8]
 800406a:	e1ee      	b.n	800444a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	4611      	mov	r1, r2
 8004074:	4618      	mov	r0, r3
 8004076:	f002 fb3a 	bl	80066ee <USB_ReadChInterrupts>
 800407a:	4603      	mov	r3, r0
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	f040 81df 	bne.w	8004444 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004092:	461a      	mov	r2, r3
 8004094:	2302      	movs	r3, #2
 8004096:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	334d      	adds	r3, #77	; 0x4d
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	f040 8093 	bne.w	80041d6 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	334d      	adds	r3, #77	; 0x4d
 80040c0:	2202      	movs	r2, #2
 80040c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	334c      	adds	r3, #76	; 0x4c
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	3326      	adds	r3, #38	; 0x26
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d00b      	beq.n	8004106 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3326      	adds	r3, #38	; 0x26
 80040fe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004100:	2b03      	cmp	r3, #3
 8004102:	f040 8190 	bne.w	8004426 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	799b      	ldrb	r3, [r3, #6]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d115      	bne.n	800413a <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	333d      	adds	r3, #61	; 0x3d
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	f083 0301 	eor.w	r3, r3, #1
 8004126:	b2d8      	uxtb	r0, r3
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	333d      	adds	r3, #61	; 0x3d
 8004136:	4602      	mov	r2, r0
 8004138:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	799b      	ldrb	r3, [r3, #6]
 800413e:	2b01      	cmp	r3, #1
 8004140:	f040 8171 	bne.w	8004426 <HCD_HC_OUT_IRQHandler+0x920>
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	3334      	adds	r3, #52	; 0x34
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8165 	beq.w	8004426 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	3334      	adds	r3, #52	; 0x34
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4403      	add	r3, r0
 800417c:	3328      	adds	r3, #40	; 0x28
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	440b      	add	r3, r1
 8004182:	1e59      	subs	r1, r3, #1
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4403      	add	r3, r0
 8004192:	3328      	adds	r3, #40	; 0x28
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	fbb1 f3f3 	udiv	r3, r1, r3
 800419a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 813f 	beq.w	8004426 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	333d      	adds	r3, #61	; 0x3d
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	f083 0301 	eor.w	r3, r3, #1
 80041c0:	b2d8      	uxtb	r0, r3
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	333d      	adds	r3, #61	; 0x3d
 80041d0:	4602      	mov	r2, r0
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e127      	b.n	8004426 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	334d      	adds	r3, #77	; 0x4d
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d120      	bne.n	800422e <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	334d      	adds	r3, #77	; 0x4d
 80041fc:	2202      	movs	r2, #2
 80041fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	331b      	adds	r3, #27
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b01      	cmp	r3, #1
 8004214:	f040 8107 	bne.w	8004426 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	334c      	adds	r3, #76	; 0x4c
 8004228:	2202      	movs	r2, #2
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	e0fb      	b.n	8004426 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	334d      	adds	r3, #77	; 0x4d
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d13a      	bne.n	80042ba <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	334d      	adds	r3, #77	; 0x4d
 8004254:	2202      	movs	r2, #2
 8004256:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	334c      	adds	r3, #76	; 0x4c
 8004268:	2202      	movs	r2, #2
 800426a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	331b      	adds	r3, #27
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b01      	cmp	r3, #1
 8004280:	f040 80d1 	bne.w	8004426 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	331b      	adds	r3, #27
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b6:	6053      	str	r3, [r2, #4]
 80042b8:	e0b5      	b.n	8004426 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	334d      	adds	r3, #77	; 0x4d
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b05      	cmp	r3, #5
 80042ce:	d114      	bne.n	80042fa <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	334d      	adds	r3, #77	; 0x4d
 80042e0:	2202      	movs	r2, #2
 80042e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	334c      	adds	r3, #76	; 0x4c
 80042f4:	2202      	movs	r2, #2
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e095      	b.n	8004426 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	334d      	adds	r3, #77	; 0x4d
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b06      	cmp	r3, #6
 800430e:	d114      	bne.n	800433a <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	334d      	adds	r3, #77	; 0x4d
 8004320:	2202      	movs	r2, #2
 8004322:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	334c      	adds	r3, #76	; 0x4c
 8004334:	2205      	movs	r2, #5
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	e075      	b.n	8004426 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	334d      	adds	r3, #77	; 0x4d
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b07      	cmp	r3, #7
 800434e:	d00a      	beq.n	8004366 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	334d      	adds	r3, #77	; 0x4d
 8004360:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004362:	2b09      	cmp	r3, #9
 8004364:	d170      	bne.n	8004448 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004366:	78fa      	ldrb	r2, [r7, #3]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	334d      	adds	r3, #77	; 0x4d
 8004376:	2202      	movs	r2, #2
 8004378:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	3344      	adds	r3, #68	; 0x44
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	1c59      	adds	r1, r3, #1
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4403      	add	r3, r0
 800439a:	3344      	adds	r3, #68	; 0x44
 800439c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	3344      	adds	r3, #68	; 0x44
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d914      	bls.n	80043de <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	3344      	adds	r3, #68	; 0x44
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	334c      	adds	r3, #76	; 0x4c
 80043d8:	2204      	movs	r2, #4
 80043da:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043dc:	e022      	b.n	8004424 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	334c      	adds	r3, #76	; 0x4c
 80043ee:	2202      	movs	r2, #2
 80043f0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004408:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004410:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4413      	add	r3, r2
 800441a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004424:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	334c      	adds	r3, #76	; 0x4c
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f006 f87f 	bl	800a540 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004442:	e002      	b.n	800444a <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004448:	bf00      	nop
  }
}
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	0c5b      	lsrs	r3, r3, #17
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004484:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d004      	beq.n	8004496 <HCD_RXQLVL_IRQHandler+0x46>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b05      	cmp	r3, #5
 8004490:	f000 80b6 	beq.w	8004600 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004494:	e0b7      	b.n	8004606 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80b3 	beq.w	8004604 <HCD_RXQLVL_IRQHandler+0x1b4>
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4613      	mov	r3, r2
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	332c      	adds	r3, #44	; 0x2c
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a7 	beq.w	8004604 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	3338      	adds	r3, #56	; 0x38
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	18d1      	adds	r1, r2, r3
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4613      	mov	r3, r2
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4403      	add	r3, r0
 80044da:	3334      	adds	r3, #52	; 0x34
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4299      	cmp	r1, r3
 80044e0:	f200 8083 	bhi.w	80045ea <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4613      	mov	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	332c      	adds	r3, #44	; 0x2c
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	b292      	uxth	r2, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	f002 f88a 	bl	8006618 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	332c      	adds	r3, #44	; 0x2c
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	18d1      	adds	r1, r2, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4403      	add	r3, r0
 8004528:	332c      	adds	r3, #44	; 0x2c
 800452a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	3338      	adds	r3, #56	; 0x38
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	18d1      	adds	r1, r2, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4403      	add	r3, r0
 8004550:	3338      	adds	r3, #56	; 0x38
 8004552:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	4413      	add	r3, r2
 800455c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	0cdb      	lsrs	r3, r3, #19
 8004564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004568:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4613      	mov	r3, r2
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	3328      	adds	r3, #40	; 0x28
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4293      	cmp	r3, r2
 8004582:	d13f      	bne.n	8004604 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d03c      	beq.n	8004604 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	4413      	add	r3, r2
 8004592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045a0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045a8:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	333c      	adds	r3, #60	; 0x3c
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	f083 0301 	eor.w	r3, r3, #1
 80045d2:	b2d8      	uxtb	r0, r3
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4613      	mov	r3, r2
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	333c      	adds	r3, #60	; 0x3c
 80045e4:	4602      	mov	r2, r0
 80045e6:	701a      	strb	r2, [r3, #0]
      break;
 80045e8:	e00c      	b.n	8004604 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4613      	mov	r3, r2
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	1a9b      	subs	r3, r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	334c      	adds	r3, #76	; 0x4c
 80045fa:	2204      	movs	r2, #4
 80045fc:	701a      	strb	r2, [r3, #0]
      break;
 80045fe:	e001      	b.n	8004604 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004600:	bf00      	nop
 8004602:	e000      	b.n	8004606 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004604:	bf00      	nop
  }
}
 8004606:	bf00      	nop
 8004608:	3728      	adds	r7, #40	; 0x28
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800463a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d10b      	bne.n	800465e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f005 ff59 	bl	800a508 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b08      	cmp	r3, #8
 8004666:	d132      	bne.n	80046ce <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f043 0308 	orr.w	r3, r3, #8
 800466e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d126      	bne.n	80046c8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	7a5b      	ldrb	r3, [r3, #9]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d113      	bne.n	80046aa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800468c:	d106      	bne.n	800469c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2102      	movs	r1, #2
 8004694:	4618      	mov	r0, r3
 8004696:	f002 f859 	bl	800674c <USB_InitFSLSPClkSel>
 800469a:	e011      	b.n	80046c0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f002 f852 	bl	800674c <USB_InitFSLSPClkSel>
 80046a8:	e00a      	b.n	80046c0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	79db      	ldrb	r3, [r3, #7]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d106      	bne.n	80046c0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046b8:	461a      	mov	r2, r3
 80046ba:	f64e 2360 	movw	r3, #60000	; 0xea60
 80046be:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f005 ff4f 	bl	800a564 <HAL_HCD_PortEnabled_Callback>
 80046c6:	e002      	b.n	80046ce <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f005 ff59 	bl	800a580 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d103      	bne.n	80046e0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f043 0320 	orr.w	r3, r3, #32
 80046de:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046e6:	461a      	mov	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	6013      	str	r3, [r2, #0]
}
 80046ec:	bf00      	nop
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e12b      	b.n	800495e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc f9d0 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	; 0x24
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004758:	f001 fa20 	bl	8005b9c <HAL_RCC_GetPCLK1Freq>
 800475c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4a81      	ldr	r2, [pc, #516]	; (8004968 <HAL_I2C_Init+0x274>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d807      	bhi.n	8004778 <HAL_I2C_Init+0x84>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a80      	ldr	r2, [pc, #512]	; (800496c <HAL_I2C_Init+0x278>)
 800476c:	4293      	cmp	r3, r2
 800476e:	bf94      	ite	ls
 8004770:	2301      	movls	r3, #1
 8004772:	2300      	movhi	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e006      	b.n	8004786 <HAL_I2C_Init+0x92>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a7d      	ldr	r2, [pc, #500]	; (8004970 <HAL_I2C_Init+0x27c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	bf94      	ite	ls
 8004780:	2301      	movls	r3, #1
 8004782:	2300      	movhi	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e0e7      	b.n	800495e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a78      	ldr	r2, [pc, #480]	; (8004974 <HAL_I2C_Init+0x280>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	0c9b      	lsrs	r3, r3, #18
 8004798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a6a      	ldr	r2, [pc, #424]	; (8004968 <HAL_I2C_Init+0x274>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d802      	bhi.n	80047c8 <HAL_I2C_Init+0xd4>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	3301      	adds	r3, #1
 80047c6:	e009      	b.n	80047dc <HAL_I2C_Init+0xe8>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	4a69      	ldr	r2, [pc, #420]	; (8004978 <HAL_I2C_Init+0x284>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	099b      	lsrs	r3, r3, #6
 80047da:	3301      	adds	r3, #1
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	495c      	ldr	r1, [pc, #368]	; (8004968 <HAL_I2C_Init+0x274>)
 80047f8:	428b      	cmp	r3, r1
 80047fa:	d819      	bhi.n	8004830 <HAL_I2C_Init+0x13c>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1e59      	subs	r1, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	fbb1 f3f3 	udiv	r3, r1, r3
 800480a:	1c59      	adds	r1, r3, #1
 800480c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004810:	400b      	ands	r3, r1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_I2C_Init+0x138>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1e59      	subs	r1, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fbb1 f3f3 	udiv	r3, r1, r3
 8004824:	3301      	adds	r3, #1
 8004826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482a:	e051      	b.n	80048d0 <HAL_I2C_Init+0x1dc>
 800482c:	2304      	movs	r3, #4
 800482e:	e04f      	b.n	80048d0 <HAL_I2C_Init+0x1dc>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d111      	bne.n	800485c <HAL_I2C_Init+0x168>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1e58      	subs	r0, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	440b      	add	r3, r1
 8004846:	fbb0 f3f3 	udiv	r3, r0, r3
 800484a:	3301      	adds	r3, #1
 800484c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e012      	b.n	8004882 <HAL_I2C_Init+0x18e>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1e58      	subs	r0, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	0099      	lsls	r1, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004872:	3301      	adds	r3, #1
 8004874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_I2C_Init+0x196>
 8004886:	2301      	movs	r3, #1
 8004888:	e022      	b.n	80048d0 <HAL_I2C_Init+0x1dc>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10e      	bne.n	80048b0 <HAL_I2C_Init+0x1bc>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1e58      	subs	r0, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6859      	ldr	r1, [r3, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	440b      	add	r3, r1
 80048a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a4:	3301      	adds	r3, #1
 80048a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ae:	e00f      	b.n	80048d0 <HAL_I2C_Init+0x1dc>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1e58      	subs	r0, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	0099      	lsls	r1, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	6809      	ldr	r1, [r1, #0]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6911      	ldr	r1, [r2, #16]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	68d2      	ldr	r2, [r2, #12]
 800490a:	4311      	orrs	r1, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	430b      	orrs	r3, r1
 8004912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	000186a0 	.word	0x000186a0
 800496c:	001e847f 	.word	0x001e847f
 8004970:	003d08ff 	.word	0x003d08ff
 8004974:	431bde83 	.word	0x431bde83
 8004978:	10624dd3 	.word	0x10624dd3

0800497c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e128      	b.n	8004be0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a90      	ldr	r2, [pc, #576]	; (8004be8 <HAL_I2S_Init+0x26c>)
 80049a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7fc f8d1 	bl	8000b50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049c4:	f023 030f 	bic.w	r3, r3, #15
 80049c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2202      	movs	r2, #2
 80049d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d060      	beq.n	8004a9c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80049e2:	2310      	movs	r3, #16
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e001      	b.n	80049ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80049e8:	2320      	movs	r3, #32
 80049ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d802      	bhi.n	80049fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80049fa:	2001      	movs	r0, #1
 80049fc:	f001 fa0a 	bl	8005e14 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a00:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0a:	d125      	bne.n	8004a58 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d010      	beq.n	8004a36 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	461a      	mov	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	3305      	adds	r3, #5
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	e01f      	b.n	8004a76 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	461a      	mov	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a52:	3305      	adds	r3, #5
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	e00e      	b.n	8004a76 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	461a      	mov	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	3305      	adds	r3, #5
 8004a74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4a5c      	ldr	r2, [pc, #368]	; (8004bec <HAL_I2S_Init+0x270>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	08db      	lsrs	r3, r3, #3
 8004a80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	e003      	b.n	8004aa4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d902      	bls.n	8004ab0 <HAL_I2S_Init+0x134>
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2bff      	cmp	r3, #255	; 0xff
 8004aae:	d907      	bls.n	8004ac0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab4:	f043 0210 	orr.w	r2, r3, #16
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e08f      	b.n	8004be0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	ea42 0103 	orr.w	r1, r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ade:	f023 030f 	bic.w	r3, r3, #15
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6851      	ldr	r1, [r2, #4]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6892      	ldr	r2, [r2, #8]
 8004aea:	4311      	orrs	r1, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	68d2      	ldr	r2, [r2, #12]
 8004af0:	4311      	orrs	r1, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6992      	ldr	r2, [r2, #24]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b02:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d161      	bne.n	8004bd0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a38      	ldr	r2, [pc, #224]	; (8004bf0 <HAL_I2S_Init+0x274>)
 8004b10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a37      	ldr	r2, [pc, #220]	; (8004bf4 <HAL_I2S_Init+0x278>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <HAL_I2S_Init+0x1a4>
 8004b1c:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <HAL_I2S_Init+0x27c>)
 8004b1e:	e001      	b.n	8004b24 <HAL_I2S_Init+0x1a8>
 8004b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	4932      	ldr	r1, [pc, #200]	; (8004bf4 <HAL_I2S_Init+0x278>)
 8004b2c:	428a      	cmp	r2, r1
 8004b2e:	d101      	bne.n	8004b34 <HAL_I2S_Init+0x1b8>
 8004b30:	4a31      	ldr	r2, [pc, #196]	; (8004bf8 <HAL_I2S_Init+0x27c>)
 8004b32:	e001      	b.n	8004b38 <HAL_I2S_Init+0x1bc>
 8004b34:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004b38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b3c:	f023 030f 	bic.w	r3, r3, #15
 8004b40:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <HAL_I2S_Init+0x278>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d101      	bne.n	8004b50 <HAL_I2S_Init+0x1d4>
 8004b4c:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <HAL_I2S_Init+0x27c>)
 8004b4e:	e001      	b.n	8004b54 <HAL_I2S_Init+0x1d8>
 8004b50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b54:	2202      	movs	r2, #2
 8004b56:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a25      	ldr	r2, [pc, #148]	; (8004bf4 <HAL_I2S_Init+0x278>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d101      	bne.n	8004b66 <HAL_I2S_Init+0x1ea>
 8004b62:	4b25      	ldr	r3, [pc, #148]	; (8004bf8 <HAL_I2S_Init+0x27c>)
 8004b64:	e001      	b.n	8004b6a <HAL_I2S_Init+0x1ee>
 8004b66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b76:	d003      	beq.n	8004b80 <HAL_I2S_Init+0x204>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d103      	bne.n	8004b88 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e001      	b.n	8004b8c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b96:	4313      	orrs	r3, r2
 8004b98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004baa:	4313      	orrs	r3, r2
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	897b      	ldrh	r3, [r7, #10]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bb8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a0d      	ldr	r2, [pc, #52]	; (8004bf4 <HAL_I2S_Init+0x278>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d101      	bne.n	8004bc8 <HAL_I2S_Init+0x24c>
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <HAL_I2S_Init+0x27c>)
 8004bc6:	e001      	b.n	8004bcc <HAL_I2S_Init+0x250>
 8004bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bcc:	897a      	ldrh	r2, [r7, #10]
 8004bce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	08004cf3 	.word	0x08004cf3
 8004bec:	cccccccd 	.word	0xcccccccd
 8004bf0:	08004e09 	.word	0x08004e09
 8004bf4:	40003800 	.word	0x40003800
 8004bf8:	40003400 	.word	0x40003400

08004bfc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	881a      	ldrh	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	1c9a      	adds	r2, r3, #2
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10e      	bne.n	8004c8c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff ffb8 	bl	8004bfc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10e      	bne.n	8004cea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cda:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ff93 	bl	8004c10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d13a      	bne.n	8004d84 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d109      	bne.n	8004d2c <I2S_IRQHandler+0x3a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d102      	bne.n	8004d2c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff ffb4 	bl	8004c94 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d32:	2b40      	cmp	r3, #64	; 0x40
 8004d34:	d126      	bne.n	8004d84 <I2S_IRQHandler+0x92>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d11f      	bne.n	8004d84 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f043 0202 	orr.w	r2, r3, #2
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff ff50 	bl	8004c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d136      	bne.n	8004dfe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d109      	bne.n	8004dae <I2S_IRQHandler+0xbc>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da4:	2b80      	cmp	r3, #128	; 0x80
 8004da6:	d102      	bne.n	8004dae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff ff45 	bl	8004c38 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d122      	bne.n	8004dfe <I2S_IRQHandler+0x10c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d11b      	bne.n	8004dfe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dd4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	f043 0204 	orr.w	r2, r3, #4
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff ff13 	bl	8004c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dfe:	bf00      	nop
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a92      	ldr	r2, [pc, #584]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d101      	bne.n	8004e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004e22:	4b92      	ldr	r3, [pc, #584]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e24:	e001      	b.n	8004e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a8b      	ldr	r2, [pc, #556]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d101      	bne.n	8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004e40:	4b8a      	ldr	r3, [pc, #552]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e42:	e001      	b.n	8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004e44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e54:	d004      	beq.n	8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 8099 	bne.w	8004f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d107      	bne.n	8004e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f925 	bl	80050c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d107      	bne.n	8004e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f9c8 	bl	8005224 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b40      	cmp	r3, #64	; 0x40
 8004e9c:	d13a      	bne.n	8004f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d035      	beq.n	8004f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a6e      	ldr	r2, [pc, #440]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004eb2:	4b6e      	ldr	r3, [pc, #440]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004eb4:	e001      	b.n	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4969      	ldr	r1, [pc, #420]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ec2:	428b      	cmp	r3, r1
 8004ec4:	d101      	bne.n	8004eca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004ec6:	4b69      	ldr	r3, [pc, #420]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ec8:	e001      	b.n	8004ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ece:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ed2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ee2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f043 0202 	orr.w	r2, r3, #2
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff fe88 	bl	8004c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	f040 80c3 	bne.w	80050a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80bd 	beq.w	80050a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a49      	ldr	r2, [pc, #292]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004f46:	4b49      	ldr	r3, [pc, #292]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f48:	e001      	b.n	8004f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4944      	ldr	r1, [pc, #272]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f56:	428b      	cmp	r3, r1
 8004f58:	d101      	bne.n	8004f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f5a:	4b44      	ldr	r3, [pc, #272]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f5c:	e001      	b.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f66:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	f043 0204 	orr.w	r2, r3, #4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fe4a 	bl	8004c24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f90:	e089      	b.n	80050a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d107      	bne.n	8004fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8be 	bl	8005128 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d107      	bne.n	8004fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f8fd 	bl	80051c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d12f      	bne.n	8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d02a      	beq.n	8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fe8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d101      	bne.n	8004ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ff6:	e001      	b.n	8004ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4919      	ldr	r1, [pc, #100]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005004:	428b      	cmp	r3, r1
 8005006:	d101      	bne.n	800500c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005008:	4b18      	ldr	r3, [pc, #96]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800500a:	e001      	b.n	8005010 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800500c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005010:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005014:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	f043 0202 	orr.w	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff fdfa 	bl	8004c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b08      	cmp	r3, #8
 8005038:	d136      	bne.n	80050a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d031      	beq.n	80050a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a07      	ldr	r2, [pc, #28]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d101      	bne.n	8005052 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800504e:	4b07      	ldr	r3, [pc, #28]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005050:	e001      	b.n	8005056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4902      	ldr	r1, [pc, #8]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800505e:	428b      	cmp	r3, r1
 8005060:	d106      	bne.n	8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005062:	4b02      	ldr	r3, [pc, #8]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005064:	e006      	b.n	8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005066:	bf00      	nop
 8005068:	40003800 	.word	0x40003800
 800506c:	40003400 	.word	0x40003400
 8005070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005074:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005078:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005088:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	f043 0204 	orr.w	r2, r3, #4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff fdc0 	bl	8004c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050a4:	e000      	b.n	80050a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050a6:	bf00      	nop
}
 80050a8:	bf00      	nop
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	1c99      	adds	r1, r3, #2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6251      	str	r1, [r2, #36]	; 0x24
 80050d6:	881a      	ldrh	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d113      	bne.n	800511e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005104:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ffc9 	bl	80050b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	1c99      	adds	r1, r3, #2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6251      	str	r1, [r2, #36]	; 0x24
 800513a:	8819      	ldrh	r1, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d101      	bne.n	800514a <I2SEx_TxISR_I2SExt+0x22>
 8005146:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <I2SEx_TxISR_I2SExt+0x94>)
 8005148:	e001      	b.n	800514e <I2SEx_TxISR_I2SExt+0x26>
 800514a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800514e:	460a      	mov	r2, r1
 8005150:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d121      	bne.n	80051ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d101      	bne.n	8005178 <I2SEx_TxISR_I2SExt+0x50>
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <I2SEx_TxISR_I2SExt+0x94>)
 8005176:	e001      	b.n	800517c <I2SEx_TxISR_I2SExt+0x54>
 8005178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	490d      	ldr	r1, [pc, #52]	; (80051b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005184:	428b      	cmp	r3, r1
 8005186:	d101      	bne.n	800518c <I2SEx_TxISR_I2SExt+0x64>
 8005188:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <I2SEx_TxISR_I2SExt+0x94>)
 800518a:	e001      	b.n	8005190 <I2SEx_TxISR_I2SExt+0x68>
 800518c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005190:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005194:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d106      	bne.n	80051ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff81 	bl	80050b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40003800 	.word	0x40003800
 80051bc:	40003400 	.word	0x40003400

080051c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68d8      	ldr	r0, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	1c99      	adds	r1, r3, #2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051d8:	b282      	uxth	r2, r0
 80051da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d113      	bne.n	800521c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005202:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff ff4a 	bl	80050b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a20      	ldr	r2, [pc, #128]	; (80052b4 <I2SEx_RxISR_I2SExt+0x90>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d101      	bne.n	800523a <I2SEx_RxISR_I2SExt+0x16>
 8005236:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005238:	e001      	b.n	800523e <I2SEx_RxISR_I2SExt+0x1a>
 800523a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800523e:	68d8      	ldr	r0, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	1c99      	adds	r1, r3, #2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	62d1      	str	r1, [r2, #44]	; 0x2c
 800524a:	b282      	uxth	r2, r0
 800524c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d121      	bne.n	80052aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a12      	ldr	r2, [pc, #72]	; (80052b4 <I2SEx_RxISR_I2SExt+0x90>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d101      	bne.n	8005274 <I2SEx_RxISR_I2SExt+0x50>
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005272:	e001      	b.n	8005278 <I2SEx_RxISR_I2SExt+0x54>
 8005274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	490d      	ldr	r1, [pc, #52]	; (80052b4 <I2SEx_RxISR_I2SExt+0x90>)
 8005280:	428b      	cmp	r3, r1
 8005282:	d101      	bne.n	8005288 <I2SEx_RxISR_I2SExt+0x64>
 8005284:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005286:	e001      	b.n	800528c <I2SEx_RxISR_I2SExt+0x68>
 8005288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800528c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005290:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff ff03 	bl	80050b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40003800 	.word	0x40003800
 80052b8:	40003400 	.word	0x40003400

080052bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e267      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d075      	beq.n	80053c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052da:	4b88      	ldr	r3, [pc, #544]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d00c      	beq.n	8005300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052e6:	4b85      	ldr	r3, [pc, #532]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d112      	bne.n	8005318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f2:	4b82      	ldr	r3, [pc, #520]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fe:	d10b      	bne.n	8005318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005300:	4b7e      	ldr	r3, [pc, #504]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d05b      	beq.n	80053c4 <HAL_RCC_OscConfig+0x108>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d157      	bne.n	80053c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e242      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005320:	d106      	bne.n	8005330 <HAL_RCC_OscConfig+0x74>
 8005322:	4b76      	ldr	r3, [pc, #472]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a75      	ldr	r2, [pc, #468]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e01d      	b.n	800536c <HAL_RCC_OscConfig+0xb0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005338:	d10c      	bne.n	8005354 <HAL_RCC_OscConfig+0x98>
 800533a:	4b70      	ldr	r3, [pc, #448]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a6f      	ldr	r2, [pc, #444]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	4b6d      	ldr	r3, [pc, #436]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a6c      	ldr	r2, [pc, #432]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800534c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e00b      	b.n	800536c <HAL_RCC_OscConfig+0xb0>
 8005354:	4b69      	ldr	r3, [pc, #420]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a68      	ldr	r2, [pc, #416]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800535a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	4b66      	ldr	r3, [pc, #408]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a65      	ldr	r2, [pc, #404]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005374:	f7fd f950 	bl	8002618 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800537c:	f7fd f94c 	bl	8002618 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b64      	cmp	r3, #100	; 0x64
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e207      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538e:	4b5b      	ldr	r3, [pc, #364]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0f0      	beq.n	800537c <HAL_RCC_OscConfig+0xc0>
 800539a:	e014      	b.n	80053c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539c:	f7fd f93c 	bl	8002618 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a4:	f7fd f938 	bl	8002618 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1f3      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b6:	4b51      	ldr	r3, [pc, #324]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0xe8>
 80053c2:	e000      	b.n	80053c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d063      	beq.n	800549a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053d2:	4b4a      	ldr	r3, [pc, #296]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053de:	4b47      	ldr	r3, [pc, #284]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d11c      	bne.n	8005424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ea:	4b44      	ldr	r3, [pc, #272]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d116      	bne.n	8005424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f6:	4b41      	ldr	r3, [pc, #260]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <HAL_RCC_OscConfig+0x152>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d001      	beq.n	800540e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e1c7      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540e:	4b3b      	ldr	r3, [pc, #236]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4937      	ldr	r1, [pc, #220]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005422:	e03a      	b.n	800549a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d020      	beq.n	800546e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800542c:	4b34      	ldr	r3, [pc, #208]	; (8005500 <HAL_RCC_OscConfig+0x244>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7fd f8f1 	bl	8002618 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800543a:	f7fd f8ed 	bl	8002618 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e1a8      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544c:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005458:	4b28      	ldr	r3, [pc, #160]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4925      	ldr	r1, [pc, #148]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005468:	4313      	orrs	r3, r2
 800546a:	600b      	str	r3, [r1, #0]
 800546c:	e015      	b.n	800549a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <HAL_RCC_OscConfig+0x244>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fd f8d0 	bl	8002618 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800547c:	f7fd f8cc 	bl	8002618 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e187      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548e:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d036      	beq.n	8005514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <HAL_RCC_OscConfig+0x248>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b4:	f7fd f8b0 	bl	8002618 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054bc:	f7fd f8ac 	bl	8002618 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e167      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80054d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x200>
 80054da:	e01b      	b.n	8005514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_RCC_OscConfig+0x248>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e2:	f7fd f899 	bl	8002618 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e8:	e00e      	b.n	8005508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ea:	f7fd f895 	bl	8002618 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d907      	bls.n	8005508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e150      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
 80054fc:	40023800 	.word	0x40023800
 8005500:	42470000 	.word	0x42470000
 8005504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005508:	4b88      	ldr	r3, [pc, #544]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800550a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1ea      	bne.n	80054ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8097 	beq.w	8005650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005526:	4b81      	ldr	r3, [pc, #516]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10f      	bne.n	8005552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	4b7d      	ldr	r3, [pc, #500]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	4a7c      	ldr	r2, [pc, #496]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800553c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005540:	6413      	str	r3, [r2, #64]	; 0x40
 8005542:	4b7a      	ldr	r3, [pc, #488]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005552:	4b77      	ldr	r3, [pc, #476]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d118      	bne.n	8005590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800555e:	4b74      	ldr	r3, [pc, #464]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a73      	ldr	r2, [pc, #460]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800556a:	f7fd f855 	bl	8002618 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005572:	f7fd f851 	bl	8002618 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e10c      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005584:	4b6a      	ldr	r3, [pc, #424]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d106      	bne.n	80055a6 <HAL_RCC_OscConfig+0x2ea>
 8005598:	4b64      	ldr	r3, [pc, #400]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	4a63      	ldr	r2, [pc, #396]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6713      	str	r3, [r2, #112]	; 0x70
 80055a4:	e01c      	b.n	80055e0 <HAL_RCC_OscConfig+0x324>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x30c>
 80055ae:	4b5f      	ldr	r3, [pc, #380]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	4a5e      	ldr	r2, [pc, #376]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055b4:	f043 0304 	orr.w	r3, r3, #4
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ba:	4b5c      	ldr	r3, [pc, #368]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	4a5b      	ldr	r2, [pc, #364]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	6713      	str	r3, [r2, #112]	; 0x70
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0x324>
 80055c8:	4b58      	ldr	r3, [pc, #352]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	4a57      	ldr	r2, [pc, #348]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	6713      	str	r3, [r2, #112]	; 0x70
 80055d4:	4b55      	ldr	r3, [pc, #340]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	4a54      	ldr	r2, [pc, #336]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055da:	f023 0304 	bic.w	r3, r3, #4
 80055de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fd f816 	bl	8002618 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7fd f812 	bl	8002618 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e0cb      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005606:	4b49      	ldr	r3, [pc, #292]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0ee      	beq.n	80055f0 <HAL_RCC_OscConfig+0x334>
 8005612:	e014      	b.n	800563e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005614:	f7fd f800 	bl	8002618 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561a:	e00a      	b.n	8005632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561c:	f7fc fffc 	bl	8002618 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	; 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e0b5      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005632:	4b3e      	ldr	r3, [pc, #248]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ee      	bne.n	800561c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d105      	bne.n	8005650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005644:	4b39      	ldr	r3, [pc, #228]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	4a38      	ldr	r2, [pc, #224]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800564a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80a1 	beq.w	800579c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800565a:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b08      	cmp	r3, #8
 8005664:	d05c      	beq.n	8005720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d141      	bne.n	80056f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566e:	4b31      	ldr	r3, [pc, #196]	; (8005734 <HAL_RCC_OscConfig+0x478>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005674:	f7fc ffd0 	bl	8002618 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567c:	f7fc ffcc 	bl	8002618 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e087      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568e:	4b27      	ldr	r3, [pc, #156]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69da      	ldr	r2, [r3, #28]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	019b      	lsls	r3, r3, #6
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	3b01      	subs	r3, #1
 80056b4:	041b      	lsls	r3, r3, #16
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	061b      	lsls	r3, r3, #24
 80056be:	491b      	ldr	r1, [pc, #108]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056c4:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <HAL_RCC_OscConfig+0x478>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ca:	f7fc ffa5 	bl	8002618 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d2:	f7fc ffa1 	bl	8002618 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e05c      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x416>
 80056f0:	e054      	b.n	800579c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f2:	4b10      	ldr	r3, [pc, #64]	; (8005734 <HAL_RCC_OscConfig+0x478>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fc ff8e 	bl	8002618 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005700:	f7fc ff8a 	bl	8002618 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e045      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x444>
 800571e:	e03d      	b.n	800579c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d107      	bne.n	8005738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e038      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
 800572c:	40023800 	.word	0x40023800
 8005730:	40007000 	.word	0x40007000
 8005734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005738:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <HAL_RCC_OscConfig+0x4ec>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d028      	beq.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d121      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575e:	429a      	cmp	r2, r3
 8005760:	d11a      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005768:	4013      	ands	r3, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800576e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005770:	4293      	cmp	r3, r2
 8005772:	d111      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	3b01      	subs	r3, #1
 8005782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d107      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800

080057ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0cc      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057c0:	4b68      	ldr	r3, [pc, #416]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d90c      	bls.n	80057e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ce:	4b65      	ldr	r3, [pc, #404]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d6:	4b63      	ldr	r3, [pc, #396]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d001      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0b8      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d020      	beq.n	8005836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005800:	4b59      	ldr	r3, [pc, #356]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	4a58      	ldr	r2, [pc, #352]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800580a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005818:	4b53      	ldr	r3, [pc, #332]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4a52      	ldr	r2, [pc, #328]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005824:	4b50      	ldr	r3, [pc, #320]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	494d      	ldr	r1, [pc, #308]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	4313      	orrs	r3, r2
 8005834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d044      	beq.n	80058cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d107      	bne.n	800585a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584a:	4b47      	ldr	r3, [pc, #284]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d119      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e07f      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d003      	beq.n	800586a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005866:	2b03      	cmp	r3, #3
 8005868:	d107      	bne.n	800587a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586a:	4b3f      	ldr	r3, [pc, #252]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e06f      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587a:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e067      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800588a:	4b37      	ldr	r3, [pc, #220]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f023 0203 	bic.w	r2, r3, #3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	4934      	ldr	r1, [pc, #208]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	4313      	orrs	r3, r2
 800589a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800589c:	f7fc febc 	bl	8002618 <HAL_GetTick>
 80058a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a2:	e00a      	b.n	80058ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a4:	f7fc feb8 	bl	8002618 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e04f      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	4b2b      	ldr	r3, [pc, #172]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 020c 	and.w	r2, r3, #12
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d1eb      	bne.n	80058a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058cc:	4b25      	ldr	r3, [pc, #148]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d20c      	bcs.n	80058f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b22      	ldr	r3, [pc, #136]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e2:	4b20      	ldr	r3, [pc, #128]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d001      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e032      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4916      	ldr	r1, [pc, #88]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800591e:	4b12      	ldr	r3, [pc, #72]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	490e      	ldr	r1, [pc, #56]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005932:	f000 f821 	bl	8005978 <HAL_RCC_GetSysClockFreq>
 8005936:	4602      	mov	r2, r0
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	490a      	ldr	r1, [pc, #40]	; (800596c <HAL_RCC_ClockConfig+0x1c0>)
 8005944:	5ccb      	ldrb	r3, [r1, r3]
 8005946:	fa22 f303 	lsr.w	r3, r2, r3
 800594a:	4a09      	ldr	r2, [pc, #36]	; (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800594c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800594e:	4b09      	ldr	r3, [pc, #36]	; (8005974 <HAL_RCC_ClockConfig+0x1c8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f7fb f9e6 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40023c00 	.word	0x40023c00
 8005968:	40023800 	.word	0x40023800
 800596c:	0800afc4 	.word	0x0800afc4
 8005970:	20000000 	.word	0x20000000
 8005974:	20000010 	.word	0x20000010

08005978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800597c:	b094      	sub	sp, #80	; 0x50
 800597e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	647b      	str	r3, [r7, #68]	; 0x44
 8005984:	2300      	movs	r3, #0
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005988:	2300      	movs	r3, #0
 800598a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005990:	4b79      	ldr	r3, [pc, #484]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 030c 	and.w	r3, r3, #12
 8005998:	2b08      	cmp	r3, #8
 800599a:	d00d      	beq.n	80059b8 <HAL_RCC_GetSysClockFreq+0x40>
 800599c:	2b08      	cmp	r3, #8
 800599e:	f200 80e1 	bhi.w	8005b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_RCC_GetSysClockFreq+0x34>
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d003      	beq.n	80059b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80059aa:	e0db      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059ac:	4b73      	ldr	r3, [pc, #460]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80059ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059b0:	e0db      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059b2:	4b73      	ldr	r3, [pc, #460]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80059b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059b6:	e0d8      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059b8:	4b6f      	ldr	r3, [pc, #444]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059c2:	4b6d      	ldr	r3, [pc, #436]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d063      	beq.n	8005a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ce:	4b6a      	ldr	r3, [pc, #424]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	099b      	lsrs	r3, r3, #6
 80059d4:	2200      	movs	r2, #0
 80059d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e0:	633b      	str	r3, [r7, #48]	; 0x30
 80059e2:	2300      	movs	r3, #0
 80059e4:	637b      	str	r3, [r7, #52]	; 0x34
 80059e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059ea:	4622      	mov	r2, r4
 80059ec:	462b      	mov	r3, r5
 80059ee:	f04f 0000 	mov.w	r0, #0
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	0159      	lsls	r1, r3, #5
 80059f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059fc:	0150      	lsls	r0, r2, #5
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4621      	mov	r1, r4
 8005a04:	1a51      	subs	r1, r2, r1
 8005a06:	6139      	str	r1, [r7, #16]
 8005a08:	4629      	mov	r1, r5
 8005a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a1c:	4659      	mov	r1, fp
 8005a1e:	018b      	lsls	r3, r1, #6
 8005a20:	4651      	mov	r1, sl
 8005a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a26:	4651      	mov	r1, sl
 8005a28:	018a      	lsls	r2, r1, #6
 8005a2a:	4651      	mov	r1, sl
 8005a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8005a30:	4659      	mov	r1, fp
 8005a32:	eb63 0901 	sbc.w	r9, r3, r1
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a4a:	4690      	mov	r8, r2
 8005a4c:	4699      	mov	r9, r3
 8005a4e:	4623      	mov	r3, r4
 8005a50:	eb18 0303 	adds.w	r3, r8, r3
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	462b      	mov	r3, r5
 8005a58:	eb49 0303 	adc.w	r3, r9, r3
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	024b      	lsls	r3, r1, #9
 8005a6e:	4621      	mov	r1, r4
 8005a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a74:	4621      	mov	r1, r4
 8005a76:	024a      	lsls	r2, r1, #9
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7e:	2200      	movs	r2, #0
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a88:	f7fa fba2 	bl	80001d0 <__aeabi_uldivmod>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4613      	mov	r3, r2
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a94:	e058      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a96:	4b38      	ldr	r3, [pc, #224]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	099b      	lsrs	r3, r3, #6
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005aa6:	623b      	str	r3, [r7, #32]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	f04f 0100 	mov.w	r1, #0
 8005abc:	0159      	lsls	r1, r3, #5
 8005abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac2:	0150      	lsls	r0, r2, #5
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4641      	mov	r1, r8
 8005aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ace:	4649      	mov	r1, r9
 8005ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8005aec:	eb63 050b 	sbc.w	r5, r3, fp
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	00eb      	lsls	r3, r5, #3
 8005afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005afe:	00e2      	lsls	r2, r4, #3
 8005b00:	4614      	mov	r4, r2
 8005b02:	461d      	mov	r5, r3
 8005b04:	4643      	mov	r3, r8
 8005b06:	18e3      	adds	r3, r4, r3
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	eb45 0303 	adc.w	r3, r5, r3
 8005b10:	607b      	str	r3, [r7, #4]
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b1e:	4629      	mov	r1, r5
 8005b20:	028b      	lsls	r3, r1, #10
 8005b22:	4621      	mov	r1, r4
 8005b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b28:	4621      	mov	r1, r4
 8005b2a:	028a      	lsls	r2, r1, #10
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b32:	2200      	movs	r2, #0
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	61fa      	str	r2, [r7, #28]
 8005b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b3c:	f7fa fb48 	bl	80001d0 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4613      	mov	r3, r2
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	3301      	adds	r3, #1
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b62:	e002      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3750      	adds	r7, #80	; 0x50
 8005b70:	46bd      	mov	sp, r7
 8005b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	00f42400 	.word	0x00f42400
 8005b80:	007a1200 	.word	0x007a1200

08005b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b88:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000000 	.word	0x20000000

08005b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ba0:	f7ff fff0 	bl	8005b84 <HAL_RCC_GetHCLKFreq>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	0a9b      	lsrs	r3, r3, #10
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	4903      	ldr	r1, [pc, #12]	; (8005bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bb2:	5ccb      	ldrb	r3, [r1, r3]
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	0800afd4 	.word	0x0800afd4

08005bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bc8:	f7ff ffdc 	bl	8005b84 <HAL_RCC_GetHCLKFreq>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	0b5b      	lsrs	r3, r3, #13
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	4903      	ldr	r1, [pc, #12]	; (8005be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bda:	5ccb      	ldrb	r3, [r1, r3]
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40023800 	.word	0x40023800
 8005be8:	0800afd4 	.word	0x0800afd4

08005bec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	220f      	movs	r2, #15
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005bfc:	4b12      	ldr	r3, [pc, #72]	; (8005c48 <HAL_RCC_GetClockConfig+0x5c>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 0203 	and.w	r2, r3, #3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <HAL_RCC_GetClockConfig+0x5c>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <HAL_RCC_GetClockConfig+0x5c>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <HAL_RCC_GetClockConfig+0x5c>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	08db      	lsrs	r3, r3, #3
 8005c26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c2e:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <HAL_RCC_GetClockConfig+0x60>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0207 	and.w	r2, r3, #7
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	40023c00 	.word	0x40023c00

08005c50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d035      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c78:	4b62      	ldr	r3, [pc, #392]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c7e:	f7fc fccb 	bl	8002618 <HAL_GetTick>
 8005c82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c86:	f7fc fcc7 	bl	8002618 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e0b0      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c98:	4b5b      	ldr	r3, [pc, #364]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f0      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	019a      	lsls	r2, r3, #6
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	071b      	lsls	r3, r3, #28
 8005cb0:	4955      	ldr	r1, [pc, #340]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cb8:	4b52      	ldr	r3, [pc, #328]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cbe:	f7fc fcab 	bl	8002618 <HAL_GetTick>
 8005cc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cc6:	f7fc fca7 	bl	8002618 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e090      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cd8:	4b4b      	ldr	r3, [pc, #300]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0f0      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8083 	beq.w	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	4b44      	ldr	r3, [pc, #272]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	4a43      	ldr	r2, [pc, #268]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d00:	6413      	str	r3, [r2, #64]	; 0x40
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d0e:	4b3f      	ldr	r3, [pc, #252]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a3e      	ldr	r2, [pc, #248]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1a:	f7fc fc7d 	bl	8002618 <HAL_GetTick>
 8005d1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d20:	e008      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d22:	f7fc fc79 	bl	8002618 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e062      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d34:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f0      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d40:	4b31      	ldr	r3, [pc, #196]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d02f      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d028      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d5e:	4b2a      	ldr	r3, [pc, #168]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d68:	4b29      	ldr	r3, [pc, #164]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d6e:	4b28      	ldr	r3, [pc, #160]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d74:	4a24      	ldr	r2, [pc, #144]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d7a:	4b23      	ldr	r3, [pc, #140]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d114      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d86:	f7fc fc47 	bl	8002618 <HAL_GetTick>
 8005d8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8c:	e00a      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d8e:	f7fc fc43 	bl	8002618 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e02a      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da4:	4b18      	ldr	r3, [pc, #96]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0ee      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dbc:	d10d      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005dbe:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd2:	490d      	ldr	r1, [pc, #52]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	608b      	str	r3, [r1, #8]
 8005dd8:	e005      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dda:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005de4:	6093      	str	r3, [r2, #8]
 8005de6:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df2:	4905      	ldr	r1, [pc, #20]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	42470068 	.word	0x42470068
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	42470e40 	.word	0x42470e40

08005e14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d13f      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d006      	beq.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e48:	d12f      	bne.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e4a:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e4c:	617b      	str	r3, [r7, #20]
          break;
 8005e4e:	e02f      	b.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e50:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e5c:	d108      	bne.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e5e:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e66:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	e007      	b.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e78:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e80:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e86:	099b      	lsrs	r3, r3, #6
 8005e88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e94:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e9a:	0f1b      	lsrs	r3, r3, #28
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea6:	617b      	str	r3, [r7, #20]
          break;
 8005ea8:	e002      	b.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
          break;
 8005eae:	bf00      	nop
        }
      }
      break;
 8005eb0:	e000      	b.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005eb2:	bf00      	nop
    }
  }
  return frequency;
 8005eb4:	697b      	ldr	r3, [r7, #20]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	00bb8000 	.word	0x00bb8000
 8005ecc:	007a1200 	.word	0x007a1200
 8005ed0:	00f42400 	.word	0x00f42400

08005ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e07b      	b.n	8005fde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d108      	bne.n	8005f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef6:	d009      	beq.n	8005f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	61da      	str	r2, [r3, #28]
 8005efe:	e005      	b.n	8005f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fa fe92 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f90:	ea42 0103 	orr.w	r1, r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	0c1b      	lsrs	r3, r3, #16
 8005faa:	f003 0104 	and.w	r1, r3, #4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	f003 0210 	and.w	r2, r3, #16
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e041      	b.n	800607c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d106      	bne.n	8006012 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7fa fe67 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3304      	adds	r3, #4
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f000 f9b5 	bl	8006394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	d001      	beq.n	800609c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e04e      	b.n	800613a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a23      	ldr	r2, [pc, #140]	; (8006148 <HAL_TIM_Base_Start_IT+0xc4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d022      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0x80>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c6:	d01d      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0x80>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1f      	ldr	r2, [pc, #124]	; (800614c <HAL_TIM_Base_Start_IT+0xc8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0x80>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <HAL_TIM_Base_Start_IT+0xcc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0x80>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1c      	ldr	r2, [pc, #112]	; (8006154 <HAL_TIM_Base_Start_IT+0xd0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0x80>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <HAL_TIM_Base_Start_IT+0xd4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0x80>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a19      	ldr	r2, [pc, #100]	; (800615c <HAL_TIM_Base_Start_IT+0xd8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0x80>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a18      	ldr	r2, [pc, #96]	; (8006160 <HAL_TIM_Base_Start_IT+0xdc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d111      	bne.n	8006128 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b06      	cmp	r3, #6
 8006114:	d010      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0201 	orr.w	r2, r2, #1
 8006124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006126:	e007      	b.n	8006138 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40010000 	.word	0x40010000
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40010400 	.word	0x40010400
 800615c:	40014000 	.word	0x40014000
 8006160:	40001800 	.word	0x40001800

08006164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d020      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01b      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0202 	mvn.w	r2, #2
 8006198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f8d2 	bl	8006358 <HAL_TIM_IC_CaptureCallback>
 80061b4:	e005      	b.n	80061c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f8c4 	bl	8006344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f8d5 	bl	800636c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d020      	beq.n	8006214 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01b      	beq.n	8006214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0204 	mvn.w	r2, #4
 80061e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2202      	movs	r2, #2
 80061ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f8ac 	bl	8006358 <HAL_TIM_IC_CaptureCallback>
 8006200:	e005      	b.n	800620e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f89e 	bl	8006344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f8af 	bl	800636c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d020      	beq.n	8006260 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01b      	beq.n	8006260 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0208 	mvn.w	r2, #8
 8006230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2204      	movs	r2, #4
 8006236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f886 	bl	8006358 <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f878 	bl	8006344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f889 	bl	800636c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	2b00      	cmp	r3, #0
 8006268:	d020      	beq.n	80062ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01b      	beq.n	80062ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0210 	mvn.w	r2, #16
 800627c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2208      	movs	r2, #8
 8006282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f860 	bl	8006358 <HAL_TIM_IC_CaptureCallback>
 8006298:	e005      	b.n	80062a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f852 	bl	8006344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f863 	bl	800636c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00c      	beq.n	80062d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0201 	mvn.w	r2, #1
 80062c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fa fbb4 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00c      	beq.n	80062f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f906 	bl	8006500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00c      	beq.n	8006318 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f834 	bl	8006380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00c      	beq.n	800633c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0220 	mvn.w	r2, #32
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f8d8 	bl	80064ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a46      	ldr	r2, [pc, #280]	; (80064c0 <TIM_Base_SetConfig+0x12c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d013      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b2:	d00f      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a43      	ldr	r2, [pc, #268]	; (80064c4 <TIM_Base_SetConfig+0x130>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00b      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a42      	ldr	r2, [pc, #264]	; (80064c8 <TIM_Base_SetConfig+0x134>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d007      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a41      	ldr	r2, [pc, #260]	; (80064cc <TIM_Base_SetConfig+0x138>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a40      	ldr	r2, [pc, #256]	; (80064d0 <TIM_Base_SetConfig+0x13c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d108      	bne.n	80063e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a35      	ldr	r2, [pc, #212]	; (80064c0 <TIM_Base_SetConfig+0x12c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d02b      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f4:	d027      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a32      	ldr	r2, [pc, #200]	; (80064c4 <TIM_Base_SetConfig+0x130>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d023      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a31      	ldr	r2, [pc, #196]	; (80064c8 <TIM_Base_SetConfig+0x134>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d01f      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a30      	ldr	r2, [pc, #192]	; (80064cc <TIM_Base_SetConfig+0x138>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d01b      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2f      	ldr	r2, [pc, #188]	; (80064d0 <TIM_Base_SetConfig+0x13c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d017      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2e      	ldr	r2, [pc, #184]	; (80064d4 <TIM_Base_SetConfig+0x140>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2d      	ldr	r2, [pc, #180]	; (80064d8 <TIM_Base_SetConfig+0x144>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00f      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a2c      	ldr	r2, [pc, #176]	; (80064dc <TIM_Base_SetConfig+0x148>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00b      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a2b      	ldr	r2, [pc, #172]	; (80064e0 <TIM_Base_SetConfig+0x14c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d007      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a2a      	ldr	r2, [pc, #168]	; (80064e4 <TIM_Base_SetConfig+0x150>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a29      	ldr	r2, [pc, #164]	; (80064e8 <TIM_Base_SetConfig+0x154>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d108      	bne.n	8006458 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a10      	ldr	r2, [pc, #64]	; (80064c0 <TIM_Base_SetConfig+0x12c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_Base_SetConfig+0xf8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a12      	ldr	r2, [pc, #72]	; (80064d0 <TIM_Base_SetConfig+0x13c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d103      	bne.n	8006494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d105      	bne.n	80064b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	611a      	str	r2, [r3, #16]
  }
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40000800 	.word	0x40000800
 80064cc:	40000c00 	.word	0x40000c00
 80064d0:	40010400 	.word	0x40010400
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800
 80064e0:	40001800 	.word	0x40001800
 80064e4:	40001c00 	.word	0x40001c00
 80064e8:	40002000 	.word	0x40002000

080064ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f043 0201 	orr.w	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f023 0201 	bic.w	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006572:	d901      	bls.n	8006578 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e01b      	b.n	80065b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	daf2      	bge.n	8006566 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	019b      	lsls	r3, r3, #6
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800659c:	d901      	bls.n	80065a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e006      	b.n	80065b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d0f0      	beq.n	8006590 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3301      	adds	r3, #1
 80065cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065d4:	d901      	bls.n	80065da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e018      	b.n	800660c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	daf2      	bge.n	80065c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2210      	movs	r2, #16
 80065ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3301      	adds	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065f8:	d901      	bls.n	80065fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e006      	b.n	800660c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0310 	and.w	r3, r3, #16
 8006606:	2b10      	cmp	r3, #16
 8006608:	d0f0      	beq.n	80065ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006618:	b480      	push	{r7}
 800661a:	b08b      	sub	sp, #44	; 0x2c
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	089b      	lsrs	r3, r3, #2
 8006632:	b29b      	uxth	r3, r3
 8006634:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800663e:	2300      	movs	r3, #0
 8006640:	623b      	str	r3, [r7, #32]
 8006642:	e014      	b.n	800666e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	3301      	adds	r3, #1
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	3301      	adds	r3, #1
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	3301      	adds	r3, #1
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	3301      	adds	r3, #1
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	3301      	adds	r3, #1
 800666c:	623b      	str	r3, [r7, #32]
 800666e:	6a3a      	ldr	r2, [r7, #32]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	429a      	cmp	r2, r3
 8006674:	d3e6      	bcc.n	8006644 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006676:	8bfb      	ldrh	r3, [r7, #30]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01e      	beq.n	80066ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006686:	461a      	mov	r2, r3
 8006688:	f107 0310 	add.w	r3, r7, #16
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
 800669c:	b2da      	uxtb	r2, r3
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	701a      	strb	r2, [r3, #0]
      i++;
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	3301      	adds	r3, #1
 80066a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	3301      	adds	r3, #1
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80066ae:	8bfb      	ldrh	r3, [r7, #30]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066b4:	8bfb      	ldrh	r3, [r7, #30]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1ea      	bne.n	8006690 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066bc:	4618      	mov	r0, r3
 80066be:	372c      	adds	r7, #44	; 0x2c
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4013      	ands	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066e0:	68fb      	ldr	r3, [r7, #12]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	4013      	ands	r3, r2
 8006720:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006722:	68bb      	ldr	r3, [r7, #8]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f003 0301 	and.w	r3, r3, #1
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006784:	4313      	orrs	r3, r2
 8006786:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d107      	bne.n	800679e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006794:	461a      	mov	r2, r3
 8006796:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800679a:	6053      	str	r3, [r2, #4]
 800679c:	e00c      	b.n	80067b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d107      	bne.n	80067b4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067aa:	461a      	mov	r2, r3
 80067ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80067b0:	6053      	str	r3, [r2, #4]
 80067b2:	e001      	b.n	80067b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	b29b      	uxth	r3, r3
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b089      	sub	sp, #36	; 0x24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	0c9b      	lsrs	r3, r3, #18
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	0fdb      	lsrs	r3, r3, #31
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	0fdb      	lsrs	r3, r3, #31
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b20      	cmp	r3, #32
 800684c:	d10d      	bne.n	800686a <USB_HC_Halt+0x82>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <USB_HC_Halt+0x82>
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d002      	beq.n	8006866 <USB_HC_Halt+0x7e>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2b03      	cmp	r3, #3
 8006864:	d101      	bne.n	800686a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	e0d8      	b.n	8006a1c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <USB_HC_Halt+0x8e>
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d173      	bne.n	800695e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	440a      	add	r2, r1
 800688c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006894:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d14a      	bne.n	8006938 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d133      	bne.n	8006916 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	3301      	adds	r3, #1
 80068f2:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068fa:	d82e      	bhi.n	800695a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	4413      	add	r3, r2
 8006904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800690e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006912:	d0ec      	beq.n	80068ee <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006914:	e081      	b.n	8006a1a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	440a      	add	r2, r1
 800692c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006934:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006936:	e070      	b.n	8006a1a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	4413      	add	r3, r2
 8006940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	440a      	add	r2, r1
 800694e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006956:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006958:	e05f      	b.n	8006a1a <USB_HC_Halt+0x232>
            break;
 800695a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800695c:	e05d      	b.n	8006a1a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	440a      	add	r2, r1
 8006974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800697c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d133      	bne.n	80069f6 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069ac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069cc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069da:	d81d      	bhi.n	8006a18 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f2:	d0ec      	beq.n	80069ce <USB_HC_Halt+0x1e6>
 80069f4:	e011      	b.n	8006a1a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	e000      	b.n	8006a1a <USB_HC_Halt+0x232>
          break;
 8006a18:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3724      	adds	r7, #36	; 0x24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff fd7a 	bl	8006536 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a42:	2110      	movs	r1, #16
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff fd87 	bl	8006558 <USB_FlushTxFifo>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff fdb1 	bl	80065bc <USB_FlushRxFifo>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e01f      	b.n	8006aaa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b0f      	cmp	r3, #15
 8006aae:	d9dc      	bls.n	8006a6a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e034      	b.n	8006b20 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006acc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ad4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006adc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	461a      	mov	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006afc:	d80c      	bhi.n	8006b18 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b14:	d0ec      	beq.n	8006af0 <USB_StopHost+0xc8>
 8006b16:	e000      	b.n	8006b1a <USB_StopHost+0xf2>
        break;
 8006b18:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	61bb      	str	r3, [r7, #24]
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b0f      	cmp	r3, #15
 8006b24:	d9c7      	bls.n	8006ab6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b32:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff fce9 	bl	8006514 <USB_EnableGlobalInt>

  return ret;
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f804 	bl	8006b70 <USBH_HandleSof>
}
 8006b68:	bf00      	nop
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b0b      	cmp	r3, #11
 8006b80:	d10a      	bne.n	8006b98 <USBH_HandleSof+0x28>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4798      	blx	r3
  }
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	f000 f8ae 	bl	8006d28 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006bcc:	bf00      	nop
}
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006be4:	bf00      	nop
}
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c24:	2200      	movs	r2, #0
 8006c26:	4619      	mov	r1, r3
 8006c28:	f000 f87e 	bl	8006d28 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f003 fca0 	bl	800a59c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	791b      	ldrb	r3, [r3, #4]
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f830 	bl	8006cc8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	795b      	ldrb	r3, [r3, #5]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f82a 	bl	8006cc8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006c88:	2200      	movs	r2, #0
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f000 f84c 	bl	8006d28 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f000 f835 	bl	8006d28 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	2b0f      	cmp	r3, #15
 8006cd8:	d80d      	bhi.n	8006cf6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	33e0      	adds	r3, #224	; 0xe0
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	33e0      	adds	r3, #224	; 0xe0
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d0a:	f3ef 8305 	mrs	r3, IPSR
 8006d0e:	607b      	str	r3, [r7, #4]
  return(result);
 8006d10:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bf14      	ite	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	2300      	moveq	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <osMessagePut+0x1e>
    ticks = 1;
 8006d42:	2301      	movs	r3, #1
 8006d44:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006d46:	f7ff ffdd 	bl	8006d04 <inHandlerMode>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d018      	beq.n	8006d82 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006d50:	f107 0210 	add.w	r2, r7, #16
 8006d54:	f107 0108 	add.w	r1, r7, #8
 8006d58:	2300      	movs	r3, #0
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 fc58 	bl	8007610 <xQueueGenericSendFromISR>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d001      	beq.n	8006d6a <osMessagePut+0x42>
      return osErrorOS;
 8006d66:	23ff      	movs	r3, #255	; 0xff
 8006d68:	e018      	b.n	8006d9c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d014      	beq.n	8006d9a <osMessagePut+0x72>
 8006d70:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <osMessagePut+0x7c>)
 8006d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	e00b      	b.n	8006d9a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006d82:	f107 0108 	add.w	r1, r7, #8
 8006d86:	2300      	movs	r3, #0
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 fa16 	bl	80071bc <xQueueGenericSend>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d001      	beq.n	8006d9a <osMessagePut+0x72>
      return osErrorOS;
 8006d96:	23ff      	movs	r3, #255	; 0xff
 8006d98:	e000      	b.n	8006d9c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	e000ed04 	.word	0xe000ed04

08006da8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f103 0208 	add.w	r2, r3, #8
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f103 0208 	add.w	r2, r3, #8
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f103 0208 	add.w	r2, r3, #8
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	601a      	str	r2, [r3, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e60:	d103      	bne.n	8006e6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e00c      	b.n	8006e84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e002      	b.n	8006e78 <vListInsert+0x2e>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d2f6      	bcs.n	8006e72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	601a      	str	r2, [r3, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6892      	ldr	r2, [r2, #8]
 8006ed2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6852      	ldr	r2, [r2, #4]
 8006edc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d103      	bne.n	8006ef0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	1e5a      	subs	r2, r3, #1
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10a      	bne.n	8006f3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f36:	bf00      	nop
 8006f38:	e7fe      	b.n	8006f38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f3a:	f002 ffb3 	bl	8009ea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f4a:	fb01 f303 	mul.w	r3, r1, r3
 8006f4e:	441a      	add	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	68f9      	ldr	r1, [r7, #12]
 8006f6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	441a      	add	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	22ff      	movs	r2, #255	; 0xff
 8006f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	22ff      	movs	r2, #255	; 0xff
 8006f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d114      	bne.n	8006fba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01a      	beq.n	8006fce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3310      	adds	r3, #16
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 fe35 	bl	8008c0c <xTaskRemoveFromEventList>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fa8:	4b0c      	ldr	r3, [pc, #48]	; (8006fdc <xQueueGenericReset+0xcc>)
 8006faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	e009      	b.n	8006fce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3310      	adds	r3, #16
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff fef2 	bl	8006da8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3324      	adds	r3, #36	; 0x24
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff feed 	bl	8006da8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fce:	f002 ff99 	bl	8009f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fd2:	2301      	movs	r3, #1
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	e000ed04 	.word	0xe000ed04

08006fe0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	; 0x28
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	613b      	str	r3, [r7, #16]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	3354      	adds	r3, #84	; 0x54
 8007018:	4618      	mov	r0, r3
 800701a:	f003 f865 	bl	800a0e8 <pvPortMalloc>
 800701e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00e      	beq.n	8007044 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	3354      	adds	r3, #84	; 0x54
 800702e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007030:	79fa      	ldrb	r2, [r7, #7]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	4613      	mov	r3, r2
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f825 	bl	800708c <prvInitialiseNewQueue>
 8007042:	e01a      	b.n	800707a <xQueueGenericCreate+0x9a>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8007044:	f7f9 ffed 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8007048:	4603      	mov	r3, r0
 800704a:	4618      	mov	r0, r3
 800704c:	f7f9 ff68 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8007050:	4603      	mov	r3, r0
 8007052:	461a      	mov	r2, r3
 8007054:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <xQueueGenericCreate+0xa4>)
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	4013      	ands	r3, r2
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00c      	beq.n	800707a <xQueueGenericCreate+0x9a>
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <xQueueGenericCreate+0xa8>)
 8007064:	5cd3      	ldrb	r3, [r2, r3]
 8007066:	3340      	adds	r3, #64	; 0x40
 8007068:	b2db      	uxtb	r3, r3
 800706a:	4618      	mov	r0, r3
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	4a06      	ldr	r2, [pc, #24]	; (8007088 <xQueueGenericCreate+0xa8>)
 8007070:	5cd3      	ldrb	r3, [r2, r3]
 8007072:	2200      	movs	r2, #0
 8007074:	4619      	mov	r1, r3
 8007076:	f7fa fc75 	bl	8001964 <prvTraceStoreKernelCall>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800707a:	69bb      	ldr	r3, [r7, #24]
	}
 800707c:	4618      	mov	r0, r3
 800707e:	3720      	adds	r7, #32
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	2000023c 	.word	0x2000023c
 8007088:	20000004 	.word	0x20000004

0800708c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800708c:	b5b0      	push	{r4, r5, r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d103      	bne.n	80070a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	6a3a      	ldr	r2, [r7, #32]
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e002      	b.n	80070ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070ba:	2101      	movs	r1, #1
 80070bc:	6a38      	ldr	r0, [r7, #32]
 80070be:	f7ff ff27 	bl	8006f10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	78fa      	ldrb	r2, [r7, #3]
 80070c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	2200      	movs	r2, #0
 80070ce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80070d0:	6a38      	ldr	r0, [r7, #32]
 80070d2:	f7f9 ff0c 	bl	8000eee <prvTraceGetQueueType>
 80070d6:	4603      	mov	r3, r0
 80070d8:	461a      	mov	r2, r3
 80070da:	4b35      	ldr	r3, [pc, #212]	; (80071b0 <prvInitialiseNewQueue+0x124>)
 80070dc:	5c9b      	ldrb	r3, [r3, r2]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fa ff06 	bl	8001ef0 <prvTraceGetObjectHandle>
 80070e4:	4603      	mov	r3, r0
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	4619      	mov	r1, r3
 80070ea:	6a38      	ldr	r0, [r7, #32]
 80070ec:	f7f9 ff6d 	bl	8000fca <prvTraceSetQueueNumberLow16>
 80070f0:	4b30      	ldr	r3, [pc, #192]	; (80071b4 <prvInitialiseNewQueue+0x128>)
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	4619      	mov	r1, r3
 80070f6:	6a38      	ldr	r0, [r7, #32]
 80070f8:	f7f9 ff7d 	bl	8000ff6 <prvTraceSetQueueNumberHigh16>
 80070fc:	6a38      	ldr	r0, [r7, #32]
 80070fe:	f7f9 fef6 	bl	8000eee <prvTraceGetQueueType>
 8007102:	4603      	mov	r3, r0
 8007104:	461a      	mov	r2, r3
 8007106:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <prvInitialiseNewQueue+0x124>)
 8007108:	5c9c      	ldrb	r4, [r3, r2]
 800710a:	6a38      	ldr	r0, [r7, #32]
 800710c:	f7f9 ff42 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007110:	4603      	mov	r3, r0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	4619      	mov	r1, r3
 8007116:	4620      	mov	r0, r4
 8007118:	f7fa ff82 	bl	8002020 <prvMarkObjectAsUsed>
 800711c:	f7f9 ff81 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8007120:	4603      	mov	r3, r0
 8007122:	4618      	mov	r0, r3
 8007124:	f7f9 fefc 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	4b22      	ldr	r3, [pc, #136]	; (80071b8 <prvInitialiseNewQueue+0x12c>)
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	4013      	ands	r3, r2
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d025      	beq.n	8007184 <prvInitialiseNewQueue+0xf8>
 8007138:	6a38      	ldr	r0, [r7, #32]
 800713a:	f7f9 ff38 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 800713e:	4603      	mov	r3, r0
 8007140:	461a      	mov	r2, r3
 8007142:	4b1d      	ldr	r3, [pc, #116]	; (80071b8 <prvInitialiseNewQueue+0x12c>)
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	4013      	ands	r3, r2
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01a      	beq.n	8007184 <prvInitialiseNewQueue+0xf8>
 800714e:	6a38      	ldr	r0, [r7, #32]
 8007150:	f7f9 fecd 	bl	8000eee <prvTraceGetQueueType>
 8007154:	4603      	mov	r3, r0
 8007156:	461a      	mov	r2, r3
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <prvInitialiseNewQueue+0x124>)
 800715a:	5c9b      	ldrb	r3, [r3, r2]
 800715c:	3318      	adds	r3, #24
 800715e:	b2db      	uxtb	r3, r3
 8007160:	461d      	mov	r5, r3
 8007162:	6a38      	ldr	r0, [r7, #32]
 8007164:	f7f9 fec3 	bl	8000eee <prvTraceGetQueueType>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <prvInitialiseNewQueue+0x124>)
 800716e:	5c9c      	ldrb	r4, [r3, r2]
 8007170:	6a38      	ldr	r0, [r7, #32]
 8007172:	f7f9 ff0f 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007176:	4603      	mov	r3, r0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	4621      	mov	r1, r4
 800717e:	4628      	mov	r0, r5
 8007180:	f7fa fbf0 	bl	8001964 <prvTraceStoreKernelCall>
 8007184:	6a38      	ldr	r0, [r7, #32]
 8007186:	f7f9 feb2 	bl	8000eee <prvTraceGetQueueType>
 800718a:	4603      	mov	r3, r0
 800718c:	461a      	mov	r2, r3
 800718e:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <prvInitialiseNewQueue+0x124>)
 8007190:	5c9c      	ldrb	r4, [r3, r2]
 8007192:	6a38      	ldr	r0, [r7, #32]
 8007194:	f7f9 fefe 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007198:	4603      	mov	r3, r0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2200      	movs	r2, #0
 800719e:	4619      	mov	r1, r3
 80071a0:	4620      	mov	r0, r4
 80071a2:	f7fa fde1 	bl	8001d68 <prvTraceSetObjectState>
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bdb0      	pop	{r4, r5, r7, pc}
 80071ae:	bf00      	nop
 80071b0:	20000004 	.word	0x20000004
 80071b4:	2000023e 	.word	0x2000023e
 80071b8:	2000023c 	.word	0x2000023c

080071bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071bc:	b5b0      	push	{r4, r5, r7, lr}
 80071be:	b08e      	sub	sp, #56	; 0x38
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071ca:	2300      	movs	r3, #0
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <xQueueGenericSend+0x32>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d103      	bne.n	80071fc <xQueueGenericSend+0x40>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <xQueueGenericSend+0x44>
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <xQueueGenericSend+0x46>
 8007200:	2300      	movs	r3, #0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <xQueueGenericSend+0x60>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	623b      	str	r3, [r7, #32]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d103      	bne.n	800722a <xQueueGenericSend+0x6e>
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <xQueueGenericSend+0x72>
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <xQueueGenericSend+0x74>
 800722e:	2300      	movs	r3, #0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <xQueueGenericSend+0x8e>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	61fb      	str	r3, [r7, #28]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800724a:	f001 fed1 	bl	8008ff0 <xTaskGetSchedulerState>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <xQueueGenericSend+0x9e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <xQueueGenericSend+0xa2>
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <xQueueGenericSend+0xa4>
 800725e:	2300      	movs	r3, #0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <xQueueGenericSend+0xbe>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	61bb      	str	r3, [r7, #24]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800727a:	f002 fe13 	bl	8009ea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007286:	429a      	cmp	r2, r3
 8007288:	d303      	bcc.n	8007292 <xQueueGenericSend+0xd6>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b02      	cmp	r3, #2
 800728e:	f040 80a0 	bne.w	80073d2 <xQueueGenericSend+0x216>
			{
				traceQUEUE_SEND( pxQueue );
 8007292:	f7f9 fec6 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8007296:	4603      	mov	r3, r0
 8007298:	4618      	mov	r0, r3
 800729a:	f7f9 fe41 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 800729e:	4603      	mov	r3, r0
 80072a0:	461a      	mov	r2, r3
 80072a2:	4b9b      	ldr	r3, [pc, #620]	; (8007510 <xQueueGenericSend+0x354>)
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	4013      	ands	r3, r2
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d02a      	beq.n	8007304 <xQueueGenericSend+0x148>
 80072ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b0:	f7f9 fe7d 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 80072b4:	4603      	mov	r3, r0
 80072b6:	461a      	mov	r2, r3
 80072b8:	4b95      	ldr	r3, [pc, #596]	; (8007510 <xQueueGenericSend+0x354>)
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	4013      	ands	r3, r2
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01f      	beq.n	8007304 <xQueueGenericSend+0x148>
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <xQueueGenericSend+0x124>
 80072ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072cc:	f7f9 fe0f 	bl	8000eee <prvTraceGetQueueType>
 80072d0:	4603      	mov	r3, r0
 80072d2:	461a      	mov	r2, r3
 80072d4:	4b8f      	ldr	r3, [pc, #572]	; (8007514 <xQueueGenericSend+0x358>)
 80072d6:	5c9b      	ldrb	r3, [r3, r2]
 80072d8:	3320      	adds	r3, #32
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	461d      	mov	r5, r3
 80072de:	e000      	b.n	80072e2 <xQueueGenericSend+0x126>
 80072e0:	2525      	movs	r5, #37	; 0x25
 80072e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072e4:	f7f9 fe03 	bl	8000eee <prvTraceGetQueueType>
 80072e8:	4603      	mov	r3, r0
 80072ea:	461a      	mov	r2, r3
 80072ec:	4b89      	ldr	r3, [pc, #548]	; (8007514 <xQueueGenericSend+0x358>)
 80072ee:	5c9c      	ldrb	r4, [r3, r2]
 80072f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072f2:	f7f9 fe4f 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 80072f6:	4603      	mov	r3, r0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	4621      	mov	r1, r4
 80072fe:	4628      	mov	r0, r5
 8007300:	f7fa fb30 	bl	8001964 <prvTraceStoreKernelCall>
 8007304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007306:	f7f9 fdf2 	bl	8000eee <prvTraceGetQueueType>
 800730a:	4603      	mov	r3, r0
 800730c:	461a      	mov	r2, r3
 800730e:	4b81      	ldr	r3, [pc, #516]	; (8007514 <xQueueGenericSend+0x358>)
 8007310:	5c9c      	ldrb	r4, [r3, r2]
 8007312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007314:	f7f9 fe3e 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007318:	4603      	mov	r3, r0
 800731a:	b2dd      	uxtb	r5, r3
 800731c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800731e:	f7f9 fde6 	bl	8000eee <prvTraceGetQueueType>
 8007322:	4603      	mov	r3, r0
 8007324:	461a      	mov	r2, r3
 8007326:	4b7b      	ldr	r3, [pc, #492]	; (8007514 <xQueueGenericSend+0x358>)
 8007328:	5c9b      	ldrb	r3, [r3, r2]
 800732a:	2b02      	cmp	r3, #2
 800732c:	d005      	beq.n	800733a <xQueueGenericSend+0x17e>
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	b2db      	uxtb	r3, r3
 8007334:	3301      	adds	r3, #1
 8007336:	b2db      	uxtb	r3, r3
 8007338:	e000      	b.n	800733c <xQueueGenericSend+0x180>
 800733a:	2300      	movs	r3, #0
 800733c:	461a      	mov	r2, r3
 800733e:	4629      	mov	r1, r5
 8007340:	4620      	mov	r0, r4
 8007342:	f7fa fd11 	bl	8001d68 <prvTraceSetObjectState>

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	68b9      	ldr	r1, [r7, #8]
 8007350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007352:	f000 fcaa 	bl	8007caa <prvCopyDataToQueue>
 8007356:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735c:	2b00      	cmp	r3, #0
 800735e:	d014      	beq.n	800738a <xQueueGenericSend+0x1ce>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d102      	bne.n	800736c <xQueueGenericSend+0x1b0>
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d12e      	bne.n	80073ca <xQueueGenericSend+0x20e>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800736c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800736e:	f000 fe27 	bl	8007fc0 <prvNotifyQueueSetContainer>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d028      	beq.n	80073ca <xQueueGenericSend+0x20e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8007378:	4b67      	ldr	r3, [pc, #412]	; (8007518 <xQueueGenericSend+0x35c>)
 800737a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	e01f      	b.n	80073ca <xQueueGenericSend+0x20e>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	d010      	beq.n	80073b4 <xQueueGenericSend+0x1f8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	3324      	adds	r3, #36	; 0x24
 8007396:	4618      	mov	r0, r3
 8007398:	f001 fc38 	bl	8008c0c <xTaskRemoveFromEventList>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d013      	beq.n	80073ca <xQueueGenericSend+0x20e>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 80073a2:	4b5d      	ldr	r3, [pc, #372]	; (8007518 <xQueueGenericSend+0x35c>)
 80073a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	e00a      	b.n	80073ca <xQueueGenericSend+0x20e>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <xQueueGenericSend+0x20e>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 80073ba:	4b57      	ldr	r3, [pc, #348]	; (8007518 <xQueueGenericSend+0x35c>)
 80073bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80073ca:	f002 fd9b 	bl	8009f04 <vPortExitCritical>
				return pdPASS;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e114      	b.n	80075fc <xQueueGenericSend+0x440>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d13c      	bne.n	8007452 <xQueueGenericSend+0x296>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073d8:	f002 fd94 	bl	8009f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80073dc:	f7f9 fe21 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 80073e0:	4603      	mov	r3, r0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f9 fd9c 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80073e8:	4603      	mov	r3, r0
 80073ea:	461a      	mov	r2, r3
 80073ec:	4b48      	ldr	r3, [pc, #288]	; (8007510 <xQueueGenericSend+0x354>)
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	4013      	ands	r3, r2
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d02a      	beq.n	800744e <xQueueGenericSend+0x292>
 80073f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073fa:	f7f9 fdd8 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 80073fe:	4603      	mov	r3, r0
 8007400:	461a      	mov	r2, r3
 8007402:	4b43      	ldr	r3, [pc, #268]	; (8007510 <xQueueGenericSend+0x354>)
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	4013      	ands	r3, r2
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01f      	beq.n	800744e <xQueueGenericSend+0x292>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xQueueGenericSend+0x26e>
 8007414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007416:	f7f9 fd6a 	bl	8000eee <prvTraceGetQueueType>
 800741a:	4603      	mov	r3, r0
 800741c:	461a      	mov	r2, r3
 800741e:	4b3d      	ldr	r3, [pc, #244]	; (8007514 <xQueueGenericSend+0x358>)
 8007420:	5c9b      	ldrb	r3, [r3, r2]
 8007422:	3348      	adds	r3, #72	; 0x48
 8007424:	b2db      	uxtb	r3, r3
 8007426:	461d      	mov	r5, r3
 8007428:	e000      	b.n	800742c <xQueueGenericSend+0x270>
 800742a:	254d      	movs	r5, #77	; 0x4d
 800742c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800742e:	f7f9 fd5e 	bl	8000eee <prvTraceGetQueueType>
 8007432:	4603      	mov	r3, r0
 8007434:	461a      	mov	r2, r3
 8007436:	4b37      	ldr	r3, [pc, #220]	; (8007514 <xQueueGenericSend+0x358>)
 8007438:	5c9c      	ldrb	r4, [r3, r2]
 800743a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800743c:	f7f9 fdaa 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007440:	4603      	mov	r3, r0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	4621      	mov	r1, r4
 8007448:	4628      	mov	r0, r5
 800744a:	f7fa fa8b 	bl	8001964 <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 800744e:	2300      	movs	r3, #0
 8007450:	e0d4      	b.n	80075fc <xQueueGenericSend+0x440>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <xQueueGenericSend+0x2aa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007458:	f107 0310 	add.w	r3, r7, #16
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fc4d 	bl	8008cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007462:	2301      	movs	r3, #1
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007466:	f002 fd4d 	bl	8009f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800746a:	f001 f905 	bl	8008678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800746e:	f002 fd19 	bl	8009ea4 <vPortEnterCritical>
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007478:	b25b      	sxtb	r3, r3
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d103      	bne.n	8007488 <xQueueGenericSend+0x2cc>
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800748e:	b25b      	sxtb	r3, r3
 8007490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007494:	d103      	bne.n	800749e <xQueueGenericSend+0x2e2>
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800749e:	f002 fd31 	bl	8009f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074a2:	1d3a      	adds	r2, r7, #4
 80074a4:	f107 0310 	add.w	r3, r7, #16
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 fc3c 	bl	8008d28 <xTaskCheckForTimeOut>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d163      	bne.n	800757e <xQueueGenericSend+0x3c2>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074b8:	f000 fcfc 	bl	8007eb4 <prvIsQueueFull>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d057      	beq.n	8007572 <xQueueGenericSend+0x3b6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80074c2:	f7f9 fdae 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 80074c6:	4603      	mov	r3, r0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7f9 fd29 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80074ce:	4603      	mov	r3, r0
 80074d0:	461a      	mov	r2, r3
 80074d2:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <xQueueGenericSend+0x354>)
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	4013      	ands	r3, r2
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d030      	beq.n	8007540 <xQueueGenericSend+0x384>
 80074de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074e0:	f7f9 fd65 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	4b09      	ldr	r3, [pc, #36]	; (8007510 <xQueueGenericSend+0x354>)
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	4013      	ands	r3, r2
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d025      	beq.n	8007540 <xQueueGenericSend+0x384>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d110      	bne.n	800751c <xQueueGenericSend+0x360>
 80074fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074fc:	f7f9 fcf7 	bl	8000eee <prvTraceGetQueueType>
 8007500:	4603      	mov	r3, r0
 8007502:	461a      	mov	r2, r3
 8007504:	4b03      	ldr	r3, [pc, #12]	; (8007514 <xQueueGenericSend+0x358>)
 8007506:	5c9b      	ldrb	r3, [r3, r2]
 8007508:	3370      	adds	r3, #112	; 0x70
 800750a:	b2db      	uxtb	r3, r3
 800750c:	461d      	mov	r5, r3
 800750e:	e006      	b.n	800751e <xQueueGenericSend+0x362>
 8007510:	2000023c 	.word	0x2000023c
 8007514:	20000004 	.word	0x20000004
 8007518:	e000ed04 	.word	0xe000ed04
 800751c:	2575      	movs	r5, #117	; 0x75
 800751e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007520:	f7f9 fce5 	bl	8000eee <prvTraceGetQueueType>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	4b36      	ldr	r3, [pc, #216]	; (8007604 <xQueueGenericSend+0x448>)
 800752a:	5c9c      	ldrb	r4, [r3, r2]
 800752c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800752e:	f7f9 fd31 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007532:	4603      	mov	r3, r0
 8007534:	b2db      	uxtb	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	4621      	mov	r1, r4
 800753a:	4628      	mov	r0, r5
 800753c:	f7fa fa12 	bl	8001964 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	3310      	adds	r3, #16
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	4611      	mov	r1, r2
 8007548:	4618      	mov	r0, r3
 800754a:	f001 fad3 	bl	8008af4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800754e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007550:	f000 fc3b 	bl	8007dca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007554:	f001 f89e 	bl	8008694 <xTaskResumeAll>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	f47f ae8d 	bne.w	800727a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007560:	4b29      	ldr	r3, [pc, #164]	; (8007608 <xQueueGenericSend+0x44c>)
 8007562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	e683      	b.n	800727a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007574:	f000 fc29 	bl	8007dca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007578:	f001 f88c 	bl	8008694 <xTaskResumeAll>
 800757c:	e67d      	b.n	800727a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800757e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007580:	f000 fc23 	bl	8007dca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007584:	f001 f886 	bl	8008694 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8007588:	f7f9 fd4b 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 800758c:	4603      	mov	r3, r0
 800758e:	4618      	mov	r0, r3
 8007590:	f7f9 fcc6 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8007594:	4603      	mov	r3, r0
 8007596:	461a      	mov	r2, r3
 8007598:	4b1c      	ldr	r3, [pc, #112]	; (800760c <xQueueGenericSend+0x450>)
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	4013      	ands	r3, r2
 800759e:	b29b      	uxth	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d02a      	beq.n	80075fa <xQueueGenericSend+0x43e>
 80075a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075a6:	f7f9 fd02 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 80075aa:	4603      	mov	r3, r0
 80075ac:	461a      	mov	r2, r3
 80075ae:	4b17      	ldr	r3, [pc, #92]	; (800760c <xQueueGenericSend+0x450>)
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	4013      	ands	r3, r2
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d01f      	beq.n	80075fa <xQueueGenericSend+0x43e>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <xQueueGenericSend+0x41a>
 80075c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c2:	f7f9 fc94 	bl	8000eee <prvTraceGetQueueType>
 80075c6:	4603      	mov	r3, r0
 80075c8:	461a      	mov	r2, r3
 80075ca:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <xQueueGenericSend+0x448>)
 80075cc:	5c9b      	ldrb	r3, [r3, r2]
 80075ce:	3348      	adds	r3, #72	; 0x48
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	461d      	mov	r5, r3
 80075d4:	e000      	b.n	80075d8 <xQueueGenericSend+0x41c>
 80075d6:	254d      	movs	r5, #77	; 0x4d
 80075d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075da:	f7f9 fc88 	bl	8000eee <prvTraceGetQueueType>
 80075de:	4603      	mov	r3, r0
 80075e0:	461a      	mov	r2, r3
 80075e2:	4b08      	ldr	r3, [pc, #32]	; (8007604 <xQueueGenericSend+0x448>)
 80075e4:	5c9c      	ldrb	r4, [r3, r2]
 80075e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e8:	f7f9 fcd4 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 80075ec:	4603      	mov	r3, r0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	4621      	mov	r1, r4
 80075f4:	4628      	mov	r0, r5
 80075f6:	f7fa f9b5 	bl	8001964 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 80075fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3738      	adds	r7, #56	; 0x38
 8007600:	46bd      	mov	sp, r7
 8007602:	bdb0      	pop	{r4, r5, r7, pc}
 8007604:	20000004 	.word	0x20000004
 8007608:	e000ed04 	.word	0xe000ed04
 800760c:	2000023c 	.word	0x2000023c

08007610 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007610:	b5b0      	push	{r4, r5, r7, lr}
 8007612:	b090      	sub	sp, #64	; 0x40
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <xQueueGenericSendFromISR+0x3c>
 8007644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <xQueueGenericSendFromISR+0x40>
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <xQueueGenericSendFromISR+0x42>
 8007650:	2300      	movs	r3, #0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007668:	bf00      	nop
 800766a:	e7fe      	b.n	800766a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d103      	bne.n	800767a <xQueueGenericSendFromISR+0x6a>
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <xQueueGenericSendFromISR+0x6e>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <xQueueGenericSendFromISR+0x70>
 800767e:	2300      	movs	r3, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	623b      	str	r3, [r7, #32]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800769a:	f002 fce5 	bl	800a068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800769e:	f3ef 8211 	mrs	r2, BASEPRI
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	61fa      	str	r2, [r7, #28]
 80076b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d303      	bcc.n	80076ce <xQueueGenericSendFromISR+0xbe>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	f040 8087 	bne.w	80077dc <xQueueGenericSendFromISR+0x1cc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80076de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076e0:	f7f9 fc65 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 80076e4:	4603      	mov	r3, r0
 80076e6:	461a      	mov	r2, r3
 80076e8:	4b58      	ldr	r3, [pc, #352]	; (800784c <xQueueGenericSendFromISR+0x23c>)
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	4013      	ands	r3, r2
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01f      	beq.n	8007734 <xQueueGenericSendFromISR+0x124>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <xQueueGenericSendFromISR+0x100>
 80076fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076fc:	f7f9 fbf7 	bl	8000eee <prvTraceGetQueueType>
 8007700:	4603      	mov	r3, r0
 8007702:	461a      	mov	r2, r3
 8007704:	4b52      	ldr	r3, [pc, #328]	; (8007850 <xQueueGenericSendFromISR+0x240>)
 8007706:	5c9b      	ldrb	r3, [r3, r2]
 8007708:	3330      	adds	r3, #48	; 0x30
 800770a:	b2db      	uxtb	r3, r3
 800770c:	461d      	mov	r5, r3
 800770e:	e000      	b.n	8007712 <xQueueGenericSendFromISR+0x102>
 8007710:	2535      	movs	r5, #53	; 0x35
 8007712:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007714:	f7f9 fbeb 	bl	8000eee <prvTraceGetQueueType>
 8007718:	4603      	mov	r3, r0
 800771a:	461a      	mov	r2, r3
 800771c:	4b4c      	ldr	r3, [pc, #304]	; (8007850 <xQueueGenericSendFromISR+0x240>)
 800771e:	5c9c      	ldrb	r4, [r3, r2]
 8007720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007722:	f7f9 fc37 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007726:	4603      	mov	r3, r0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	4621      	mov	r1, r4
 800772e:	4628      	mov	r0, r5
 8007730:	f7fa f918 	bl	8001964 <prvTraceStoreKernelCall>
 8007734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007736:	f7f9 fbda 	bl	8000eee <prvTraceGetQueueType>
 800773a:	4603      	mov	r3, r0
 800773c:	461a      	mov	r2, r3
 800773e:	4b44      	ldr	r3, [pc, #272]	; (8007850 <xQueueGenericSendFromISR+0x240>)
 8007740:	5c9c      	ldrb	r4, [r3, r2]
 8007742:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007744:	f7f9 fc26 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007748:	4603      	mov	r3, r0
 800774a:	b2d9      	uxtb	r1, r3
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	b2db      	uxtb	r3, r3
 8007752:	3301      	adds	r3, #1
 8007754:	b2db      	uxtb	r3, r3
 8007756:	461a      	mov	r2, r3
 8007758:	4620      	mov	r0, r4
 800775a:	f7fa fb05 	bl	8001d68 <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007764:	f000 faa1 	bl	8007caa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007768:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007770:	d129      	bne.n	80077c6 <xQueueGenericSendFromISR+0x1b6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007776:	2b00      	cmp	r3, #0
 8007778:	d012      	beq.n	80077a0 <xQueueGenericSendFromISR+0x190>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d102      	bne.n	8007786 <xQueueGenericSendFromISR+0x176>
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d127      	bne.n	80077d6 <xQueueGenericSendFromISR+0x1c6>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8007786:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007788:	f000 fc1a 	bl	8007fc0 <prvNotifyQueueSetContainer>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d021      	beq.n	80077d6 <xQueueGenericSendFromISR+0x1c6>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01e      	beq.n	80077d6 <xQueueGenericSendFromISR+0x1c6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	e01a      	b.n	80077d6 <xQueueGenericSendFromISR+0x1c6>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d016      	beq.n	80077d6 <xQueueGenericSendFromISR+0x1c6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	3324      	adds	r3, #36	; 0x24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 fa2d 	bl	8008c0c <xTaskRemoveFromEventList>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00e      	beq.n	80077d6 <xQueueGenericSendFromISR+0x1c6>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <xQueueGenericSendFromISR+0x1c6>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e007      	b.n	80077d6 <xQueueGenericSendFromISR+0x1c6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077ca:	3301      	adds	r3, #1
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	b25a      	sxtb	r2, r3
 80077d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077d6:	2301      	movs	r3, #1
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80077da:	e02c      	b.n	8007836 <xQueueGenericSendFromISR+0x226>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80077dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077de:	f7f9 fbe6 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 80077e2:	4603      	mov	r3, r0
 80077e4:	461a      	mov	r2, r3
 80077e6:	4b19      	ldr	r3, [pc, #100]	; (800784c <xQueueGenericSendFromISR+0x23c>)
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	4013      	ands	r3, r2
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d01f      	beq.n	8007832 <xQueueGenericSendFromISR+0x222>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <xQueueGenericSendFromISR+0x1fe>
 80077f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077fa:	f7f9 fb78 	bl	8000eee <prvTraceGetQueueType>
 80077fe:	4603      	mov	r3, r0
 8007800:	461a      	mov	r2, r3
 8007802:	4b13      	ldr	r3, [pc, #76]	; (8007850 <xQueueGenericSendFromISR+0x240>)
 8007804:	5c9b      	ldrb	r3, [r3, r2]
 8007806:	3358      	adds	r3, #88	; 0x58
 8007808:	b2db      	uxtb	r3, r3
 800780a:	461d      	mov	r5, r3
 800780c:	e000      	b.n	8007810 <xQueueGenericSendFromISR+0x200>
 800780e:	255d      	movs	r5, #93	; 0x5d
 8007810:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007812:	f7f9 fb6c 	bl	8000eee <prvTraceGetQueueType>
 8007816:	4603      	mov	r3, r0
 8007818:	461a      	mov	r2, r3
 800781a:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <xQueueGenericSendFromISR+0x240>)
 800781c:	5c9c      	ldrb	r4, [r3, r2]
 800781e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007820:	f7f9 fbb8 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007824:	4603      	mov	r3, r0
 8007826:	b2db      	uxtb	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	4621      	mov	r1, r4
 800782c:	4628      	mov	r0, r5
 800782e:	f7fa f899 	bl	8001964 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 8007832:	2300      	movs	r3, #0
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007838:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007840:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007844:	4618      	mov	r0, r3
 8007846:	3740      	adds	r7, #64	; 0x40
 8007848:	46bd      	mov	sp, r7
 800784a:	bdb0      	pop	{r4, r5, r7, pc}
 800784c:	2000023c 	.word	0x2000023c
 8007850:	20000004 	.word	0x20000004

08007854 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007854:	b5b0      	push	{r4, r5, r7, lr}
 8007856:	b08c      	sub	sp, #48	; 0x30
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007860:	2300      	movs	r3, #0
 8007862:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <xQueueReceive+0x30>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	623b      	str	r3, [r7, #32]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d103      	bne.n	8007892 <xQueueReceive+0x3e>
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <xQueueReceive+0x42>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <xQueueReceive+0x44>
 8007896:	2300      	movs	r3, #0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <xQueueReceive+0x5e>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	61fb      	str	r3, [r7, #28]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078b2:	f001 fb9d 	bl	8008ff0 <xTaskGetSchedulerState>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <xQueueReceive+0x6e>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <xQueueReceive+0x72>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e000      	b.n	80078c8 <xQueueReceive+0x74>
 80078c6:	2300      	movs	r3, #0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <xQueueReceive+0x8e>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	61bb      	str	r3, [r7, #24]
}
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078e2:	f002 fadf 	bl	8009ea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d07b      	beq.n	80079ea <xQueueReceive+0x196>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078f6:	f000 fa42 	bl	8007d7e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80078fa:	f7f9 fb92 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 80078fe:	4603      	mov	r3, r0
 8007900:	4618      	mov	r0, r3
 8007902:	f7f9 fb0d 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8007906:	4603      	mov	r3, r0
 8007908:	461a      	mov	r2, r3
 800790a:	4bac      	ldr	r3, [pc, #688]	; (8007bbc <xQueueReceive+0x368>)
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	4013      	ands	r3, r2
 8007910:	b29b      	uxth	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d025      	beq.n	8007962 <xQueueReceive+0x10e>
 8007916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007918:	f7f9 fb49 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	4ba6      	ldr	r3, [pc, #664]	; (8007bbc <xQueueReceive+0x368>)
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	4013      	ands	r3, r2
 8007926:	b29b      	uxth	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01a      	beq.n	8007962 <xQueueReceive+0x10e>
 800792c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800792e:	f7f9 fade 	bl	8000eee <prvTraceGetQueueType>
 8007932:	4603      	mov	r3, r0
 8007934:	461a      	mov	r2, r3
 8007936:	4ba2      	ldr	r3, [pc, #648]	; (8007bc0 <xQueueReceive+0x36c>)
 8007938:	5c9b      	ldrb	r3, [r3, r2]
 800793a:	3328      	adds	r3, #40	; 0x28
 800793c:	b2db      	uxtb	r3, r3
 800793e:	461d      	mov	r5, r3
 8007940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007942:	f7f9 fad4 	bl	8000eee <prvTraceGetQueueType>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	4b9d      	ldr	r3, [pc, #628]	; (8007bc0 <xQueueReceive+0x36c>)
 800794c:	5c9c      	ldrb	r4, [r3, r2]
 800794e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007950:	f7f9 fb20 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007954:	4603      	mov	r3, r0
 8007956:	b2db      	uxtb	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	4621      	mov	r1, r4
 800795c:	4628      	mov	r0, r5
 800795e:	f7fa f801 	bl	8001964 <prvTraceStoreKernelCall>
 8007962:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007964:	f7f9 fac3 	bl	8000eee <prvTraceGetQueueType>
 8007968:	4603      	mov	r3, r0
 800796a:	461a      	mov	r2, r3
 800796c:	4b94      	ldr	r3, [pc, #592]	; (8007bc0 <xQueueReceive+0x36c>)
 800796e:	5c9c      	ldrb	r4, [r3, r2]
 8007970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007972:	f7f9 fb0f 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007976:	4603      	mov	r3, r0
 8007978:	b2dd      	uxtb	r5, r3
 800797a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800797c:	f7f9 fab7 	bl	8000eee <prvTraceGetQueueType>
 8007980:	4603      	mov	r3, r0
 8007982:	461a      	mov	r2, r3
 8007984:	4b8e      	ldr	r3, [pc, #568]	; (8007bc0 <xQueueReceive+0x36c>)
 8007986:	5c9b      	ldrb	r3, [r3, r2]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d108      	bne.n	800799e <xQueueReceive+0x14a>
 800798c:	f7f9 fb49 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8007990:	4603      	mov	r3, r0
 8007992:	4618      	mov	r0, r3
 8007994:	f7f9 fab7 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8007998:	4603      	mov	r3, r0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	e004      	b.n	80079a8 <xQueueReceive+0x154>
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	3b01      	subs	r3, #1
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	4629      	mov	r1, r5
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7fa f9db 	bl	8001d68 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	1e5a      	subs	r2, r3, #1
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00f      	beq.n	80079e2 <xQueueReceive+0x18e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	3310      	adds	r3, #16
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 f920 	bl	8008c0c <xTaskRemoveFromEventList>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <xQueueReceive+0x18e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079d2:	4b7c      	ldr	r3, [pc, #496]	; (8007bc4 <xQueueReceive+0x370>)
 80079d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079e2:	f002 fa8f 	bl	8009f04 <vPortExitCritical>
				return pdPASS;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e12f      	b.n	8007c4a <xQueueReceive+0x3f6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d137      	bne.n	8007a60 <xQueueReceive+0x20c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079f0:	f002 fa88 	bl	8009f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80079f4:	f7f9 fb15 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 80079f8:	4603      	mov	r3, r0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7f9 fa90 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	4b6d      	ldr	r3, [pc, #436]	; (8007bbc <xQueueReceive+0x368>)
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d025      	beq.n	8007a5c <xQueueReceive+0x208>
 8007a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a12:	f7f9 facc 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4b68      	ldr	r3, [pc, #416]	; (8007bbc <xQueueReceive+0x368>)
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01a      	beq.n	8007a5c <xQueueReceive+0x208>
 8007a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a28:	f7f9 fa61 	bl	8000eee <prvTraceGetQueueType>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4b63      	ldr	r3, [pc, #396]	; (8007bc0 <xQueueReceive+0x36c>)
 8007a32:	5c9b      	ldrb	r3, [r3, r2]
 8007a34:	3350      	adds	r3, #80	; 0x50
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	461d      	mov	r5, r3
 8007a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a3c:	f7f9 fa57 	bl	8000eee <prvTraceGetQueueType>
 8007a40:	4603      	mov	r3, r0
 8007a42:	461a      	mov	r2, r3
 8007a44:	4b5e      	ldr	r3, [pc, #376]	; (8007bc0 <xQueueReceive+0x36c>)
 8007a46:	5c9c      	ldrb	r4, [r3, r2]
 8007a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a4a:	f7f9 faa3 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	4621      	mov	r1, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	f7f9 ff84 	bl	8001964 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e0f4      	b.n	8007c4a <xQueueReceive+0x3f6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d106      	bne.n	8007a74 <xQueueReceive+0x220>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a66:	f107 0310 	add.w	r3, r7, #16
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 f946 	bl	8008cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a70:	2301      	movs	r3, #1
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a74:	f002 fa46 	bl	8009f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a78:	f000 fdfe 	bl	8008678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a7c:	f002 fa12 	bl	8009ea4 <vPortEnterCritical>
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a86:	b25b      	sxtb	r3, r3
 8007a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8c:	d103      	bne.n	8007a96 <xQueueReceive+0x242>
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a9c:	b25b      	sxtb	r3, r3
 8007a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa2:	d103      	bne.n	8007aac <xQueueReceive+0x258>
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aac:	f002 fa2a 	bl	8009f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ab0:	1d3a      	adds	r2, r7, #4
 8007ab2:	f107 0310 	add.w	r3, r7, #16
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f001 f935 	bl	8008d28 <xTaskCheckForTimeOut>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f040 8081 	bne.w	8007bc8 <xQueueReceive+0x374>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ac8:	f000 f9de 	bl	8007e88 <prvIsQueueEmpty>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d06e      	beq.n	8007bb0 <xQueueReceive+0x35c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8007ad2:	f7f9 faa6 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7f9 fa21 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4b36      	ldr	r3, [pc, #216]	; (8007bbc <xQueueReceive+0x368>)
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d025      	beq.n	8007b3a <xQueueReceive+0x2e6>
 8007aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007af0:	f7f9 fa5d 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	4b30      	ldr	r3, [pc, #192]	; (8007bbc <xQueueReceive+0x368>)
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	4013      	ands	r3, r2
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01a      	beq.n	8007b3a <xQueueReceive+0x2e6>
 8007b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b06:	f7f9 f9f2 	bl	8000eee <prvTraceGetQueueType>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	4b2c      	ldr	r3, [pc, #176]	; (8007bc0 <xQueueReceive+0x36c>)
 8007b10:	5c9b      	ldrb	r3, [r3, r2]
 8007b12:	3368      	adds	r3, #104	; 0x68
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	461d      	mov	r5, r3
 8007b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b1a:	f7f9 f9e8 	bl	8000eee <prvTraceGetQueueType>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	461a      	mov	r2, r3
 8007b22:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <xQueueReceive+0x36c>)
 8007b24:	5c9c      	ldrb	r4, [r3, r2]
 8007b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b28:	f7f9 fa34 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	4621      	mov	r1, r4
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7f9 ff15 	bl	8001964 <prvTraceStoreKernelCall>
 8007b3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b3c:	f7f9 f9d7 	bl	8000eee <prvTraceGetQueueType>
 8007b40:	4603      	mov	r3, r0
 8007b42:	461a      	mov	r2, r3
 8007b44:	4b1e      	ldr	r3, [pc, #120]	; (8007bc0 <xQueueReceive+0x36c>)
 8007b46:	5c9b      	ldrb	r3, [r3, r2]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d018      	beq.n	8007b7e <xQueueReceive+0x32a>
 8007b4c:	f7f9 fa69 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8007b50:	4603      	mov	r3, r0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7f9 f9e4 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4b17      	ldr	r3, [pc, #92]	; (8007bbc <xQueueReceive+0x368>)
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	4013      	ands	r3, r2
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <xQueueReceive+0x32a>
 8007b68:	f7f9 fa5b 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7f9 f9c9 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8007b74:	4603      	mov	r3, r0
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fa f93b 	bl	8001df4 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	3324      	adds	r3, #36	; 0x24
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	4611      	mov	r1, r2
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 ffb4 	bl	8008af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b8e:	f000 f91c 	bl	8007dca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b92:	f000 fd7f 	bl	8008694 <xTaskResumeAll>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f47f aea2 	bne.w	80078e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007b9e:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <xQueueReceive+0x370>)
 8007ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	e698      	b.n	80078e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bb2:	f000 f90a 	bl	8007dca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bb6:	f000 fd6d 	bl	8008694 <xTaskResumeAll>
 8007bba:	e692      	b.n	80078e2 <xQueueReceive+0x8e>
 8007bbc:	2000023c 	.word	0x2000023c
 8007bc0:	20000004 	.word	0x20000004
 8007bc4:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bca:	f000 f8fe 	bl	8007dca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bce:	f000 fd61 	bl	8008694 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bd4:	f000 f958 	bl	8007e88 <prvIsQueueEmpty>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f43f ae81 	beq.w	80078e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007be0:	f7f9 fa1f 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8007be4:	4603      	mov	r3, r0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7f9 f99a 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8007bec:	4603      	mov	r3, r0
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4b18      	ldr	r3, [pc, #96]	; (8007c54 <xQueueReceive+0x400>)
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d025      	beq.n	8007c48 <xQueueReceive+0x3f4>
 8007bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bfe:	f7f9 f9d6 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461a      	mov	r2, r3
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <xQueueReceive+0x400>)
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d01a      	beq.n	8007c48 <xQueueReceive+0x3f4>
 8007c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c14:	f7f9 f96b 	bl	8000eee <prvTraceGetQueueType>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	4b0e      	ldr	r3, [pc, #56]	; (8007c58 <xQueueReceive+0x404>)
 8007c1e:	5c9b      	ldrb	r3, [r3, r2]
 8007c20:	3350      	adds	r3, #80	; 0x50
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	461d      	mov	r5, r3
 8007c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c28:	f7f9 f961 	bl	8000eee <prvTraceGetQueueType>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <xQueueReceive+0x404>)
 8007c32:	5c9c      	ldrb	r4, [r3, r2]
 8007c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c36:	f7f9 f9ad 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	461a      	mov	r2, r3
 8007c40:	4621      	mov	r1, r4
 8007c42:	4628      	mov	r0, r5
 8007c44:	f7f9 fe8e 	bl	8001964 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8007c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3730      	adds	r7, #48	; 0x30
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bdb0      	pop	{r4, r5, r7, pc}
 8007c52:	bf00      	nop
 8007c54:	2000023c 	.word	0x2000023c
 8007c58:	20000004 	.word	0x20000004

08007c5c <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	64da      	str	r2, [r3, #76]	; 0x4c
	}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b086      	sub	sp, #24
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10d      	bne.n	8007ce4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d14d      	bne.n	8007d6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f001 f9a9 	bl	800902c <xTaskPriorityDisinherit>
 8007cda:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	609a      	str	r2, [r3, #8]
 8007ce2:	e043      	b.n	8007d6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d119      	bne.n	8007d1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6858      	ldr	r0, [r3, #4]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	f002 fd29 	bl	800a74c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	441a      	add	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d32b      	bcc.n	8007d6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	605a      	str	r2, [r3, #4]
 8007d1c:	e026      	b.n	8007d6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	68d8      	ldr	r0, [r3, #12]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	461a      	mov	r2, r3
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	f002 fd0f 	bl	800a74c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	425b      	negs	r3, r3
 8007d38:	441a      	add	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d207      	bcs.n	8007d5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	425b      	negs	r3, r3
 8007d54:	441a      	add	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d105      	bne.n	8007d6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d74:	697b      	ldr	r3, [r7, #20]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d018      	beq.n	8007dc2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d98:	441a      	add	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d303      	bcc.n	8007db2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68d9      	ldr	r1, [r3, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6838      	ldr	r0, [r7, #0]
 8007dbe:	f002 fcc5 	bl	800a74c <memcpy>
	}
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dd2:	f002 f867 	bl	8009ea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ddc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dde:	e01e      	b.n	8007e1e <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d008      	beq.n	8007dfa <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f8e9 	bl	8007fc0 <prvNotifyQueueSetContainer>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d010      	beq.n	8007e16 <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8007df4:	f000 fffa 	bl	8008dec <vTaskMissedYield>
 8007df8:	e00d      	b.n	8007e16 <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d012      	beq.n	8007e28 <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3324      	adds	r3, #36	; 0x24
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 ff00 	bl	8008c0c <xTaskRemoveFromEventList>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8007e12:	f000 ffeb 	bl	8008dec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	dcdc      	bgt.n	8007de0 <prvUnlockQueue+0x16>
 8007e26:	e000      	b.n	8007e2a <prvUnlockQueue+0x60>
						break;
 8007e28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	22ff      	movs	r2, #255	; 0xff
 8007e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e32:	f002 f867 	bl	8009f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e36:	f002 f835 	bl	8009ea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e42:	e011      	b.n	8007e68 <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d012      	beq.n	8007e72 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3310      	adds	r3, #16
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fedb 	bl	8008c0c <xTaskRemoveFromEventList>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 8007e5c:	f000 ffc6 	bl	8008dec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dce9      	bgt.n	8007e44 <prvUnlockQueue+0x7a>
 8007e70:	e000      	b.n	8007e74 <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 8007e72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	22ff      	movs	r2, #255	; 0xff
 8007e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e7c:	f002 f842 	bl	8009f04 <vPortExitCritical>
}
 8007e80:	bf00      	nop
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e90:	f002 f808 	bl	8009ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e001      	b.n	8007ea6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ea6:	f002 f82d 	bl	8009f04 <vPortExitCritical>

	return xReturn;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ebc:	f001 fff2 	bl	8009ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d102      	bne.n	8007ed2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e001      	b.n	8007ed6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ed6:	f002 f815 	bl	8009f04 <vPortExitCritical>

	return xReturn;
 8007eda:	68fb      	ldr	r3, [r7, #12]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ee4:	b590      	push	{r4, r7, lr}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	e025      	b.n	8007f40 <vQueueAddToRegistry+0x5c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ef4:	4a16      	ldr	r2, [pc, #88]	; (8007f50 <vQueueAddToRegistry+0x6c>)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d11c      	bne.n	8007f3a <vQueueAddToRegistry+0x56>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f00:	4913      	ldr	r1, [pc, #76]	; (8007f50 <vQueueAddToRegistry+0x6c>)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f0a:	4a11      	ldr	r2, [pc, #68]	; (8007f50 <vQueueAddToRegistry+0x6c>)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	4413      	add	r3, r2
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7f8 ffe9 	bl	8000eee <prvTraceGetQueueType>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <vQueueAddToRegistry+0x70>)
 8007f22:	5c9c      	ldrb	r4, [r3, r2]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7f9 f835 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	4619      	mov	r1, r3
 8007f32:	4620      	mov	r0, r4
 8007f34:	f7fa f8b8 	bl	80020a8 <prvTraceSetObjectName>
				break;
 8007f38:	e006      	b.n	8007f48 <vQueueAddToRegistry+0x64>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b07      	cmp	r3, #7
 8007f44:	d9d6      	bls.n	8007ef4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f46:	bf00      	nop
 8007f48:	bf00      	nop
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd90      	pop	{r4, r7, pc}
 8007f50:	20001bf8 	.word	0x20001bf8
 8007f54:	20000004 	.word	0x20000004

08007f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f68:	f001 ff9c 	bl	8009ea4 <vPortEnterCritical>
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f72:	b25b      	sxtb	r3, r3
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f78:	d103      	bne.n	8007f82 <vQueueWaitForMessageRestricted+0x2a>
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f88:	b25b      	sxtb	r3, r3
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d103      	bne.n	8007f98 <vQueueWaitForMessageRestricted+0x40>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f98:	f001 ffb4 	bl	8009f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	3324      	adds	r3, #36	; 0x24
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fdc5 	bl	8008b3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fb2:	6978      	ldr	r0, [r7, #20]
 8007fb4:	f7ff ff09 	bl	8007dca <prvUnlockQueue>
	}
 8007fb8:	bf00      	nop
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8007fc0:	b5b0      	push	{r4, r5, r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fcc:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	613b      	str	r3, [r7, #16]
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d30a      	bcc.n	8008010 <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	60fb      	str	r3, [r7, #12]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008018:	429a      	cmp	r2, r3
 800801a:	d26e      	bcs.n	80080fa <prvNotifyQueueSetContainer+0x13a>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008022:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SET_SEND( pxQueueSetContainer );
 8008024:	f7f8 fffd 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8008028:	4603      	mov	r3, r0
 800802a:	4618      	mov	r0, r3
 800802c:	f7f8 ff78 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	4b33      	ldr	r3, [pc, #204]	; (8008104 <prvNotifyQueueSetContainer+0x144>)
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	4013      	ands	r3, r2
 800803a:	b29b      	uxth	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d025      	beq.n	800808c <prvNotifyQueueSetContainer+0xcc>
 8008040:	69b8      	ldr	r0, [r7, #24]
 8008042:	f7f8 ffb4 	bl	8000fae <prvTraceGetQueueNumberHigh16>
 8008046:	4603      	mov	r3, r0
 8008048:	461a      	mov	r2, r3
 800804a:	4b2e      	ldr	r3, [pc, #184]	; (8008104 <prvNotifyQueueSetContainer+0x144>)
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	4013      	ands	r3, r2
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d01a      	beq.n	800808c <prvNotifyQueueSetContainer+0xcc>
 8008056:	69b8      	ldr	r0, [r7, #24]
 8008058:	f7f8 ff49 	bl	8000eee <prvTraceGetQueueType>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	4b29      	ldr	r3, [pc, #164]	; (8008108 <prvNotifyQueueSetContainer+0x148>)
 8008062:	5c9b      	ldrb	r3, [r3, r2]
 8008064:	3320      	adds	r3, #32
 8008066:	b2db      	uxtb	r3, r3
 8008068:	461d      	mov	r5, r3
 800806a:	69b8      	ldr	r0, [r7, #24]
 800806c:	f7f8 ff3f 	bl	8000eee <prvTraceGetQueueType>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	4b24      	ldr	r3, [pc, #144]	; (8008108 <prvNotifyQueueSetContainer+0x148>)
 8008076:	5c9c      	ldrb	r4, [r3, r2]
 8008078:	69b8      	ldr	r0, [r7, #24]
 800807a:	f7f8 ff8b 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 800807e:	4603      	mov	r3, r0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	4621      	mov	r1, r4
 8008086:	4628      	mov	r0, r5
 8008088:	f7f9 fc6c 	bl	8001964 <prvTraceStoreKernelCall>
 800808c:	69b8      	ldr	r0, [r7, #24]
 800808e:	f7f8 ff2e 	bl	8000eee <prvTraceGetQueueType>
 8008092:	4603      	mov	r3, r0
 8008094:	461a      	mov	r2, r3
 8008096:	4b1c      	ldr	r3, [pc, #112]	; (8008108 <prvNotifyQueueSetContainer+0x148>)
 8008098:	5c9c      	ldrb	r4, [r3, r2]
 800809a:	69b8      	ldr	r0, [r7, #24]
 800809c:	f7f8 ff7a 	bl	8000f94 <prvTraceGetQueueNumberLow16>
 80080a0:	4603      	mov	r3, r0
 80080a2:	b2d9      	uxtb	r1, r3
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	3301      	adds	r3, #1
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	4620      	mov	r0, r4
 80080b2:	f7f9 fe59 	bl	8001d68 <prvTraceSetObjectState>

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80080b6:	1d3b      	adds	r3, r7, #4
 80080b8:	2200      	movs	r2, #0
 80080ba:	4619      	mov	r1, r3
 80080bc:	69b8      	ldr	r0, [r7, #24]
 80080be:	f7ff fdf4 	bl	8007caa <prvCopyDataToQueue>
 80080c2:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80080c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080cc:	d10e      	bne.n	80080ec <prvNotifyQueueSetContainer+0x12c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d011      	beq.n	80080fa <prvNotifyQueueSetContainer+0x13a>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	3324      	adds	r3, #36	; 0x24
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fd96 	bl	8008c0c <xTaskRemoveFromEventList>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d009      	beq.n	80080fa <prvNotifyQueueSetContainer+0x13a>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80080e6:	2301      	movs	r3, #1
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	e006      	b.n	80080fa <prvNotifyQueueSetContainer+0x13a>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
 80080ee:	3301      	adds	r3, #1
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	b25a      	sxtb	r2, r3
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080fa:	69fb      	ldr	r3, [r7, #28]
	}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3720      	adds	r7, #32
 8008100:	46bd      	mov	sp, r7
 8008102:	bdb0      	pop	{r4, r5, r7, pc}
 8008104:	2000023c 	.word	0x2000023c
 8008108:	20000004 	.word	0x20000004

0800810c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08c      	sub	sp, #48	; 0x30
 8008110:	af04      	add	r7, sp, #16
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	4613      	mov	r3, r2
 800811a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800811c:	88fb      	ldrh	r3, [r7, #6]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4618      	mov	r0, r3
 8008122:	f001 ffe1 	bl	800a0e8 <pvPortMalloc>
 8008126:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00e      	beq.n	800814c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800812e:	20a8      	movs	r0, #168	; 0xa8
 8008130:	f001 ffda 	bl	800a0e8 <pvPortMalloc>
 8008134:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	631a      	str	r2, [r3, #48]	; 0x30
 8008142:	e005      	b.n	8008150 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008144:	6978      	ldr	r0, [r7, #20]
 8008146:	f002 f8ab 	bl	800a2a0 <vPortFree>
 800814a:	e001      	b.n	8008150 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800814c:	2300      	movs	r3, #0
 800814e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d013      	beq.n	800817e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008156:	88fa      	ldrh	r2, [r7, #6]
 8008158:	2300      	movs	r3, #0
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	9302      	str	r3, [sp, #8]
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 f80f 	bl	8008190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008172:	69f8      	ldr	r0, [r7, #28]
 8008174:	f000 f8b2 	bl	80082dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008178:	2301      	movs	r3, #1
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	e002      	b.n	8008184 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800817e:	f04f 33ff 	mov.w	r3, #4294967295
 8008182:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008184:	69bb      	ldr	r3, [r7, #24]
	}
 8008186:	4618      	mov	r0, r3
 8008188:	3720      	adds	r7, #32
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	461a      	mov	r2, r3
 80081a8:	21a5      	movs	r1, #165	; 0xa5
 80081aa:	f002 fa4b 	bl	800a644 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081b8:	3b01      	subs	r3, #1
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f023 0307 	bic.w	r3, r3, #7
 80081c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	f003 0307 	and.w	r3, r3, #7
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	617b      	str	r3, [r7, #20]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d01f      	beq.n	800822e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081ee:	2300      	movs	r3, #0
 80081f0:	61fb      	str	r3, [r7, #28]
 80081f2:	e012      	b.n	800821a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	4413      	add	r3, r2
 80081fa:	7819      	ldrb	r1, [r3, #0]
 80081fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	3334      	adds	r3, #52	; 0x34
 8008204:	460a      	mov	r2, r1
 8008206:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d006      	beq.n	8008222 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	3301      	adds	r3, #1
 8008218:	61fb      	str	r3, [r7, #28]
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	2b0f      	cmp	r3, #15
 800821e:	d9e9      	bls.n	80081f4 <prvInitialiseNewTask+0x64>
 8008220:	e000      	b.n	8008224 <prvInitialiseNewTask+0x94>
			{
				break;
 8008222:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800822c:	e003      	b.n	8008236 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	2b06      	cmp	r3, #6
 800823a:	d901      	bls.n	8008240 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800823c:	2306      	movs	r3, #6
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008244:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800824a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	2200      	movs	r2, #0
 8008250:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	3304      	adds	r3, #4
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fdc6 	bl	8006de8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	3318      	adds	r3, #24
 8008260:	4618      	mov	r0, r3
 8008262:	f7fe fdc1 	bl	8006de8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800826a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	f1c3 0207 	rsb	r2, r3, #7
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800827a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	2200      	movs	r2, #0
 8008288:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	3354      	adds	r3, #84	; 0x54
 8008290:	224c      	movs	r2, #76	; 0x4c
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f002 f9d5 	bl	800a644 <memset>
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	4a0c      	ldr	r2, [pc, #48]	; (80082d0 <prvInitialiseNewTask+0x140>)
 800829e:	659a      	str	r2, [r3, #88]	; 0x58
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	4a0c      	ldr	r2, [pc, #48]	; (80082d4 <prvInitialiseNewTask+0x144>)
 80082a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	4a0b      	ldr	r2, [pc, #44]	; (80082d8 <prvInitialiseNewTask+0x148>)
 80082aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	69b8      	ldr	r0, [r7, #24]
 80082b2:	f001 fcbd 	bl	8009c30 <pxPortInitialiseStack>
 80082b6:	4602      	mov	r2, r0
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082c8:	bf00      	nop
 80082ca:	3720      	adds	r7, #32
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20005dac 	.word	0x20005dac
 80082d4:	20005e14 	.word	0x20005e14
 80082d8:	20005e7c 	.word	0x20005e7c

080082dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082e4:	f001 fdde 	bl	8009ea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082e8:	4b67      	ldr	r3, [pc, #412]	; (8008488 <prvAddNewTaskToReadyList+0x1ac>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	4a66      	ldr	r2, [pc, #408]	; (8008488 <prvAddNewTaskToReadyList+0x1ac>)
 80082f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082f2:	4b66      	ldr	r3, [pc, #408]	; (800848c <prvAddNewTaskToReadyList+0x1b0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d109      	bne.n	800830e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082fa:	4a64      	ldr	r2, [pc, #400]	; (800848c <prvAddNewTaskToReadyList+0x1b0>)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008300:	4b61      	ldr	r3, [pc, #388]	; (8008488 <prvAddNewTaskToReadyList+0x1ac>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d110      	bne.n	800832a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008308:	f000 fdbe 	bl	8008e88 <prvInitialiseTaskLists>
 800830c:	e00d      	b.n	800832a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800830e:	4b60      	ldr	r3, [pc, #384]	; (8008490 <prvAddNewTaskToReadyList+0x1b4>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008316:	4b5d      	ldr	r3, [pc, #372]	; (800848c <prvAddNewTaskToReadyList+0x1b0>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	429a      	cmp	r2, r3
 8008322:	d802      	bhi.n	800832a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008324:	4a59      	ldr	r2, [pc, #356]	; (800848c <prvAddNewTaskToReadyList+0x1b0>)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800832a:	4b5a      	ldr	r3, [pc, #360]	; (8008494 <prvAddNewTaskToReadyList+0x1b8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3301      	adds	r3, #1
 8008330:	4a58      	ldr	r2, [pc, #352]	; (8008494 <prvAddNewTaskToReadyList+0x1b8>)
 8008332:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008334:	4b57      	ldr	r3, [pc, #348]	; (8008494 <prvAddNewTaskToReadyList+0x1b8>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d05f      	beq.n	8008402 <prvAddNewTaskToReadyList+0x126>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d049      	beq.n	80083dc <prvAddNewTaskToReadyList+0x100>
 8008348:	2003      	movs	r0, #3
 800834a:	f7f9 fdd1 	bl	8001ef0 <prvTraceGetObjectHandle>
 800834e:	4603      	mov	r3, r0
 8008350:	b29b      	uxth	r3, r3
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7f8 fdf1 	bl	8000f3c <prvTraceSetTaskNumberLow16>
 800835a:	4b4f      	ldr	r3, [pc, #316]	; (8008498 <prvAddNewTaskToReadyList+0x1bc>)
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7f8 fe01 	bl	8000f68 <prvTraceSetTaskNumberHigh16>
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7f8 fdcd 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 800836c:	4603      	mov	r3, r0
 800836e:	b2d9      	uxtb	r1, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3334      	adds	r3, #52	; 0x34
 8008374:	461a      	mov	r2, r3
 8008376:	2003      	movs	r0, #3
 8008378:	f7f9 fe96 	bl	80020a8 <prvTraceSetObjectName>
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7f8 fdc2 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8008382:	4603      	mov	r3, r0
 8008384:	b2d9      	uxtb	r1, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	b2db      	uxtb	r3, r3
 800838c:	461a      	mov	r2, r3
 800838e:	2003      	movs	r0, #3
 8008390:	f7f9 fca0 	bl	8001cd4 <prvTraceSetPriorityProperty>
 8008394:	f7f8 fe45 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8008398:	4603      	mov	r3, r0
 800839a:	4618      	mov	r0, r3
 800839c:	f7f8 fdc0 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80083a0:	4603      	mov	r3, r0
 80083a2:	461a      	mov	r2, r3
 80083a4:	4b3d      	ldr	r3, [pc, #244]	; (800849c <prvAddNewTaskToReadyList+0x1c0>)
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	4013      	ands	r3, r2
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d028      	beq.n	8008402 <prvAddNewTaskToReadyList+0x126>
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7f8 fdb5 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	4b38      	ldr	r3, [pc, #224]	; (800849c <prvAddNewTaskToReadyList+0x1c0>)
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	4013      	ands	r3, r2
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d01d      	beq.n	8008402 <prvAddNewTaskToReadyList+0x126>
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7f8 fd9d 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 80083cc:	4603      	mov	r3, r0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	2103      	movs	r1, #3
 80083d4:	201b      	movs	r0, #27
 80083d6:	f7f9 fac5 	bl	8001964 <prvTraceStoreKernelCall>
 80083da:	e012      	b.n	8008402 <prvAddNewTaskToReadyList+0x126>
 80083dc:	f7f8 fe21 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 80083e0:	4603      	mov	r3, r0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7f8 fd9c 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	4b2b      	ldr	r3, [pc, #172]	; (800849c <prvAddNewTaskToReadyList+0x1c0>)
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	4013      	ands	r3, r2
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <prvAddNewTaskToReadyList+0x126>
 80083f8:	2200      	movs	r2, #0
 80083fa:	2103      	movs	r1, #3
 80083fc:	201b      	movs	r0, #27
 80083fe:	f7f9 fab1 	bl	8001964 <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7f8 fd8c 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8008408:	4603      	mov	r3, r0
 800840a:	461a      	mov	r2, r3
 800840c:	4b23      	ldr	r3, [pc, #140]	; (800849c <prvAddNewTaskToReadyList+0x1c0>)
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	4013      	ands	r3, r2
 8008412:	b29b      	uxth	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d007      	beq.n	8008428 <prvAddNewTaskToReadyList+0x14c>
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7f8 fd74 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 800841e:	4603      	mov	r3, r0
 8008420:	b2db      	uxtb	r3, r3
 8008422:	4618      	mov	r0, r3
 8008424:	f7f9 f9aa 	bl	800177c <prvTraceStoreTaskReady>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842c:	2201      	movs	r2, #1
 800842e:	409a      	lsls	r2, r3
 8008430:	4b1b      	ldr	r3, [pc, #108]	; (80084a0 <prvAddNewTaskToReadyList+0x1c4>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4313      	orrs	r3, r2
 8008436:	4a1a      	ldr	r2, [pc, #104]	; (80084a0 <prvAddNewTaskToReadyList+0x1c4>)
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4a17      	ldr	r2, [pc, #92]	; (80084a4 <prvAddNewTaskToReadyList+0x1c8>)
 8008448:	441a      	add	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3304      	adds	r3, #4
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f7fe fcd6 	bl	8006e02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008456:	f001 fd55 	bl	8009f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800845a:	4b0d      	ldr	r3, [pc, #52]	; (8008490 <prvAddNewTaskToReadyList+0x1b4>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00e      	beq.n	8008480 <prvAddNewTaskToReadyList+0x1a4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <prvAddNewTaskToReadyList+0x1b0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	429a      	cmp	r2, r3
 800846e:	d207      	bcs.n	8008480 <prvAddNewTaskToReadyList+0x1a4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <prvAddNewTaskToReadyList+0x1cc>)
 8008472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20001d38 	.word	0x20001d38
 800848c:	20001c38 	.word	0x20001c38
 8008490:	20001d44 	.word	0x20001d44
 8008494:	20001d54 	.word	0x20001d54
 8008498:	2000023e 	.word	0x2000023e
 800849c:	2000023c 	.word	0x2000023c
 80084a0:	20001d40 	.word	0x20001d40
 80084a4:	20001c3c 	.word	0x20001c3c
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d04b      	beq.n	8008556 <vTaskDelay+0xaa>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084be:	4b2d      	ldr	r3, [pc, #180]	; (8008574 <vTaskDelay+0xc8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <vTaskDelay+0x30>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60bb      	str	r3, [r7, #8]
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80084dc:	f000 f8cc 	bl	8008678 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80084e0:	4b25      	ldr	r3, [pc, #148]	; (8008578 <vTaskDelay+0xcc>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7f8 fd1b 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80084ea:	4603      	mov	r3, r0
 80084ec:	461a      	mov	r2, r3
 80084ee:	4b23      	ldr	r3, [pc, #140]	; (800857c <vTaskDelay+0xd0>)
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	4013      	ands	r3, r2
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00d      	beq.n	8008516 <vTaskDelay+0x6a>
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	2089      	movs	r0, #137	; 0x89
 80084fe:	f7f9 fb23 	bl	8001b48 <prvTraceStoreKernelCallWithNumericParamOnly>
 8008502:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <vTaskDelay+0xcc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4618      	mov	r0, r3
 8008508:	f7f8 fcfd 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 800850c:	4603      	mov	r3, r0
 800850e:	b2db      	uxtb	r3, r3
 8008510:	4618      	mov	r0, r3
 8008512:	f7f9 fc6f 	bl	8001df4 <prvTraceSetTaskInstanceFinished>
 8008516:	f7f8 fd84 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 800851a:	4603      	mov	r3, r0
 800851c:	4618      	mov	r0, r3
 800851e:	f7f8 fcff 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8008522:	4603      	mov	r3, r0
 8008524:	461a      	mov	r2, r3
 8008526:	4b15      	ldr	r3, [pc, #84]	; (800857c <vTaskDelay+0xd0>)
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	4013      	ands	r3, r2
 800852c:	b29b      	uxth	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <vTaskDelay+0x9c>
 8008532:	f7f8 fd76 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8008536:	4603      	mov	r3, r0
 8008538:	4618      	mov	r0, r3
 800853a:	f7f8 fce4 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 800853e:	4603      	mov	r3, r0
 8008540:	b2db      	uxtb	r3, r3
 8008542:	4618      	mov	r0, r3
 8008544:	f7f9 fc56 	bl	8001df4 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008548:	2100      	movs	r1, #0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 ffdc 	bl	8009508 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008550:	f000 f8a0 	bl	8008694 <xTaskResumeAll>
 8008554:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d107      	bne.n	800856c <vTaskDelay+0xc0>
		{
			portYIELD_WITHIN_API();
 800855c:	4b08      	ldr	r3, [pc, #32]	; (8008580 <vTaskDelay+0xd4>)
 800855e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20001d60 	.word	0x20001d60
 8008578:	20001c38 	.word	0x20001c38
 800857c:	2000023c 	.word	0x2000023c
 8008580:	e000ed04 	.word	0xe000ed04

08008584 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800858a:	4b31      	ldr	r3, [pc, #196]	; (8008650 <vTaskStartScheduler+0xcc>)
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	2300      	movs	r3, #0
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	2300      	movs	r3, #0
 8008594:	2280      	movs	r2, #128	; 0x80
 8008596:	492f      	ldr	r1, [pc, #188]	; (8008654 <vTaskStartScheduler+0xd0>)
 8008598:	482f      	ldr	r0, [pc, #188]	; (8008658 <vTaskStartScheduler+0xd4>)
 800859a:	f7ff fdb7 	bl	800810c <xTaskCreate>
 800859e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d102      	bne.n	80085ac <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80085a6:	f001 f815 	bl	80095d4 <xTimerCreateTimerTask>
 80085aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d13a      	bne.n	8008628 <vTaskStartScheduler+0xa4>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	60bb      	str	r3, [r7, #8]
}
 80085c4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085c6:	4b25      	ldr	r3, [pc, #148]	; (800865c <vTaskStartScheduler+0xd8>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3354      	adds	r3, #84	; 0x54
 80085cc:	4a24      	ldr	r2, [pc, #144]	; (8008660 <vTaskStartScheduler+0xdc>)
 80085ce:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085d0:	4b24      	ldr	r3, [pc, #144]	; (8008664 <vTaskStartScheduler+0xe0>)
 80085d2:	f04f 32ff 	mov.w	r2, #4294967295
 80085d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085d8:	4b23      	ldr	r3, [pc, #140]	; (8008668 <vTaskStartScheduler+0xe4>)
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085de:	4b23      	ldr	r3, [pc, #140]	; (800866c <vTaskStartScheduler+0xe8>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80085e4:	4b22      	ldr	r3, [pc, #136]	; (8008670 <vTaskStartScheduler+0xec>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	f7f8 fd1a 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 80085ee:	4603      	mov	r3, r0
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7f8 fc95 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80085f6:	4603      	mov	r3, r0
 80085f8:	461a      	mov	r2, r3
 80085fa:	4b1e      	ldr	r3, [pc, #120]	; (8008674 <vTaskStartScheduler+0xf0>)
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	4013      	ands	r3, r2
 8008600:	b29b      	uxth	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <vTaskStartScheduler+0x98>
 8008606:	f7f8 fd0c 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 800860a:	4603      	mov	r3, r0
 800860c:	4618      	mov	r0, r3
 800860e:	f7f8 fc7a 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8008612:	4603      	mov	r3, r0
 8008614:	b2db      	uxtb	r3, r3
 8008616:	4618      	mov	r0, r3
 8008618:	f7f9 faf2 	bl	8001c00 <prvTraceStoreTaskswitch>
 800861c:	4b14      	ldr	r3, [pc, #80]	; (8008670 <vTaskStartScheduler+0xec>)
 800861e:	2202      	movs	r2, #2
 8008620:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008622:	f001 fb8d 	bl	8009d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008626:	e00e      	b.n	8008646 <vTaskStartScheduler+0xc2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862e:	d10a      	bne.n	8008646 <vTaskStartScheduler+0xc2>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	607b      	str	r3, [r7, #4]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <vTaskStartScheduler+0xc0>
}
 8008646:	bf00      	nop
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20001d5c 	.word	0x20001d5c
 8008654:	0800afac 	.word	0x0800afac
 8008658:	08008e59 	.word	0x08008e59
 800865c:	20001c38 	.word	0x20001c38
 8008660:	20000068 	.word	0x20000068
 8008664:	20001d58 	.word	0x20001d58
 8008668:	20001d44 	.word	0x20001d44
 800866c:	20001d3c 	.word	0x20001d3c
 8008670:	20000224 	.word	0x20000224
 8008674:	2000023c 	.word	0x2000023c

08008678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800867c:	4b04      	ldr	r3, [pc, #16]	; (8008690 <vTaskSuspendAll+0x18>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3301      	adds	r3, #1
 8008682:	4a03      	ldr	r2, [pc, #12]	; (8008690 <vTaskSuspendAll+0x18>)
 8008684:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008686:	bf00      	nop
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20001d60 	.word	0x20001d60

08008694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800869a:	2300      	movs	r3, #0
 800869c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800869e:	2300      	movs	r3, #0
 80086a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086a2:	4b4b      	ldr	r3, [pc, #300]	; (80087d0 <xTaskResumeAll+0x13c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	603b      	str	r3, [r7, #0]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086c0:	f001 fbf0 	bl	8009ea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086c4:	4b42      	ldr	r3, [pc, #264]	; (80087d0 <xTaskResumeAll+0x13c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	4a41      	ldr	r2, [pc, #260]	; (80087d0 <xTaskResumeAll+0x13c>)
 80086cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ce:	4b40      	ldr	r3, [pc, #256]	; (80087d0 <xTaskResumeAll+0x13c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d174      	bne.n	80087c0 <xTaskResumeAll+0x12c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086d6:	4b3f      	ldr	r3, [pc, #252]	; (80087d4 <xTaskResumeAll+0x140>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d070      	beq.n	80087c0 <xTaskResumeAll+0x12c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086de:	e041      	b.n	8008764 <xTaskResumeAll+0xd0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e0:	4b3d      	ldr	r3, [pc, #244]	; (80087d8 <xTaskResumeAll+0x144>)
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3318      	adds	r3, #24
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe fbe5 	bl	8006ebc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3304      	adds	r3, #4
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fbe0 	bl	8006ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7f8 fc0f 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8008702:	4603      	mov	r3, r0
 8008704:	461a      	mov	r2, r3
 8008706:	4b35      	ldr	r3, [pc, #212]	; (80087dc <xTaskResumeAll+0x148>)
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	4013      	ands	r3, r2
 800870c:	b29b      	uxth	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <xTaskResumeAll+0x8e>
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f7f8 fbf7 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8008718:	4603      	mov	r3, r0
 800871a:	b2db      	uxtb	r3, r3
 800871c:	4618      	mov	r0, r3
 800871e:	f7f9 f82d 	bl	800177c <prvTraceStoreTaskReady>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008726:	2201      	movs	r2, #1
 8008728:	409a      	lsls	r2, r3
 800872a:	4b2d      	ldr	r3, [pc, #180]	; (80087e0 <xTaskResumeAll+0x14c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4313      	orrs	r3, r2
 8008730:	4a2b      	ldr	r2, [pc, #172]	; (80087e0 <xTaskResumeAll+0x14c>)
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4a28      	ldr	r2, [pc, #160]	; (80087e4 <xTaskResumeAll+0x150>)
 8008742:	441a      	add	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3304      	adds	r3, #4
 8008748:	4619      	mov	r1, r3
 800874a:	4610      	mov	r0, r2
 800874c:	f7fe fb59 	bl	8006e02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008754:	4b24      	ldr	r3, [pc, #144]	; (80087e8 <xTaskResumeAll+0x154>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875a:	429a      	cmp	r2, r3
 800875c:	d302      	bcc.n	8008764 <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
 800875e:	4b23      	ldr	r3, [pc, #140]	; (80087ec <xTaskResumeAll+0x158>)
 8008760:	2201      	movs	r2, #1
 8008762:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008764:	4b1c      	ldr	r3, [pc, #112]	; (80087d8 <xTaskResumeAll+0x144>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1b9      	bne.n	80086e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <xTaskResumeAll+0xe2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008772:	f000 fc0d 	bl	8008f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008776:	4b1e      	ldr	r3, [pc, #120]	; (80087f0 <xTaskResumeAll+0x15c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d010      	beq.n	80087a4 <xTaskResumeAll+0x110>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008782:	f000 f849 	bl	8008818 <xTaskIncrementTick>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <xTaskResumeAll+0xfe>
							{
								xYieldPending = pdTRUE;
 800878c:	4b17      	ldr	r3, [pc, #92]	; (80087ec <xTaskResumeAll+0x158>)
 800878e:	2201      	movs	r2, #1
 8008790:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	3b01      	subs	r3, #1
 8008796:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1f1      	bne.n	8008782 <xTaskResumeAll+0xee>

						xPendedTicks = 0;
 800879e:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <xTaskResumeAll+0x15c>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087a4:	4b11      	ldr	r3, [pc, #68]	; (80087ec <xTaskResumeAll+0x158>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d009      	beq.n	80087c0 <xTaskResumeAll+0x12c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087b0:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <xTaskResumeAll+0x160>)
 80087b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087c0:	f001 fba0 	bl	8009f04 <vPortExitCritical>

	return xAlreadyYielded;
 80087c4:	68bb      	ldr	r3, [r7, #8]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20001d60 	.word	0x20001d60
 80087d4:	20001d38 	.word	0x20001d38
 80087d8:	20001cf8 	.word	0x20001cf8
 80087dc:	2000023c 	.word	0x2000023c
 80087e0:	20001d40 	.word	0x20001d40
 80087e4:	20001c3c 	.word	0x20001c3c
 80087e8:	20001c38 	.word	0x20001c38
 80087ec:	20001d4c 	.word	0x20001d4c
 80087f0:	20001d48 	.word	0x20001d48
 80087f4:	e000ed04 	.word	0xe000ed04

080087f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087fe:	4b05      	ldr	r3, [pc, #20]	; (8008814 <xTaskGetTickCount+0x1c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008804:	687b      	ldr	r3, [r7, #4]
}
 8008806:	4618      	mov	r0, r3
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20001d3c 	.word	0x20001d3c

08008818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800881e:	2300      	movs	r3, #0
 8008820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8008822:	4b65      	ldr	r3, [pc, #404]	; (80089b8 <xTaskIncrementTick+0x1a0>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d003      	beq.n	8008832 <xTaskIncrementTick+0x1a>
 800882a:	4b64      	ldr	r3, [pc, #400]	; (80089bc <xTaskIncrementTick+0x1a4>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d107      	bne.n	8008842 <xTaskIncrementTick+0x2a>
 8008832:	4b63      	ldr	r3, [pc, #396]	; (80089c0 <xTaskIncrementTick+0x1a8>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3301      	adds	r3, #1
 8008838:	4a61      	ldr	r2, [pc, #388]	; (80089c0 <xTaskIncrementTick+0x1a8>)
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	2000      	movs	r0, #0
 800883e:	f7f9 fe6b 	bl	8002518 <prvTracePortGetTimeStamp>
 8008842:	4b5d      	ldr	r3, [pc, #372]	; (80089b8 <xTaskIncrementTick+0x1a0>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d106      	bne.n	8008858 <xTaskIncrementTick+0x40>
 800884a:	4b5e      	ldr	r3, [pc, #376]	; (80089c4 <xTaskIncrementTick+0x1ac>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3301      	adds	r3, #1
 8008850:	4619      	mov	r1, r3
 8008852:	2003      	movs	r0, #3
 8008854:	f7f9 f978 	bl	8001b48 <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008858:	4b57      	ldr	r3, [pc, #348]	; (80089b8 <xTaskIncrementTick+0x1a0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	f040 80a1 	bne.w	80089a4 <xTaskIncrementTick+0x18c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008862:	4b58      	ldr	r3, [pc, #352]	; (80089c4 <xTaskIncrementTick+0x1ac>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3301      	adds	r3, #1
 8008868:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800886a:	4a56      	ldr	r2, [pc, #344]	; (80089c4 <xTaskIncrementTick+0x1ac>)
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d120      	bne.n	80088b8 <xTaskIncrementTick+0xa0>
		{
			taskSWITCH_DELAYED_LISTS();
 8008876:	4b54      	ldr	r3, [pc, #336]	; (80089c8 <xTaskIncrementTick+0x1b0>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <xTaskIncrementTick+0x7e>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	603b      	str	r3, [r7, #0]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <xTaskIncrementTick+0x7c>
 8008896:	4b4c      	ldr	r3, [pc, #304]	; (80089c8 <xTaskIncrementTick+0x1b0>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	4b4b      	ldr	r3, [pc, #300]	; (80089cc <xTaskIncrementTick+0x1b4>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a49      	ldr	r2, [pc, #292]	; (80089c8 <xTaskIncrementTick+0x1b0>)
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	4a49      	ldr	r2, [pc, #292]	; (80089cc <xTaskIncrementTick+0x1b4>)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	4b49      	ldr	r3, [pc, #292]	; (80089d0 <xTaskIncrementTick+0x1b8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3301      	adds	r3, #1
 80088b0:	4a47      	ldr	r2, [pc, #284]	; (80089d0 <xTaskIncrementTick+0x1b8>)
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	f000 fb6c 	bl	8008f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088b8:	4b46      	ldr	r3, [pc, #280]	; (80089d4 <xTaskIncrementTick+0x1bc>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d35b      	bcc.n	800897a <xTaskIncrementTick+0x162>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088c2:	4b41      	ldr	r3, [pc, #260]	; (80089c8 <xTaskIncrementTick+0x1b0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <xTaskIncrementTick+0xbe>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088cc:	4b41      	ldr	r3, [pc, #260]	; (80089d4 <xTaskIncrementTick+0x1bc>)
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295
 80088d2:	601a      	str	r2, [r3, #0]
					break;
 80088d4:	e051      	b.n	800897a <xTaskIncrementTick+0x162>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d6:	4b3c      	ldr	r3, [pc, #240]	; (80089c8 <xTaskIncrementTick+0x1b0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d203      	bcs.n	80088f6 <xTaskIncrementTick+0xde>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088ee:	4a39      	ldr	r2, [pc, #228]	; (80089d4 <xTaskIncrementTick+0x1bc>)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088f4:	e041      	b.n	800897a <xTaskIncrementTick+0x162>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	3304      	adds	r3, #4
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fade 	bl	8006ebc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	2b00      	cmp	r3, #0
 8008906:	d004      	beq.n	8008912 <xTaskIncrementTick+0xfa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	3318      	adds	r3, #24
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe fad5 	bl	8006ebc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008912:	68b8      	ldr	r0, [r7, #8]
 8008914:	f7f8 fb04 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8008918:	4603      	mov	r3, r0
 800891a:	461a      	mov	r2, r3
 800891c:	4b2e      	ldr	r3, [pc, #184]	; (80089d8 <xTaskIncrementTick+0x1c0>)
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	4013      	ands	r3, r2
 8008922:	b29b      	uxth	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d007      	beq.n	8008938 <xTaskIncrementTick+0x120>
 8008928:	68b8      	ldr	r0, [r7, #8]
 800892a:	f7f8 faec 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 800892e:	4603      	mov	r3, r0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	4618      	mov	r0, r3
 8008934:	f7f8 ff22 	bl	800177c <prvTraceStoreTaskReady>
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	2201      	movs	r2, #1
 800893e:	409a      	lsls	r2, r3
 8008940:	4b26      	ldr	r3, [pc, #152]	; (80089dc <xTaskIncrementTick+0x1c4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4313      	orrs	r3, r2
 8008946:	4a25      	ldr	r2, [pc, #148]	; (80089dc <xTaskIncrementTick+0x1c4>)
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894e:	4613      	mov	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4a22      	ldr	r2, [pc, #136]	; (80089e0 <xTaskIncrementTick+0x1c8>)
 8008958:	441a      	add	r2, r3
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	3304      	adds	r3, #4
 800895e:	4619      	mov	r1, r3
 8008960:	4610      	mov	r0, r2
 8008962:	f7fe fa4e 	bl	8006e02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896a:	4b1e      	ldr	r3, [pc, #120]	; (80089e4 <xTaskIncrementTick+0x1cc>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	429a      	cmp	r2, r3
 8008972:	d3a6      	bcc.n	80088c2 <xTaskIncrementTick+0xaa>
						{
							xSwitchRequired = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008978:	e7a3      	b.n	80088c2 <xTaskIncrementTick+0xaa>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800897a:	4b1a      	ldr	r3, [pc, #104]	; (80089e4 <xTaskIncrementTick+0x1cc>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008980:	4917      	ldr	r1, [pc, #92]	; (80089e0 <xTaskIncrementTick+0x1c8>)
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d901      	bls.n	8008996 <xTaskIncrementTick+0x17e>
			{
				xSwitchRequired = pdTRUE;
 8008992:	2301      	movs	r3, #1
 8008994:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <xTaskIncrementTick+0x1d0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d007      	beq.n	80089ae <xTaskIncrementTick+0x196>
			{
				xSwitchRequired = pdTRUE;
 800899e:	2301      	movs	r3, #1
 80089a0:	617b      	str	r3, [r7, #20]
 80089a2:	e004      	b.n	80089ae <xTaskIncrementTick+0x196>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089a4:	4b05      	ldr	r3, [pc, #20]	; (80089bc <xTaskIncrementTick+0x1a4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3301      	adds	r3, #1
 80089aa:	4a04      	ldr	r2, [pc, #16]	; (80089bc <xTaskIncrementTick+0x1a4>)
 80089ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089ae:	697b      	ldr	r3, [r7, #20]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	20001d60 	.word	0x20001d60
 80089bc:	20001d48 	.word	0x20001d48
 80089c0:	20000218 	.word	0x20000218
 80089c4:	20001d3c 	.word	0x20001d3c
 80089c8:	20001cf0 	.word	0x20001cf0
 80089cc:	20001cf4 	.word	0x20001cf4
 80089d0:	20001d50 	.word	0x20001d50
 80089d4:	20001d58 	.word	0x20001d58
 80089d8:	2000023c 	.word	0x2000023c
 80089dc:	20001d40 	.word	0x20001d40
 80089e0:	20001c3c 	.word	0x20001c3c
 80089e4:	20001c38 	.word	0x20001c38
 80089e8:	20001d4c 	.word	0x20001d4c

080089ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089f2:	4b38      	ldr	r3, [pc, #224]	; (8008ad4 <vTaskSwitchContext+0xe8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089fa:	4b37      	ldr	r3, [pc, #220]	; (8008ad8 <vTaskSwitchContext+0xec>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a00:	e063      	b.n	8008aca <vTaskSwitchContext+0xde>
		xYieldPending = pdFALSE;
 8008a02:	4b35      	ldr	r3, [pc, #212]	; (8008ad8 <vTaskSwitchContext+0xec>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a08:	4b34      	ldr	r3, [pc, #208]	; (8008adc <vTaskSwitchContext+0xf0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	fab3 f383 	clz	r3, r3
 8008a14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a16:	7afb      	ldrb	r3, [r7, #11]
 8008a18:	f1c3 031f 	rsb	r3, r3, #31
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	4930      	ldr	r1, [pc, #192]	; (8008ae0 <vTaskSwitchContext+0xf4>)
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	440b      	add	r3, r1
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	607b      	str	r3, [r7, #4]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <vTaskSwitchContext+0x5a>
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4a23      	ldr	r2, [pc, #140]	; (8008ae0 <vTaskSwitchContext+0xf4>)
 8008a54:	4413      	add	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	605a      	str	r2, [r3, #4]
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	3308      	adds	r3, #8
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d104      	bne.n	8008a78 <vTaskSwitchContext+0x8c>
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	605a      	str	r2, [r3, #4]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	4a19      	ldr	r2, [pc, #100]	; (8008ae4 <vTaskSwitchContext+0xf8>)
 8008a80:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8008a82:	4b19      	ldr	r3, [pc, #100]	; (8008ae8 <vTaskSwitchContext+0xfc>)
 8008a84:	2201      	movs	r2, #1
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f7f8 facb 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7f8 fa46 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8008a94:	4603      	mov	r3, r0
 8008a96:	461a      	mov	r2, r3
 8008a98:	4b14      	ldr	r3, [pc, #80]	; (8008aec <vTaskSwitchContext+0x100>)
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00a      	beq.n	8008aba <vTaskSwitchContext+0xce>
 8008aa4:	f7f8 fabd 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7f8 fa2b 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7f9 f8a3 	bl	8001c00 <prvTraceStoreTaskswitch>
 8008aba:	4b0b      	ldr	r3, [pc, #44]	; (8008ae8 <vTaskSwitchContext+0xfc>)
 8008abc:	2202      	movs	r2, #2
 8008abe:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ac0:	4b08      	ldr	r3, [pc, #32]	; (8008ae4 <vTaskSwitchContext+0xf8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3354      	adds	r3, #84	; 0x54
 8008ac6:	4a0a      	ldr	r2, [pc, #40]	; (8008af0 <vTaskSwitchContext+0x104>)
 8008ac8:	6013      	str	r3, [r2, #0]
}
 8008aca:	bf00      	nop
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20001d60 	.word	0x20001d60
 8008ad8:	20001d4c 	.word	0x20001d4c
 8008adc:	20001d40 	.word	0x20001d40
 8008ae0:	20001c3c 	.word	0x20001c3c
 8008ae4:	20001c38 	.word	0x20001c38
 8008ae8:	20000224 	.word	0x20000224
 8008aec:	2000023c 	.word	0x2000023c
 8008af0:	20000068 	.word	0x20000068

08008af4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	60fb      	str	r3, [r7, #12]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <vTaskPlaceOnEventList+0x44>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3318      	adds	r3, #24
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7fe f991 	bl	8006e4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b28:	2101      	movs	r1, #1
 8008b2a:	6838      	ldr	r0, [r7, #0]
 8008b2c:	f000 fcec 	bl	8009508 <prvAddCurrentTaskToDelayedList>
}
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	20001c38 	.word	0x20001c38

08008b3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	617b      	str	r3, [r7, #20]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b64:	4b26      	ldr	r3, [pc, #152]	; (8008c00 <vTaskPlaceOnEventListRestricted+0xc4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3318      	adds	r3, #24
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7fe f948 	bl	8006e02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b78:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8008b7e:	4b20      	ldr	r3, [pc, #128]	; (8008c00 <vTaskPlaceOnEventListRestricted+0xc4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7f8 f9cc 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	4b1d      	ldr	r3, [pc, #116]	; (8008c04 <vTaskPlaceOnEventListRestricted+0xc8>)
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	4013      	ands	r3, r2
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d011      	beq.n	8008bbc <vTaskPlaceOnEventListRestricted+0x80>
 8008b98:	4b1b      	ldr	r3, [pc, #108]	; (8008c08 <vTaskPlaceOnEventListRestricted+0xcc>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	2088      	movs	r0, #136	; 0x88
 8008ba4:	f7f8 ffd0 	bl	8001b48 <prvTraceStoreKernelCallWithNumericParamOnly>
 8008ba8:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <vTaskPlaceOnEventListRestricted+0xc4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7f8 f9aa 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7f9 f91c 	bl	8001df4 <prvTraceSetTaskInstanceFinished>
 8008bbc:	f7f8 fa31 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f8 f9ac 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <vTaskPlaceOnEventListRestricted+0xc8>)
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00a      	beq.n	8008bee <vTaskPlaceOnEventListRestricted+0xb2>
 8008bd8:	f7f8 fa23 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7f8 f991 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8008be4:	4603      	mov	r3, r0
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7f9 f903 	bl	8001df4 <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	68b8      	ldr	r0, [r7, #8]
 8008bf2:	f000 fc89 	bl	8009508 <prvAddCurrentTaskToDelayedList>
	}
 8008bf6:	bf00      	nop
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20001c38 	.word	0x20001c38
 8008c04:	2000023c 	.word	0x2000023c
 8008c08:	20001d3c 	.word	0x20001d3c

08008c0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	60fb      	str	r3, [r7, #12]
}
 8008c34:	bf00      	nop
 8008c36:	e7fe      	b.n	8008c36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	3318      	adds	r3, #24
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe f93d 	bl	8006ebc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c42:	4b27      	ldr	r3, [pc, #156]	; (8008ce0 <xTaskRemoveFromEventList+0xd4>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d12f      	bne.n	8008caa <xTaskRemoveFromEventList+0x9e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe f934 	bl	8006ebc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c54:	6938      	ldr	r0, [r7, #16]
 8008c56:	f7f8 f963 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	4b21      	ldr	r3, [pc, #132]	; (8008ce4 <xTaskRemoveFromEventList+0xd8>)
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	4013      	ands	r3, r2
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d007      	beq.n	8008c7a <xTaskRemoveFromEventList+0x6e>
 8008c6a:	6938      	ldr	r0, [r7, #16]
 8008c6c:	f7f8 f94b 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8008c70:	4603      	mov	r3, r0
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7f8 fd81 	bl	800177c <prvTraceStoreTaskReady>
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7e:	2201      	movs	r2, #1
 8008c80:	409a      	lsls	r2, r3
 8008c82:	4b19      	ldr	r3, [pc, #100]	; (8008ce8 <xTaskRemoveFromEventList+0xdc>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	4a17      	ldr	r2, [pc, #92]	; (8008ce8 <xTaskRemoveFromEventList+0xdc>)
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c90:	4613      	mov	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4a14      	ldr	r2, [pc, #80]	; (8008cec <xTaskRemoveFromEventList+0xe0>)
 8008c9a:	441a      	add	r2, r3
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	4610      	mov	r0, r2
 8008ca4:	f7fe f8ad 	bl	8006e02 <vListInsertEnd>
 8008ca8:	e005      	b.n	8008cb6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	3318      	adds	r3, #24
 8008cae:	4619      	mov	r1, r3
 8008cb0:	480f      	ldr	r0, [pc, #60]	; (8008cf0 <xTaskRemoveFromEventList+0xe4>)
 8008cb2:	f7fe f8a6 	bl	8006e02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cba:	4b0e      	ldr	r3, [pc, #56]	; (8008cf4 <xTaskRemoveFromEventList+0xe8>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d905      	bls.n	8008cd0 <xTaskRemoveFromEventList+0xc4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cc8:	4b0b      	ldr	r3, [pc, #44]	; (8008cf8 <xTaskRemoveFromEventList+0xec>)
 8008cca:	2201      	movs	r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	e001      	b.n	8008cd4 <xTaskRemoveFromEventList+0xc8>
	}
	else
	{
		xReturn = pdFALSE;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008cd4:	697b      	ldr	r3, [r7, #20]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20001d60 	.word	0x20001d60
 8008ce4:	2000023c 	.word	0x2000023c
 8008ce8:	20001d40 	.word	0x20001d40
 8008cec:	20001c3c 	.word	0x20001c3c
 8008cf0:	20001cf8 	.word	0x20001cf8
 8008cf4:	20001c38 	.word	0x20001c38
 8008cf8:	20001d4c 	.word	0x20001d4c

08008cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d04:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <vTaskInternalSetTimeOutState+0x24>)
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <vTaskInternalSetTimeOutState+0x28>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	605a      	str	r2, [r3, #4]
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	20001d50 	.word	0x20001d50
 8008d24:	20001d3c 	.word	0x20001d3c

08008d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10a      	bne.n	8008d4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	613b      	str	r3, [r7, #16]
}
 8008d4a:	bf00      	nop
 8008d4c:	e7fe      	b.n	8008d4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10a      	bne.n	8008d6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	60fb      	str	r3, [r7, #12]
}
 8008d66:	bf00      	nop
 8008d68:	e7fe      	b.n	8008d68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d6a:	f001 f89b 	bl	8009ea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d6e:	4b1d      	ldr	r3, [pc, #116]	; (8008de4 <xTaskCheckForTimeOut+0xbc>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d86:	d102      	bne.n	8008d8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	61fb      	str	r3, [r7, #28]
 8008d8c:	e023      	b.n	8008dd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <xTaskCheckForTimeOut+0xc0>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d007      	beq.n	8008daa <xTaskCheckForTimeOut+0x82>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d302      	bcc.n	8008daa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008da4:	2301      	movs	r3, #1
 8008da6:	61fb      	str	r3, [r7, #28]
 8008da8:	e015      	b.n	8008dd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d20b      	bcs.n	8008dcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	1ad2      	subs	r2, r2, r3
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff ff9b 	bl	8008cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	61fb      	str	r3, [r7, #28]
 8008dca:	e004      	b.n	8008dd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008dd6:	f001 f895 	bl	8009f04 <vPortExitCritical>

	return xReturn;
 8008dda:	69fb      	ldr	r3, [r7, #28]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3720      	adds	r7, #32
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20001d3c 	.word	0x20001d3c
 8008de8:	20001d50 	.word	0x20001d50

08008dec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008dec:	b480      	push	{r7}
 8008dee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008df0:	4b03      	ldr	r3, [pc, #12]	; (8008e00 <vTaskMissedYield+0x14>)
 8008df2:	2201      	movs	r2, #1
 8008df4:	601a      	str	r2, [r3, #0]
}
 8008df6:	bf00      	nop
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	20001d4c 	.word	0x20001d4c

08008e04 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	e001      	b.n	8008e22 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 8008e22:	68fb      	ldr	r3, [r7, #12]
	}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d004      	beq.n	8008e4a <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8008e4a:	bf00      	nop
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
	...

08008e58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e60:	f000 f852 	bl	8008f08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e64:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <prvIdleTask+0x28>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d9f9      	bls.n	8008e60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <prvIdleTask+0x2c>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e7c:	e7f0      	b.n	8008e60 <prvIdleTask+0x8>
 8008e7e:	bf00      	nop
 8008e80:	20001c3c 	.word	0x20001c3c
 8008e84:	e000ed04 	.word	0xe000ed04

08008e88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e8e:	2300      	movs	r3, #0
 8008e90:	607b      	str	r3, [r7, #4]
 8008e92:	e00c      	b.n	8008eae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4a12      	ldr	r2, [pc, #72]	; (8008ee8 <prvInitialiseTaskLists+0x60>)
 8008ea0:	4413      	add	r3, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fd ff80 	bl	8006da8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	607b      	str	r3, [r7, #4]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b06      	cmp	r3, #6
 8008eb2:	d9ef      	bls.n	8008e94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008eb4:	480d      	ldr	r0, [pc, #52]	; (8008eec <prvInitialiseTaskLists+0x64>)
 8008eb6:	f7fd ff77 	bl	8006da8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008eba:	480d      	ldr	r0, [pc, #52]	; (8008ef0 <prvInitialiseTaskLists+0x68>)
 8008ebc:	f7fd ff74 	bl	8006da8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ec0:	480c      	ldr	r0, [pc, #48]	; (8008ef4 <prvInitialiseTaskLists+0x6c>)
 8008ec2:	f7fd ff71 	bl	8006da8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ec6:	480c      	ldr	r0, [pc, #48]	; (8008ef8 <prvInitialiseTaskLists+0x70>)
 8008ec8:	f7fd ff6e 	bl	8006da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ecc:	480b      	ldr	r0, [pc, #44]	; (8008efc <prvInitialiseTaskLists+0x74>)
 8008ece:	f7fd ff6b 	bl	8006da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ed2:	4b0b      	ldr	r3, [pc, #44]	; (8008f00 <prvInitialiseTaskLists+0x78>)
 8008ed4:	4a05      	ldr	r2, [pc, #20]	; (8008eec <prvInitialiseTaskLists+0x64>)
 8008ed6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <prvInitialiseTaskLists+0x7c>)
 8008eda:	4a05      	ldr	r2, [pc, #20]	; (8008ef0 <prvInitialiseTaskLists+0x68>)
 8008edc:	601a      	str	r2, [r3, #0]
}
 8008ede:	bf00      	nop
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20001c3c 	.word	0x20001c3c
 8008eec:	20001cc8 	.word	0x20001cc8
 8008ef0:	20001cdc 	.word	0x20001cdc
 8008ef4:	20001cf8 	.word	0x20001cf8
 8008ef8:	20001d0c 	.word	0x20001d0c
 8008efc:	20001d24 	.word	0x20001d24
 8008f00:	20001cf0 	.word	0x20001cf0
 8008f04:	20001cf4 	.word	0x20001cf4

08008f08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f0e:	e019      	b.n	8008f44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f10:	f000 ffc8 	bl	8009ea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f14:	4b10      	ldr	r3, [pc, #64]	; (8008f58 <prvCheckTasksWaitingTermination+0x50>)
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fd ffcb 	bl	8006ebc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f26:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <prvCheckTasksWaitingTermination+0x54>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	4a0b      	ldr	r2, [pc, #44]	; (8008f5c <prvCheckTasksWaitingTermination+0x54>)
 8008f2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f30:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <prvCheckTasksWaitingTermination+0x58>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	4a0a      	ldr	r2, [pc, #40]	; (8008f60 <prvCheckTasksWaitingTermination+0x58>)
 8008f38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f3a:	f000 ffe3 	bl	8009f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f810 	bl	8008f64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f44:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <prvCheckTasksWaitingTermination+0x58>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e1      	bne.n	8008f10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f4c:	bf00      	nop
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20001d0c 	.word	0x20001d0c
 8008f5c:	20001d38 	.word	0x20001d38
 8008f60:	20001d20 	.word	0x20001d20

08008f64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	3354      	adds	r3, #84	; 0x54
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 fb6f 	bl	800a654 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f001 f990 	bl	800a2a0 <vPortFree>
			vPortFree( pxTCB );
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 f98d 	bl	800a2a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f96:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <prvResetNextTaskUnblockTime+0x38>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d104      	bne.n	8008faa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fa0:	4b0a      	ldr	r3, [pc, #40]	; (8008fcc <prvResetNextTaskUnblockTime+0x3c>)
 8008fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fa8:	e008      	b.n	8008fbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008faa:	4b07      	ldr	r3, [pc, #28]	; (8008fc8 <prvResetNextTaskUnblockTime+0x38>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	4a04      	ldr	r2, [pc, #16]	; (8008fcc <prvResetNextTaskUnblockTime+0x3c>)
 8008fba:	6013      	str	r3, [r2, #0]
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	20001cf0 	.word	0x20001cf0
 8008fcc:	20001d58 	.word	0x20001d58

08008fd0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008fd6:	4b05      	ldr	r3, [pc, #20]	; (8008fec <xTaskGetCurrentTaskHandle+0x1c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008fdc:	687b      	ldr	r3, [r7, #4]
	}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	20001c38 	.word	0x20001c38

08008ff0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ff6:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <xTaskGetSchedulerState+0x34>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ffe:	2301      	movs	r3, #1
 8009000:	607b      	str	r3, [r7, #4]
 8009002:	e008      	b.n	8009016 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009004:	4b08      	ldr	r3, [pc, #32]	; (8009028 <xTaskGetSchedulerState+0x38>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800900c:	2302      	movs	r3, #2
 800900e:	607b      	str	r3, [r7, #4]
 8009010:	e001      	b.n	8009016 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009012:	2300      	movs	r3, #0
 8009014:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009016:	687b      	ldr	r3, [r7, #4]
	}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	20001d44 	.word	0x20001d44
 8009028:	20001d60 	.word	0x20001d60

0800902c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800902c:	b590      	push	{r4, r7, lr}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009038:	2300      	movs	r3, #0
 800903a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 80af 	beq.w	80091a2 <xTaskPriorityDisinherit+0x176>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009044:	4b59      	ldr	r3, [pc, #356]	; (80091ac <xTaskPriorityDisinherit+0x180>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	429a      	cmp	r2, r3
 800904c:	d00a      	beq.n	8009064 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	60fb      	str	r3, [r7, #12]
}
 8009060:	bf00      	nop
 8009062:	e7fe      	b.n	8009062 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	60bb      	str	r3, [r7, #8]
}
 800907e:	bf00      	nop
 8009080:	e7fe      	b.n	8009080 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009086:	1e5a      	subs	r2, r3, #1
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009094:	429a      	cmp	r2, r3
 8009096:	f000 8084 	beq.w	80091a2 <xTaskPriorityDisinherit+0x176>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d17f      	bne.n	80091a2 <xTaskPriorityDisinherit+0x176>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fd ff08 	bl	8006ebc <uxListRemove>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d115      	bne.n	80090de <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b6:	493e      	ldr	r1, [pc, #248]	; (80091b0 <xTaskPriorityDisinherit+0x184>)
 80090b8:	4613      	mov	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	440b      	add	r3, r1
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <xTaskPriorityDisinherit+0xb2>
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	2201      	movs	r2, #1
 80090ce:	fa02 f303 	lsl.w	r3, r2, r3
 80090d2:	43da      	mvns	r2, r3
 80090d4:	4b37      	ldr	r3, [pc, #220]	; (80091b4 <xTaskPriorityDisinherit+0x188>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4013      	ands	r3, r2
 80090da:	4a36      	ldr	r2, [pc, #216]	; (80091b4 <xTaskPriorityDisinherit+0x188>)
 80090dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80090de:	6938      	ldr	r0, [r7, #16]
 80090e0:	f7f7 ff1e 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80090e4:	4603      	mov	r3, r0
 80090e6:	461a      	mov	r2, r3
 80090e8:	4b33      	ldr	r3, [pc, #204]	; (80091b8 <xTaskPriorityDisinherit+0x18c>)
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	4013      	ands	r3, r2
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d020      	beq.n	8009136 <xTaskPriorityDisinherit+0x10a>
 80090f4:	6938      	ldr	r0, [r7, #16]
 80090f6:	f7f7 ff06 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 80090fa:	4603      	mov	r3, r0
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	461c      	mov	r4, r3
 8009100:	6938      	ldr	r0, [r7, #16]
 8009102:	f7f7 ff00 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8009106:	4603      	mov	r3, r0
 8009108:	b2db      	uxtb	r3, r3
 800910a:	4619      	mov	r1, r3
 800910c:	2003      	movs	r0, #3
 800910e:	f7f8 fe07 	bl	8001d20 <prvTraceGetPriorityProperty>
 8009112:	4603      	mov	r3, r0
 8009114:	4622      	mov	r2, r4
 8009116:	2103      	movs	r1, #3
 8009118:	208f      	movs	r0, #143	; 0x8f
 800911a:	f7f8 fc7f 	bl	8001a1c <prvTraceStoreKernelCallWithParam>
 800911e:	6938      	ldr	r0, [r7, #16]
 8009120:	f7f7 fef1 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8009124:	4603      	mov	r3, r0
 8009126:	b2d9      	uxtb	r1, r3
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912c:	b2db      	uxtb	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	2003      	movs	r0, #3
 8009132:	f7f8 fdcf 	bl	8001cd4 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009142:	f1c3 0207 	rsb	r2, r3, #7
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800914a:	6938      	ldr	r0, [r7, #16]
 800914c:	f7f7 fee8 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	4b18      	ldr	r3, [pc, #96]	; (80091b8 <xTaskPriorityDisinherit+0x18c>)
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	4013      	ands	r3, r2
 800915a:	b29b      	uxth	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d007      	beq.n	8009170 <xTaskPriorityDisinherit+0x144>
 8009160:	6938      	ldr	r0, [r7, #16]
 8009162:	f7f7 fed0 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8009166:	4603      	mov	r3, r0
 8009168:	b2db      	uxtb	r3, r3
 800916a:	4618      	mov	r0, r3
 800916c:	f7f8 fb06 	bl	800177c <prvTraceStoreTaskReady>
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	2201      	movs	r2, #1
 8009176:	409a      	lsls	r2, r3
 8009178:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <xTaskPriorityDisinherit+0x188>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4313      	orrs	r3, r2
 800917e:	4a0d      	ldr	r2, [pc, #52]	; (80091b4 <xTaskPriorityDisinherit+0x188>)
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4a08      	ldr	r2, [pc, #32]	; (80091b0 <xTaskPriorityDisinherit+0x184>)
 8009190:	441a      	add	r2, r3
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	3304      	adds	r3, #4
 8009196:	4619      	mov	r1, r3
 8009198:	4610      	mov	r0, r2
 800919a:	f7fd fe32 	bl	8006e02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800919e:	2301      	movs	r3, #1
 80091a0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091a2:	697b      	ldr	r3, [r7, #20]
	}
 80091a4:	4618      	mov	r0, r3
 80091a6:	371c      	adds	r7, #28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd90      	pop	{r4, r7, pc}
 80091ac:	20001c38 	.word	0x20001c38
 80091b0:	20001c3c 	.word	0x20001c3c
 80091b4:	20001d40 	.word	0x20001d40
 80091b8:	2000023c 	.word	0x2000023c

080091bc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80091c6:	f000 fe6d 	bl	8009ea4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80091ca:	4b6d      	ldr	r3, [pc, #436]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d154      	bne.n	8009280 <ulTaskNotifyTake+0xc4>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80091d6:	4b6a      	ldr	r3, [pc, #424]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d04c      	beq.n	8009280 <ulTaskNotifyTake+0xc4>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091e6:	2101      	movs	r1, #1
 80091e8:	6838      	ldr	r0, [r7, #0]
 80091ea:	f000 f98d 	bl	8009508 <prvAddCurrentTaskToDelayedList>
					traceTASK_NOTIFY_TAKE_BLOCK();
 80091ee:	f7f7 ff18 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 80091f2:	4603      	mov	r3, r0
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f7 fe93 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80091fa:	4603      	mov	r3, r0
 80091fc:	461a      	mov	r2, r3
 80091fe:	4b61      	ldr	r3, [pc, #388]	; (8009384 <ulTaskNotifyTake+0x1c8>)
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	4013      	ands	r3, r2
 8009204:	b29b      	uxth	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d019      	beq.n	800923e <ulTaskNotifyTake+0x82>
 800920a:	4b5d      	ldr	r3, [pc, #372]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4618      	mov	r0, r3
 8009210:	f7f7 fe86 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 8009214:	4603      	mov	r3, r0
 8009216:	461a      	mov	r2, r3
 8009218:	4b5a      	ldr	r3, [pc, #360]	; (8009384 <ulTaskNotifyTake+0x1c8>)
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	4013      	ands	r3, r2
 800921e:	b29b      	uxth	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00c      	beq.n	800923e <ulTaskNotifyTake+0x82>
 8009224:	4b56      	ldr	r3, [pc, #344]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4618      	mov	r0, r3
 800922a:	f7f7 fe6c 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 800922e:	4603      	mov	r3, r0
 8009230:	b2db      	uxtb	r3, r3
 8009232:	461a      	mov	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2103      	movs	r1, #3
 8009238:	20d4      	movs	r0, #212	; 0xd4
 800923a:	f7f8 fbef 	bl	8001a1c <prvTraceStoreKernelCallWithParam>
 800923e:	f7f7 fef0 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 8009242:	4603      	mov	r3, r0
 8009244:	4618      	mov	r0, r3
 8009246:	f7f7 fe6b 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	4b4d      	ldr	r3, [pc, #308]	; (8009384 <ulTaskNotifyTake+0x1c8>)
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	4013      	ands	r3, r2
 8009254:	b29b      	uxth	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <ulTaskNotifyTake+0xb4>
 800925a:	f7f7 fee2 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 800925e:	4603      	mov	r3, r0
 8009260:	4618      	mov	r0, r3
 8009262:	f7f7 fe50 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8009266:	4603      	mov	r3, r0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	4618      	mov	r0, r3
 800926c:	f7f8 fdc2 	bl	8001df4 <prvTraceSetTaskInstanceFinished>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009270:	4b45      	ldr	r3, [pc, #276]	; (8009388 <ulTaskNotifyTake+0x1cc>)
 8009272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009280:	f000 fe40 	bl	8009f04 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009284:	f000 fe0e 	bl	8009ea4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
 8009288:	4b3d      	ldr	r3, [pc, #244]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b02      	cmp	r3, #2
 8009294:	d128      	bne.n	80092e8 <ulTaskNotifyTake+0x12c>
 8009296:	f7f7 fec4 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 800929a:	4603      	mov	r3, r0
 800929c:	4618      	mov	r0, r3
 800929e:	f7f7 fe3f 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b37      	ldr	r3, [pc, #220]	; (8009384 <ulTaskNotifyTake+0x1c8>)
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	4013      	ands	r3, r2
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d042      	beq.n	8009338 <ulTaskNotifyTake+0x17c>
 80092b2:	4b33      	ldr	r3, [pc, #204]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7f7 fe32 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80092bc:	4603      	mov	r3, r0
 80092be:	461a      	mov	r2, r3
 80092c0:	4b30      	ldr	r3, [pc, #192]	; (8009384 <ulTaskNotifyTake+0x1c8>)
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	4013      	ands	r3, r2
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d035      	beq.n	8009338 <ulTaskNotifyTake+0x17c>
 80092cc:	4b2c      	ldr	r3, [pc, #176]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7f7 fe18 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 80092d6:	4603      	mov	r3, r0
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	461a      	mov	r2, r3
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2103      	movs	r1, #3
 80092e0:	20d3      	movs	r0, #211	; 0xd3
 80092e2:	f7f8 fb9b 	bl	8001a1c <prvTraceStoreKernelCallWithParam>
 80092e6:	e027      	b.n	8009338 <ulTaskNotifyTake+0x17c>
 80092e8:	f7f7 fe9b 	bl	8001022 <prvTraceGetCurrentTaskHandle>
 80092ec:	4603      	mov	r3, r0
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7f7 fe16 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80092f4:	4603      	mov	r3, r0
 80092f6:	461a      	mov	r2, r3
 80092f8:	4b22      	ldr	r3, [pc, #136]	; (8009384 <ulTaskNotifyTake+0x1c8>)
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	4013      	ands	r3, r2
 80092fe:	b29b      	uxth	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d019      	beq.n	8009338 <ulTaskNotifyTake+0x17c>
 8009304:	4b1e      	ldr	r3, [pc, #120]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4618      	mov	r0, r3
 800930a:	f7f7 fe09 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 800930e:	4603      	mov	r3, r0
 8009310:	461a      	mov	r2, r3
 8009312:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <ulTaskNotifyTake+0x1c8>)
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	4013      	ands	r3, r2
 8009318:	b29b      	uxth	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00c      	beq.n	8009338 <ulTaskNotifyTake+0x17c>
 800931e:	4b18      	ldr	r3, [pc, #96]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f7f7 fdef 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8009328:	4603      	mov	r3, r0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	461a      	mov	r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2103      	movs	r1, #3
 8009332:	20d5      	movs	r0, #213	; 0xd5
 8009334:	f7f8 fb72 	bl	8001a1c <prvTraceStoreKernelCallWithParam>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009338:	4b11      	ldr	r3, [pc, #68]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009340:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00e      	beq.n	8009366 <ulTaskNotifyTake+0x1aa>
			{
				if( xClearCountOnExit != pdFALSE )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <ulTaskNotifyTake+0x19e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800934e:	4b0c      	ldr	r3, [pc, #48]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2200      	movs	r2, #0
 8009354:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8009358:	e005      	b.n	8009366 <ulTaskNotifyTake+0x1aa>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800935a:	4b09      	ldr	r3, [pc, #36]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	3a01      	subs	r2, #1
 8009362:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009366:	4b06      	ldr	r3, [pc, #24]	; (8009380 <ulTaskNotifyTake+0x1c4>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 8009370:	f000 fdc8 	bl	8009f04 <vPortExitCritical>

		return ulReturn;
 8009374:	68fb      	ldr	r3, [r7, #12]
	}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20001c38 	.word	0x20001c38
 8009384:	2000023c 	.word	0x2000023c
 8009388:	e000ed04 	.word	0xe000ed04

0800938c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08a      	sub	sp, #40	; 0x28
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10a      	bne.n	80093b2 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	61bb      	str	r3, [r7, #24]
}
 80093ae:	bf00      	nop
 80093b0:	e7fe      	b.n	80093b0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093b2:	f000 fe59 	bl	800a068 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80093ba:	f3ef 8211 	mrs	r2, BASEPRI
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	617a      	str	r2, [r7, #20]
 80093d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80093d2:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093d4:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80093dc:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	2202      	movs	r2, #2
 80093e2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80093e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7f7 fd93 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 80093fa:	4603      	mov	r3, r0
 80093fc:	461a      	mov	r2, r3
 80093fe:	4b3b      	ldr	r3, [pc, #236]	; (80094ec <vTaskNotifyGiveFromISR+0x160>)
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	4013      	ands	r3, r2
 8009404:	b29b      	uxth	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d009      	beq.n	800941e <vTaskNotifyGiveFromISR+0x92>
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7f7 fd7b 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8009410:	4603      	mov	r3, r0
 8009412:	b2db      	uxtb	r3, r3
 8009414:	461a      	mov	r2, r3
 8009416:	2103      	movs	r1, #3
 8009418:	20da      	movs	r0, #218	; 0xda
 800941a:	f7f8 faa3 	bl	8001964 <prvTraceStoreKernelCall>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800941e:	7ffb      	ldrb	r3, [r7, #31]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d158      	bne.n	80094d6 <vTaskNotifyGiveFromISR+0x14a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00a      	beq.n	8009442 <vTaskNotifyGiveFromISR+0xb6>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	60fb      	str	r3, [r7, #12]
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <vTaskNotifyGiveFromISR+0xb4>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009442:	4b2b      	ldr	r3, [pc, #172]	; (80094f0 <vTaskNotifyGiveFromISR+0x164>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d12f      	bne.n	80094aa <vTaskNotifyGiveFromISR+0x11e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	3304      	adds	r3, #4
 800944e:	4618      	mov	r0, r3
 8009450:	f7fd fd34 	bl	8006ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009454:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009456:	f7f7 fd63 	bl	8000f20 <prvTraceGetTaskNumberHigh16>
 800945a:	4603      	mov	r3, r0
 800945c:	461a      	mov	r2, r3
 800945e:	4b23      	ldr	r3, [pc, #140]	; (80094ec <vTaskNotifyGiveFromISR+0x160>)
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	4013      	ands	r3, r2
 8009464:	b29b      	uxth	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d007      	beq.n	800947a <vTaskNotifyGiveFromISR+0xee>
 800946a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800946c:	f7f7 fd4b 	bl	8000f06 <prvTraceGetTaskNumberLow16>
 8009470:	4603      	mov	r3, r0
 8009472:	b2db      	uxtb	r3, r3
 8009474:	4618      	mov	r0, r3
 8009476:	f7f8 f981 	bl	800177c <prvTraceStoreTaskReady>
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	2201      	movs	r2, #1
 8009480:	409a      	lsls	r2, r3
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <vTaskNotifyGiveFromISR+0x168>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4313      	orrs	r3, r2
 8009488:	4a1a      	ldr	r2, [pc, #104]	; (80094f4 <vTaskNotifyGiveFromISR+0x168>)
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4a17      	ldr	r2, [pc, #92]	; (80094f8 <vTaskNotifyGiveFromISR+0x16c>)
 800949a:	441a      	add	r2, r3
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	3304      	adds	r3, #4
 80094a0:	4619      	mov	r1, r3
 80094a2:	4610      	mov	r0, r2
 80094a4:	f7fd fcad 	bl	8006e02 <vListInsertEnd>
 80094a8:	e005      	b.n	80094b6 <vTaskNotifyGiveFromISR+0x12a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	3318      	adds	r3, #24
 80094ae:	4619      	mov	r1, r3
 80094b0:	4812      	ldr	r0, [pc, #72]	; (80094fc <vTaskNotifyGiveFromISR+0x170>)
 80094b2:	f7fd fca6 	bl	8006e02 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ba:	4b11      	ldr	r3, [pc, #68]	; (8009500 <vTaskNotifyGiveFromISR+0x174>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d908      	bls.n	80094d6 <vTaskNotifyGiveFromISR+0x14a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <vTaskNotifyGiveFromISR+0x144>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2201      	movs	r2, #1
 80094ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80094d0:	4b0c      	ldr	r3, [pc, #48]	; (8009504 <vTaskNotifyGiveFromISR+0x178>)
 80094d2:	2201      	movs	r2, #1
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f383 8811 	msr	BASEPRI, r3
}
 80094e0:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80094e2:	bf00      	nop
 80094e4:	3728      	adds	r7, #40	; 0x28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	2000023c 	.word	0x2000023c
 80094f0:	20001d60 	.word	0x20001d60
 80094f4:	20001d40 	.word	0x20001d40
 80094f8:	20001c3c 	.word	0x20001c3c
 80094fc:	20001cf8 	.word	0x20001cf8
 8009500:	20001c38 	.word	0x20001c38
 8009504:	20001d4c 	.word	0x20001d4c

08009508 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009512:	4b29      	ldr	r3, [pc, #164]	; (80095b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009518:	4b28      	ldr	r3, [pc, #160]	; (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3304      	adds	r3, #4
 800951e:	4618      	mov	r0, r3
 8009520:	f7fd fccc 	bl	8006ebc <uxListRemove>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10b      	bne.n	8009542 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800952a:	4b24      	ldr	r3, [pc, #144]	; (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	2201      	movs	r2, #1
 8009532:	fa02 f303 	lsl.w	r3, r2, r3
 8009536:	43da      	mvns	r2, r3
 8009538:	4b21      	ldr	r3, [pc, #132]	; (80095c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4013      	ands	r3, r2
 800953e:	4a20      	ldr	r2, [pc, #128]	; (80095c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009540:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d10a      	bne.n	8009560 <prvAddCurrentTaskToDelayedList+0x58>
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d007      	beq.n	8009560 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009550:	4b1a      	ldr	r3, [pc, #104]	; (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3304      	adds	r3, #4
 8009556:	4619      	mov	r1, r3
 8009558:	481a      	ldr	r0, [pc, #104]	; (80095c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800955a:	f7fd fc52 	bl	8006e02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800955e:	e026      	b.n	80095ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4413      	add	r3, r2
 8009566:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009568:	4b14      	ldr	r3, [pc, #80]	; (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	429a      	cmp	r2, r3
 8009576:	d209      	bcs.n	800958c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009578:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3304      	adds	r3, #4
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f7fd fc60 	bl	8006e4a <vListInsert>
}
 800958a:	e010      	b.n	80095ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800958c:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3304      	adds	r3, #4
 8009596:	4619      	mov	r1, r3
 8009598:	4610      	mov	r0, r2
 800959a:	f7fd fc56 	bl	8006e4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800959e:	4b0c      	ldr	r3, [pc, #48]	; (80095d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d202      	bcs.n	80095ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80095a8:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6013      	str	r3, [r2, #0]
}
 80095ae:	bf00      	nop
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20001d3c 	.word	0x20001d3c
 80095bc:	20001c38 	.word	0x20001c38
 80095c0:	20001d40 	.word	0x20001d40
 80095c4:	20001d24 	.word	0x20001d24
 80095c8:	20001cf4 	.word	0x20001cf4
 80095cc:	20001cf0 	.word	0x20001cf0
 80095d0:	20001d58 	.word	0x20001d58

080095d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80095da:	2300      	movs	r3, #0
 80095dc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095de:	f000 faf1 	bl	8009bc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095e2:	4b11      	ldr	r3, [pc, #68]	; (8009628 <xTimerCreateTimerTask+0x54>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80095ea:	4b10      	ldr	r3, [pc, #64]	; (800962c <xTimerCreateTimerTask+0x58>)
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	2305      	movs	r3, #5
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	2300      	movs	r3, #0
 80095f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095f8:	490d      	ldr	r1, [pc, #52]	; (8009630 <xTimerCreateTimerTask+0x5c>)
 80095fa:	480e      	ldr	r0, [pc, #56]	; (8009634 <xTimerCreateTimerTask+0x60>)
 80095fc:	f7fe fd86 	bl	800810c <xTaskCreate>
 8009600:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10a      	bne.n	800961e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	603b      	str	r3, [r7, #0]
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800961e:	687b      	ldr	r3, [r7, #4]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20001d94 	.word	0x20001d94
 800962c:	20001d98 	.word	0x20001d98
 8009630:	0800afb4 	.word	0x0800afb4
 8009634:	0800976d 	.word	0x0800976d

08009638 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08a      	sub	sp, #40	; 0x28
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009646:	2300      	movs	r3, #0
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	623b      	str	r3, [r7, #32]
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009666:	4b1a      	ldr	r3, [pc, #104]	; (80096d0 <xTimerGenericCommand+0x98>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d02a      	beq.n	80096c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b05      	cmp	r3, #5
 800967e:	dc18      	bgt.n	80096b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009680:	f7ff fcb6 	bl	8008ff0 <xTaskGetSchedulerState>
 8009684:	4603      	mov	r3, r0
 8009686:	2b02      	cmp	r3, #2
 8009688:	d109      	bne.n	800969e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800968a:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <xTimerGenericCommand+0x98>)
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	f107 0110 	add.w	r1, r7, #16
 8009692:	2300      	movs	r3, #0
 8009694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009696:	f7fd fd91 	bl	80071bc <xQueueGenericSend>
 800969a:	6278      	str	r0, [r7, #36]	; 0x24
 800969c:	e012      	b.n	80096c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800969e:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <xTimerGenericCommand+0x98>)
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f107 0110 	add.w	r1, r7, #16
 80096a6:	2300      	movs	r3, #0
 80096a8:	2200      	movs	r2, #0
 80096aa:	f7fd fd87 	bl	80071bc <xQueueGenericSend>
 80096ae:	6278      	str	r0, [r7, #36]	; 0x24
 80096b0:	e008      	b.n	80096c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096b2:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <xTimerGenericCommand+0x98>)
 80096b4:	6818      	ldr	r0, [r3, #0]
 80096b6:	f107 0110 	add.w	r1, r7, #16
 80096ba:	2300      	movs	r3, #0
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	f7fd ffa7 	bl	8007610 <xQueueGenericSendFromISR>
 80096c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3728      	adds	r7, #40	; 0x28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20001d94 	.word	0x20001d94

080096d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af02      	add	r7, sp, #8
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096de:	4b22      	ldr	r3, [pc, #136]	; (8009768 <prvProcessExpiredTimer+0x94>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	3304      	adds	r3, #4
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fd fbe5 	bl	8006ebc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d022      	beq.n	8009746 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	699a      	ldr	r2, [r3, #24]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	18d1      	adds	r1, r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	6978      	ldr	r0, [r7, #20]
 800970e:	f000 f8d1 	bl	80098b4 <prvInsertTimerInActiveList>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01f      	beq.n	8009758 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009718:	2300      	movs	r3, #0
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	2300      	movs	r3, #0
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	2100      	movs	r1, #0
 8009722:	6978      	ldr	r0, [r7, #20]
 8009724:	f7ff ff88 	bl	8009638 <xTimerGenericCommand>
 8009728:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d113      	bne.n	8009758 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	60fb      	str	r3, [r7, #12]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	b2da      	uxtb	r2, r3
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	6a1b      	ldr	r3, [r3, #32]
 800975c:	6978      	ldr	r0, [r7, #20]
 800975e:	4798      	blx	r3
}
 8009760:	bf00      	nop
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20001d8c 	.word	0x20001d8c

0800976c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009774:	f107 0308 	add.w	r3, r7, #8
 8009778:	4618      	mov	r0, r3
 800977a:	f000 f857 	bl	800982c <prvGetNextExpireTime>
 800977e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4619      	mov	r1, r3
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 f803 	bl	8009790 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800978a:	f000 f8d5 	bl	8009938 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800978e:	e7f1      	b.n	8009774 <prvTimerTask+0x8>

08009790 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800979a:	f7fe ff6d 	bl	8008678 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800979e:	f107 0308 	add.w	r3, r7, #8
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 f866 	bl	8009874 <prvSampleTimeNow>
 80097a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d130      	bne.n	8009812 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10a      	bne.n	80097cc <prvProcessTimerOrBlockTask+0x3c>
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d806      	bhi.n	80097cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097be:	f7fe ff69 	bl	8008694 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097c2:	68f9      	ldr	r1, [r7, #12]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff ff85 	bl	80096d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097ca:	e024      	b.n	8009816 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d008      	beq.n	80097e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097d2:	4b13      	ldr	r3, [pc, #76]	; (8009820 <prvProcessTimerOrBlockTask+0x90>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <prvProcessTimerOrBlockTask+0x50>
 80097dc:	2301      	movs	r3, #1
 80097de:	e000      	b.n	80097e2 <prvProcessTimerOrBlockTask+0x52>
 80097e0:	2300      	movs	r3, #0
 80097e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097e4:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <prvProcessTimerOrBlockTask+0x94>)
 80097e6:	6818      	ldr	r0, [r3, #0]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	4619      	mov	r1, r3
 80097f2:	f7fe fbb1 	bl	8007f58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097f6:	f7fe ff4d 	bl	8008694 <xTaskResumeAll>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009800:	4b09      	ldr	r3, [pc, #36]	; (8009828 <prvProcessTimerOrBlockTask+0x98>)
 8009802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009806:	601a      	str	r2, [r3, #0]
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	f3bf 8f6f 	isb	sy
}
 8009810:	e001      	b.n	8009816 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009812:	f7fe ff3f 	bl	8008694 <xTaskResumeAll>
}
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20001d90 	.word	0x20001d90
 8009824:	20001d94 	.word	0x20001d94
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009834:	4b0e      	ldr	r3, [pc, #56]	; (8009870 <prvGetNextExpireTime+0x44>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <prvGetNextExpireTime+0x16>
 800983e:	2201      	movs	r2, #1
 8009840:	e000      	b.n	8009844 <prvGetNextExpireTime+0x18>
 8009842:	2200      	movs	r2, #0
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d105      	bne.n	800985c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009850:	4b07      	ldr	r3, [pc, #28]	; (8009870 <prvGetNextExpireTime+0x44>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	60fb      	str	r3, [r7, #12]
 800985a:	e001      	b.n	8009860 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800985c:	2300      	movs	r3, #0
 800985e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009860:	68fb      	ldr	r3, [r7, #12]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	20001d8c 	.word	0x20001d8c

08009874 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800987c:	f7fe ffbc 	bl	80087f8 <xTaskGetTickCount>
 8009880:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009882:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <prvSampleTimeNow+0x3c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	429a      	cmp	r2, r3
 800988a:	d205      	bcs.n	8009898 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800988c:	f000 f936 	bl	8009afc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	e002      	b.n	800989e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800989e:	4a04      	ldr	r2, [pc, #16]	; (80098b0 <prvSampleTimeNow+0x3c>)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098a4:	68fb      	ldr	r3, [r7, #12]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	20001d9c 	.word	0x20001d9c

080098b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098c2:	2300      	movs	r3, #0
 80098c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d812      	bhi.n	8009900 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d302      	bcc.n	80098ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098e8:	2301      	movs	r3, #1
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	e01b      	b.n	8009926 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098ee:	4b10      	ldr	r3, [pc, #64]	; (8009930 <prvInsertTimerInActiveList+0x7c>)
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3304      	adds	r3, #4
 80098f6:	4619      	mov	r1, r3
 80098f8:	4610      	mov	r0, r2
 80098fa:	f7fd faa6 	bl	8006e4a <vListInsert>
 80098fe:	e012      	b.n	8009926 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	429a      	cmp	r2, r3
 8009906:	d206      	bcs.n	8009916 <prvInsertTimerInActiveList+0x62>
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	429a      	cmp	r2, r3
 800990e:	d302      	bcc.n	8009916 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009910:	2301      	movs	r3, #1
 8009912:	617b      	str	r3, [r7, #20]
 8009914:	e007      	b.n	8009926 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009916:	4b07      	ldr	r3, [pc, #28]	; (8009934 <prvInsertTimerInActiveList+0x80>)
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3304      	adds	r3, #4
 800991e:	4619      	mov	r1, r3
 8009920:	4610      	mov	r0, r2
 8009922:	f7fd fa92 	bl	8006e4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009926:	697b      	ldr	r3, [r7, #20]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	20001d90 	.word	0x20001d90
 8009934:	20001d8c 	.word	0x20001d8c

08009938 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08e      	sub	sp, #56	; 0x38
 800993c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800993e:	e0ca      	b.n	8009ad6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	da18      	bge.n	8009978 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009946:	1d3b      	adds	r3, r7, #4
 8009948:	3304      	adds	r3, #4
 800994a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10a      	bne.n	8009968 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	61fb      	str	r3, [r7, #28]
}
 8009964:	bf00      	nop
 8009966:	e7fe      	b.n	8009966 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800996e:	6850      	ldr	r0, [r2, #4]
 8009970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009972:	6892      	ldr	r2, [r2, #8]
 8009974:	4611      	mov	r1, r2
 8009976:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	f2c0 80ab 	blt.w	8009ad6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d004      	beq.n	8009996 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	3304      	adds	r3, #4
 8009990:	4618      	mov	r0, r3
 8009992:	f7fd fa93 	bl	8006ebc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009996:	463b      	mov	r3, r7
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff ff6b 	bl	8009874 <prvSampleTimeNow>
 800999e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b09      	cmp	r3, #9
 80099a4:	f200 8096 	bhi.w	8009ad4 <prvProcessReceivedCommands+0x19c>
 80099a8:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <prvProcessReceivedCommands+0x78>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099d9 	.word	0x080099d9
 80099b4:	080099d9 	.word	0x080099d9
 80099b8:	080099d9 	.word	0x080099d9
 80099bc:	08009a4d 	.word	0x08009a4d
 80099c0:	08009a61 	.word	0x08009a61
 80099c4:	08009aab 	.word	0x08009aab
 80099c8:	080099d9 	.word	0x080099d9
 80099cc:	080099d9 	.word	0x080099d9
 80099d0:	08009a4d 	.word	0x08009a4d
 80099d4:	08009a61 	.word	0x08009a61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099de:	f043 0301 	orr.w	r3, r3, #1
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	18d1      	adds	r1, r2, r3
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f8:	f7ff ff5c 	bl	80098b4 <prvInsertTimerInActiveList>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d069      	beq.n	8009ad6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a10:	f003 0304 	and.w	r3, r3, #4
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d05e      	beq.n	8009ad6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	441a      	add	r2, r3
 8009a20:	2300      	movs	r3, #0
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	2300      	movs	r3, #0
 8009a26:	2100      	movs	r1, #0
 8009a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a2a:	f7ff fe05 	bl	8009638 <xTimerGenericCommand>
 8009a2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d14f      	bne.n	8009ad6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	61bb      	str	r3, [r7, #24]
}
 8009a48:	bf00      	nop
 8009a4a:	e7fe      	b.n	8009a4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a52:	f023 0301 	bic.w	r3, r3, #1
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a5e:	e03a      	b.n	8009ad6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10a      	bne.n	8009a96 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	617b      	str	r3, [r7, #20]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	18d1      	adds	r1, r2, r3
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa4:	f7ff ff06 	bl	80098b4 <prvInsertTimerInActiveList>
					break;
 8009aa8:	e015      	b.n	8009ad6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d103      	bne.n	8009ac0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aba:	f000 fbf1 	bl	800a2a0 <vPortFree>
 8009abe:	e00a      	b.n	8009ad6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ac6:	f023 0301 	bic.w	r3, r3, #1
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ad2:	e000      	b.n	8009ad6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009ad4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ad6:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <prvProcessReceivedCommands+0x1c0>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	1d39      	adds	r1, r7, #4
 8009adc:	2200      	movs	r2, #0
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fd feb8 	bl	8007854 <xQueueReceive>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f47f af2a 	bne.w	8009940 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	3730      	adds	r7, #48	; 0x30
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20001d94 	.word	0x20001d94

08009afc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b088      	sub	sp, #32
 8009b00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b02:	e048      	b.n	8009b96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b04:	4b2d      	ldr	r3, [pc, #180]	; (8009bbc <prvSwitchTimerLists+0xc0>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b0e:	4b2b      	ldr	r3, [pc, #172]	; (8009bbc <prvSwitchTimerLists+0xc0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fd f9cd 	bl	8006ebc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b30:	f003 0304 	and.w	r3, r3, #4
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d02e      	beq.n	8009b96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	4413      	add	r3, r2
 8009b40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d90e      	bls.n	8009b68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b56:	4b19      	ldr	r3, [pc, #100]	; (8009bbc <prvSwitchTimerLists+0xc0>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4610      	mov	r0, r2
 8009b62:	f7fd f972 	bl	8006e4a <vListInsert>
 8009b66:	e016      	b.n	8009b96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	2100      	movs	r1, #0
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7ff fd60 	bl	8009638 <xTimerGenericCommand>
 8009b78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10a      	bne.n	8009b96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	603b      	str	r3, [r7, #0]
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b96:	4b09      	ldr	r3, [pc, #36]	; (8009bbc <prvSwitchTimerLists+0xc0>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1b1      	bne.n	8009b04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ba0:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <prvSwitchTimerLists+0xc0>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ba6:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <prvSwitchTimerLists+0xc4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a04      	ldr	r2, [pc, #16]	; (8009bbc <prvSwitchTimerLists+0xc0>)
 8009bac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bae:	4a04      	ldr	r2, [pc, #16]	; (8009bc0 <prvSwitchTimerLists+0xc4>)
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	6013      	str	r3, [r2, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20001d8c 	.word	0x20001d8c
 8009bc0:	20001d90 	.word	0x20001d90

08009bc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bc8:	f000 f96c 	bl	8009ea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009bcc:	4b12      	ldr	r3, [pc, #72]	; (8009c18 <prvCheckForValidListAndQueue+0x54>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d11d      	bne.n	8009c10 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009bd4:	4811      	ldr	r0, [pc, #68]	; (8009c1c <prvCheckForValidListAndQueue+0x58>)
 8009bd6:	f7fd f8e7 	bl	8006da8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009bda:	4811      	ldr	r0, [pc, #68]	; (8009c20 <prvCheckForValidListAndQueue+0x5c>)
 8009bdc:	f7fd f8e4 	bl	8006da8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009be0:	4b10      	ldr	r3, [pc, #64]	; (8009c24 <prvCheckForValidListAndQueue+0x60>)
 8009be2:	4a0e      	ldr	r2, [pc, #56]	; (8009c1c <prvCheckForValidListAndQueue+0x58>)
 8009be4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009be6:	4b10      	ldr	r3, [pc, #64]	; (8009c28 <prvCheckForValidListAndQueue+0x64>)
 8009be8:	4a0d      	ldr	r2, [pc, #52]	; (8009c20 <prvCheckForValidListAndQueue+0x5c>)
 8009bea:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009bec:	2200      	movs	r2, #0
 8009bee:	2110      	movs	r1, #16
 8009bf0:	2014      	movs	r0, #20
 8009bf2:	f7fd f9f5 	bl	8006fe0 <xQueueGenericCreate>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	4a07      	ldr	r2, [pc, #28]	; (8009c18 <prvCheckForValidListAndQueue+0x54>)
 8009bfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bfc:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <prvCheckForValidListAndQueue+0x54>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d005      	beq.n	8009c10 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c04:	4b04      	ldr	r3, [pc, #16]	; (8009c18 <prvCheckForValidListAndQueue+0x54>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4908      	ldr	r1, [pc, #32]	; (8009c2c <prvCheckForValidListAndQueue+0x68>)
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fe f96a 	bl	8007ee4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c10:	f000 f978 	bl	8009f04 <vPortExitCritical>
}
 8009c14:	bf00      	nop
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20001d94 	.word	0x20001d94
 8009c1c:	20001d64 	.word	0x20001d64
 8009c20:	20001d78 	.word	0x20001d78
 8009c24:	20001d8c 	.word	0x20001d8c
 8009c28:	20001d90 	.word	0x20001d90
 8009c2c:	0800afbc 	.word	0x0800afbc

08009c30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3b04      	subs	r3, #4
 8009c40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	3b04      	subs	r3, #4
 8009c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	f023 0201 	bic.w	r2, r3, #1
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3b04      	subs	r3, #4
 8009c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c60:	4a0c      	ldr	r2, [pc, #48]	; (8009c94 <pxPortInitialiseStack+0x64>)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	3b14      	subs	r3, #20
 8009c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3b04      	subs	r3, #4
 8009c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f06f 0202 	mvn.w	r2, #2
 8009c7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3b20      	subs	r3, #32
 8009c84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c86:	68fb      	ldr	r3, [r7, #12]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	08009c99 	.word	0x08009c99

08009c98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ca2:	4b12      	ldr	r3, [pc, #72]	; (8009cec <prvTaskExitError+0x54>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009caa:	d00a      	beq.n	8009cc2 <prvTaskExitError+0x2a>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	60fb      	str	r3, [r7, #12]
}
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <prvTaskExitError+0x28>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	60bb      	str	r3, [r7, #8]
}
 8009cd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cd6:	bf00      	nop
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d0fc      	beq.n	8009cd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20000018 	.word	0x20000018

08009cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cf0:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <pxCurrentTCBConst2>)
 8009cf2:	6819      	ldr	r1, [r3, #0]
 8009cf4:	6808      	ldr	r0, [r1, #0]
 8009cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfa:	f380 8809 	msr	PSP, r0
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f04f 0000 	mov.w	r0, #0
 8009d06:	f380 8811 	msr	BASEPRI, r0
 8009d0a:	4770      	bx	lr
 8009d0c:	f3af 8000 	nop.w

08009d10 <pxCurrentTCBConst2>:
 8009d10:	20001c38 	.word	0x20001c38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop

08009d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d18:	4808      	ldr	r0, [pc, #32]	; (8009d3c <prvPortStartFirstTask+0x24>)
 8009d1a:	6800      	ldr	r0, [r0, #0]
 8009d1c:	6800      	ldr	r0, [r0, #0]
 8009d1e:	f380 8808 	msr	MSP, r0
 8009d22:	f04f 0000 	mov.w	r0, #0
 8009d26:	f380 8814 	msr	CONTROL, r0
 8009d2a:	b662      	cpsie	i
 8009d2c:	b661      	cpsie	f
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	df00      	svc	0
 8009d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d3a:	bf00      	nop
 8009d3c:	e000ed08 	.word	0xe000ed08

08009d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b088      	sub	sp, #32
 8009d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d46:	4b4e      	ldr	r3, [pc, #312]	; (8009e80 <xPortStartScheduler+0x140>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a4e      	ldr	r2, [pc, #312]	; (8009e84 <xPortStartScheduler+0x144>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10a      	bne.n	8009d66 <xPortStartScheduler+0x26>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	61bb      	str	r3, [r7, #24]
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d66:	4b46      	ldr	r3, [pc, #280]	; (8009e80 <xPortStartScheduler+0x140>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a47      	ldr	r2, [pc, #284]	; (8009e88 <xPortStartScheduler+0x148>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d10a      	bne.n	8009d86 <xPortStartScheduler+0x46>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	617b      	str	r3, [r7, #20]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d86:	4b41      	ldr	r3, [pc, #260]	; (8009e8c <xPortStartScheduler+0x14c>)
 8009d88:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	22ff      	movs	r2, #255	; 0xff
 8009d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	4b39      	ldr	r3, [pc, #228]	; (8009e90 <xPortStartScheduler+0x150>)
 8009dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dae:	4b39      	ldr	r3, [pc, #228]	; (8009e94 <xPortStartScheduler+0x154>)
 8009db0:	2207      	movs	r2, #7
 8009db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009db4:	e009      	b.n	8009dca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009db6:	4b37      	ldr	r3, [pc, #220]	; (8009e94 <xPortStartScheduler+0x154>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	4a35      	ldr	r2, [pc, #212]	; (8009e94 <xPortStartScheduler+0x154>)
 8009dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dca:	79fb      	ldrb	r3, [r7, #7]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd2:	2b80      	cmp	r3, #128	; 0x80
 8009dd4:	d0ef      	beq.n	8009db6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8009dd6:	4b2f      	ldr	r3, [pc, #188]	; (8009e94 <xPortStartScheduler+0x154>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f1c3 0307 	rsb	r3, r3, #7
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d00a      	beq.n	8009df8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	613b      	str	r3, [r7, #16]
}
 8009df4:	bf00      	nop
 8009df6:	e7fe      	b.n	8009df6 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009df8:	4b26      	ldr	r3, [pc, #152]	; (8009e94 <xPortStartScheduler+0x154>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f1c3 0307 	rsb	r3, r3, #7
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	d00a      	beq.n	8009e1a <xPortStartScheduler+0xda>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	60fb      	str	r3, [r7, #12]
}
 8009e16:	bf00      	nop
 8009e18:	e7fe      	b.n	8009e18 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e1a:	4b1e      	ldr	r3, [pc, #120]	; (8009e94 <xPortStartScheduler+0x154>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	021b      	lsls	r3, r3, #8
 8009e20:	4a1c      	ldr	r2, [pc, #112]	; (8009e94 <xPortStartScheduler+0x154>)
 8009e22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e24:	4b1b      	ldr	r3, [pc, #108]	; (8009e94 <xPortStartScheduler+0x154>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e2c:	4a19      	ldr	r2, [pc, #100]	; (8009e94 <xPortStartScheduler+0x154>)
 8009e2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e38:	4b17      	ldr	r3, [pc, #92]	; (8009e98 <xPortStartScheduler+0x158>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a16      	ldr	r2, [pc, #88]	; (8009e98 <xPortStartScheduler+0x158>)
 8009e3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e44:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <xPortStartScheduler+0x158>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a13      	ldr	r2, [pc, #76]	; (8009e98 <xPortStartScheduler+0x158>)
 8009e4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e50:	f000 f8dc 	bl	800a00c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e54:	4b11      	ldr	r3, [pc, #68]	; (8009e9c <xPortStartScheduler+0x15c>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e5a:	f000 f8fb 	bl	800a054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e5e:	4b10      	ldr	r3, [pc, #64]	; (8009ea0 <xPortStartScheduler+0x160>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a0f      	ldr	r2, [pc, #60]	; (8009ea0 <xPortStartScheduler+0x160>)
 8009e64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e6a:	f7ff ff55 	bl	8009d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e6e:	f7fe fdbd 	bl	80089ec <vTaskSwitchContext>
	prvTaskExitError();
 8009e72:	f7ff ff11 	bl	8009c98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3720      	adds	r7, #32
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	e000ed00 	.word	0xe000ed00
 8009e84:	410fc271 	.word	0x410fc271
 8009e88:	410fc270 	.word	0x410fc270
 8009e8c:	e000e400 	.word	0xe000e400
 8009e90:	20001da0 	.word	0x20001da0
 8009e94:	20001da4 	.word	0x20001da4
 8009e98:	e000ed20 	.word	0xe000ed20
 8009e9c:	20000018 	.word	0x20000018
 8009ea0:	e000ef34 	.word	0xe000ef34

08009ea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	607b      	str	r3, [r7, #4]
}
 8009ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <vPortEnterCritical+0x58>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	4a0d      	ldr	r2, [pc, #52]	; (8009efc <vPortEnterCritical+0x58>)
 8009ec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ec8:	4b0c      	ldr	r3, [pc, #48]	; (8009efc <vPortEnterCritical+0x58>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d10f      	bne.n	8009ef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <vPortEnterCritical+0x5c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	603b      	str	r3, [r7, #0]
}
 8009eec:	bf00      	nop
 8009eee:	e7fe      	b.n	8009eee <vPortEnterCritical+0x4a>
	}
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	20000018 	.word	0x20000018
 8009f00:	e000ed04 	.word	0xe000ed04

08009f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f0a:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <vPortExitCritical+0x50>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10a      	bne.n	8009f28 <vPortExitCritical+0x24>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	607b      	str	r3, [r7, #4]
}
 8009f24:	bf00      	nop
 8009f26:	e7fe      	b.n	8009f26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f28:	4b0a      	ldr	r3, [pc, #40]	; (8009f54 <vPortExitCritical+0x50>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	4a09      	ldr	r2, [pc, #36]	; (8009f54 <vPortExitCritical+0x50>)
 8009f30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f32:	4b08      	ldr	r3, [pc, #32]	; (8009f54 <vPortExitCritical+0x50>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d105      	bne.n	8009f46 <vPortExitCritical+0x42>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	f383 8811 	msr	BASEPRI, r3
}
 8009f44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f46:	bf00      	nop
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20000018 	.word	0x20000018
	...

08009f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f60:	f3ef 8009 	mrs	r0, PSP
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	4b15      	ldr	r3, [pc, #84]	; (8009fc0 <pxCurrentTCBConst>)
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	f01e 0f10 	tst.w	lr, #16
 8009f70:	bf08      	it	eq
 8009f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7a:	6010      	str	r0, [r2, #0]
 8009f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f84:	f380 8811 	msr	BASEPRI, r0
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f7fe fd2c 	bl	80089ec <vTaskSwitchContext>
 8009f94:	f04f 0000 	mov.w	r0, #0
 8009f98:	f380 8811 	msr	BASEPRI, r0
 8009f9c:	bc09      	pop	{r0, r3}
 8009f9e:	6819      	ldr	r1, [r3, #0]
 8009fa0:	6808      	ldr	r0, [r1, #0]
 8009fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa6:	f01e 0f10 	tst.w	lr, #16
 8009faa:	bf08      	it	eq
 8009fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fb0:	f380 8809 	msr	PSP, r0
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	f3af 8000 	nop.w

08009fc0 <pxCurrentTCBConst>:
 8009fc0:	20001c38 	.word	0x20001c38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop

08009fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	607b      	str	r3, [r7, #4]
}
 8009fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fe2:	f7fe fc19 	bl	8008818 <xTaskIncrementTick>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d003      	beq.n	8009ff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fec:	4b06      	ldr	r3, [pc, #24]	; (800a008 <SysTick_Handler+0x40>)
 8009fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	f383 8811 	msr	BASEPRI, r3
}
 8009ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a000:	bf00      	nop
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	e000ed04 	.word	0xe000ed04

0800a00c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a00c:	b480      	push	{r7}
 800a00e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a010:	4b0b      	ldr	r3, [pc, #44]	; (800a040 <vPortSetupTimerInterrupt+0x34>)
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a016:	4b0b      	ldr	r3, [pc, #44]	; (800a044 <vPortSetupTimerInterrupt+0x38>)
 800a018:	2200      	movs	r2, #0
 800a01a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a01c:	4b0a      	ldr	r3, [pc, #40]	; (800a048 <vPortSetupTimerInterrupt+0x3c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <vPortSetupTimerInterrupt+0x40>)
 800a022:	fba2 2303 	umull	r2, r3, r2, r3
 800a026:	099b      	lsrs	r3, r3, #6
 800a028:	4a09      	ldr	r2, [pc, #36]	; (800a050 <vPortSetupTimerInterrupt+0x44>)
 800a02a:	3b01      	subs	r3, #1
 800a02c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a02e:	4b04      	ldr	r3, [pc, #16]	; (800a040 <vPortSetupTimerInterrupt+0x34>)
 800a030:	2207      	movs	r2, #7
 800a032:	601a      	str	r2, [r3, #0]
}
 800a034:	bf00      	nop
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	e000e010 	.word	0xe000e010
 800a044:	e000e018 	.word	0xe000e018
 800a048:	20000000 	.word	0x20000000
 800a04c:	10624dd3 	.word	0x10624dd3
 800a050:	e000e014 	.word	0xe000e014

0800a054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a064 <vPortEnableVFP+0x10>
 800a058:	6801      	ldr	r1, [r0, #0]
 800a05a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a05e:	6001      	str	r1, [r0, #0]
 800a060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a062:	bf00      	nop
 800a064:	e000ed88 	.word	0xe000ed88

0800a068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a06e:	f3ef 8305 	mrs	r3, IPSR
 800a072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b0f      	cmp	r3, #15
 800a078:	d914      	bls.n	800a0a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a07a:	4a17      	ldr	r2, [pc, #92]	; (800a0d8 <vPortValidateInterruptPriority+0x70>)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4413      	add	r3, r2
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a084:	4b15      	ldr	r3, [pc, #84]	; (800a0dc <vPortValidateInterruptPriority+0x74>)
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	7afa      	ldrb	r2, [r7, #11]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d20a      	bcs.n	800a0a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	607b      	str	r3, [r7, #4]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <vPortValidateInterruptPriority+0x78>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0ac:	4b0d      	ldr	r3, [pc, #52]	; (800a0e4 <vPortValidateInterruptPriority+0x7c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d90a      	bls.n	800a0ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	603b      	str	r3, [r7, #0]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <vPortValidateInterruptPriority+0x60>
	}
 800a0ca:	bf00      	nop
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	e000e3f0 	.word	0xe000e3f0
 800a0dc:	20001da0 	.word	0x20001da0
 800a0e0:	e000ed0c 	.word	0xe000ed0c
 800a0e4:	20001da4 	.word	0x20001da4

0800a0e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08a      	sub	sp, #40	; 0x28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0f4:	f7fe fac0 	bl	8008678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0f8:	4b63      	ldr	r3, [pc, #396]	; (800a288 <pvPortMalloc+0x1a0>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a100:	f000 f938 	bl	800a374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a104:	4b61      	ldr	r3, [pc, #388]	; (800a28c <pvPortMalloc+0x1a4>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4013      	ands	r3, r2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f040 8093 	bne.w	800a238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01d      	beq.n	800a154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a118:	2208      	movs	r2, #8
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4413      	add	r3, r2
 800a11e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f003 0307 	and.w	r3, r3, #7
 800a126:	2b00      	cmp	r3, #0
 800a128:	d014      	beq.n	800a154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f023 0307 	bic.w	r3, r3, #7
 800a130:	3308      	adds	r3, #8
 800a132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00a      	beq.n	800a154 <pvPortMalloc+0x6c>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	617b      	str	r3, [r7, #20]
}
 800a150:	bf00      	nop
 800a152:	e7fe      	b.n	800a152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d06e      	beq.n	800a238 <pvPortMalloc+0x150>
 800a15a:	4b4d      	ldr	r3, [pc, #308]	; (800a290 <pvPortMalloc+0x1a8>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d869      	bhi.n	800a238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a164:	4b4b      	ldr	r3, [pc, #300]	; (800a294 <pvPortMalloc+0x1ac>)
 800a166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a168:	4b4a      	ldr	r3, [pc, #296]	; (800a294 <pvPortMalloc+0x1ac>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a16e:	e004      	b.n	800a17a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d903      	bls.n	800a18c <pvPortMalloc+0xa4>
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1f1      	bne.n	800a170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a18c:	4b3e      	ldr	r3, [pc, #248]	; (800a288 <pvPortMalloc+0x1a0>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a192:	429a      	cmp	r2, r3
 800a194:	d050      	beq.n	800a238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2208      	movs	r2, #8
 800a19c:	4413      	add	r3, r2
 800a19e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	1ad2      	subs	r2, r2, r3
 800a1b0:	2308      	movs	r3, #8
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d91f      	bls.n	800a1f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4413      	add	r3, r2
 800a1be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	f003 0307 	and.w	r3, r3, #7
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00a      	beq.n	800a1e0 <pvPortMalloc+0xf8>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	613b      	str	r3, [r7, #16]
}
 800a1dc:	bf00      	nop
 800a1de:	e7fe      	b.n	800a1de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	1ad2      	subs	r2, r2, r3
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1f2:	69b8      	ldr	r0, [r7, #24]
 800a1f4:	f000 f920 	bl	800a438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1f8:	4b25      	ldr	r3, [pc, #148]	; (800a290 <pvPortMalloc+0x1a8>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	4a23      	ldr	r2, [pc, #140]	; (800a290 <pvPortMalloc+0x1a8>)
 800a204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a206:	4b22      	ldr	r3, [pc, #136]	; (800a290 <pvPortMalloc+0x1a8>)
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	4b23      	ldr	r3, [pc, #140]	; (800a298 <pvPortMalloc+0x1b0>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d203      	bcs.n	800a21a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a212:	4b1f      	ldr	r3, [pc, #124]	; (800a290 <pvPortMalloc+0x1a8>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a20      	ldr	r2, [pc, #128]	; (800a298 <pvPortMalloc+0x1b0>)
 800a218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	4b1b      	ldr	r3, [pc, #108]	; (800a28c <pvPortMalloc+0x1a4>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	431a      	orrs	r2, r3
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a22e:	4b1b      	ldr	r3, [pc, #108]	; (800a29c <pvPortMalloc+0x1b4>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	4a19      	ldr	r2, [pc, #100]	; (800a29c <pvPortMalloc+0x1b4>)
 800a236:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d006      	beq.n	800a24c <pvPortMalloc+0x164>
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	4619      	mov	r1, r3
 800a244:	2094      	movs	r0, #148	; 0x94
 800a246:	f7f7 faf5 	bl	8001834 <vTraceStoreMemMangEvent>
 800a24a:	e005      	b.n	800a258 <pvPortMalloc+0x170>
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	4619      	mov	r1, r3
 800a252:	20e8      	movs	r0, #232	; 0xe8
 800a254:	f7f7 faee 	bl	8001834 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 800a258:	f7fe fa1c 	bl	8008694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	f003 0307 	and.w	r3, r3, #7
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <pvPortMalloc+0x194>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	60fb      	str	r3, [r7, #12]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <pvPortMalloc+0x192>
	return pvReturn;
 800a27c:	69fb      	ldr	r3, [r7, #28]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3728      	adds	r7, #40	; 0x28
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200059b0 	.word	0x200059b0
 800a28c:	200059c4 	.word	0x200059c4
 800a290:	200059b4 	.word	0x200059b4
 800a294:	200059a8 	.word	0x200059a8
 800a298:	200059b8 	.word	0x200059b8
 800a29c:	200059bc 	.word	0x200059bc

0800a2a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d055      	beq.n	800a35e <vPortFree+0xbe>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2b2:	2308      	movs	r3, #8
 800a2b4:	425b      	negs	r3, r3
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	4b28      	ldr	r3, [pc, #160]	; (800a368 <vPortFree+0xc8>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <vPortFree+0x44>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	60fb      	str	r3, [r7, #12]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00a      	beq.n	800a302 <vPortFree+0x62>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	60bb      	str	r3, [r7, #8]
}
 800a2fe:	bf00      	nop
 800a300:	e7fe      	b.n	800a300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	4b18      	ldr	r3, [pc, #96]	; (800a368 <vPortFree+0xc8>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d026      	beq.n	800a35e <vPortFree+0xbe>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d122      	bne.n	800a35e <vPortFree+0xbe>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	4b12      	ldr	r3, [pc, #72]	; (800a368 <vPortFree+0xc8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	43db      	mvns	r3, r3
 800a322:	401a      	ands	r2, r3
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a328:	f7fe f9a6 	bl	8008678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	4b0e      	ldr	r3, [pc, #56]	; (800a36c <vPortFree+0xcc>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4413      	add	r3, r2
 800a336:	4a0d      	ldr	r2, [pc, #52]	; (800a36c <vPortFree+0xcc>)
 800a338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	425b      	negs	r3, r3
 800a342:	461a      	mov	r2, r3
 800a344:	2096      	movs	r0, #150	; 0x96
 800a346:	f7f7 fa75 	bl	8001834 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a34a:	6938      	ldr	r0, [r7, #16]
 800a34c:	f000 f874 	bl	800a438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <vPortFree+0xd0>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3301      	adds	r3, #1
 800a356:	4a06      	ldr	r2, [pc, #24]	; (800a370 <vPortFree+0xd0>)
 800a358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a35a:	f7fe f99b 	bl	8008694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a35e:	bf00      	nop
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	200059c4 	.word	0x200059c4
 800a36c:	200059b4 	.word	0x200059b4
 800a370:	200059c0 	.word	0x200059c0

0800a374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a37a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a380:	4b27      	ldr	r3, [pc, #156]	; (800a420 <prvHeapInit+0xac>)
 800a382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00c      	beq.n	800a3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3307      	adds	r3, #7
 800a392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f023 0307 	bic.w	r3, r3, #7
 800a39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	4a1f      	ldr	r2, [pc, #124]	; (800a420 <prvHeapInit+0xac>)
 800a3a4:	4413      	add	r3, r2
 800a3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3ac:	4a1d      	ldr	r2, [pc, #116]	; (800a424 <prvHeapInit+0xb0>)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3b2:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <prvHeapInit+0xb0>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	4413      	add	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3c0:	2208      	movs	r2, #8
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0307 	bic.w	r3, r3, #7
 800a3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4a15      	ldr	r2, [pc, #84]	; (800a428 <prvHeapInit+0xb4>)
 800a3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3d6:	4b14      	ldr	r3, [pc, #80]	; (800a428 <prvHeapInit+0xb4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3de:	4b12      	ldr	r3, [pc, #72]	; (800a428 <prvHeapInit+0xb4>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	1ad2      	subs	r2, r2, r3
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <prvHeapInit+0xb4>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	4a0a      	ldr	r2, [pc, #40]	; (800a42c <prvHeapInit+0xb8>)
 800a402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4a09      	ldr	r2, [pc, #36]	; (800a430 <prvHeapInit+0xbc>)
 800a40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a40c:	4b09      	ldr	r3, [pc, #36]	; (800a434 <prvHeapInit+0xc0>)
 800a40e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a412:	601a      	str	r2, [r3, #0]
}
 800a414:	bf00      	nop
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	20001da8 	.word	0x20001da8
 800a424:	200059a8 	.word	0x200059a8
 800a428:	200059b0 	.word	0x200059b0
 800a42c:	200059b8 	.word	0x200059b8
 800a430:	200059b4 	.word	0x200059b4
 800a434:	200059c4 	.word	0x200059c4

0800a438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a440:	4b28      	ldr	r3, [pc, #160]	; (800a4e4 <prvInsertBlockIntoFreeList+0xac>)
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	e002      	b.n	800a44c <prvInsertBlockIntoFreeList+0x14>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	429a      	cmp	r2, r3
 800a454:	d8f7      	bhi.n	800a446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	4413      	add	r3, r2
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d108      	bne.n	800a47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	441a      	add	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	441a      	add	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d118      	bne.n	800a4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	4b15      	ldr	r3, [pc, #84]	; (800a4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d00d      	beq.n	800a4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	441a      	add	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	e008      	b.n	800a4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4b6:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	e003      	b.n	800a4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d002      	beq.n	800a4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4d6:	bf00      	nop
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	200059a8 	.word	0x200059a8
 800a4e8:	200059b0 	.word	0x200059b0

0800a4ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fc fb26 	bl	8006b4c <USBH_LL_IncTimer>
}
 800a500:	bf00      	nop
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a516:	4618      	mov	r0, r3
 800a518:	f7fc fb6a 	bl	8006bf0 <USBH_LL_Connect>
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a532:	4618      	mov	r0, r3
 800a534:	f7fc fb7f 	bl	8006c36 <USBH_LL_Disconnect>
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	460b      	mov	r3, r1
 800a54a:	70fb      	strb	r3, [r7, #3]
 800a54c:	4613      	mov	r3, r2
 800a54e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a556:	4618      	mov	r0, r3
 800a558:	f7fc fb9f 	bl	8006c9a <USBH_LL_NotifyURBChange>
#endif
}
 800a55c:	bf00      	nop
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a572:	4618      	mov	r0, r3
 800a574:	f7fc fb14 	bl	8006ba0 <USBH_LL_PortEnabled>
}
 800a578:	bf00      	nop
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fc fb20 	bl	8006bd4 <USBH_LL_PortDisabled>
}
 800a594:	bf00      	nop
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7f8 fc21 	bl	8002dfa <HAL_HCD_Stop>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 f808 	bl	800a5d4 <USBH_Get_USB_Status>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5e2:	79fb      	ldrb	r3, [r7, #7]
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d817      	bhi.n	800a618 <USBH_Get_USB_Status+0x44>
 800a5e8:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <USBH_Get_USB_Status+0x1c>)
 800a5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ee:	bf00      	nop
 800a5f0:	0800a601 	.word	0x0800a601
 800a5f4:	0800a607 	.word	0x0800a607
 800a5f8:	0800a60d 	.word	0x0800a60d
 800a5fc:	0800a613 	.word	0x0800a613
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73fb      	strb	r3, [r7, #15]
    break;
 800a604:	e00b      	b.n	800a61e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a606:	2302      	movs	r3, #2
 800a608:	73fb      	strb	r3, [r7, #15]
    break;
 800a60a:	e008      	b.n	800a61e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a60c:	2301      	movs	r3, #1
 800a60e:	73fb      	strb	r3, [r7, #15]
    break;
 800a610:	e005      	b.n	800a61e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a612:	2302      	movs	r3, #2
 800a614:	73fb      	strb	r3, [r7, #15]
    break;
 800a616:	e002      	b.n	800a61e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a618:	2302      	movs	r3, #2
 800a61a:	73fb      	strb	r3, [r7, #15]
    break;
 800a61c:	bf00      	nop
  }
  return usb_status;
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <__malloc_lock>:
 800a62c:	4801      	ldr	r0, [pc, #4]	; (800a634 <__malloc_lock+0x8>)
 800a62e:	f000 b88b 	b.w	800a748 <__retarget_lock_acquire_recursive>
 800a632:	bf00      	nop
 800a634:	20005ee4 	.word	0x20005ee4

0800a638 <__malloc_unlock>:
 800a638:	4801      	ldr	r0, [pc, #4]	; (800a640 <__malloc_unlock+0x8>)
 800a63a:	f000 b886 	b.w	800a74a <__retarget_lock_release_recursive>
 800a63e:	bf00      	nop
 800a640:	20005ee4 	.word	0x20005ee4

0800a644 <memset>:
 800a644:	4402      	add	r2, r0
 800a646:	4603      	mov	r3, r0
 800a648:	4293      	cmp	r3, r2
 800a64a:	d100      	bne.n	800a64e <memset+0xa>
 800a64c:	4770      	bx	lr
 800a64e:	f803 1b01 	strb.w	r1, [r3], #1
 800a652:	e7f9      	b.n	800a648 <memset+0x4>

0800a654 <_reclaim_reent>:
 800a654:	4b29      	ldr	r3, [pc, #164]	; (800a6fc <_reclaim_reent+0xa8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4283      	cmp	r3, r0
 800a65a:	b570      	push	{r4, r5, r6, lr}
 800a65c:	4604      	mov	r4, r0
 800a65e:	d04b      	beq.n	800a6f8 <_reclaim_reent+0xa4>
 800a660:	69c3      	ldr	r3, [r0, #28]
 800a662:	b143      	cbz	r3, 800a676 <_reclaim_reent+0x22>
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d144      	bne.n	800a6f4 <_reclaim_reent+0xa0>
 800a66a:	69e3      	ldr	r3, [r4, #28]
 800a66c:	6819      	ldr	r1, [r3, #0]
 800a66e:	b111      	cbz	r1, 800a676 <_reclaim_reent+0x22>
 800a670:	4620      	mov	r0, r4
 800a672:	f000 f879 	bl	800a768 <_free_r>
 800a676:	6961      	ldr	r1, [r4, #20]
 800a678:	b111      	cbz	r1, 800a680 <_reclaim_reent+0x2c>
 800a67a:	4620      	mov	r0, r4
 800a67c:	f000 f874 	bl	800a768 <_free_r>
 800a680:	69e1      	ldr	r1, [r4, #28]
 800a682:	b111      	cbz	r1, 800a68a <_reclaim_reent+0x36>
 800a684:	4620      	mov	r0, r4
 800a686:	f000 f86f 	bl	800a768 <_free_r>
 800a68a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a68c:	b111      	cbz	r1, 800a694 <_reclaim_reent+0x40>
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 f86a 	bl	800a768 <_free_r>
 800a694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a696:	b111      	cbz	r1, 800a69e <_reclaim_reent+0x4a>
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 f865 	bl	800a768 <_free_r>
 800a69e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a6a0:	b111      	cbz	r1, 800a6a8 <_reclaim_reent+0x54>
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f000 f860 	bl	800a768 <_free_r>
 800a6a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a6aa:	b111      	cbz	r1, 800a6b2 <_reclaim_reent+0x5e>
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f000 f85b 	bl	800a768 <_free_r>
 800a6b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a6b4:	b111      	cbz	r1, 800a6bc <_reclaim_reent+0x68>
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f000 f856 	bl	800a768 <_free_r>
 800a6bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a6be:	b111      	cbz	r1, 800a6c6 <_reclaim_reent+0x72>
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f000 f851 	bl	800a768 <_free_r>
 800a6c6:	6a23      	ldr	r3, [r4, #32]
 800a6c8:	b1b3      	cbz	r3, 800a6f8 <_reclaim_reent+0xa4>
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6d0:	4718      	bx	r3
 800a6d2:	5949      	ldr	r1, [r1, r5]
 800a6d4:	b941      	cbnz	r1, 800a6e8 <_reclaim_reent+0x94>
 800a6d6:	3504      	adds	r5, #4
 800a6d8:	69e3      	ldr	r3, [r4, #28]
 800a6da:	2d80      	cmp	r5, #128	; 0x80
 800a6dc:	68d9      	ldr	r1, [r3, #12]
 800a6de:	d1f8      	bne.n	800a6d2 <_reclaim_reent+0x7e>
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f000 f841 	bl	800a768 <_free_r>
 800a6e6:	e7c0      	b.n	800a66a <_reclaim_reent+0x16>
 800a6e8:	680e      	ldr	r6, [r1, #0]
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f000 f83c 	bl	800a768 <_free_r>
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	e7ef      	b.n	800a6d4 <_reclaim_reent+0x80>
 800a6f4:	2500      	movs	r5, #0
 800a6f6:	e7ef      	b.n	800a6d8 <_reclaim_reent+0x84>
 800a6f8:	bd70      	pop	{r4, r5, r6, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000068 	.word	0x20000068

0800a700 <__libc_init_array>:
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	4d0d      	ldr	r5, [pc, #52]	; (800a738 <__libc_init_array+0x38>)
 800a704:	4c0d      	ldr	r4, [pc, #52]	; (800a73c <__libc_init_array+0x3c>)
 800a706:	1b64      	subs	r4, r4, r5
 800a708:	10a4      	asrs	r4, r4, #2
 800a70a:	2600      	movs	r6, #0
 800a70c:	42a6      	cmp	r6, r4
 800a70e:	d109      	bne.n	800a724 <__libc_init_array+0x24>
 800a710:	4d0b      	ldr	r5, [pc, #44]	; (800a740 <__libc_init_array+0x40>)
 800a712:	4c0c      	ldr	r4, [pc, #48]	; (800a744 <__libc_init_array+0x44>)
 800a714:	f000 f874 	bl	800a800 <_init>
 800a718:	1b64      	subs	r4, r4, r5
 800a71a:	10a4      	asrs	r4, r4, #2
 800a71c:	2600      	movs	r6, #0
 800a71e:	42a6      	cmp	r6, r4
 800a720:	d105      	bne.n	800a72e <__libc_init_array+0x2e>
 800a722:	bd70      	pop	{r4, r5, r6, pc}
 800a724:	f855 3b04 	ldr.w	r3, [r5], #4
 800a728:	4798      	blx	r3
 800a72a:	3601      	adds	r6, #1
 800a72c:	e7ee      	b.n	800a70c <__libc_init_array+0xc>
 800a72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a732:	4798      	blx	r3
 800a734:	3601      	adds	r6, #1
 800a736:	e7f2      	b.n	800a71e <__libc_init_array+0x1e>
 800a738:	0800afe4 	.word	0x0800afe4
 800a73c:	0800afe4 	.word	0x0800afe4
 800a740:	0800afe4 	.word	0x0800afe4
 800a744:	0800afe8 	.word	0x0800afe8

0800a748 <__retarget_lock_acquire_recursive>:
 800a748:	4770      	bx	lr

0800a74a <__retarget_lock_release_recursive>:
 800a74a:	4770      	bx	lr

0800a74c <memcpy>:
 800a74c:	440a      	add	r2, r1
 800a74e:	4291      	cmp	r1, r2
 800a750:	f100 33ff 	add.w	r3, r0, #4294967295
 800a754:	d100      	bne.n	800a758 <memcpy+0xc>
 800a756:	4770      	bx	lr
 800a758:	b510      	push	{r4, lr}
 800a75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a75e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a762:	4291      	cmp	r1, r2
 800a764:	d1f9      	bne.n	800a75a <memcpy+0xe>
 800a766:	bd10      	pop	{r4, pc}

0800a768 <_free_r>:
 800a768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a76a:	2900      	cmp	r1, #0
 800a76c:	d044      	beq.n	800a7f8 <_free_r+0x90>
 800a76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a772:	9001      	str	r0, [sp, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	f1a1 0404 	sub.w	r4, r1, #4
 800a77a:	bfb8      	it	lt
 800a77c:	18e4      	addlt	r4, r4, r3
 800a77e:	f7ff ff55 	bl	800a62c <__malloc_lock>
 800a782:	4a1e      	ldr	r2, [pc, #120]	; (800a7fc <_free_r+0x94>)
 800a784:	9801      	ldr	r0, [sp, #4]
 800a786:	6813      	ldr	r3, [r2, #0]
 800a788:	b933      	cbnz	r3, 800a798 <_free_r+0x30>
 800a78a:	6063      	str	r3, [r4, #4]
 800a78c:	6014      	str	r4, [r2, #0]
 800a78e:	b003      	add	sp, #12
 800a790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a794:	f7ff bf50 	b.w	800a638 <__malloc_unlock>
 800a798:	42a3      	cmp	r3, r4
 800a79a:	d908      	bls.n	800a7ae <_free_r+0x46>
 800a79c:	6825      	ldr	r5, [r4, #0]
 800a79e:	1961      	adds	r1, r4, r5
 800a7a0:	428b      	cmp	r3, r1
 800a7a2:	bf01      	itttt	eq
 800a7a4:	6819      	ldreq	r1, [r3, #0]
 800a7a6:	685b      	ldreq	r3, [r3, #4]
 800a7a8:	1949      	addeq	r1, r1, r5
 800a7aa:	6021      	streq	r1, [r4, #0]
 800a7ac:	e7ed      	b.n	800a78a <_free_r+0x22>
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	b10b      	cbz	r3, 800a7b8 <_free_r+0x50>
 800a7b4:	42a3      	cmp	r3, r4
 800a7b6:	d9fa      	bls.n	800a7ae <_free_r+0x46>
 800a7b8:	6811      	ldr	r1, [r2, #0]
 800a7ba:	1855      	adds	r5, r2, r1
 800a7bc:	42a5      	cmp	r5, r4
 800a7be:	d10b      	bne.n	800a7d8 <_free_r+0x70>
 800a7c0:	6824      	ldr	r4, [r4, #0]
 800a7c2:	4421      	add	r1, r4
 800a7c4:	1854      	adds	r4, r2, r1
 800a7c6:	42a3      	cmp	r3, r4
 800a7c8:	6011      	str	r1, [r2, #0]
 800a7ca:	d1e0      	bne.n	800a78e <_free_r+0x26>
 800a7cc:	681c      	ldr	r4, [r3, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	6053      	str	r3, [r2, #4]
 800a7d2:	440c      	add	r4, r1
 800a7d4:	6014      	str	r4, [r2, #0]
 800a7d6:	e7da      	b.n	800a78e <_free_r+0x26>
 800a7d8:	d902      	bls.n	800a7e0 <_free_r+0x78>
 800a7da:	230c      	movs	r3, #12
 800a7dc:	6003      	str	r3, [r0, #0]
 800a7de:	e7d6      	b.n	800a78e <_free_r+0x26>
 800a7e0:	6825      	ldr	r5, [r4, #0]
 800a7e2:	1961      	adds	r1, r4, r5
 800a7e4:	428b      	cmp	r3, r1
 800a7e6:	bf04      	itt	eq
 800a7e8:	6819      	ldreq	r1, [r3, #0]
 800a7ea:	685b      	ldreq	r3, [r3, #4]
 800a7ec:	6063      	str	r3, [r4, #4]
 800a7ee:	bf04      	itt	eq
 800a7f0:	1949      	addeq	r1, r1, r5
 800a7f2:	6021      	streq	r1, [r4, #0]
 800a7f4:	6054      	str	r4, [r2, #4]
 800a7f6:	e7ca      	b.n	800a78e <_free_r+0x26>
 800a7f8:	b003      	add	sp, #12
 800a7fa:	bd30      	pop	{r4, r5, pc}
 800a7fc:	20005da8 	.word	0x20005da8

0800a800 <_init>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	bf00      	nop
 800a804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a806:	bc08      	pop	{r3}
 800a808:	469e      	mov	lr, r3
 800a80a:	4770      	bx	lr

0800a80c <_fini>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr
